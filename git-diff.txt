commit 378648c44c2cbffd1d310b3e683a537e109cab03
Author: Huy Pham <huyphamnguyen@gmail.com>
Date:   Sun Apr 7 22:06:43 2024 +0700

    Add api get user for FE

diff --git a/src/components/contractor/index.tsx b/src/components/contractor/index.tsx
index 82fecb3..d9f721a 100644
--- a/src/components/contractor/index.tsx
+++ b/src/components/contractor/index.tsx
@@ -48,7 +48,7 @@ const Contractor = () => {
       headerName: formatMessage({ id: 'tableId' }),
       align: 'center',
       headerAlign: 'center',
-      flex: 1,
+      flex: 1
     },
     {
       field: 'contractorName',
diff --git a/src/components/user/component/ButtonSelectStatus.tsx b/src/components/user/component/ButtonSelectStatus.tsx
index 5e4e9b0..2aabc46 100644
--- a/src/components/user/component/ButtonSelectStatus.tsx
+++ b/src/components/user/component/ButtonSelectStatus.tsx
@@ -1,4 +1,4 @@
-import { USER_STATUS_ACTIVE, USER_STATUS_DEACTIVED } from '@/constant/user';
+import { USER_STATUS_ACTIVE, USER_STATUS_DEACTIVATED } from '@/constant/user';
 import { Box, Button, ButtonProps, Divider, Popover, PopoverProps, Typography } from '@mui/material';
 import { useState } from 'react';
 import { useIntl } from 'react-intl';
@@ -53,8 +53,8 @@ export const ButtonSelectStatus = ({ onSelect, buttonProps, popoverProps }: Prop
             {USER_STATUS_ACTIVE}
           </Typography>
           <Divider className={styles.divider} />
-          <Typography className={styles.status} onClick={() => handleSelect(USER_STATUS_DEACTIVED)}>
-            {USER_STATUS_DEACTIVED}
+          <Typography className={styles.status} onClick={() => handleSelect(USER_STATUS_DEACTIVATED)}>
+            {USER_STATUS_DEACTIVATED}
           </Typography>
         </Box>
       </Popover>
diff --git a/src/components/user/detail/components/AdditionalInformation/index.tsx b/src/components/user/detail/components/AdditionalInformation/index.tsx
index cacdc2c..21e3ba8 100644
--- a/src/components/user/detail/components/AdditionalInformation/index.tsx
+++ b/src/components/user/detail/components/AdditionalInformation/index.tsx
@@ -4,7 +4,7 @@ import { useIntl } from 'react-intl';
 
 import Card from '@/components/ui-component/Card';
 import TextField from 'components/ui-component/TextField';
-import { IUser } from '@/app/api/users/list/route';
+import { IUser } from '@/types/resource/user';
 
 interface Props {
   user: IUser;
diff --git a/src/components/user/detail/components/BasicInformation/index.tsx b/src/components/user/detail/components/BasicInformation/index.tsx
index 6872e6d..dbf25f1 100644
--- a/src/components/user/detail/components/BasicInformation/index.tsx
+++ b/src/components/user/detail/components/BasicInformation/index.tsx
@@ -6,8 +6,8 @@ import { useIntl } from 'react-intl';
 import Card from '@/components/ui-component/Card';
 import TextField from 'components/ui-component/TextField';
 import { DATE_FORMAT } from '@/constant';
-import { IUser } from '@/app/api/users/list/route';
 import DateCustom from '@/utils/datetime/date.custom';
+import { IUser } from '@/types/resource/user';
 
 interface Props {
   user: IUser;
@@ -42,12 +42,7 @@ export default function BasicInformation({ user }: Props) {
           <TextField label={formatMessage({ id: 'userDetailRole' })} name="role" value={user.role} {...defaultProps} />
         </Grid>
         <Grid item xs={6}>
-          <TextField
-            label={formatMessage({ id: 'userDetailStatus' })}
-            name="completionStatus"
-            value={user.completionStatus}
-            {...defaultProps}
-          />
+          <TextField label={formatMessage({ id: 'userDetailStatus' })} name="status" value={user.status} {...defaultProps} />
         </Grid>
         <Grid item xs={6}>
           <TextField label={formatMessage({ id: 'userDetailCompany' })} name="company" value={user.company} {...defaultProps} />
diff --git a/src/components/user/detail/components/ProfilePicture/index.tsx b/src/components/user/detail/components/ProfilePicture/index.tsx
index 0a0def2..b6b0d28 100644
--- a/src/components/user/detail/components/ProfilePicture/index.tsx
+++ b/src/components/user/detail/components/ProfilePicture/index.tsx
@@ -9,7 +9,7 @@ import { AVATAR_DEFAULT_URL } from '@/constant';
 // store
 
 import styles from './styles.module.scss';
-import { IUser } from '@/app/api/users/list/route';
+import { IUser } from '@/types/resource/user';
 
 export interface IProfilePictureProps {
   user: IUser;
@@ -21,7 +21,7 @@ export default function ProfilePicture({ user }: IProfilePictureProps) {
   return (
     <Card title={formatMessage({ id: 'userDetailProfilePicture' })}>
       <Box className={styles.wrapper}>
-        <Avatar src={user?.avatarUrl || AVATAR_DEFAULT_URL} size="xl" className={styles.avatar} />
+        <Avatar src={user?.imageUrl || AVATAR_DEFAULT_URL} size="xl" className={styles.avatar} />
       </Box>
     </Card>
   );
diff --git a/src/components/user/detail/index.tsx b/src/components/user/detail/index.tsx
index 82f7763..f4c42f9 100644
--- a/src/components/user/detail/index.tsx
+++ b/src/components/user/detail/index.tsx
@@ -8,11 +8,11 @@ import { useIntl } from 'react-intl';
 import ProfilePicture from './components/ProfilePicture';
 import { useEffect, useState } from 'react';
 import { useAsync } from '@/hooks/useAsync';
-import { IUser } from '@/app/api/users/list/route';
 import Loader from '@/components/ui-component/Loader';
 import { getUserDetail } from '@/utils/services/user';
 import BasicInformation from './components/BasicInformation';
 import AdditionalInformation from './components/AdditionalInformation';
+import { IUser } from '@/types/resource/user';
 
 const UserDetail = () => {
   const { formatMessage } = useIntl();
diff --git a/src/components/dialogs/user/UserChangeStatus.tsx b/src/components/user/dialog/UserChangeStatus.tsx
similarity index 94%
rename from src/components/dialogs/user/UserChangeStatus.tsx
rename to src/components/user/dialog/UserChangeStatus.tsx
index 8c97b15..f62c5bc 100644
--- a/src/components/dialogs/user/UserChangeStatus.tsx
+++ b/src/components/user/dialog/UserChangeStatus.tsx
@@ -5,9 +5,9 @@ import { useIntl } from 'react-intl';
 import { useAsync } from '@/hooks/useAsync';
 import { success as notifySuccess } from '@/utils/notify';
 import LoadingButton from '@mui/lab/LoadingButton';
-import { IUser } from '@/app/api/users/list/route';
 import { updateUser } from '@/utils/services/user';
 import { USER_STATUS_ACTIVE } from '@/constant/user';
+import { IUser } from '@/types/resource/user';
 interface UserDialogProps extends Omit<DialogProps, 'onClose'> {
   users: Partial<IUser>[];
   status: string;
@@ -24,7 +24,7 @@ export default function UserChangeStatusDialog({ users, status, onClose, ...prop
   const handleSubmit = async () => {
     for (let index = 0; index < users.length; index++) {
       const item = users[index];
-      await execute(updateUser(item._id + '', { completionStatus: status }));
+      await execute(updateUser(item.id + '', { status }));
     }
     handleClose();
     notifySuccess(formatMessage({ id: 'userApiUpdated' }));
@@ -45,7 +45,7 @@ export default function UserChangeStatusDialog({ users, status, onClose, ...prop
   return (
     <Dialog onClose={handleClose} {...props}>
       <DialogTitle sx={{ pt: '8px' }}>
-        {formatMessage({ id: status === USER_STATUS_ACTIVE ? 'userDialogActiveTitle' : 'userDialogDeactiveTitle' })}
+        {formatMessage({ id: status === USER_STATUS_ACTIVE ? 'userDialogActiveTitle' : 'userDialogDeactivatedTitle' })}
       </DialogTitle>
       <IconButton
         aria-label="close"
diff --git a/src/components/dialogs/user/UserDeleteDialog.tsx b/src/components/user/dialog/UserDeleteDialog.tsx
similarity index 91%
rename from src/components/dialogs/user/UserDeleteDialog.tsx
rename to src/components/user/dialog/UserDeleteDialog.tsx
index 5ea462d..121fc41 100644
--- a/src/components/dialogs/user/UserDeleteDialog.tsx
+++ b/src/components/user/dialog/UserDeleteDialog.tsx
@@ -5,14 +5,15 @@ import { useIntl } from 'react-intl';
 import { useAsync } from '@/hooks/useAsync';
 import { success as notifySuccess } from '@/utils/notify';
 import LoadingButton from '@mui/lab/LoadingButton';
-import { IUser } from '@/app/api/users/list/route';
 import { deleteUser } from '@/utils/services/user';
+import { IUser } from '@/types/resource/user';
 interface UserDialogProps extends Omit<DialogProps, 'onClose'> {
   users: Partial<IUser>[];
   onClose?: () => void;
+  onSuccess?: () => void;
 }
 
-export default function UserDeleteDialog({ users, onClose, ...props }: UserDialogProps): JSX.Element {
+export default function UserDeleteDialog({ users, onClose, onSuccess, ...props }: UserDialogProps): JSX.Element {
   const { formatMessage } = useIntl();
   const { isLoading, execute } = useAsync();
   const handleClose = () => {
@@ -22,10 +23,11 @@ export default function UserDeleteDialog({ users, onClose, ...props }: UserDialo
   const handleDelete = async () => {
     for (let index = 0; index < users.length; index++) {
       const item = users[index];
-      await execute(deleteUser(item._id + ''));
+      await execute(deleteUser(item.id + ''));
     }
     handleClose();
     notifySuccess(formatMessage({ id: 'userApiDeleted' }));
+    onSuccess?.();
   };
 
   const renderContent = () => {
diff --git a/src/components/user/index.tsx b/src/components/user/index.tsx
index 24d19bc..dca1283 100644
--- a/src/components/user/index.tsx
+++ b/src/components/user/index.tsx
@@ -5,10 +5,9 @@ import { useIntl } from 'react-intl';
 import { getUsers } from '@/utils/services/user';
 import { useAsync } from '@/hooks/useAsync';
 import { useEffect, useState } from 'react';
-import { IUser } from '@/app/api/users/list/route';
-import { USER_STATUS_ACTIVE, USER_STATUS_DEACTIVED } from '@/constant/user';
+import { USER_STATUS_ACTIVE, USER_STATUS_DEACTIVATED } from '@/constant/user';
 import Chip from '@/components/ui-component/extended/Chip';
-import { GridColDef, GridRowParams, GridRowSelectionModel } from '@mui/x-data-grid';
+import { GridColDef, GridPaginationModel, GridRowParams, GridRowSelectionModel, GridSortModel } from '@mui/x-data-grid';
 import Avatar from '@/components/ui-component/extended/Avatar';
 import { Eye, Users as IconUsers, Buildings, LockKey, Plus } from '@phosphor-icons/react';
 import { Button } from '@/components/ui-component/buttons';
@@ -18,10 +17,14 @@ import { DATE_FULL_FORMAT } from '@/constant';
 import { format } from 'date-fns';
 import { ButtonSelectStatus } from './component/ButtonSelectStatus';
 import { ButtonDelete } from './component/ButtonDelete';
-import UserDeleteDialog from '../dialogs/user/UserDeleteDialog';
-import UserChagenStatusDialog from '../dialogs/user/UserChangeStatus';
+import UserDeleteDialog from './dialog/UserDeleteDialog';
+import UserChangeStatusDialog from './dialog/UserChangeStatus';
 import NextLink from 'next/link';
 import routes from '@/routes';
+import { IUser } from '@/types/resource/user';
+import { IRequestFilter } from '@/types/request';
+import { ResponseMeta } from '@/types/pagination';
+import { PAGINATE_PAGE_SIZE, SORT_DIRECTION_DEFAULT, SORT_FIELD_DEFAULT } from '@/utils/constant';
 
 const User = () => {
   const { formatMessage } = useIntl();
@@ -31,22 +34,31 @@ const User = () => {
   const [statusSelected, setStatusSelected] = useState('');
   const [deleteUsers, setDeleteUsers] = useState<IUser[]>([]);
   const [changeStatusUsers, setChangeStatusUsers] = useState<IUser[]>([]);
+  const [userFilters, setUserFilters] = useState<IRequestFilter>({});
+  const [userMeta, setUserMeta] = useState<ResponseMeta | null>(null);
   const renderStatus = (value: string) => {
     let formatValue = value.toLowerCase();
-    if (formatValue === USER_STATUS_DEACTIVED.toLowerCase()) {
+    if (formatValue === USER_STATUS_DEACTIVATED.toLowerCase()) {
       return <Chip chipcolor="error" variant="outlined" label={value} sx={{ ':hover': null }} />;
     }
     return <Chip chipcolor="success" label={value} sx={{ ':hover': null }} />;
   };
 
-  const initData = async () => {
-    const res = await execute(getUsers());
-    const data = res.data?.users && res.data?.users.length > 0 ? res.data?.users : [];
+  const fetchUsers = async (filters?: IRequestFilter) => {
+    const newFilter = {
+      ...userFilters,
+      ...filters
+    };
+    const result = await execute(getUsers(newFilter));
+    const data = result.data?.data && result.data?.data.length > 0 ? result.data?.data : [];
+    const meta = result.data.meta || null;
+    setUserMeta(meta);
     setUsers(data);
+    setUserFilters(newFilter);
   };
 
   useEffect(() => {
-    initData();
+    fetchUsers();
     // eslint-disable-next-line react-hooks/exhaustive-deps
   }, []);
 
@@ -58,10 +70,8 @@ const User = () => {
       align: 'center',
       renderCell: ({ row }) => (
         <Box display="flex" gap="12px" alignItems="center">
-          {row?.avatarUrl ? <Avatar alt={`${row.firstName} ${row.lastName}`} src={row.avatarUrl} size="xs" /> : null}
-          <Typography variant="h4">
-            {row.firstName} {row.lastName}
-          </Typography>
+          {row?.avatarUrl ? <Avatar alt={row.name} src={row.avatarUrl} size="xs" /> : null}
+          <Typography variant="h4">{row.name}</Typography>
         </Box>
       ),
       flex: 2
@@ -77,7 +87,7 @@ const User = () => {
       field: 'status',
       headerName: formatMessage({ id: 'tableStatus' }),
       headerAlign: 'center',
-      renderCell: ({ row }) => <Box fontWeight={500}>{renderStatus(row.completionStatus || USER_STATUS_ACTIVE)}</Box>,
+      renderCell: ({ row }) => <Box fontWeight={500}>{renderStatus(row.status || USER_STATUS_ACTIVE)}</Box>,
       flex: 1,
       align: 'center'
     },
@@ -111,7 +121,7 @@ const User = () => {
   ];
 
   const handleSelectStatus = (value: string) => {
-    const listUsers = users.filter((item) => rowsSelected.includes(item._id) && item.completionStatus !== value);
+    const listUsers = users.filter((item) => rowsSelected.includes(item.id) && item.status !== value);
     if (listUsers.length > 0) {
       setStatusSelected(value);
       setChangeStatusUsers(listUsers);
@@ -124,7 +134,7 @@ const User = () => {
     setChangeStatusUsers([]);
   };
   const handleDelete = () => {
-    const listUsers = users.filter((item) => rowsSelected.includes(item._id));
+    const listUsers = users.filter((item) => rowsSelected.includes(item.id));
     setDeleteUsers(listUsers);
   };
   const handleResetDelete = () => {
@@ -135,6 +145,36 @@ const User = () => {
     setRowsSelected(rowSelectionModel);
   };
 
+  const handleSort = async (model: GridSortModel) => {
+    const field = model?.[0]?.field || SORT_FIELD_DEFAULT;
+    const dir = model?.[0]?.sort || SORT_DIRECTION_DEFAULT;
+    await fetchUsers({
+      field: field,
+      sort: dir
+    });
+  };
+
+  const handlePaginationChange = async (model: GridPaginationModel) => {
+    const newPage = (model?.page || 0) + 1;
+    const limit = model?.pageSize || PAGINATE_PAGE_SIZE;
+    await fetchUsers({
+      page: newPage,
+      limit
+    });
+  };
+
+  const handleActionSuccess = async () => {
+    await fetchUsers({});
+  };
+
+  const handleSearch = async (keyword: string) => {
+    if (keyword !== userFilters.search) {
+      await fetchUsers({
+        search: keyword
+      });
+    }
+  };
+
   const renderHeaderAction = () => (
     <>
       <Button
@@ -159,7 +199,7 @@ const User = () => {
 
   return (
     <Stack direction="column">
-      <Breadcrumbs title={formatMessage({ id: 'userTitle' })} onSearch={() => console.log('hello')} actionCom={renderHeaderAction} />
+      <Breadcrumbs title={formatMessage({ id: 'userTitle' })} onSearch={handleSearch} actionCom={renderHeaderAction} />
       <Table
         rows={users}
         columns={columns}
@@ -167,9 +207,21 @@ const User = () => {
         checkboxSelection
         onRowSelectionModelChange={handleSelectRow}
         rowSelectionModel={rowsSelected}
+        onSortModelChange={handleSort}
+        paginationModel={{
+          page: (userFilters?.page || 1) - 1,
+          pageSize: userFilters.limit || PAGINATE_PAGE_SIZE
+        }}
+        rowCount={userMeta?.total || 0}
+        onPaginationModelChange={handlePaginationChange}
+      />
+      <UserDeleteDialog
+        open={Boolean(deleteUsers?.length > 0)}
+        users={deleteUsers}
+        onClose={handleResetDelete}
+        onSuccess={handleActionSuccess}
       />
-      <UserDeleteDialog open={Boolean(deleteUsers?.length > 0)} users={deleteUsers} onClose={handleResetDelete} />
-      <UserChagenStatusDialog
+      <UserChangeStatusDialog
         open={Boolean(changeStatusUsers?.length > 0 && statusSelected !== '')}
         users={changeStatusUsers}
         status={statusSelected}
diff --git a/src/constant/user.ts b/src/constant/user.ts
index f4da194..035b4a7 100644
--- a/src/constant/user.ts
+++ b/src/constant/user.ts
@@ -1,4 +1,4 @@
 export const USER_STATUS_ACTIVE = 'Active';
-export const USER_STATUS_DEACTIVED = 'Deactivated';
+export const USER_STATUS_DEACTIVATED = 'Deactivated';
 
-export const USER_STATUS = [USER_STATUS_ACTIVE, USER_STATUS_DEACTIVED];
+export const USER_STATUS = [USER_STATUS_ACTIVE, USER_STATUS_DEACTIVATED];
diff --git a/src/types/request.ts b/src/types/request.ts
index fe21453..52437e0 100644
--- a/src/types/request.ts
+++ b/src/types/request.ts
@@ -42,7 +42,7 @@ export interface IRequestCreateUser {
   lastName: string;
   email: string;
   role: string;
-  completionStatus: string;
+  status: string;
   company: string;
   country: string;
   phoneNumber: string;
diff --git a/src/types/resource/user.ts b/src/types/resource/user.ts
new file mode 100644
index 0000000..797cd31
--- /dev/null
+++ b/src/types/resource/user.ts
@@ -0,0 +1,15 @@
+import { User as UserDto } from '@/utils/dtos/user.dto';
+
+export interface  IUser extends UserDto {
+  id: string;
+  firstName?: string;
+  lastName?: string;
+  contactName?: string;
+  contactEmail?: string;
+  contactPhoneNumber?: string;
+  address?: string;
+  gst?: string;
+  insuranceNumber?: string;
+  workSafeBCNumber?: string;
+  role?: string;
+}
diff --git a/src/utils/locales/en/user.json b/src/utils/locales/en/user.json
index 60f713f..4005084 100644
--- a/src/utils/locales/en/user.json
+++ b/src/utils/locales/en/user.json
@@ -8,7 +8,7 @@
   "userDialogDeleteButtonDelete": "Delete User",
   "userDialogAddTitle": "Add User",
   "userDialogEditTitle": "Edit User",
-  "userDialogDeactiveTitle": "Deactivate User",
+  "userDialogDeactivatedTitle": "Deactivate User",
   "userDialogActiveTitle": "Active User",
   "userDialogChangeStatusContent": "Are you sure you want to {status} {no} ?",
   "userDialogCreateButtonSubmit": "Save User",
diff --git a/src/utils/services/user.ts b/src/utils/services/user.ts
index 19eb061..7f13865 100644
--- a/src/utils/services/user.ts
+++ b/src/utils/services/user.ts
@@ -1,11 +1,13 @@
 import axiosServices from '../axios';
 import endPoints from '../api';
 import { IResponseCreateUser, IResponseDeleteUser, IResponseListUsers, IResponseUpdateUser } from '@/types/response';
-import { IRequestCreateUser, IRequestUpdateUser } from '@/types/request';
-import { IUser } from '@/app/api/users/list/route';
+import { IRequestCreateUser, IRequestFilter, IRequestUpdateUser } from '@/types/request';
+import { IUser } from '@/types/resource/user';
+import { generateQueryFromFilter } from '../helper';
 
-export const getUsers = async () => {
-  return await axiosServices.get<IResponseListUsers<IUser>>(endPoints.GET_USERS);
+export const getUsers = async (params?: IRequestFilter) => {
+  const query = params ? generateQueryFromFilter(endPoints.GET_USERS, params) : endPoints.GET_USERS;
+  return await axiosServices.get<IResponseListUsers<IUser>>(query);
 };
 
 export const createUser = async (payload: IRequestCreateUser) => {

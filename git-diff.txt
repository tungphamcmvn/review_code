title:	J2C-159: API for Project Details - Budgets - Add Budget
state:	OPEN
author:	huyphamnguyen
labels:	
assignees:	
reviewers:	tungphamcmvn (Requested)
projects:	
milestone:	
number:	17
url:	https://github.com/invik-33/j2c-app/pull/17
additions:	347
deletions:	327
--
J2C-159: API for Project Details - Budgets - Add Budget


diff --git a/lib/swagger/doc/budget/post.ts b/lib/swagger/doc/budget/post.ts
new file mode 100644
index 0000000..4689afe
--- /dev/null
+++ b/lib/swagger/doc/budget/post.ts
@@ -0,0 +1,98 @@
+/**
+@swagger
+* /api/budget:
+*   post:
+*     tags:
+*       - Budget
+*     description: Create a budget
+*     summary: Create a budget
+*     security:
+*       - bearerAuth: []
+*     requestBody:
+*       required: true
+*       content:
+*         application/json:
+*           schema:
+*             $ref: '#/components/schemas/BudgetCreated'
+*     responses:
+*       200:
+*         description: Budget created
+*         content:
+*           application/json:
+*             schema:
+*               $ref: '#/components/schemas/BudgetResponse'
+*       400:
+*         description: Bad request
+*         content:
+*           application/json:
+*             schema:
+*               type: object
+*               properties:
+*                 errors:
+*                   type: array
+*                   items:
+*                     type: string
+* components:
+*   schemas:
+*     BudgetCreated:
+*       type: object
+*       properties:
+*         projectId:
+*           type: string
+*           format: projectId
+*           description: Project id
+*           required: true
+*         budgetCategory:
+*           type: string
+*           format: budgetCategory
+*           description: Budget's category
+*           required: true
+*         budgetCode:
+*           type: string
+*           format: budgetCode
+*           description: Budget's code
+*           required: true
+*         budgetOriginalBudget:
+*           type: number
+*           format: budgetOriginalBudget
+*           description: Original Budget
+*           required: true
+*         budgetCurrentBudget:
+*           type: number
+*           format: budgetCurrentBudget
+*           description: Current Budget
+*           required: true
+*         budgetClaimedToDate:
+*           type: number
+*           format: budgetClaimedToDate
+*           description: Claimed to Date
+*           required: true
+*         budgetRevision:
+*           type: number
+*           format: budgetRevision
+*           description: Revision
+*           required: true
+*         budgetCurrentClaim:
+*           type: number
+*           format: budgetCurrentClaim
+*           description: Current Claim
+*           required: true
+*         budgetTotalClaim:
+*           type: number
+*           format: budgetTotalClaim
+*           description: Total Claim
+*           required: true
+*         budgetTotalClaimPercentage:
+*           type: number
+*           format: budgetTotalClaimPercentage
+*           description: Total Claim %
+*           required: true
+*     BudgetResponse:
+*       type: object
+*       properties:
+*         success:
+*           type: boolean
+*           description: Budget created
+@constructor
+**/
+export {};
diff --git a/src/app/api/budget/route.ts b/src/app/api/budget/route.ts
new file mode 100644
index 0000000..02b1779
--- /dev/null
+++ b/src/app/api/budget/route.ts
@@ -0,0 +1,43 @@
+import MongoConnect from '@/backend/connection/mongo.connection';
+import { NextRequest, NextResponse } from 'next/server';
+import AuthService from '@/backend/services/auth.service';
+import BudgetService from '@/backend/services/budget.service';
+import BudgetValidator from '@/backend/validator/budget.validator';
+import { Budget } from '@/utils/dtos/budget.dto';
+import mongoose from 'mongoose';
+import NotFoundException from '@/backend/exceptions/notfound.exception';
+
+export async function POST(request: NextRequest) {
+  try {
+    const data = await request.json();
+    const conn = await MongoConnect();
+    const budgetService = new BudgetService(conn);
+    const authService = new AuthService(conn);
+    const budgetValidator = new BudgetValidator(data, conn);
+    await budgetValidator.validate();
+
+    if (budgetValidator.getErrors().length > 0) {
+      return NextResponse.json({ errors: budgetValidator.getErrors() }, { status: 400 });
+    }
+
+    const lastBudget: mongoose.Document<Budget>[] = await budgetService.findLastBudget();
+    let lastIndex = 1;
+    if (!!lastBudget && lastBudget.length > 0) {
+      const lastItem: Budget = lastBudget[0].toObject();
+      lastIndex = lastItem.budgetIndex + 1;
+    }
+
+    const currentUser = await authService.getUserByToken(request);
+    if (!currentUser) {
+      throw new NotFoundException('User not found');
+    }
+    const dataWithNewIndex = {
+      ...data,
+      budgetIndex: lastIndex
+    };
+    await budgetService.addProjectBudget(dataWithNewIndex, currentUser);
+    return NextResponse.json({ success: true }, { status: 200 });
+  } catch (error: any) {
+    return NextResponse.json({ errors: [error.message] }, { status: 400 });
+  }
+}
diff --git a/src/backend/models/budget.model.ts b/src/backend/models/budget.model.ts
index 00f0df0..ae5e3d5 100644
--- a/src/backend/models/budget.model.ts
+++ b/src/backend/models/budget.model.ts
@@ -12,14 +12,6 @@ export const BudgetSchema: mongoose.Schema<BudgetType> = new mongoose.Schema(
       type: String,
       required: true
     },
-    creatorEmail: {
-      type: String,
-      required: true
-    },
-    budgetAdditionalFields: {
-      type: [String],
-      required: true
-    },
     budgetCategory: {
       type: String,
       required: true
@@ -36,12 +28,13 @@ export const BudgetSchema: mongoose.Schema<BudgetType> = new mongoose.Schema(
       type: Number,
       required: true
     },
-    budgetDescription: {
-      type: String
+    budgetClaimedToDate: {
+      type: Number,
+      required: true
     },
     budgetIndex: {
       type: Number,
-      required: true
+      default: 0
     },
     budgetOriginalBudget: {
       type: Number,
@@ -55,15 +48,11 @@ export const BudgetSchema: mongoose.Schema<BudgetType> = new mongoose.Schema(
       type: Number,
       required: true
     },
-    budgetTotalClaimBeforeHoldback: {
-      type: Number,
-      required: true
-    },
     budgetTotalClaimPercentage: {
       type: Number,
       required: true
     },
-    budgetTotalHoldback: {
+    budgetCostToComplete: {
       type: Number,
       required: true
     },
diff --git a/src/backend/repositories/interfaces/budget.repository.interface.ts b/src/backend/repositories/interfaces/budget.repository.interface.ts
index d5500b0..9d61bba 100644
--- a/src/backend/repositories/interfaces/budget.repository.interface.ts
+++ b/src/backend/repositories/interfaces/budget.repository.interface.ts
@@ -1,8 +1,3 @@
-import { Budget as BudgetType } from '@/utils/dtos/budget.dto';
 import BaseRepositoryInterface from '@/backend/repositories/interfaces/base.repository.interface';
 
-export default interface BudgetRepositoryInterface extends BaseRepositoryInterface {
-  addBudget(data: BudgetType): Promise<BudgetType>;
-
-  getBudgetsByProjectId(projectId: string): Promise<any>;
-}
+export default interface BudgetRepositoryInterface extends BaseRepositoryInterface {}
diff --git a/src/backend/repositories/mongodb/budget.repository.ts b/src/backend/repositories/mongodb/budget.repository.ts
index c822e97..e83f6ee 100644
--- a/src/backend/repositories/mongodb/budget.repository.ts
+++ b/src/backend/repositories/mongodb/budget.repository.ts
@@ -1,27 +1,31 @@
 import BaseRepositoryAbstract from '@/backend/repositories/mongodb/base.repository.abstract';
 import BudgetRepositoryInterface from '@/backend/repositories/interfaces/budget.repository.interface';
-import mongoose, { Mongoose, Promise } from 'mongoose';
+import mongoose, { Mongoose, SortOrder } from 'mongoose';
 import Budget from '@/backend/models/budget.model';
-import BudgetDto from '@/utils/dtos/budget.dto';
+import { PAGINATE_PAGE_SIZE } from '@/utils/constant';
 
 export default class BudgetRepository extends BaseRepositoryAbstract implements BudgetRepositoryInterface {
   constructor(connection: Mongoose) {
     super(connection);
   }
-
   getModel(): mongoose.Model<mongoose.Document> {
     return Budget;
   }
-
-  async addBudget(data: BudgetDto): Promise<BudgetDto> {
-    await this.create(data);
-
-    return new Promise((resolve: (arg0: BudgetDto) => void) => {
-      resolve(data);
-    });
-  }
-
-  async getBudgetsByProjectId(projectId: string): Promise<any> {
-    return this.find({ projectId: projectId });
+  async findWithSort(
+    filter: object,
+    sort: { [key: string]: SortOrder },
+    limit = PAGINATE_PAGE_SIZE,
+    currentPage = 1
+  ): Promise<mongoose.Document[]> {
+    return this._model
+      .find(filter)
+      .populate({
+        path: 'creatorId',
+        select: { name: 1, email: 1, imageUrl: 1, _id: 1 }
+      })
+      .limit(limit)
+      .skip(limit * (currentPage - 1))
+      .sort(sort)
+      .exec();
   }
 }
diff --git a/src/backend/services/budget.service.ts b/src/backend/services/budget.service.ts
index 5391f5b..6ca2b63 100644
--- a/src/backend/services/budget.service.ts
+++ b/src/backend/services/budget.service.ts
@@ -1,14 +1,17 @@
 import BudgetRepositoryInterface from '@/backend/repositories/interfaces/budget.repository.interface';
-import mongoose from 'mongoose';
+import mongoose, { Mongoose } from 'mongoose';
 import BudgetDto, { Budget as BudgetType } from '@/utils/dtos/budget.dto';
 import { BUDGET_ENUM } from '@/utils/common';
 import { ObjectId } from 'bson';
+import BudgetRepository from '../repositories/mongodb/budget.repository';
+import UserDto from '@/utils/dtos/user.dto';
+import { IRequestCreateBudget } from '@/types/request';
 
 export default class BudgetService {
   protected budgetRepository: BudgetRepositoryInterface;
 
-  constructor(budgetRepository: BudgetRepositoryInterface) {
-    this.budgetRepository = budgetRepository;
+  constructor(conn: Mongoose) {
+    this.budgetRepository = new BudgetRepository(conn);
   }
 
   async getBudgetsByProjectId(projectId: string): Promise<{
@@ -50,7 +53,8 @@ export default class BudgetService {
         budgetTotalClaimBeforeHoldback: item.get('budgetTotalClaimBeforeHoldback'),
         budgetTotalClaimPercentage: item.get('budgetTotalClaimPercentage'),
         dateCreate: item.get('dateCreate'),
-        dateModify: item.get('dateModify')
+        dateModify: item.get('dateModify'),
+        budgetCostToComplete: item.get('budgetCostToComplete')
       };
       budgetDto.setData(data);
 
@@ -80,8 +84,31 @@ export default class BudgetService {
     await this.budgetRepository.updateMany({ projectId }, { budgetTotalClaim: currentClaimNumber });
   }
 
-  async addProjectBudget(budget: BudgetDto): Promise<mongoose.Document> {
-    return this.budgetRepository.create(budget);
+  async addProjectBudget(data: IRequestCreateBudget, currentUser: UserDto): Promise<mongoose.Document> {
+    try {
+      const budgetDto = new BudgetDto();
+      const defaultData = budgetDto.toObject();
+
+      budgetDto.setData({
+        ...defaultData,
+        projectId: data.projectId,
+        budgetCategory: data.budgetCategory,
+        budgetCode: data.budgetCode,
+        budgetOriginalBudget: data.budgetOriginalBudget,
+        budgetCurrentBudget: data.budgetCurrentBudget,
+        budgetClaimedToDate: data.budgetClaimedToDate,
+        budgetCurrentClaim: data.budgetCurrentClaim,
+        budgetTotalClaim: data.budgetTotalClaim,
+        budgetTotalClaimPercentage: data.budgetTotalClaimPercentage,
+        budgetCostToComplete: data.budgetCostToComplete,
+        budgetRevision: data.budgetRevision,
+        budgetIndex: data.budgetIndex,
+        creatorId: currentUser.toObject().id + ''
+      });
+      return this.budgetRepository.create(budgetDto);
+    } catch (error) {
+      throw error;
+    }
   }
 
   async importBudgets(
@@ -132,6 +159,7 @@ export default class BudgetService {
         budgetTotalClaimPercentage: 0,
         budgetDescription: '',
         budgetAdditionalFields: budgetFields.slice(BUDGET_ENUM.maxCount),
+        budgetCostToComplete: 0,
         creatorEmail,
         dateCreate: new Date(),
         dateModify: new Date()
@@ -143,6 +171,10 @@ export default class BudgetService {
     await this.budgetRepository.createMany(budgetData);
   }
 
+  async findLastBudget() {
+    return await this.budgetRepository.findWithSort({}, { dateCreate: -1 }, 1);
+  }
+
   async updateBudgetTotalClaim(budgetId: string, currentClaimNumber: string | null, total: number): Promise<mongoose.Document | null> {
     const budgetTotalClaimDictionary =
       currentClaimNumber === null
diff --git a/src/backend/validator/budget.validator.ts b/src/backend/validator/budget.validator.ts
new file mode 100644
index 0000000..0d86344
--- /dev/null
+++ b/src/backend/validator/budget.validator.ts
@@ -0,0 +1,65 @@
+import BaseValidator from '@/backend/validator/base.validator';
+import { number, string } from 'yup';
+import ProjectRepositoryInterface from '../repositories/interfaces/project.repository.interface';
+import { Mongoose } from 'mongoose';
+import ProjectRepository from '../repositories/mongodb/project.repository';
+import { IRequestCreateBudget } from '@/types/request';
+
+export default class BudgetValidator extends BaseValidator {
+  private projectRepository: ProjectRepositoryInterface;
+
+  constructor(data: IRequestCreateBudget, conn: Mongoose) {
+    super();
+    this.data = data;
+    this.projectRepository = new ProjectRepository(conn);
+  }
+
+  validateRules() {
+    const projectIdRule = { projectId: string().required() };
+    const budgetCategoryRule = { budgetCategory: string().required() };
+    const budgetCodeRule = { budgetCode: string().max(25).required() };
+    const budgetOriginalBudgetRule = { budgetOriginalBudget: number().required() };
+    const budgetCurrentBudgetRule = { budgetCurrentBudget: number().required() };
+    const budgetRevisionRule = { budgetRevision: number().required() };
+    const budgetClaimedToDateRule = { budgetClaimedToDate: number().required() };
+    const budgetCurrentClaimRule = { budgetCurrentClaim: number().required() };
+    const budgetTotalClaimRule = { budgetTotalClaim: number().required() };
+    const budgetTotalClaimPercentageRule = { budgetTotalClaimPercentage: number().integer().required() };
+    const budgetCostToCompleteRule = { budgetCostToComplete: number().required() };
+    this.rules = [
+      projectIdRule,
+      budgetCategoryRule,
+      budgetCodeRule,
+      budgetOriginalBudgetRule,
+      budgetRevisionRule,
+      budgetCurrentBudgetRule,
+      budgetClaimedToDateRule,
+      budgetCurrentClaimRule,
+      budgetTotalClaimRule,
+      budgetTotalClaimPercentageRule,
+      budgetCostToCompleteRule
+    ];
+
+    return this;
+  }
+
+  async existsProject(): Promise<boolean> {
+    const project = await this.projectRepository.findProjectId(this.data.projectId);
+
+    if (!project) {
+      this.setErrors(['Project not found']);
+
+      return false;
+    }
+
+    return true;
+  }
+
+  async validate(): Promise<boolean> {
+    super.validate();
+    if (this.getErrors().length > 0) {
+      return false;
+    }
+    return await this.existsProject();
+  }
+}
diff --git a/src/components/dialogs/BudgetAddDialog.tsx b/src/components/dialogs/BudgetAddDialog.tsx
deleted file mode 100644
index ab419bd..0000000
--- a/src/components/dialogs/BudgetAddDialog.tsx
+++ /dev/null
@@ -1,256 +0,0 @@
-/**
- * @license
- * Copyright 2024 J2C
- */
-
-import { useState, useEffect, ChangeEvent, Dispatch, SetStateAction } from 'react';
-import { Button, Dialog, DialogActions, DialogContent, TextField, Typography } from '@mui/material';
-import { PROJECTS_ENUM } from '@/utils/common';
-import { updateFormField, updateFormFieldFloat, updateFormFieldInt } from '@/utils/helper';
-import styles from '@/styles/dataDialog.module.scss';
-import axiosServices from '@/utils/axios';
-import APIS from '@/utils/api';
-
-const DEFAULT_FORM_STATE = {
-  budgetIndex: 0,
-  budgetCode: '',
-  budgetOriginalBudget: '',
-  budgetCurrentBudget: '',
-  budgetCategory: '',
-  budgetRevision: '',
-  budgetTotalClaimBeforeHoldback: '',
-  budgetTotalHoldback: '',
-  budgetCurrentClaim: '',
-  budgetTotalClaim: '',
-  budgetTotalClaimPercentage: '',
-  budgetDescription: ''
-};
-
-const FEATURE_FLAG: boolean = false;
-
-interface BudgetAddDialogProps {
-  setAction: Dispatch<SetStateAction<any>>;
-  showDialog: boolean;
-  currentEditObject: any;
-  budgetIndexMax: number;
-  onCloseDialog: () => void;
-  onSuccess: (action: number) => void;
-  onError: (action: number) => void;
-}
-
-export default function BudgetAddDialog(props: BudgetAddDialogProps): JSX.Element {
-  const showDialog = props.showDialog;
-
-  const [formFields, setFormFields] = useState<any>(DEFAULT_FORM_STATE);
-  const [isSubmitting, setIsSubmitting] = useState(false);
-
-  useEffect(() => {
-    if (showDialog) {
-      const initFormData = {
-        ...props.currentEditObject,
-        budgetIndex: Math.floor(props.budgetIndexMax) + 1, // desired index = max + 1
-        budgetCode: '',
-        budgetOriginalBudget: '',
-        budgetCurrentBudget: '',
-        budgetCategory: '',
-        budgetRevision: '',
-        budgetTotalClaimBeforeHoldback: '',
-        budgetTotalHoldback: '',
-        budgetCurrentClaim: '',
-        budgetTotalClaim: '',
-        budgetTotalClaimPercentage: '',
-        budgetDescription: ''
-      };
-      setFormFields(initFormData);
-    }
-  }, [props.currentEditObject, showDialog, props.budgetIndexMax]);
-
-  if (!showDialog) {
-    return <></>;
-  }
-
-  const isDisabled = () =>
-    formFields.budgetIndex === 0 ||
-    formFields.budgetCode.length === 0 ||
-    formFields.budgetOriginalBudget.length === 0 ||
-    formFields.budgetCategory.length === 0;
-
-  const closeDialog = () => {
-    setIsSubmitting(false);
-    props.onCloseDialog();
-  };
-
-  const handleSubmit = async () => {
-    setIsSubmitting(true);
-
-    try {
-      await axiosServices.post(APIS.PROJECT_ADD_BUDGET, {
-        projectId: formFields.id,
-        creatorId: formFields.creatorId,
-        creatorEmail: formFields.creatorEmail,
-        budgetIndex: formFields.budgetIndex,
-        budgetCode: formFields.budgetCode,
-        budgetOriginalBudget: formFields.budgetOriginalBudget,
-        budgetCurrentBudget: formFields.budgetCurrentBudget,
-        budgetCategory: formFields.budgetCategory,
-        budgetRevision: formFields.budgetRevision,
-        budgetTotalClaimBeforeHoldback: formFields.budgetTotalClaimBeforeHoldback,
-        budgetTotalHoldback: formFields.budgetTotalHoldback,
-        budgetCurrentClaim: formFields.budgetCurrentClaim,
-        budgetTotalClaim: formFields.budgetTotalClaim,
-        budgetTotalClaimPercentage: formFields.budgetTotalClaimPercentage,
-        budgetDescription: formFields.budgetDescription
-      });
-
-      props.onSuccess(PROJECTS_ENUM.addBudget);
-    } catch (error) {
-      props.onError(PROJECTS_ENUM.addBudget);
-    }
-
-    closeDialog();
-  };
-
-  return (
-    <Dialog classes={{ paper: styles.dialog }} onClose={closeDialog} open={showDialog} component="form">
-      <Typography variant="h5" className={styles.title}>
-        ADD BUDGET ITEM
-      </Typography>
-
-      <DialogContent className={styles.fields}>
-        {FEATURE_FLAG && (
-          <>
-            <TextField
-              disabled={true}
-              // color="tertiary"
-              label="projectId*"
-              variant="standard"
-              value={formFields.id}
-              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'id')}
-            />
-            <TextField
-              disabled={true}
-              // color="tertiary"
-              label="UID*"
-              variant="standard"
-              value={formFields.creatorId}
-              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'creatorId')}
-            />
-            <TextField
-              disabled={true}
-              // color="tertiary"
-              label="CreatorEmail*"
-              variant="standard"
-              value={formFields.creatorEmail}
-              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'creatorEmail')}
-            />
-            <TextField
-              // color="tertiary"
-              label="Description"
-              variant="standard"
-              value={formFields.budgetDescription}
-              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'budgetDescription')}
-            />
-
-            <TextField
-              // color="tertiary"
-              label="Revision"
-              variant="standard"
-              value={formFields.budgetRevision}
-              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldInt(setFormFields, event, 'budgetRevision')}
-            />
-            <TextField
-              // color="tertiary"
-              label="Total Claim Before Holdback"
-              variant="standard"
-              value={formFields.budgetTotalClaimBeforeHoldback}
-              onChange={(event: ChangeEvent<HTMLInputElement>) => {
-                updateFormFieldFloat(setFormFields, event, 'budgetTotalClaimBeforeHoldback');
-              }}
-            />
-            <TextField
-              // color="tertiary"
-              label="Total Holdback"
-              variant="standard"
-              value={formFields.budgetTotalHoldback}
-              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldFloat(setFormFields, event, 'budgetTotalHoldback')}
-            />
-            <TextField
-              // color="tertiary"
-              label="Current Claim"
-              variant="standard"
-              value={formFields.budgetCurrentClaim}
-              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldFloat(setFormFields, event, 'budgetCurrentClaim')}
-            />
-            <TextField
-              // color="tertiary"
-              label="Total Claim"
-              variant="standard"
-              value={formFields.budgetTotalClaim}
-              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldFloat(setFormFields, event, 'budgetTotalClaim')}
-            />
-            <TextField
-              // color="tertiary"
-              label="Total Claim %"
-              variant="standard"
-              value={formFields.budgetTotalClaimPercentage}
-              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldFloat(setFormFields, event, 'budgetTotalClaimPercentage')}
-            />
-          </>
-        )}
-
-        <TextField
-          // color="tertiary"
-          label="Code"
-          variant="standard"
-          value={formFields.budgetCode}
-          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'budgetCode')}
-        />
-        <TextField
-          // color="tertiary"
-          label="Category"
-          variant="standard"
-          value={formFields.budgetCategory}
-          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'budgetCategory')}
-        />
-
-        <TextField
-          // color="tertiary"
-          label="Original Budget ($)"
-          variant="standard"
-          value={formFields.budgetOriginalBudget}
-          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldFloat(setFormFields, event, 'budgetOriginalBudget')}
-        />
-
-        <TextField
-          // color="tertiary"
-          label="Current Budget ($)"
-          variant="standard"
-          value={formFields.budgetCurrentBudget}
-          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldFloat(setFormFields, event, 'budgetCurrentBudget')}
-        />
-
-        <TextField
-          // color="tertiary"
-          label="Row Index"
-          variant="standard"
-          value={formFields.budgetIndex}
-          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldInt(setFormFields, event, 'budgetIndex')}
-        />
-      </DialogContent>
-      <DialogActions>
-        <Button color="secondary" variant="contained" onClick={closeDialog}>
-          Cancel
-        </Button>
-        {isSubmitting ? (
-          <Button color="secondary" variant="contained" disabled={true}>
-            Submitting...
-          </Button>
-        ) : (
-          <Button color="secondary" variant="contained" onClick={handleSubmit} disabled={isDisabled()}>
-            Submit
-          </Button>
-        )}
-      </DialogActions>
-    </Dialog>
-  );
-}
diff --git a/src/components/projects/Detail/budgets/addBudget/index.tsx b/src/components/projects/Detail/budgets/addBudget/index.tsx
index 24a5853..23b4e9b 100644
--- a/src/components/projects/Detail/budgets/addBudget/index.tsx
+++ b/src/components/projects/Detail/budgets/addBudget/index.tsx
@@ -13,6 +13,9 @@ import { Button } from 'ui-component/buttons';
 import styles from '@/styles/dataDialog.module.scss';
 import { PROJECT_CATEGORY } from '@/constant/project';
 import { IProject } from '@/types/resource/project';
+import { IRequestCreateBudget } from '@/types/request';
+import { useAsync } from '@/hooks/useAsync';
+import { createBudget } from '@/utils/services/budget';
 
 export interface IFormValues {
   projectId: string;
@@ -21,7 +24,7 @@ export interface IFormValues {
   budgetOriginalBudget?: number;
   budgetCurrentBudget?: number;
   budgetRevision?: number;
-  budgetClaimToDate?: number;
+  budgetClaimedToDate?: number;
   budgetCurrentClaim?: number;
   budgetTotalClaim?: number;
   budgetTotalClaimPercentage?: number;
@@ -43,6 +46,7 @@ export default function ProjectAddBudgetDialog({
   ...props
 }: ProjectAddDialogProps): JSX.Element {
   const { formatMessage } = useIntl();
+  const { execute } = useAsync();
   const validates = useCommonValidates();
 
   const { handleSubmit, values, errors, isSubmitting, handleChange, resetForm } = useFormik({
@@ -50,21 +54,21 @@ export default function ProjectAddBudgetDialog({
       projectId
     },
     onSubmit: async (currentValues: IFormValues) => {
-      console.log('currentValues', currentValues);
+      await handleCreateBudget(currentValues);
       notifySuccess(formatMessage({ id: 'budgetApiAdded' }));
       resetForm();
       onClose();
     },
     validationSchema: yupObject().shape({
-      budgetCode: validates.text({ isRequired: true }),
+      budgetCode: validates.text({ isRequired: true, maxLength: 25 }),
       budgetCategory: validates.text({ isRequired: true }),
       budgetOriginalBudget: validates.number({ isRequired: true }),
       budgetCurrentBudget: validates.number({ isRequired: true }),
       budgetRevision: validates.number({ isRequired: true }),
-      budgetClaimToDate: validates.number({ isRequired: true }),
+      budgetClaimedToDate: validates.number({ isRequired: true }),
       budgetCurrentClaim: validates.number({ isRequired: true }),
       budgetTotalClaim: validates.number({ isRequired: true }),
-      budgetTotalClaimPercentage: validates.number({ isRequired: true }),
+      budgetTotalClaimPercentage: validates.number({ isRequired: true, allowDecimal: false }),
       budgetCostToComplete: validates.number({ isRequired: true })
     }),
     validateOnBlur: false,
@@ -85,6 +89,23 @@ export default function ProjectAddBudgetDialog({
     }
   };
 
+  const handleCreateBudget = async (values: IFormValues) => {
+    const data: IRequestCreateBudget = {
+      projectId,
+      budgetCode: values?.budgetCode || '',
+      budgetCategory: values?.budgetCategory || '',
+      budgetOriginalBudget: values?.budgetOriginalBudget || 0,
+      budgetCurrentBudget: values?.budgetCurrentBudget || 0,
+      budgetRevision: values?.budgetRevision || 0,
+      budgetClaimedToDate: values?.budgetClaimedToDate || 0,
+      budgetCurrentClaim: values?.budgetOriginalBudget || 0,
+      budgetTotalClaim: values?.budgetTotalClaim || 0,
+      budgetTotalClaimPercentage: values?.budgetTotalClaimPercentage || 0,
+      budgetCostToComplete: values?.budgetCostToComplete || 0
+    };
+    await execute(createBudget(data));
+  };
+
   return (
     <Dialog onClose={handleCloseDialog} {...props}>
       <DialogTitle sx={{ pt: '8px' }}>{formatMessage({ id: 'budgetDialogAddTitle' })}</DialogTitle>
@@ -122,7 +143,7 @@ export default function ProjectAddBudgetDialog({
                 labelId="labelBudgetCategory"
                 value={values.budgetCategory}
                 fullWidth
-                placeholder={formatMessage({ id: 'builderDialogCreateCategoryPlaceholder' })}
+                placeholder={formatMessage({ id: 'budgetDialogAddCategoryPlaceholder' })}
                 onChange={handleChange}
                 name="budgetCategory"
                 id="budgetCategory"
@@ -189,13 +210,13 @@ export default function ProjectAddBudgetDialog({
             <Grid item xs={6}>
               <TextField
                 label={formatMessage({ id: 'budgetTableClaimedToDate' })}
-                value={values.budgetClaimToDate}
-                name="budgetClaimToDate"
+                value={values.budgetClaimedToDate}
+                name="budgetClaimedToDate"
                 fullWidth
                 size="medium"
                 type="number"
-                error={!!errors?.budgetClaimToDate}
-                helperText={errors.budgetClaimToDate}
+                error={!!errors?.budgetClaimedToDate}
+                helperText={errors.budgetClaimedToDate}
                 onChange={handleChange}
               />
             </Grid>
diff --git a/src/hooks/useCommonValidates.ts b/src/hooks/useCommonValidates.ts
index 94f8d64..3a87f7f 100644
--- a/src/hooks/useCommonValidates.ts
+++ b/src/hooks/useCommonValidates.ts
@@ -64,7 +64,7 @@ const useCommonValidates = () => {
 
       return commonRules;
     },
-    number: ({ isRequired = false, max = undefined, min = undefined } = {}) => {
+    number: ({ isRequired = false, max = undefined, min = undefined, allowDecimal = true } = {}) => {
       let commonRules = Yup.number().typeError(formatMessage({ id: 'validateNumberMessage' }));
 
       if (!isUndefined(max)) {
@@ -75,6 +75,10 @@ const useCommonValidates = () => {
         commonRules = commonRules.min(min);
       }
 
+      if (!allowDecimal) {
+        commonRules = commonRules.integer(formatMessage({ id: 'validateIntegerNumberMessage' }));
+      }
+
       if (isRequired) {
         return commonRules.required(formatMessage({ id: 'requiredValidateMessage' }));
       }
diff --git a/src/types/request.ts b/src/types/request.ts
index a10b6fe..5b0425a 100644
--- a/src/types/request.ts
+++ b/src/types/request.ts
@@ -125,3 +125,20 @@ export interface IRequestContractorCreateProject {
   address: string;
   imageUrl: string;
 }
+
+/* BUDGET */
+
+export interface IRequestCreateBudget {
+  projectId: string;
+  budgetCategory: string;
+  budgetCode: string;
+  budgetOriginalBudget: number;
+  budgetCurrentBudget: number;
+  budgetRevision: number;
+  budgetClaimedToDate: number;
+  budgetCurrentClaim: number;
+  budgetTotalClaim: number;
+  budgetTotalClaimPercentage: number;
+  budgetCostToComplete: number;
+  budgetIndex?: number;
+}
diff --git a/src/types/response.ts b/src/types/response.ts
index db2bf6e..fee9b9a 100644
--- a/src/types/response.ts
+++ b/src/types/response.ts
@@ -116,3 +116,8 @@ export interface IResponseUpload {
   message: string;
   url: string;
 }
+
+export interface IResponseCreateBudget {
+  success: boolean;
+  status: number;
+}
diff --git a/src/utils/api.ts b/src/utils/api.ts
index d24a4bc..56de730 100644
--- a/src/utils/api.ts
+++ b/src/utils/api.ts
@@ -38,7 +38,8 @@ const APIS = {
   CREATE_CONTRACTOR_PROJECT: '/contractor-project/create',
   GET_CONTRACTOR_PROJECT: '/contractor-project/:id',
   GET_CONTRACTOR_PROJECT_INVOICES: '/contractor-project/:id/invoices',
-  GET_PROJECT_INVOICES: '/project/:id/invoices'
+  GET_PROJECT_INVOICES: '/project/:id/invoices',
+  BUDGET: '/budget'
 };
 
 export default APIS;
diff --git a/src/utils/dtos/budget.dto.ts b/src/utils/dtos/budget.dto.ts
index e69e4e5..bb769b4 100644
--- a/src/utils/dtos/budget.dto.ts
+++ b/src/utils/dtos/budget.dto.ts
@@ -8,20 +8,17 @@ import BaseDto from '@/utils/dtos/base.dto';
 export type Budget = {
   creatorId: string;
   projectId: string;
-  creatorEmail: string;
-  budgetAdditionalFields: Array<string>;
+  budgetIndex: number;
   budgetCategory: string;
   budgetCode: string;
   budgetCurrentBudget: number;
+  budgetClaimedToDate: number;
   budgetCurrentClaim: number;
-  budgetDescription?: string;
-  budgetIndex: number;
   budgetOriginalBudget: number;
   budgetRevision: number;
   budgetTotalClaim: number;
-  budgetTotalClaimBeforeHoldback: number;
   budgetTotalClaimPercentage: number;
-  budgetTotalHoldback: number;
+  budgetCostToComplete: number;
   dateCreate: Date;
   dateModify: Date;
 };
@@ -29,20 +26,17 @@ export type Budget = {
 export default class BudgetDto extends BaseDto {
   creatorId: string;
   projectId: string;
-  creatorEmail: string;
-  budgetAdditionalFields: Array<string>;
   budgetCategory: string;
   budgetCode: string;
   budgetCurrentBudget: number;
+  budgetClaimedToDate: number;
   budgetCurrentClaim: number;
-  budgetDescription?: string;
   budgetIndex: number;
   budgetOriginalBudget: number;
   budgetRevision: number;
   budgetTotalClaim: number;
-  budgetTotalClaimBeforeHoldback: number;
   budgetTotalClaimPercentage: number;
-  budgetTotalHoldback: number;
+  budgetCostToComplete: number;
   dateCreate: Date;
   dateModify: Date;
 
@@ -50,19 +44,17 @@ export default class BudgetDto extends BaseDto {
     super();
     this.creatorId = '';
     this.projectId = '';
-    this.creatorEmail = '';
-    this.budgetAdditionalFields = [];
     this.budgetCategory = '';
     this.budgetCode = '';
     this.budgetCurrentBudget = 0;
+    this.budgetClaimedToDate = 0;
     this.budgetCurrentClaim = 0;
     this.budgetIndex = 0;
     this.budgetOriginalBudget = 0;
     this.budgetRevision = 0;
     this.budgetTotalClaim = 0;
-    this.budgetTotalClaimBeforeHoldback = 0;
     this.budgetTotalClaimPercentage = 0;
-    this.budgetTotalHoldback = 0;
+    this.budgetCostToComplete = 0;
     this.dateCreate = new Date();
     this.dateModify = new Date();
   }
diff --git a/src/utils/locales/en/budget.json b/src/utils/locales/en/budget.json
index 2e76b8b..548cdd7 100644
--- a/src/utils/locales/en/budget.json
+++ b/src/utils/locales/en/budget.json
@@ -13,5 +13,6 @@
   "budgetTableCostToComplete": "Cost to Complete",
   "budgetDialogAddTitle": "Add Budget",
   "budgetApiAdded": "Added budget",
-  "budgetDialogAddCodePlaceholder": "Enter project code"
+  "budgetDialogAddCodePlaceholder": "Enter project code",
+  "budgetDialogAddCategoryPlaceholder": "Select budget category"
 }
\ No newline at end of file
diff --git a/src/utils/locales/en/form.json b/src/utils/locales/en/form.json
index a71831d..31db508 100644
--- a/src/utils/locales/en/form.json
+++ b/src/utils/locales/en/form.json
@@ -1,3 +1,4 @@
 {
-  "validateNumberMessage": "Please enter number"
+  "validateNumberMessage": "Please enter number",
+  "validateIntegerNumberMessage": "Please enter an integer number"
 }
diff --git a/src/utils/services/budget.ts b/src/utils/services/budget.ts
new file mode 100644
index 0000000..87eb953
--- /dev/null
+++ b/src/utils/services/budget.ts
@@ -0,0 +1,8 @@
+import { IResponseCreateBudget } from 'types/response';
+import axios from '../axios';
+import endPoints from '../api';
+import { IRequestCreateBudget } from '@/types/request';
+
+export const createBudget = async (data: IRequestCreateBudget) => {
+  return await axios.post<IResponseCreateBudget>(endPoints.BUDGET, data);
+};

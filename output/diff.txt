title:	J2C-177: API Choose user sytem role (Builder/Contractor)
state:	OPEN
author:	huyphamnguyen
labels:	
assignees:	
reviewers:	tungphamcmvn (Requested)
projects:	
milestone:	
number:	37
url:	https://github.com/invik-33/j2c-app/pull/37
additions:	175
deletions:	10
--
J2C-177: API Choose user system role (Builder/Contractor)


diff --git a/lib/swagger/doc/user/updateRole.ts b/lib/swagger/doc/user/updateRole.ts
new file mode 100644
index 0000000..ab174f0
--- /dev/null
+++ b/lib/swagger/doc/user/updateRole.ts
@@ -0,0 +1,65 @@
+/**
+ * @swagger
+ * api/private/user/update-role/{id}:
+ *   put:
+ *     summary: Update role for generic user
+ *     tags:
+ *       - User
+ *     security:
+ *       - bearerAuth: []
+ *     parameters:
+ *       - in: path
+ *         name: id
+ *         required: true
+ *         description: User ID
+ *     requestBody:
+ *       required: true
+ *       content:
+ *         application/json:
+ *           schema:
+ *             type: object
+ *             properties:
+ *               role:
+ *                 type: string
+ *                 enum: [Builder, Contractor]
+ *                 example: Builder
+ *                 required: true
+ *     responses:
+ *       200:
+ *         content:
+ *           application/json:
+ *             schema:
+ *               $ref: '#/components/schemas/UpdateRoleSuccessResponse'
+ *       400:
+ *         content:
+ *           application/json:
+ *             schema:
+ *               $ref: '#/components/schemas/UpdateRoleErrorResponse'
+ * components:
+ *   schemas:
+ *     UpdateRoleSuccessResponse:
+ *       type: object
+ *       properties:
+ *         status:
+ *           type: number
+ *           example: 200
+ *         success:
+ *           type: boolean
+ *           example: true
+ *     UpdateRoleErrorResponse:
+ *       type: object
+ *       properties:
+ *         status:
+ *           type: number
+ *           example: 400
+ *           description: Error status code
+ *         success:
+ *           type: boolean
+ *           example: false
+ *         errors:
+ *           type: array
+ *           items:
+ *             type: string
+ *             example: User id is required.
+ */
+export {};
diff --git a/src/app/api/private/user/update-role/[id]/route.ts b/src/app/api/private/user/update-role/[id]/route.ts
new file mode 100644
index 0000000..3488fde
--- /dev/null
+++ b/src/app/api/private/user/update-role/[id]/route.ts
@@ -0,0 +1,71 @@
+import { NextRequest, NextResponse } from 'next/server';
+import MongoConnect from '@/backend/connection/mongo.connection';
+import ResponseStruct from '@/backend/structs/response.struct';
+import UserRepository from '@/backend/repositories/mongodb/user.repository';
+import UserDto from '@/utils/dtos/user.dto';
+import NotFoundException from '@/backend/exceptions/notfound.exception';
+import { RoleType, Roles } from '@/utils/enums';
+import DateCustom from '@/utils/datetime/date.custom';
+import Logger from '@/utils/logger';
+import RoleService from '@/backend/services/role.service';
+
+export async function PUT(request: NextRequest, { params }: { params: { id: string } }) {
+  const data: { role: RoleType } = await request.json();
+  const responseStruct = new ResponseStruct(true);
+
+  if (!params.id) {
+    responseStruct.setStatus(400);
+    responseStruct.pushError('User id is required.');
+
+    return NextResponse.json(responseStruct.getResponse(), { status: 400 });
+  }
+
+  if (data.role !== RoleType.BUILDER && data.role !== RoleType.CONTRACTOR) {
+    responseStruct.setStatus(400);
+    responseStruct.pushError('Allowed role are Contractor or Builder.');
+
+    return NextResponse.json(responseStruct.getResponse(), { status: 400 });
+  }
+
+  const conn = await MongoConnect();
+  const userRepository = new UserRepository(conn);
+  const roleService = new RoleService(conn);
+  try {
+    const user: UserDto = await userRepository.findUserId(params.id);
+
+    if (!user) {
+      throw new NotFoundException('User not found.');
+    }
+
+    if (!user.emailConfirmed) {
+      throw new Error('Please confirm your email to update the role');
+    }
+
+    const roleName = data.role === RoleType.BUILDER ? Roles.SYSTEM_GENERIC_BUILDER : Roles.SYSTEM_GENERIC_CONTRACTOR;
+    const detailRole = await roleService.getRoleByFields({ name: roleName });
+    if (!detailRole) {
+      throw new NotFoundException('Role not found.');
+    }
+
+    await userRepository.update(params.id, {
+      systemRole: detailRole.id,
+      dateModify: new DateCustom()
+    });
+
+    return NextResponse.json({ success: true }, { status: 200 });
+  } catch (error: any) {
+    responseStruct.setStatus(500);
+
+    if (error instanceof NotFoundException) {
+      responseStruct.setStatus(404);
+    }
+
+    responseStruct.pushError(error.message);
+
+    Logger.error(error.message, {
+      status: responseStruct.getValue('status'),
+      stack: error.stack
+    });
+    return NextResponse.json(responseStruct.getResponse(), { status: responseStruct.getValue('status') });
+  }
+}
diff --git a/src/app/api/public/auth/register/route.ts b/src/app/api/public/auth/register/route.ts
index 89f14a3..779631f 100644
--- a/src/app/api/public/auth/register/route.ts
+++ b/src/app/api/public/auth/register/route.ts
@@ -7,7 +7,7 @@ import ResponseStruct from '@/backend/structs/response.struct';
 import Logger from '@/utils/logger';
 
 export async function POST(request: NextRequest) {
-  const data: { email: string; password: string; firstName: string; lastName: string } = await request.json();
+  const data: { email: string; password: string; firstName: string; lastName: string; systemRoleId?: string } = await request.json();
 
   const conn = await MongoConnect();
   const authService = new AuthService(conn);
@@ -39,7 +39,8 @@ export async function POST(request: NextRequest) {
       false,
       UserStatus.INACTIVE,
       data.password,
-      null
+      null,
+      data.systemRoleId
     );
 
     await authService.sendEmailConfirmation(user.get('_id').valueOf(), user.get('email'), `${data.firstName} ${data.lastName}`);
diff --git a/src/backend/services/auth.service.ts b/src/backend/services/auth.service.ts
index 8e24289..15c5713 100644
--- a/src/backend/services/auth.service.ts
+++ b/src/backend/services/auth.service.ts
@@ -2,7 +2,7 @@ import UserRepository from '@/backend/repositories/mongodb/user.repository';
 import mongoose, { Mongoose } from 'mongoose';
 import UserDto from '@/utils/dtos/user.dto';
 import DateCustom from '@/utils/datetime/date.custom';
-import { UserStatus } from '@/utils/enums';
+import { Roles, UserStatus } from '@/utils/enums';
 import NotificationService from '@/backend/services/notification.service';
 import SmtpProvider from '@/backend/services/observer/providers/smtp.provider';
 import { render } from '@react-email/render';
@@ -12,14 +12,17 @@ import { NextRequest } from 'next/server';
 import { getToken } from 'next-auth/jwt';
 import UserRepositoryInterface from '@/backend/repositories/interfaces/user.repository.interface';
 import PermissionLoaderFactory from '@/backend/services/permission/factory/permission.loader.factory';
+import RoleService from './role.service';
 
 export default class AuthService {
   private confirmationEndpoint: string = 'auth/confirm-email';
   protected userRepository: UserRepositoryInterface;
+  protected roleService: RoleService;
   protected conn: Mongoose;
 
   constructor(conn: Mongoose) {
     this.userRepository = new UserRepository(conn);
+    this.roleService = new RoleService(conn);
     this.conn = conn;
   }
 
@@ -40,7 +43,8 @@ export default class AuthService {
     emailConfirmed: boolean,
     status: UserStatus,
     password: string | null = null,
-    imageUrl: string | null = null
+    imageUrl: string | null = null,
+    systemRoleId = ''
   ): Promise<mongoose.Document> {
     const userDto = new UserDto();
 
@@ -51,7 +55,13 @@ export default class AuthService {
       passwordHash = await bcrypt.hash(password, 10);
     }
     const date = new DateCustom().toISOString();
-
+    let userRoleId = systemRoleId;
+    if (systemRoleId === '') {
+      const systemGenericRole = await this.roleService.getRoleByFields({ name: Roles.SYSTEM_GENERIC });
+      if (systemGenericRole) {
+        userRoleId = systemGenericRole.id;
+      }
+    }
     userDto.setData({
       email,
       firstName,
@@ -69,7 +79,8 @@ export default class AuthService {
       selectedContractorId: null,
       selectedBuilderId: null,
       dateCreate: date,
-      dateModify: date
+      dateModify: date,
+      systemRole: userRoleId
     });
 
     return await this.userRepository.create(userDto);
diff --git a/src/backend/services/permission/fixture/j2cdev.permissions.json b/src/backend/services/permission/fixture/j2cdev.permissions.json
index 8ce1161..64b335f 100644
--- a/src/backend/services/permission/fixture/j2cdev.permissions.json
+++ b/src/backend/services/permission/fixture/j2cdev.permissions.json
@@ -10,7 +10,9 @@
       }
     ],
     "roleIds": [
-      { "roleId": "661d4d8414004d29a20e7673" }
+      { "roleId": "661d4d8414004d29a20e7673" },
+      { "roleId": "6625361cb50944b2043d5e23" },
+      { "roleId": "662536241f7230f4fbf2db0a" }
     ],
     "dateCreate": "2017-01-01T00:00:00.000Z",
     "dateModify": "2017-01-01T00:00:00.000Z",
@@ -22,8 +24,8 @@
     "description": "Update Profile Role To Generic Contractor Or Generic Builder",
     "urls": [
       {
-        "url": "/api/private/user/{id}/update-role",
-        "method": "PATCH"
+        "url": "/api/private/user/update-role/{id}",
+        "method": "PUT"
       }
     ],
     "roleIds": [
diff --git a/src/backend/services/role.service.ts b/src/backend/services/role.service.ts
index 85fbd3c..1c7e057 100644
--- a/src/backend/services/role.service.ts
+++ b/src/backend/services/role.service.ts
@@ -191,4 +191,16 @@ export default class RoleService {
       await this.roleRepository.create(role);
     }
   }
+  /** Get a role by some fields (name, id) */
+  async getRoleByFields(fields: Partial<RoleType>): Promise<(RoleType & { id: string }) | null> {
+    const role = await this.roleRepository.findOne(fields);
+    if (!role) {
+      return null;
+    }
+
+    const data = new RoleDto();
+    data.setData(role.toJSON());
+    const currentObject = data.toObject() as RoleType & { id: string };
+    return currentObject;
+  }
 }
diff --git a/src/utils/enums.ts b/src/utils/enums.ts
index 36cfd50..d2d45a5 100644
--- a/src/utils/enums.ts
+++ b/src/utils/enums.ts
@@ -41,7 +41,10 @@ export enum Roles {
   BUILDER_ACCOUNT_PAYABLE = 'Builder/Account Payable',
   CONTRACTOR_ADMIN = 'Contractor/Admin',
   CONTRACTOR_BASIC = 'Contractor/Basic',
-  CONTRACTOR_WORKER = 'Contractor/Worker'
+  CONTRACTOR_WORKER = 'Contractor/Worker',
+  SYSTEM_GENERIC = 'System/Generic',
+  SYSTEM_GENERIC_CONTRACTOR = 'System/Generic Contractor',
+  SYSTEM_GENERIC_BUILDER = 'System/Generic Builder'
 }
 
 export enum Permission {

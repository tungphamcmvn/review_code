title:	J2C-120 API for User Management - Delete/Archive
state:	MERGED
author:	MinhT191195
labels:	
assignees:	
reviewers:	
projects:	
milestone:	
number:	7
url:	https://github.com/invik-33/j2c-app/pull/7
additions:	267
deletions:	11
--



diff --git a/lib/swagger/doc/user/archive.ts b/lib/swagger/doc/user/archive.ts
new file mode 100644
index 0000000..188c83f
--- /dev/null
+++ b/lib/swagger/doc/user/archive.ts
@@ -0,0 +1,63 @@
+/**
+ * @swagger
+ * /user/{id}/archive:
+ *   patch:
+ *     summary: Archive a user account which cannot logged-in anymore
+ *     tags:
+ *       - User
+ *     security:
+ *       - bearerAuth: []
+ *     parameters:
+ *       - in: path
+ *         name: id
+ *         required: true
+ *         description: User ID
+ *     responses:
+ *       200:
+ *         content:
+ *           application/json:
+ *             schema:
+ *               $ref: '#/components/schemas/SuccessResponse'
+ *       400:
+ *         content:
+ *           application/json:
+ *             schema:
+ *               $ref: '#/components/schemas/ErrorResponse'
+ *       404:
+ *         content:
+ *           application/json:
+ *             schema:
+ *               $ref: '#/components/schemas/ErrorResponse'
+ *       500:
+ *         content:
+ *           application/json:
+ *             schema:
+ *               $ref: '#/components/schemas/ErrorResponse'
+ * components:
+ *   schemas:
+ *     SuccessResponse:
+ *       type: object
+ *       properties:
+ *         status:
+ *           type: number
+ *           example: 200
+ *         success:
+ *           type: boolean
+ *           example: true
+ *     ErrorResponse:
+ *       type: object
+ *       properties:
+ *         status:
+ *           type: number
+ *           example: 400
+ *           description: Error status code
+ *         success:
+ *           type: boolean
+ *           example: false
+ *         errors:
+ *           type: array
+ *           items:
+ *             type: string
+ *             example: User id is required.
+ */
+export {};
diff --git a/lib/swagger/doc/user/bulkControl.ts b/lib/swagger/doc/user/bulkControl.ts
index 16f4159..beff072 100644
--- a/lib/swagger/doc/user/bulkControl.ts
+++ b/lib/swagger/doc/user/bulkControl.ts
@@ -19,7 +19,7 @@
  *                 required: true
  *               action:
  *                 type: string
- *                 enum: [activate, deactivate, delete]
+ *                 enum: [activate, deactivate, delete, archive]
  *                 required: true
  *     responses:
  *       200:
diff --git a/lib/swagger/doc/user/delete.ts b/lib/swagger/doc/user/delete.ts
new file mode 100644
index 0000000..b0fd9e6
--- /dev/null
+++ b/lib/swagger/doc/user/delete.ts
@@ -0,0 +1,63 @@
+/**
+ * @swagger
+ * /user/{id}/delete:
+ *   delete:
+ *     summary: Delete a user
+ *     tags:
+ *       - User
+ *     security:
+ *       - bearerAuth: []
+ *     parameters:
+ *       - in: path
+ *         name: id
+ *         required: true
+ *         description: User ID
+ *     responses:
+ *       200:
+ *         content:
+ *           application/json:
+ *             schema:
+ *               $ref: '#/components/schemas/SuccessResponse'
+ *       400:
+ *         content:
+ *           application/json:
+ *             schema:
+ *               $ref: '#/components/schemas/ErrorResponse'
+ *       404:
+ *         content:
+ *           application/json:
+ *             schema:
+ *               $ref: '#/components/schemas/ErrorResponse'
+ *       500:
+ *         content:
+ *           application/json:
+ *             schema:
+ *               $ref: '#/components/schemas/ErrorResponse'
+ * components:
+ *   schemas:
+ *     SuccessResponse:
+ *       type: object
+ *       properties:
+ *         status:
+ *           type: number
+ *           example: 200
+ *         success:
+ *           type: boolean
+ *           example: true
+ *     ErrorResponse:
+ *       type: object
+ *       properties:
+ *         status:
+ *           type: number
+ *           example: 400
+ *           description: Error status code
+ *         success:
+ *           type: boolean
+ *           example: false
+ *         errors:
+ *           type: array
+ *           items:
+ *             type: string
+ *             example: User id is required.
+ */
+export {};
diff --git a/src/app/api/user/[id]/archive/route.ts b/src/app/api/user/[id]/archive/route.ts
new file mode 100644
index 0000000..ae50de6
--- /dev/null
+++ b/src/app/api/user/[id]/archive/route.ts
@@ -0,0 +1,51 @@
+import { NextRequest, NextResponse } from 'next/server';
+import MongoConnect from '@/backend/connection/mongo.connection';
+import ResponseStruct from '@/backend/structs/response.struct';
+import UserRepository from '@/backend/repositories/mongodb/user.repository';
+import UserService from '@/backend/services/user.service';
+import { Actions } from '@/utils/enums';
+import NotFoundException from '@/backend/exceptions/notfound.exception';
+import { headers } from 'next/headers';
+import { decode, JWT } from 'next-auth/jwt';
+
+export async function PATCH(_: NextRequest, { params }: { params: { id: string } }) {
+  const token = headers().get('authorization')?.split(' ')[1];
+  const dataDecode: JWT | null = await decode({
+    token: token as string,
+    secret: (process.env.NEXTAUTH_SECRET as string) || ''
+  });
+  const responseStruct = new ResponseStruct(true);
+
+  if (!params.id) {
+    responseStruct.setStatus(400);
+    responseStruct.pushError('User id is required.');
+
+    return NextResponse.json(responseStruct.getResponse(), { status: 400 });
+  }
+
+  if (dataDecode && dataDecode.id === params.id) {
+    responseStruct.setStatus(400);
+    responseStruct.pushError('You cannot lock yourself.');
+
+    return NextResponse.json(responseStruct.getResponse(), { status: 400 });
+  }
+
+  const conn = await MongoConnect();
+  const userRepository = new UserRepository(conn);
+  const userService = new UserService(userRepository);
+  try {
+    await userService.singleUpdateOrDelete(params.id, Actions.ARCHIVE);
+
+    responseStruct.setStatus(200);
+  } catch (error: NotFoundException | any) {
+    responseStruct.setStatus(500);
+
+    if (error instanceof NotFoundException) {
+      responseStruct.setStatus(404);
+    }
+
+    responseStruct.pushError(error.message);
+  }
+
+  return NextResponse.json(responseStruct.getResponse(), { status: responseStruct.getValue('status') });
+}
diff --git a/src/app/api/user/[id]/delete/route.ts b/src/app/api/user/[id]/delete/route.ts
new file mode 100644
index 0000000..4831775
--- /dev/null
+++ b/src/app/api/user/[id]/delete/route.ts
@@ -0,0 +1,51 @@
+import { NextRequest, NextResponse } from 'next/server';
+import MongoConnect from '@/backend/connection/mongo.connection';
+import ResponseStruct from '@/backend/structs/response.struct';
+import UserRepository from '@/backend/repositories/mongodb/user.repository';
+import UserService from '@/backend/services/user.service';
+import { Actions } from '@/utils/enums';
+import NotFoundException from '@/backend/exceptions/notfound.exception';
+import { headers } from 'next/headers';
+import { decode, JWT}  from 'next-auth/jwt';
+
+export async function DELETE(_: NextRequest, { params }: { params: { id: string } }) {
+  const token = headers().get('authorization')?.split(' ')[1];
+  const dataDecode: JWT | null = await decode({
+    token: token as string,
+    secret: (process.env.NEXTAUTH_SECRET as string) || ''
+  });
+  const responseStruct = new ResponseStruct(true);
+
+  if (!params.id) {
+    responseStruct.setStatus(400);
+    responseStruct.pushError('User id is required.');
+
+    return NextResponse.json(responseStruct.getResponse(), { status: 400 });
+  }
+
+  if (dataDecode && dataDecode.id === params.id) {
+    responseStruct.setStatus(400);
+    responseStruct.pushError('You cannot delete yourself.');
+
+    return NextResponse.json(responseStruct.getResponse(), { status: 400 });
+  }
+
+  const conn = await MongoConnect();
+  const userRepository = new UserRepository(conn);
+  const userService = new UserService(userRepository);
+  try {
+    await userService.singleUpdateOrDelete(params.id, Actions.DELETE);
+
+    responseStruct.setStatus(200);
+  } catch (error: NotFoundException | any) {
+    responseStruct.setStatus(500);
+
+    if (error instanceof NotFoundException) {
+      responseStruct.setStatus(404);
+    }
+
+    responseStruct.pushError(error.message);
+  }
+
+  return NextResponse.json(responseStruct.getResponse(), { status: responseStruct.getValue('status') });
+}
diff --git a/src/backend/services/user.service.ts b/src/backend/services/user.service.ts
index ccdb1dd..df13299 100644
--- a/src/backend/services/user.service.ts
+++ b/src/backend/services/user.service.ts
@@ -1,10 +1,11 @@
 import UserRepositoryInterface from '@/backend/repositories/interfaces/user.repository.interface';
 import UserDto from '@/utils/dtos/user.dto';
 import mongoose from 'mongoose';
-import { BulkAction, UserStatus } from '@/utils/enums';
+import { Actions, UserStatus } from '@/utils/enums';
 import PaginationStruct from '@/backend/structs/pagination.struct';
 import { User as UserType } from '@/utils/dtos/user.dto';
 import IdsNotFoundException from '@/backend/exceptions/idsnotfound.exception';
+import NotFoundException from "@/backend/exceptions/notfound.exception";
 
 export default class UserService {
   protected userRepository: UserRepositoryInterface;
@@ -134,7 +135,7 @@ export default class UserService {
     });
   }
 
-  async bulkUpdateOrDelete(ids: string[], action: BulkAction): Promise<void> {
+  async bulkUpdateOrDelete(ids: string[], action: Actions): Promise<void> {
     const existingUsers = await this.userRepository.find({ _id: { $in: ids } });
 
     if (existingUsers.length !== ids.length) {
@@ -144,15 +145,41 @@ export default class UserService {
     }
 
     switch (action) {
-      case BulkAction.DELETE:
+      case Actions.DELETE:
         await this.userRepository.deleteMany({ _id: { $in: ids } });
         break;
-      case BulkAction.ACTIVATE:
+      case Actions.ACTIVATE:
         await this.userRepository.updateMany({ _id: { $in: ids } }, { status: UserStatus.ACTIVE });
         break;
-      case BulkAction.DEACTIVATE:
+      case Actions.DEACTIVATE:
         await this.userRepository.updateMany({ _id: { $in: ids } }, { status: UserStatus.INACTIVE });
         break;
+      case Actions.ARCHIVE:
+        await this.userRepository.updateMany({ _id: { $in: ids } }, { status: UserStatus.LOCKED });
+        break;
+    }
+  }
+
+  async singleUpdateOrDelete(id: string, action: Actions): Promise<void> {
+    const existingUser = await this.userRepository.findOne({ _id: id });
+
+    if (!existingUser) {
+      throw new NotFoundException(`User with id ${id} does not exist`);
+    }
+
+    switch (action) {
+      case Actions.DELETE:
+        await this.userRepository.delete(id);
+        break;
+      case Actions.ACTIVATE:
+        await this.userRepository.update(id, { status: UserStatus.ACTIVE });
+        break;
+      case Actions.DEACTIVATE:
+        await this.userRepository.update(id, { status: UserStatus.INACTIVE });
+        break;
+      case Actions.ARCHIVE:
+        await this.userRepository.update(id, { status: UserStatus.LOCKED });
+        break;
     }
   }
 }
diff --git a/src/backend/validator/user-bulk-action.validator.ts b/src/backend/validator/user-bulk-action.validator.ts
index eeef54f..5ba55dc 100644
--- a/src/backend/validator/user-bulk-action.validator.ts
+++ b/src/backend/validator/user-bulk-action.validator.ts
@@ -1,10 +1,10 @@
 import BaseValidator from '@/backend/validator/base.validator';
 import { array, mixed, string } from 'yup';
-import { BulkAction } from '@/utils/enums';
+import { Actions } from '@/utils/enums';
 
 export default class UserBulkActionValidator extends BaseValidator {
   private readonly objectIdValidatorRegex = /^[0-9a-fA-F]{24}$/;
-  constructor(data: { ids: string[]; action: BulkAction; currentUserId: string }) {
+  constructor(data: { ids: string[]; action: Actions; currentUserId: string }) {
     super();
 
     this.data = data;
@@ -19,7 +19,7 @@ export default class UserBulkActionValidator extends BaseValidator {
 
     this.rules = [
       { ids: array().of(eachIdRule).required() },
-      { action: mixed().required().oneOf([BulkAction.ACTIVATE, BulkAction.DEACTIVATE, BulkAction.DELETE]) },
+      { action: mixed().required().oneOf([Actions.ACTIVATE, Actions.DEACTIVATE, Actions.DELETE, Actions.ARCHIVE]) },
       { currentUserId: eachIdRule }
     ];
 
diff --git a/src/utils/enums.ts b/src/utils/enums.ts
index 851565c..dd850eb 100644
--- a/src/utils/enums.ts
+++ b/src/utils/enums.ts
@@ -27,8 +27,9 @@ export enum AuthProvider {
   REGISTER = 'register'
 }
 
-export enum BulkAction {
+export enum Actions {
   DELETE = 'delete',
   ACTIVATE = 'activate',
-  DEACTIVATE = 'deactivate'
+  DEACTIVATE = 'deactivate',
+  ARCHIVE = 'archive'
 }

title:	Update endpoint builder project
state:	OPEN
author:	huyphamnguyen
labels:	
assignees:	
reviewers:	tungphamcmvn (Requested)
projects:	
milestone:	
number:	24
url:	https://github.com/invik-33/j2c-app/pull/24
additions:	808
deletions:	893
--
- Update endpoint: budget, builder, project
- Remove unused endpoint
- Add folder '.next' to exclude tsconfig


diff --git a/lib/swagger/doc/budget/delete.ts b/lib/swagger/doc/budget/delete.ts
index dba34d2..0ecc066 100644
--- a/lib/swagger/doc/budget/delete.ts
+++ b/lib/swagger/doc/budget/delete.ts
@@ -1,48 +1,48 @@
 // @ts-nocheck
 /**
-* @swagger
-* /api/private/budget/{id}:
-*   delete:
-*     tags:
-*       - Budget
-*     description: Delete a budget
-*     summary: Delete a budget
-*     security:
-*       - bearerAuth: []
-*     parameters:
-*       - in: path
-*         name: id
-*         schema:
-*           type: string
-*         required: true
-*         description: The Budget's id
-*     requestBody:
-*       required: false
-*       content:
-*         application/json:
-*     responses:
-*       200:
-*         description: Budget deleted
-*         content:
-*           application/json:
-*             schema:
-*               type: object
-*               properties:
-*                 success:
-*                   type: boolean
-*                   description: Budget deleted
-*       400:
-*         description: Bad request
-*         content:
-*           application/json:
-*             schema:
-*               type: object
-*               properties:
-*                 errors:
-*                   type: array
-*                   items:
-*                     type: string
-* @param request
-* @constructor
-*/
+ * @swagger
+ * /api/private/budget/delete/{id}:
+ *   delete:
+ *     tags:
+ *       - Budget
+ *     description: Delete a budget
+ *     summary: Delete a budget
+ *     security:
+ *       - bearerAuth: []
+ *     parameters:
+ *       - in: path
+ *         name: id
+ *         schema:
+ *           type: string
+ *         required: true
+ *         description: The Budget's id
+ *     requestBody:
+ *       required: false
+ *       content:
+ *         application/json:
+ *     responses:
+ *       200:
+ *         description: Budget deleted
+ *         content:
+ *           application/json:
+ *             schema:
+ *               type: object
+ *               properties:
+ *                 success:
+ *                   type: boolean
+ *                   description: Budget deleted
+ *       400:
+ *         description: Bad request
+ *         content:
+ *           application/json:
+ *             schema:
+ *               type: object
+ *               properties:
+ *                 errors:
+ *                   type: array
+ *                   items:
+ *                     type: string
+ * @param request
+ * @constructor
+ */
 export {};
diff --git a/lib/swagger/doc/budget/get.ts b/lib/swagger/doc/budget/get.ts
index cc6c674..041ca9b 100644
--- a/lib/swagger/doc/budget/get.ts
+++ b/lib/swagger/doc/budget/get.ts
@@ -1,6 +1,6 @@
 /**
 @swagger
-* /api/private/budget:
+* /api/private/budget/list:
 *   get:
 *     summary: Get list budgets
 *     description: Get list budgets
diff --git a/lib/swagger/doc/budget/post.ts b/lib/swagger/doc/budget/post.ts
index fd97576..91d22f6 100644
--- a/lib/swagger/doc/budget/post.ts
+++ b/lib/swagger/doc/budget/post.ts
@@ -1,6 +1,6 @@
 /**
 @swagger
-* /api/private/budget:
+* /api/private/budget/create:
 *   post:
 *     tags:
 *       - Budget
diff --git a/lib/swagger/doc/builder/delete.ts b/lib/swagger/doc/builder/delete.ts
index 1cab29e..b205eb6 100644
--- a/lib/swagger/doc/builder/delete.ts
+++ b/lib/swagger/doc/builder/delete.ts
@@ -1,48 +1,48 @@
 // @ts-nocheck
 /**
-* @swagger
-* /api/private/builder/{id}:
-*   delete:
-*     tags:
-*       - Builder
-*     description: Delete a builder
-*     summary: Delete a builder
-*     security:
-*       - bearerAuth: []
-*     parameters:
-*       - in: path
-*         name: id
-*         schema:
-*           type: string
-*         required: true
-*         description: The Builder's id
-*     requestBody:
-*       required: false
-*       content:
-*         application/json:
-*     responses:
-*       200:
-*         description: Builder deleted
-*         content:
-*           application/json:
-*             schema:
-*               type: object
-*               properties:
-*                 success:
-*                   type: boolean
-*                   description: Builder deleted
-*       400:
-*         description: Bad request
-*         content:
-*           application/json:
-*             schema:
-*               type: object
-*               properties:
-*                 errors:
-*                   type: array
-*                   items:
-*                     type: string
-* @param request
-* @constructor
-*/
+ * @swagger
+ * /api/private/builder/delete/{id}:
+ *   delete:
+ *     tags:
+ *       - Builder
+ *     description: Delete a builder
+ *     summary: Delete a builder
+ *     security:
+ *       - bearerAuth: []
+ *     parameters:
+ *       - in: path
+ *         name: id
+ *         schema:
+ *           type: string
+ *         required: true
+ *         description: The Builder's id
+ *     requestBody:
+ *       required: false
+ *       content:
+ *         application/json:
+ *     responses:
+ *       200:
+ *         description: Builder deleted
+ *         content:
+ *           application/json:
+ *             schema:
+ *               type: object
+ *               properties:
+ *                 success:
+ *                   type: boolean
+ *                   description: Builder deleted
+ *       400:
+ *         description: Bad request
+ *         content:
+ *           application/json:
+ *             schema:
+ *               type: object
+ *               properties:
+ *                 errors:
+ *                   type: array
+ *                   items:
+ *                     type: string
+ * @param request
+ * @constructor
+ */
 export {};
diff --git a/lib/swagger/doc/builder/get.ts b/lib/swagger/doc/builder/get.ts
index 78639d2..4ade9a3 100644
--- a/lib/swagger/doc/builder/get.ts
+++ b/lib/swagger/doc/builder/get.ts
@@ -1,6 +1,6 @@
 /**
 @swagger
-* /api/private/builder:
+* /api/private/builder/list:
 *   get:
 *     summary: Get list builders
 *     description: Get list builders
diff --git a/lib/swagger/doc/builder/getDetail.ts b/lib/swagger/doc/builder/getDetail.ts
index a713151..e1795bd 100644
--- a/lib/swagger/doc/builder/getDetail.ts
+++ b/lib/swagger/doc/builder/getDetail.ts
@@ -1,80 +1,80 @@
 /**
-* @swagger
-* /api/private/builder/{id}:
-*   get:
-*     tags:
-*       - Builder
-*     description: Get a builder
-*     summary: Get a builder
-*     security:
-*       - bearerAuth: []
-*     parameters:
-*       - in: path
-*         name: id
-*         schema:
-*           type: string
-*         required: true
-*         description: The Builder's id
-*     responses:
-*       200:
-*         description: Builder updated
-*         content:
-*           application/json:
-*             schema:
-*               $ref: '#/components/schemas/BuilderResponse'
-*       400:
-*         description: Bad request
-*         content:
-*           application/json:
-*             schema:
-*               type: object
-*               properties:
-*                 errors:
-*                   type: array
-*                   items:
-*                     type: string
-* components:
-*   schemas:
-*     BuilderResponse:
-*       type: object
-*       properties:
-*         success:
-*           type: boolean
-*           description: Builder updated
-*         builder:
-*           type: object
-*           properties:
-*             id:
-*               type: string      
-*             builderName:
-*               type: string
-*             category:
-*               type: string
-*             address:
-*               type: string
-*             completionStatus:
-*               type: string
-*             imageUrl:
-*               type: string
-*             date:
-*               type: string
-*             dateCreate:
-*               type: string
-*             dateModify:
-*               type: string
-*             generalContractor:
-*               type: string
-*             budgetSeperatorComma:
-*               type: string
-*             budgetSeperatorSemiColon:
-*               type: string
-*             budgetSeperatorTab:
-*               type: string
-*             creatorId:
-*               type: string
-*             creatorEmail:
-*               type: string
-* @param request
-* @constructor
-*/
+ * @swagger
+ * /api/private/builder/{id}:
+ *   get:
+ *     tags:
+ *       - Builder
+ *     description: Get a builder
+ *     summary: Get a builder
+ *     security:
+ *       - bearerAuth: []
+ *     parameters:
+ *       - in: path
+ *         name: id
+ *         schema:
+ *           type: string
+ *         required: true
+ *         description: The Builder's id
+ *     responses:
+ *       200:
+ *         description: Builder updated
+ *         content:
+ *           application/json:
+ *             schema:
+ *               $ref: '#/components/schemas/BuilderResponse'
+ *       400:
+ *         description: Bad request
+ *         content:
+ *           application/json:
+ *             schema:
+ *               type: object
+ *               properties:
+ *                 errors:
+ *                   type: array
+ *                   items:
+ *                     type: string
+ * components:
+ *   schemas:
+ *     BuilderResponse:
+ *       type: object
+ *       properties:
+ *         success:
+ *           type: boolean
+ *           description: Builder updated
+ *         builder:
+ *           type: object
+ *           properties:
+ *             id:
+ *               type: string
+ *             builderName:
+ *               type: string
+ *             category:
+ *               type: string
+ *             address:
+ *               type: string
+ *             completionStatus:
+ *               type: string
+ *             imageUrl:
+ *               type: string
+ *             date:
+ *               type: string
+ *             dateCreate:
+ *               type: string
+ *             dateModify:
+ *               type: string
+ *             generalContractor:
+ *               type: string
+ *             budgetSeperatorComma:
+ *               type: string
+ *             budgetSeperatorSemiColon:
+ *               type: string
+ *             budgetSeperatorTab:
+ *               type: string
+ *             creatorId:
+ *               type: string
+ *             creatorEmail:
+ *               type: string
+ * @param request
+ * @constructor
+ */
 export {};
diff --git a/lib/swagger/doc/builder/post.ts b/lib/swagger/doc/builder/post.ts
index 5a66263..50c4e40 100644
--- a/lib/swagger/doc/builder/post.ts
+++ b/lib/swagger/doc/builder/post.ts
@@ -1,6 +1,6 @@
 /**
 @swagger
-* /api/private/builder:
+* /api/private/builder/create:
 *   post:
 *     tags:
 *       - Builder
diff --git a/lib/swagger/doc/builder/put.ts b/lib/swagger/doc/builder/put.ts
index 0cbaa76..c0e4883 100644
--- a/lib/swagger/doc/builder/put.ts
+++ b/lib/swagger/doc/builder/put.ts
@@ -1,89 +1,89 @@
 /**
-* @swagger
-* /api/private/builder/{id}:
-*   put:
-*     tags:
-*       - Builder
-*     description: Edit a builder
-*     summary: Edit a builder
-*     security:
-*       - bearerAuth: []
-*     parameters:
-*       - in: path
-*         name: id
-*         schema:
-*           type: string
-*         required: true
-*         description: The Builder's id
-*     requestBody:
-*       required: false
-*       content:
-*         multipart/form-data:
-*           schema:
-*             $ref: '#/components/schemas/BuilderEdited'
-*     responses:
-*       200:
-*         description: Builder updated
-*         content:
-*           application/json:
-*             schema:
-*               $ref: '#/components/schemas/BuilderResponse'
-*       400:
-*         description: Bad request
-*         content:
-*           application/json:
-*             schema:
-*               type: object
-*               properties:
-*                 errors:
-*                   type: array
-*                   items:
-*                     type: string
-* components:
-*   schemas:
-*     BuilderEdited:
-*       type: object
-*       properties:
-*         builderName:
-*           type: string
-*           format: builderName
-*           description: Builder's name
-*           example: Horizon Development Group
-*           required: true
-*         category:
-*           type: string
-*           format: category
-*           description: Builder's category
-*           example: Residential
-*           required: true
-*         address:
-*           type: string
-*           format: address
-*           description: Builder's address
-*           example: Anytown, CA 90210
-*           required: true
-*         completionStatus:
-*           type: string
-*           format: completionStatus
-*           description: Builder's status
-*           example: Active
-*           required: true
-*         imageFolderName:
-*           type: string
-*           format: folderName
-*           description: Folder Name
-*           example: Builder
-*           required: true
-*         image:
-*           type: string
-*           format: binary
-*     BuilderResponse:
-*       type: object
-*       properties:
-*         success:
-*           type: boolean
-*           description: Builder updated
-* @param request
-* @constructor
-*/
+ * @swagger
+ * /api/private/builder/update/{id}:
+ *   put:
+ *     tags:
+ *       - Builder
+ *     description: Edit a builder
+ *     summary: Edit a builder
+ *     security:
+ *       - bearerAuth: []
+ *     parameters:
+ *       - in: path
+ *         name: id
+ *         schema:
+ *           type: string
+ *         required: true
+ *         description: The Builder's id
+ *     requestBody:
+ *       required: false
+ *       content:
+ *         multipart/form-data:
+ *           schema:
+ *             $ref: '#/components/schemas/BuilderEdited'
+ *     responses:
+ *       200:
+ *         description: Builder updated
+ *         content:
+ *           application/json:
+ *             schema:
+ *               $ref: '#/components/schemas/BuilderResponse'
+ *       400:
+ *         description: Bad request
+ *         content:
+ *           application/json:
+ *             schema:
+ *               type: object
+ *               properties:
+ *                 errors:
+ *                   type: array
+ *                   items:
+ *                     type: string
+ * components:
+ *   schemas:
+ *     BuilderEdited:
+ *       type: object
+ *       properties:
+ *         builderName:
+ *           type: string
+ *           format: builderName
+ *           description: Builder's name
+ *           example: Horizon Development Group
+ *           required: true
+ *         category:
+ *           type: string
+ *           format: category
+ *           description: Builder's category
+ *           example: Residential
+ *           required: true
+ *         address:
+ *           type: string
+ *           format: address
+ *           description: Builder's address
+ *           example: Anytown, CA 90210
+ *           required: true
+ *         completionStatus:
+ *           type: string
+ *           format: completionStatus
+ *           description: Builder's status
+ *           example: Active
+ *           required: true
+ *         imageFolderName:
+ *           type: string
+ *           format: folderName
+ *           description: Folder Name
+ *           example: Builder
+ *           required: true
+ *         image:
+ *           type: string
+ *           format: binary
+ *     BuilderResponse:
+ *       type: object
+ *       properties:
+ *         success:
+ *           type: boolean
+ *           description: Builder updated
+ * @param request
+ * @constructor
+ */
 export {};
diff --git a/lib/swagger/doc/project/delete.ts b/lib/swagger/doc/project/delete.ts
index da0ec8e..bf15a7e 100644
--- a/lib/swagger/doc/project/delete.ts
+++ b/lib/swagger/doc/project/delete.ts
@@ -1,48 +1,48 @@
 // @ts-nocheck
 /**
-* @swagger
-* /api/private/project/{id}:
-*   delete:
-*     tags:
-*       - Project
-*     description: Delete a project
-*     summary: Delete a project
-*     security:
-*       - bearerAuth: []
-*     parameters:
-*       - in: path
-*         name: id
-*         schema:
-*           type: string
-*         required: true
-*         description: The Project's id
-*     requestBody:
-*       required: false
-*       content:
-*         application/json:
-*     responses:
-*       200:
-*         description: Project deleted
-*         content:
-*           application/json:
-*             schema:
-*               type: object
-*               properties:
-*                 success:
-*                   type: boolean
-*                   description: Project deleted
-*       400:
-*         description: Bad request
-*         content:
-*           application/json:
-*             schema:
-*               type: object
-*               properties:
-*                 errors:
-*                   type: array
-*                   items:
-*                     type: string
-* @param request
-* @constructor
-*/
+ * @swagger
+ * /api/private/project/delete/{id}:
+ *   delete:
+ *     tags:
+ *       - Project
+ *     description: Delete a project
+ *     summary: Delete a project
+ *     security:
+ *       - bearerAuth: []
+ *     parameters:
+ *       - in: path
+ *         name: id
+ *         schema:
+ *           type: string
+ *         required: true
+ *         description: The Project's id
+ *     requestBody:
+ *       required: false
+ *       content:
+ *         application/json:
+ *     responses:
+ *       200:
+ *         description: Project deleted
+ *         content:
+ *           application/json:
+ *             schema:
+ *               type: object
+ *               properties:
+ *                 success:
+ *                   type: boolean
+ *                   description: Project deleted
+ *       400:
+ *         description: Bad request
+ *         content:
+ *           application/json:
+ *             schema:
+ *               type: object
+ *               properties:
+ *                 errors:
+ *                   type: array
+ *                   items:
+ *                     type: string
+ * @param request
+ * @constructor
+ */
 export {};
diff --git a/lib/swagger/doc/project/get.ts b/lib/swagger/doc/project/get.ts
index f96ed08..6b6ed05 100644
--- a/lib/swagger/doc/project/get.ts
+++ b/lib/swagger/doc/project/get.ts
@@ -1,6 +1,6 @@
 /**
 @swagger
-* /api/private/project:
+* /api/private/project/list:
 *   get:
 *     summary: Get list projects
 *     description: Get list projects
diff --git a/lib/swagger/doc/project/getDetail.ts b/lib/swagger/doc/project/getDetail.ts
index 270f1f2..2fa41cd 100644
--- a/lib/swagger/doc/project/getDetail.ts
+++ b/lib/swagger/doc/project/getDetail.ts
@@ -1,47 +1,47 @@
 /**
-* @swagger
-* /api/private/project/{id}:
-*   get:
-*     tags:
-*       - Project
-*     description: Get a project
-*     summary: Get a project
-*     security:
-*       - bearerAuth: []
-*     parameters:
-*       - in: path
-*         name: id
-*         schema:
-*           type: string
-*         required: true
-*         description: The Project's id
-*     responses:
-*       200:
-*         description: Project updated
-*         content:
-*           application/json:
-*             schema:
-*               $ref: '#/components/schemas/ProjectResponse'
-*       400:
-*         description: Bad request
-*         content:
-*           application/json:
-*             schema:
-*               type: object
-*               properties:
-*                 errors:
-*                   type: array
-*                   items:
-*                     type: string
-* components:
-*   schemas:
-*     ProjectResponse:
-*       type: object
-*       properties:
-*         success:
-*           type: boolean
-*           description: Project updated
-* @param request
-* @constructor
-*/
+ * @swagger
+ * /api/private/project/{id}:
+ *   get:
+ *     tags:
+ *       - Project
+ *     description: Get a project
+ *     summary: Get a project
+ *     security:
+ *       - bearerAuth: []
+ *     parameters:
+ *       - in: path
+ *         name: id
+ *         schema:
+ *           type: string
+ *         required: true
+ *         description: The Project's id
+ *     responses:
+ *       200:
+ *         description: Project updated
+ *         content:
+ *           application/json:
+ *             schema:
+ *               $ref: '#/components/schemas/ProjectResponse'
+ *       400:
+ *         description: Bad request
+ *         content:
+ *           application/json:
+ *             schema:
+ *               type: object
+ *               properties:
+ *                 errors:
+ *                   type: array
+ *                   items:
+ *                     type: string
+ * components:
+ *   schemas:
+ *     ProjectResponse:
+ *       type: object
+ *       properties:
+ *         success:
+ *           type: boolean
+ *           description: Project updated
+ * @param request
+ * @constructor
+ */
 export {};
diff --git a/lib/swagger/doc/project/post.ts b/lib/swagger/doc/project/post.ts
index 236178e..131555a 100644
--- a/lib/swagger/doc/project/post.ts
+++ b/lib/swagger/doc/project/post.ts
@@ -1,6 +1,6 @@
 /**
 * @swagger
-* /api/private/project:
+* /api/private/project/create:
 *   post:
 *     tags:
 *       - Project
diff --git a/lib/swagger/doc/project/put.ts b/lib/swagger/doc/project/put.ts
index 767d71c..d3a2076 100644
--- a/lib/swagger/doc/project/put.ts
+++ b/lib/swagger/doc/project/put.ts
@@ -1,83 +1,83 @@
 /**
-* @swagger
-* /api/private/project/{id}:
-*   put:
-*     tags:
-*       - Project
-*     description: Edit a project
-*     summary: Edit a project
-*     security:
-*       - bearerAuth: []
-*     parameters:
-*       - in: path
-*         name: id
-*         schema:
-*           type: string
-*         required: true
-*         description: The Project's id
-*     requestBody:
-*       required: false
-*       content:
-*         multipart/form-data:
-*           schema:
-*             $ref: '#/components/schemas/ProjectEdited'
-*     responses:
-*       200:
-*         description: Project updated
-*         content:
-*           application/json:
-*             schema:
-*               $ref: '#/components/schemas/ProjectResponse'
-*       400:
-*         description: Bad request
-*         content:
-*           application/json:
-*             schema:
-*               type: object
-*               properties:
-*                 errors:
-*                   type: array
-*                   items:
-*                     type: string
-* components:
-*   schemas:
-*     ProjectEdited:
-*       type: object
-*       properties:
-*         projectName:
-*           type: string
-*           format: projectName
-*           description: Project's name
-*           example: Horizon Development Group
-*           required: true
-*         startDate:
-*           type: string
-*           format: category
-*           description: Project's start date
-*           example: Residential
-*           required: true
-*         address:
-*           type: string
-*           format: address
-*           description: Project's address
-*           example: Anytown, CA 90210
-*           required: true
-*         currentClaimNumber:
-*           type: string
-*           format: currentClaimNumber
-*           description: Project's current claim number
-*           example: Active
-*           required: true
-*         image:
-*           type: string
-*           format: binary
-*     ProjectResponse:
-*       type: object
-*       properties:
-*         success:
-*           type: boolean
-*           description: Project updated
-* @param request
-* @constructor
-*/
+ * @swagger
+ * /api/private/project/update/{id}:
+ *   put:
+ *     tags:
+ *       - Project
+ *     description: Edit a project
+ *     summary: Edit a project
+ *     security:
+ *       - bearerAuth: []
+ *     parameters:
+ *       - in: path
+ *         name: id
+ *         schema:
+ *           type: string
+ *         required: true
+ *         description: The Project's id
+ *     requestBody:
+ *       required: false
+ *       content:
+ *         multipart/form-data:
+ *           schema:
+ *             $ref: '#/components/schemas/ProjectEdited'
+ *     responses:
+ *       200:
+ *         description: Project updated
+ *         content:
+ *           application/json:
+ *             schema:
+ *               $ref: '#/components/schemas/ProjectResponse'
+ *       400:
+ *         description: Bad request
+ *         content:
+ *           application/json:
+ *             schema:
+ *               type: object
+ *               properties:
+ *                 errors:
+ *                   type: array
+ *                   items:
+ *                     type: string
+ * components:
+ *   schemas:
+ *     ProjectEdited:
+ *       type: object
+ *       properties:
+ *         projectName:
+ *           type: string
+ *           format: projectName
+ *           description: Project's name
+ *           example: Horizon Development Group
+ *           required: true
+ *         startDate:
+ *           type: string
+ *           format: category
+ *           description: Project's start date
+ *           example: Residential
+ *           required: true
+ *         address:
+ *           type: string
+ *           format: address
+ *           description: Project's address
+ *           example: Anytown, CA 90210
+ *           required: true
+ *         currentClaimNumber:
+ *           type: string
+ *           format: currentClaimNumber
+ *           description: Project's current claim number
+ *           example: Active
+ *           required: true
+ *         image:
+ *           type: string
+ *           format: binary
+ *     ProjectResponse:
+ *       type: object
+ *       properties:
+ *         success:
+ *           type: boolean
+ *           description: Project updated
+ * @param request
+ * @constructor
+ */
 export {};
diff --git a/lib/swagger/doc/user/archive.ts b/lib/swagger/doc/user/archive.ts
index b06ecbb..536c40d 100644
--- a/lib/swagger/doc/user/archive.ts
+++ b/lib/swagger/doc/user/archive.ts
@@ -1,6 +1,6 @@
 /**
  * @swagger
- * /api/private/user/{id}/archive:
+ * /api/private/user/archive/{id}:
  *   patch:
  *     summary: Archive a user account which cannot logged-in anymore
  *     tags:
diff --git a/lib/swagger/doc/user/delete.ts b/lib/swagger/doc/user/delete.ts
index 4636a09..a30f76f 100644
--- a/lib/swagger/doc/user/delete.ts
+++ b/lib/swagger/doc/user/delete.ts
@@ -1,6 +1,6 @@
 /**
  * @swagger
- * api/private/user/{id}/delete:
+ * api/private/user/delete/{id}:
  *   delete:
  *     summary: Delete a user
  *     tags:
diff --git a/lib/swagger/doc/user/get.ts b/lib/swagger/doc/user/get.ts
index 95567af..a2f805f 100644
--- a/lib/swagger/doc/user/get.ts
+++ b/lib/swagger/doc/user/get.ts
@@ -1,6 +1,6 @@
 /**
  * @swagger
- * /api/private/user:
+ * /api/private/user/list:
  *   get:
  *     summary: Get list of users
  *     description: Get list of users
diff --git a/lib/swagger/doc/user/updateStatus.ts b/lib/swagger/doc/user/updateStatus.ts
index 3980ede..99d51c6 100644
--- a/lib/swagger/doc/user/updateStatus.ts
+++ b/lib/swagger/doc/user/updateStatus.ts
@@ -1,6 +1,6 @@
 /**
  * @swagger
- * api/private/user/{id}/status:
+ * api/private/user/status/{id}:
  *   patch:
  *     summary: Update user status to activate or deactivate
  *     tags:
diff --git a/src/app/api/private/budget/create/route.ts b/src/app/api/private/budget/create/route.ts
new file mode 100644
index 0000000..ba62631
--- /dev/null
+++ b/src/app/api/private/budget/create/route.ts
@@ -0,0 +1,49 @@
+import MongoConnect from '@/backend/connection/mongo.connection';
+import { NextRequest, NextResponse } from 'next/server';
+import AuthService from '@/backend/services/auth.service';
+import BudgetService from '@/backend/services/budget.service';
+import BudgetValidator from '@/backend/validator/budget.validator';
+import { Budget } from '@/utils/dtos/budget.dto';
+import mongoose from 'mongoose';
+import NotFoundException from '@/backend/exceptions/notfound.exception';
+import Logger from '@/utils/logger';
+
+export async function POST(request: NextRequest) {
+  try {
+    const data = await request.json();
+    const conn = await MongoConnect();
+    const budgetService = new BudgetService(conn);
+    const authService = new AuthService(conn);
+    const budgetValidator = new BudgetValidator(data, conn);
+    await budgetValidator.validate();
+
+    if (budgetValidator.getErrors().length > 0) {
+      return NextResponse.json({ errors: budgetValidator.getErrors() }, { status: 400 });
+    }
+
+    const lastBudget: mongoose.Document<Budget>[] = await budgetService.findLastBudget();
+    let lastIndex = 1;
+    if (!!lastBudget && lastBudget.length > 0) {
+      const lastItem: Budget = lastBudget[0].toObject();
+      lastIndex = lastItem.budgetIndex + 1;
+    }
+
+    const currentUser = await authService.getUserByToken(request);
+    if (!currentUser) {
+      throw new NotFoundException('User not found');
+    }
+    const dataWithNewIndex = {
+      ...data,
+      budgetIndex: lastIndex
+    };
+    await budgetService.addProjectBudget(dataWithNewIndex, currentUser);
+    return NextResponse.json({ success: true }, { status: 200 });
+  } catch (error: any) {
+    Logger.error(error.message, {
+      status: 500,
+      stack: error.stack
+    });
+
+    return NextResponse.json({ errors: [error.message] }, { status: 400 });
+  }
+}
diff --git a/src/app/api/private/budget/[id]/route.ts b/src/app/api/private/budget/delete/[id]/route.ts
similarity index 100%
rename from src/app/api/private/budget/[id]/route.ts
rename to src/app/api/private/budget/delete/[id]/route.ts
diff --git a/src/app/api/private/budget/route.ts b/src/app/api/private/budget/list/route.ts
similarity index 55%
rename from src/app/api/private/budget/route.ts
rename to src/app/api/private/budget/list/route.ts
index 079b4ee..c9fef4e 100644
--- a/src/app/api/private/budget/route.ts
+++ b/src/app/api/private/budget/list/route.ts
@@ -1,57 +1,13 @@
 import MongoConnect from '@/backend/connection/mongo.connection';
 import { NextRequest, NextResponse } from 'next/server';
-import AuthService from '@/backend/services/auth.service';
 import BudgetService from '@/backend/services/budget.service';
-import BudgetValidator from '@/backend/validator/budget.validator';
-import { Budget } from '@/utils/dtos/budget.dto';
-import mongoose from 'mongoose';
 import NotFoundException from '@/backend/exceptions/notfound.exception';
 import ProjectService from '@/backend/services/project.service';
 import ResponseStruct from '@/backend/structs/response.struct';
-import { getListingQuery } from '../listing';
+import { getListingQuery } from '../../listing';
 import ObjectIdValidator from '@/backend/validator/objectId.validator';
 import Logger from '@/utils/logger';
 
-export async function POST(request: NextRequest) {
-  try {
-    const data = await request.json();
-    const conn = await MongoConnect();
-    const budgetService = new BudgetService(conn);
-    const authService = new AuthService(conn);
-    const budgetValidator = new BudgetValidator(data, conn);
-    await budgetValidator.validate();
-
-    if (budgetValidator.getErrors().length > 0) {
-      return NextResponse.json({ errors: budgetValidator.getErrors() }, { status: 400 });
-    }
-
-    const lastBudget: mongoose.Document<Budget>[] = await budgetService.findLastBudget();
-    let lastIndex = 1;
-    if (!!lastBudget && lastBudget.length > 0) {
-      const lastItem: Budget = lastBudget[0].toObject();
-      lastIndex = lastItem.budgetIndex + 1;
-    }
-
-    const currentUser = await authService.getUserByToken(request);
-    if (!currentUser) {
-      throw new NotFoundException('User not found');
-    }
-    const dataWithNewIndex = {
-      ...data,
-      budgetIndex: lastIndex
-    };
-    await budgetService.addProjectBudget(dataWithNewIndex, currentUser);
-    return NextResponse.json({ success: true }, { status: 200 });
-  } catch (error: any) {
-    Logger.error(error.message, {
-      status: 500,
-      stack: error.stack
-    });
-
-    return NextResponse.json({ errors: [error.message] }, { status: 400 });
-  }
-}
-
 export async function GET(request: NextRequest) {
   const responseStruct = new ResponseStruct(true);
   try {
diff --git a/src/app/api/private/builder/[id]/route.ts b/src/app/api/private/builder/[id]/route.ts
index 58b69a5..69ad06d 100644
--- a/src/app/api/private/builder/[id]/route.ts
+++ b/src/app/api/private/builder/[id]/route.ts
@@ -1,10 +1,6 @@
 import MongoConnect from '@/backend/connection/mongo.connection';
-import BuilderValidator from '@/backend/validator/builder.validator';
 import { NextRequest, NextResponse } from 'next/server';
 import BuilderService from '@/backend/services/builder.service';
-import { parsePayloadBuilderToCreateData } from '@/utils/helper';
-import ObjectIdValidator from '@/backend/validator/objectId.validator';
-import StorageFactory from '@/backend/services/storage/storage.factory';
 import Logger from '@/utils/logger';
 
 export async function GET(_: NextRequest, { params }: { params: { id: string } }) {
@@ -30,74 +26,3 @@ export async function GET(_: NextRequest, { params }: { params: { id: string } }
     return NextResponse.json({ errors: [error] }, { status: 400 });
   }
 }
-
-export async function PUT(request: NextRequest, { params }: { params: { id: string } }) {
-  const { id } = params;
-  const objectIdValidator = new ObjectIdValidator({ id });
-  await objectIdValidator.validate();
-
-  if (objectIdValidator.getErrors().length > 0) {
-    return NextResponse.json({ errors: ['Invalid builder id'] }, { status: 400 });
-  }
-  const formData = await request.formData();
-
-  const conn = await MongoConnect();
-  const builderService = new BuilderService(conn);
-
-  try {
-    const data = parsePayloadBuilderToCreateData(formData);
-    const builderValidator = new BuilderValidator(data);
-    await builderValidator.validate();
-
-    if (builderValidator.getErrors().length > 0) {
-      return NextResponse.json({ errors: builderValidator.getErrors() }, { status: 400 });
-    }
-
-    await builderService.updateBuilder(id, formData);
-    return NextResponse.json({ success: true }, { status: 200 });
-  } catch (error: any) {
-    Logger.error(error.message, {
-      status: 500,
-      stack: error.stack
-    });
-
-    return NextResponse.json({ errors: [error] }, { status: 400 });
-  }
-}
-
-export async function DELETE(_: NextRequest, { params }: { params: { id: string } }) {
-  const { id } = params;
-  const objectIdValidator = new ObjectIdValidator({ id });
-  await objectIdValidator.validate();
-
-  if (objectIdValidator.getErrors().length > 0) {
-    return NextResponse.json({ errors: ['Invalid builder id'] }, { status: 400 });
-  }
-
-  const conn = await MongoConnect();
-  const builderService = new BuilderService(conn);
-
-  try {
-    const builder = await builderService.getBuilder(id);
-    if (!builder) {
-      return NextResponse.json({ errors: ['Builder not found'] }, { status: 400 });
-    }
-
-    await builderService.deleteBuilder(id);
-
-    const imageUrl = builder.get('imageUrl') as string;
-    const storageFactory = new StorageFactory('s3');
-
-    if (!!imageUrl.trim()) {
-      await storageFactory.getStorage().removeFile(imageUrl);
-    }
-    return NextResponse.json({ success: true }, { status: 200 });
-  } catch (error: any) {
-    Logger.error(error.message, {
-      status: 500,
-      stack: error.stack
-    });
-
-    return NextResponse.json({ errors: [error] }, { status: 400 });
-  }
-}
diff --git a/src/app/api/private/builder/route.ts b/src/app/api/private/builder/create/route.ts
similarity index 57%
rename from src/app/api/private/builder/route.ts
rename to src/app/api/private/builder/create/route.ts
index d3e1d18..8ce2439 100644
--- a/src/app/api/private/builder/route.ts
+++ b/src/app/api/private/builder/create/route.ts
@@ -4,8 +4,6 @@ import { NextRequest, NextResponse } from 'next/server';
 import BuilderService from '@/backend/services/builder.service';
 import AuthService from '@/backend/services/auth.service';
 import { parsePayloadBuilderToCreateData } from '@/utils/helper';
-import ResponseStruct from '@/backend/structs/response.struct';
-import { getListingQuery } from '@/app/api/private/listing';
 import Logger from '@/utils/logger';
 
 export async function POST(request: NextRequest) {
@@ -38,31 +36,3 @@ export async function POST(request: NextRequest) {
     return NextResponse.json({ errors: [error.message] }, { status: 400 });
   }
 }
-
-export async function GET(request: NextRequest) {
-  const conn = await MongoConnect();
-  const responseStruct = new ResponseStruct(true);
-
-  try {
-    const { limit: limitValue, page: pageValue, order: orderValue, search } = getListingQuery(request);
-    const builderService = new BuilderService(conn);
-
-    const data = await builderService.listBuilders(limitValue, pageValue, orderValue, search);
-    responseStruct.setData({
-      meta: data.pagination,
-      data: data.collection
-    });
-    responseStruct.setStatus(200);
-  } catch (error: any) {
-    responseStruct.pushError(error.message);
-    responseStruct.setStatus(500);
-
-    Logger.error(error.message, {
-      status: responseStruct.getValue('status'),
-      stack: error.stack
-    });
-
-    return NextResponse.json(responseStruct.getResponse(), { status: 500 });
-  }
-  return NextResponse.json(responseStruct.getResponse(), { status: 200 });
-}
diff --git a/src/app/api/private/builder/delete/[id]/route.ts b/src/app/api/private/builder/delete/[id]/route.ts
new file mode 100644
index 0000000..66d2852
--- /dev/null
+++ b/src/app/api/private/builder/delete/[id]/route.ts
@@ -0,0 +1,43 @@
+import MongoConnect from '@/backend/connection/mongo.connection';
+import { NextRequest, NextResponse } from 'next/server';
+import BuilderService from '@/backend/services/builder.service';
+import ObjectIdValidator from '@/backend/validator/objectId.validator';
+import StorageFactory from '@/backend/services/storage/storage.factory';
+import Logger from '@/utils/logger';
+
+export async function DELETE(_: NextRequest, { params }: { params: { id: string } }) {
+  const { id } = params;
+  const objectIdValidator = new ObjectIdValidator({ id });
+  await objectIdValidator.validate();
+
+  if (objectIdValidator.getErrors().length > 0) {
+    return NextResponse.json({ errors: ['Invalid builder id'] }, { status: 400 });
+  }
+
+  const conn = await MongoConnect();
+  const builderService = new BuilderService(conn);
+
+  try {
+    const builder = await builderService.getBuilder(id);
+    if (!builder) {
+      return NextResponse.json({ errors: ['Builder not found'] }, { status: 400 });
+    }
+
+    await builderService.deleteBuilder(id);
+
+    const imageUrl = builder.get('imageUrl') as string;
+    const storageFactory = new StorageFactory('s3');
+
+    if (!!imageUrl.trim()) {
+      await storageFactory.getStorage().removeFile(imageUrl);
+    }
+    return NextResponse.json({ success: true }, { status: 200 });
+  } catch (error: any) {
+    Logger.error(error.message, {
+      status: 500,
+      stack: error.stack
+    });
+
+    return NextResponse.json({ errors: [error] }, { status: 400 });
+  }
+}
diff --git a/src/app/api/private/builder/list/route.ts b/src/app/api/private/builder/list/route.ts
new file mode 100644
index 0000000..667b7d9
--- /dev/null
+++ b/src/app/api/private/builder/list/route.ts
@@ -0,0 +1,34 @@
+import MongoConnect from '@/backend/connection/mongo.connection';
+import { NextRequest, NextResponse } from 'next/server';
+import BuilderService from '@/backend/services/builder.service';
+import ResponseStruct from '@/backend/structs/response.struct';
+import { getListingQuery } from '@/app/api/private/listing';
+import Logger from '@/utils/logger';
+
+export async function GET(request: NextRequest) {
+  const conn = await MongoConnect();
+  const responseStruct = new ResponseStruct(true);
+
+  try {
+    const { limit: limitValue, page: pageValue, order: orderValue, search } = getListingQuery(request);
+    const builderService = new BuilderService(conn);
+
+    const data = await builderService.listBuilders(limitValue, pageValue, orderValue, search);
+    responseStruct.setData({
+      meta: data.pagination,
+      data: data.collection
+    });
+    responseStruct.setStatus(200);
+  } catch (error: any) {
+    responseStruct.pushError(error.message);
+    responseStruct.setStatus(500);
+
+    Logger.error(error.message, {
+      status: responseStruct.getValue('status'),
+      stack: error.stack
+    });
+
+    return NextResponse.json(responseStruct.getResponse(), { status: 500 });
+  }
+  return NextResponse.json(responseStruct.getResponse(), { status: 200 });
+}
diff --git a/src/app/api/private/builder/update/[id]/route.ts b/src/app/api/private/builder/update/[id]/route.ts
new file mode 100644
index 0000000..68f526b
--- /dev/null
+++ b/src/app/api/private/builder/update/[id]/route.ts
@@ -0,0 +1,41 @@
+import MongoConnect from '@/backend/connection/mongo.connection';
+import BuilderValidator from '@/backend/validator/builder.validator';
+import { NextRequest, NextResponse } from 'next/server';
+import BuilderService from '@/backend/services/builder.service';
+import { parsePayloadBuilderToCreateData } from '@/utils/helper';
+import ObjectIdValidator from '@/backend/validator/objectId.validator';
+import Logger from '@/utils/logger';
+
+export async function PUT(request: NextRequest, { params }: { params: { id: string } }) {
+  const { id } = params;
+  const objectIdValidator = new ObjectIdValidator({ id });
+  await objectIdValidator.validate();
+
+  if (objectIdValidator.getErrors().length > 0) {
+    return NextResponse.json({ errors: ['Invalid builder id'] }, { status: 400 });
+  }
+  const formData = await request.formData();
+
+  const conn = await MongoConnect();
+  const builderService = new BuilderService(conn);
+
+  try {
+    const data = parsePayloadBuilderToCreateData(formData);
+    const builderValidator = new BuilderValidator(data);
+    await builderValidator.validate();
+
+    if (builderValidator.getErrors().length > 0) {
+      return NextResponse.json({ errors: builderValidator.getErrors() }, { status: 400 });
+    }
+
+    await builderService.updateBuilder(id, formData);
+    return NextResponse.json({ success: true }, { status: 200 });
+  } catch (error: any) {
+    Logger.error(error.message, {
+      status: 500,
+      stack: error.stack
+    });
+
+    return NextResponse.json({ errors: [error] }, { status: 400 });
+  }
+}
diff --git a/src/app/api/private/project/[id]/route.ts b/src/app/api/private/project/[id]/route.ts
index 660dba1..c45fe41 100644
--- a/src/app/api/private/project/[id]/route.ts
+++ b/src/app/api/private/project/[id]/route.ts
@@ -1,10 +1,6 @@
 import MongoConnect from '@/backend/connection/mongo.connection';
 import { NextRequest, NextResponse } from 'next/server';
-import { parsePayloadProjectToCreateData } from '@/utils/helper';
-import ObjectIdValidator from '@/backend/validator/objectId.validator';
-import StorageFactory from '@/backend/services/storage/storage.factory';
 import ProjectService from '@/backend/services/project.service';
-import ProjectValidator from '@/backend/validator/project.validator';
 
 export async function GET(_: NextRequest, { params }: { params: { id: string } }) {
   const { id } = params;
@@ -24,64 +20,3 @@ export async function GET(_: NextRequest, { params }: { params: { id: string } }
     return NextResponse.json({ errors: [error] }, { status: 400 });
   }
 }
-
-export async function PUT(request: NextRequest, { params }: { params: { id: string } }) {
-  const { id } = params;
-  const objectIdValidator = new ObjectIdValidator({ id });
-  await objectIdValidator.validate();
-
-  if (objectIdValidator.getErrors().length > 0) {
-    return NextResponse.json({ errors: ['Invalid project id'] }, { status: 400 });
-  }
-  const formData = await request.formData();
-
-  const conn = await MongoConnect();
-  const projectService = new ProjectService(conn);
-
-  try {
-    const data = parsePayloadProjectToCreateData(formData);
-    const projectValidator = new ProjectValidator(data);
-    await projectValidator.validate();
-
-    if (projectValidator.getErrors().length > 0) {
-      return NextResponse.json({ errors: projectValidator.getErrors() }, { status: 400 });
-    }
-
-    await projectService.updateProject(id, formData);
-    return NextResponse.json({ success: true }, { status: 200 });
-  } catch (error) {
-    return NextResponse.json({ errors: [error] }, { status: 400 });
-  }
-}
-
-export async function DELETE(_: NextRequest, { params }: { params: { id: string } }) {
-  const { id } = params;
-  const objectIdValidator = new ObjectIdValidator({ id });
-  await objectIdValidator.validate();
-
-  if (objectIdValidator.getErrors().length > 0) {
-    return NextResponse.json({ errors: ['Invalid project id'] }, { status: 400 });
-  }
-
-  const conn = await MongoConnect();
-  const projectService = new ProjectService(conn);
-
-  try {
-    const project = await projectService.getProject(id);
-    if (!project) {
-      return NextResponse.json({ errors: ['Project not found'] }, { status: 400 });
-    }
-
-    await projectService.deleteProject(id);
-
-    const imageUrl = project.imageUrl as string;
-    const storageFactory = new StorageFactory('s3');
-
-    if (!!imageUrl.trim()) {
-      await storageFactory.getStorage().removeFile(imageUrl);
-    }
-    return NextResponse.json({ success: true }, { status: 200 });
-  } catch (error) {
-    return NextResponse.json({ errors: [error] }, { status: 400 });
-  }
-}
diff --git a/src/app/api/private/project/route.ts b/src/app/api/private/project/create/route.ts
similarity index 58%
rename from src/app/api/private/project/route.ts
rename to src/app/api/private/project/create/route.ts
index ec8e3e5..2e2475c 100644
--- a/src/app/api/private/project/route.ts
+++ b/src/app/api/private/project/create/route.ts
@@ -2,10 +2,8 @@ import MongoConnect from '@/backend/connection/mongo.connection';
 import { NextRequest, NextResponse } from 'next/server';
 import AuthService from '@/backend/services/auth.service';
 import { parsePayloadProjectToCreateData } from '@/utils/helper';
-import ResponseStruct from '@/backend/structs/response.struct';
 import ProjectService from '@/backend/services/project.service';
 import ProjectValidator from '@/backend/validator/project.validator';
-import { getListingQuery } from '../listing';
 
 export async function POST(request: NextRequest) {
   const formData = await request.formData();
@@ -32,25 +30,3 @@ export async function POST(request: NextRequest) {
     return NextResponse.json({ errors: [error.message] }, { status: 400 });
   }
 }
-export async function GET(request: NextRequest) {
-  const conn = await MongoConnect();
-  const responseStruct = new ResponseStruct(true);
-
-  try {
-    const { limit: limitValue, page: pageValue, order: orderValue, search } = getListingQuery(request);
-    const projectService = new ProjectService(conn);
-
-    const data = await projectService.listProjects(limitValue, pageValue, orderValue, search);
-    responseStruct.setData({
-      meta: data.pagination,
-      data: data.collection
-    });
-    responseStruct.setStatus(200);
-  } catch (error: any) {
-    responseStruct.pushError(error.message);
-    responseStruct.setStatus(500);
-
-    return NextResponse.json(responseStruct.getResponse(), { status: 500 });
-  }
-  return NextResponse.json(responseStruct.getResponse(), { status: 200 });
-}
diff --git a/src/app/api/private/project/delete/[id]/route.ts b/src/app/api/private/project/delete/[id]/route.ts
new file mode 100644
index 0000000..d1fea15
--- /dev/null
+++ b/src/app/api/private/project/delete/[id]/route.ts
@@ -0,0 +1,37 @@
+import MongoConnect from '@/backend/connection/mongo.connection';
+import { NextRequest, NextResponse } from 'next/server';
+import ObjectIdValidator from '@/backend/validator/objectId.validator';
+import StorageFactory from '@/backend/services/storage/storage.factory';
+import ProjectService from '@/backend/services/project.service';
+
+export async function DELETE(_: NextRequest, { params }: { params: { id: string } }) {
+  const { id } = params;
+  const objectIdValidator = new ObjectIdValidator({ id });
+  await objectIdValidator.validate();
+
+  if (objectIdValidator.getErrors().length > 0) {
+    return NextResponse.json({ errors: ['Invalid project id'] }, { status: 400 });
+  }
+
+  const conn = await MongoConnect();
+  const projectService = new ProjectService(conn);
+
+  try {
+    const project = await projectService.getProject(id);
+    if (!project) {
+      return NextResponse.json({ errors: ['Project not found'] }, { status: 400 });
+    }
+
+    await projectService.deleteProject(id);
+
+    const imageUrl = project.imageUrl as string;
+    const storageFactory = new StorageFactory('s3');
+
+    if (!!imageUrl.trim()) {
+      await storageFactory.getStorage().removeFile(imageUrl);
+    }
+    return NextResponse.json({ success: true }, { status: 200 });
+  } catch (error) {
+    return NextResponse.json({ errors: [error] }, { status: 400 });
+  }
+}
diff --git a/src/app/api/private/project/list/route.ts b/src/app/api/private/project/list/route.ts
index 35279e3..132ff78 100644
--- a/src/app/api/private/project/list/route.ts
+++ b/src/app/api/private/project/list/route.ts
@@ -1,107 +1,28 @@
-import { NextResponse } from 'next/server';
+import MongoConnect from '@/backend/connection/mongo.connection';
+import { NextRequest, NextResponse } from 'next/server';
+import ResponseStruct from '@/backend/structs/response.struct';
+import ProjectService from '@/backend/services/project.service';
+import { getListingQuery } from '../../listing';
 
-export async function GET() {
-  const projects = [
-    {
-      id: 'P001',
-      projectName: "Stargazer's Nook",
-      startDate: '2024-02-01T14:42:43.530+00:00',
-      address: 'Joshua Tree, CA 92252',
-      amount: 18000,
-      currentClaimNumber: 90000,
-      imageUrl: ''
-    },
-    {
-      id: 'P002',
-      projectName: 'Sunlit Sanctuary',
-      startDate: '2024-01-10T14:42:43.530+00:00',
-      address: '123 Main St, Anytown, CA 90210',
-      amount: 500000,
-      currentClaimNumber: 250000,
-      imageUrl: ''
-    },
-    {
-      id: 'P003',
-      projectName: 'The Zen Garden',
-      startDate: '2024-01-15T14:42:43.530+00:00',
-      address: 'Zenbrook, CA 90210',
-      amount: 250000,
-      currentClaimNumber: 125000,
-      imageUrl: ''
-    },
-    {
-      id: 'P004',
-      projectName: "Writer's Retreat",
-      startDate: '2024-01-28T14:42:43.530+00:00',
-      address: 'Carmel-by-the-Sea, CA 93923',
-      amount: 320000,
-      currentClaimNumber: 160000,
-      imageUrl: ''
-    },
-    {
-      id: 'P005',
-      projectName: 'The Music Room',
-      startDate: '2024-01-20T14:42:43.530+00:00',
-      address: 'New Orleans, LA 70113',
-      amount: 220000,
-      currentClaimNumber: 65000,
-      imageUrl: ''
-    },
-    {
-      id: 'P006',
-      projectName: 'The Game Room',
-      startDate: '2024-01-10T14:42:43.530+00:00',
-      address: '123 Main St, Anytown, CA 90210',
-      amount: 500000,
-      currentClaimNumber: 250000,
-      imageUrl: ''
-    },
-    {
-      id: 'P007',
-      projectName: "Writer's Retreat",
-      startDate: '2024-01-28T14:42:43.530+00:00',
-      address: 'Carmel-by-the-Sea, CA 93923',
-      amount: 320000,
-      currentClaimNumber: 160000,
-      imageUrl: ''
-    },
-    {
-      id: 'P008',
-      projectName: 'Hilltop Hideaway',
-      startDate: '2024-01-10T14:42:43.530+00:00',
-      address: 'Palm Springs, CA 92262',
-      amount: 500000,
-      currentClaimNumber: 160000,
-      imageUrl: ''
-    },
-    {
-      id: 'P009',
-      projectName: 'Project Listing',
-      startDate: '2024-01-10T14:42:43.530+00:00',
-      address: 'Palm Springs, CA 92262',
-      amount: 500000,
-      currentClaimNumber: 160000,
-      imageUrl: ''
-    },
-    {
-      id: 'P010',
-      projectName: 'The Music Room',
-      startDate: '2024-01-20T14:42:43.530+00:00',
-      address: 'Palm Springs, CA 92262',
-      amount: 500000,
-      currentClaimNumber: 160000,
-      imageUrl: ''
-    },
-    {
-      id: 'P011',
-      projectName: 'The Game Room',
-      startDate: '2024-01-20T14:42:43.530+00:00',
-      address: 'Palm Springs, CA 92262',
-      amount: 500000,
-      currentClaimNumber: 160000,
-      imageUrl: ''
-    }
-  ];
+export async function GET(request: NextRequest) {
+  const conn = await MongoConnect();
+  const responseStruct = new ResponseStruct(true);
 
-  return NextResponse.json({ projects, totalItems: projects.length }, { status: 200 });
+  try {
+    const { limit: limitValue, page: pageValue, order: orderValue, search } = getListingQuery(request);
+    const projectService = new ProjectService(conn);
+
+    const data = await projectService.listProjects(limitValue, pageValue, orderValue, search);
+    responseStruct.setData({
+      meta: data.pagination,
+      data: data.collection
+    });
+    responseStruct.setStatus(200);
+  } catch (error: any) {
+    responseStruct.pushError(error.message);
+    responseStruct.setStatus(500);
+
+    return NextResponse.json(responseStruct.getResponse(), { status: 500 });
+  }
+  return NextResponse.json(responseStruct.getResponse(), { status: 200 });
 }
diff --git a/src/app/api/private/project/update/[id]/route.ts b/src/app/api/private/project/update/[id]/route.ts
new file mode 100644
index 0000000..f330512
--- /dev/null
+++ b/src/app/api/private/project/update/[id]/route.ts
@@ -0,0 +1,35 @@
+import MongoConnect from '@/backend/connection/mongo.connection';
+import { NextRequest, NextResponse } from 'next/server';
+import ObjectIdValidator from '@/backend/validator/objectId.validator';
+import ProjectService from '@/backend/services/project.service';
+import { parsePayloadProjectToCreateData } from '@/utils/helper';
+import ProjectValidator from '@/backend/validator/project.validator';
+
+export async function PUT(request: NextRequest, { params }: { params: { id: string } }) {
+  const { id } = params;
+  const objectIdValidator = new ObjectIdValidator({ id });
+  await objectIdValidator.validate();
+
+  if (objectIdValidator.getErrors().length > 0) {
+    return NextResponse.json({ errors: ['Invalid project id'] }, { status: 400 });
+  }
+  const formData = await request.formData();
+
+  const conn = await MongoConnect();
+  const projectService = new ProjectService(conn);
+
+  try {
+    const data = parsePayloadProjectToCreateData(formData);
+    const projectValidator = new ProjectValidator(data);
+    await projectValidator.validate();
+
+    if (projectValidator.getErrors().length > 0) {
+      return NextResponse.json({ errors: projectValidator.getErrors() }, { status: 400 });
+    }
+
+    await projectService.updateProject(id, formData);
+    return NextResponse.json({ success: true }, { status: 200 });
+  } catch (error) {
+    return NextResponse.json({ errors: [error] }, { status: 400 });
+  }
+}
diff --git a/src/app/api/private/user/[id]/delete/route.ts b/src/app/api/private/user/[id]/delete/route.ts
deleted file mode 100644
index acb3169..0000000
--- a/src/app/api/private/user/[id]/delete/route.ts
+++ /dev/null
@@ -1,57 +0,0 @@
-import { NextRequest, NextResponse } from 'next/server';
-import MongoConnect from '@/backend/connection/mongo.connection';
-import ResponseStruct from '@/backend/structs/response.struct';
-import UserRepository from '@/backend/repositories/mongodb/user.repository';
-import UserService from '@/backend/services/user.service';
-import { Actions } from '@/utils/enums';
-import NotFoundException from '@/backend/exceptions/notfound.exception';
-import { headers } from 'next/headers';
-import { decode, JWT } from 'next-auth/jwt';
-import Logger from '@/utils/logger';
-
-export async function DELETE(_: NextRequest, { params }: { params: { id: string } }) {
-  const token = headers().get('authorization')?.split(' ')[1];
-  const dataDecode: JWT | null = await decode({
-    token: token as string,
-    secret: (process.env.NEXTAUTH_SECRET as string) || ''
-  });
-  const responseStruct = new ResponseStruct(true);
-
-  if (!params.id) {
-    responseStruct.setStatus(400);
-    responseStruct.pushError('User id is required.');
-
-    return NextResponse.json(responseStruct.getResponse(), { status: 400 });
-  }
-
-  if (dataDecode && dataDecode.id === params.id) {
-    responseStruct.setStatus(400);
-    responseStruct.pushError('You cannot delete yourself.');
-
-    return NextResponse.json(responseStruct.getResponse(), { status: 400 });
-  }
-
-  const conn = await MongoConnect();
-  const userRepository = new UserRepository(conn);
-  const userService = new UserService(userRepository);
-  try {
-    await userService.singleUpdateOrDelete(params.id, Actions.DELETE);
-
-    responseStruct.setStatus(200);
-  } catch (error: NotFoundException | any) {
-    responseStruct.setStatus(500);
-
-    if (error instanceof NotFoundException) {
-      responseStruct.setStatus(404);
-    }
-
-    responseStruct.pushError(error.message);
-
-    Logger.error(error.message, {
-      status: responseStruct.getValue('status'),
-      stack: error.stack
-    });
-  }
-
-  return NextResponse.json(responseStruct.getResponse(), { status: responseStruct.getValue('status') });
-}
diff --git a/src/app/api/private/user/[id]/archive/route.ts b/src/app/api/private/user/archive/[id]/route.ts
similarity index 100%
rename from src/app/api/private/user/[id]/archive/route.ts
rename to src/app/api/private/user/archive/[id]/route.ts
diff --git a/src/app/api/private/user/delete/[id]/route.ts b/src/app/api/private/user/delete/[id]/route.ts
index 6d0a8ab..acb3169 100644
--- a/src/app/api/private/user/delete/[id]/route.ts
+++ b/src/app/api/private/user/delete/[id]/route.ts
@@ -1,7 +1,57 @@
 import { NextRequest, NextResponse } from 'next/server';
+import MongoConnect from '@/backend/connection/mongo.connection';
+import ResponseStruct from '@/backend/structs/response.struct';
+import UserRepository from '@/backend/repositories/mongodb/user.repository';
+import UserService from '@/backend/services/user.service';
+import { Actions } from '@/utils/enums';
+import NotFoundException from '@/backend/exceptions/notfound.exception';
+import { headers } from 'next/headers';
+import { decode, JWT } from 'next-auth/jwt';
+import Logger from '@/utils/logger';
 
-export async function DELETE(request: NextRequest, { params }: { params: { id: string } }) {
-  const { id } = params;
+export async function DELETE(_: NextRequest, { params }: { params: { id: string } }) {
+  const token = headers().get('authorization')?.split(' ')[1];
+  const dataDecode: JWT | null = await decode({
+    token: token as string,
+    secret: (process.env.NEXTAUTH_SECRET as string) || ''
+  });
+  const responseStruct = new ResponseStruct(true);
 
-  return NextResponse.json({ success: { id } }, { status: 200 });
+  if (!params.id) {
+    responseStruct.setStatus(400);
+    responseStruct.pushError('User id is required.');
+
+    return NextResponse.json(responseStruct.getResponse(), { status: 400 });
+  }
+
+  if (dataDecode && dataDecode.id === params.id) {
+    responseStruct.setStatus(400);
+    responseStruct.pushError('You cannot delete yourself.');
+
+    return NextResponse.json(responseStruct.getResponse(), { status: 400 });
+  }
+
+  const conn = await MongoConnect();
+  const userRepository = new UserRepository(conn);
+  const userService = new UserService(userRepository);
+  try {
+    await userService.singleUpdateOrDelete(params.id, Actions.DELETE);
+
+    responseStruct.setStatus(200);
+  } catch (error: NotFoundException | any) {
+    responseStruct.setStatus(500);
+
+    if (error instanceof NotFoundException) {
+      responseStruct.setStatus(404);
+    }
+
+    responseStruct.pushError(error.message);
+
+    Logger.error(error.message, {
+      status: responseStruct.getValue('status'),
+      stack: error.stack
+    });
+  }
+
+  return NextResponse.json(responseStruct.getResponse(), { status: responseStruct.getValue('status') });
 }
diff --git a/src/app/api/private/user/[id]/status/route.ts b/src/app/api/private/user/status/[id]/route.ts
similarity index 100%
rename from src/app/api/private/user/[id]/status/route.ts
rename to src/app/api/private/user/status/[id]/route.ts
diff --git a/src/app/api/private/user/update/[id]/route.ts b/src/app/api/private/user/update/[id]/route.ts
deleted file mode 100644
index a175c03..0000000
--- a/src/app/api/private/user/update/[id]/route.ts
+++ /dev/null
@@ -1,19 +0,0 @@
-import { NextRequest, NextResponse } from 'next/server';
-
-type RequestData = {
-  contractorName?: string;
-  category?: string;
-  address?: string;
-  completionStatus?: string;
-  image?: File;
-};
-type RequestType = {
-  id: string;
-  data: RequestData;
-};
-export async function PUT(request: NextRequest, { params }: { params: { id: string } }) {
-  const { id } = params;
-  const data: RequestType = await request.json();
-
-  return NextResponse.json({ success: { id, data } }, { status: 200 });
-}
diff --git a/src/utils/api.ts b/src/utils/api.ts
index cf49c43..23aee55 100644
--- a/src/utils/api.ts
+++ b/src/utils/api.ts
@@ -1,44 +1,62 @@
 const APIS = {
-  GET_BUILDER_PROJECTS: 'private/projects',
+  /** AUTH */
+  REGISTER: 'public/auth/register',
+  SEND_CODE: 'public/auth/code/send',
+  VERIFY_CODE: 'public/auth/code/verify',
+  RESET_PASSWORD: 'public/auth/reset-password',
+
+  /** BUDGET */
+  GET_BUDGETS: 'private/budget/list',
+  CREATE_BUDGET: 'private/budget/create',
+  DELETE_BUDGET: 'private/budget/delete',
+
+  /** BUILDER */
+  GET_BUILDERS: 'private/builder/list',
+  CREATE_BUILDER: 'private/builder/create',
+  UPDATE_BUILDER: 'private/builder/update',
+  DELETE_BUILDER: 'private/builder/delete',
+
+  /** CONTRACTOR */
   GET_CONTRACTORS: 'private/contractor/list',
   CREATE_CONTRACTOR: 'private/contractor/create',
   UPDATE_CONTRACTOR: 'private/contractor/update',
   DELETE_CONTRACTOR: 'private/contractor/delete',
-  UPSERT_PROJECT: 'private/projects/upsert',
-  PROJECT_ADD_BUDGET: 'private/projects/add-budget',
-  BUILDERS: 'private/builder',
+
+  /** PROJECT */
+  GET_PROJECTS: 'private/project/list',
+  CREATE_PROJECT: 'private/project/create',
+  GET_PROJECT_DETAIL: 'private/project/:id',
+  UPDATE_PROJECT: 'private/project/update',
+  DELETE_PROJECT: 'private/project/delete',
+
+  /** PROFILE */
+  UPDATE_PROFILE: 'private/profile/update/:id',
+  CHANGE_PASSWORD: 'private/profile/change-password/:id',
+  GET_PROFILE: 'private/profile',
+
+  /** UPLOAD */
+  UPLOAD_FILE: 'private/file/upload',
+
+  /** USER */
   GET_USERS: 'private/user/list',
   GET_USER_DETAIL: 'private/user/:id',
   CREATE_USER: 'private/user/create',
   BULK_CONTROL_USER: 'private/user/bulk-control',
-  UPDATE_USER: 'private/user/:id/update',
-  DELETE_USER: 'private/user/:id/delete',
+  UPDATE_USER: 'private/user/update',
+  DELETE_USER: 'private/user/delete',
+
+  /** MOCK API */
   UPDATE_PROJECT_ROLES: 'private/projects/update-project-roles',
   IMPORT_PROJECT_BUDGET: 'private/projects/import-project-budget',
-  UPDATE_CONTRACTOR_ROLE: 'private/contractors/update-contractor-role',
   UPSERT_INVOICE: 'private/invoices/upsert',
   UPDATE_PROJECT_CONTRACTORS: 'private/projects/update-project-contractors',
-  REGISTER: 'public/auth/register',
-  UPDATE_PROFILE: 'private/profile/update/:id',
-  CHANGE_PASSWORD: 'private/profile/change-password/:id',
-  GET_PROFILE: 'private/profile',
-  SEND_CODE: 'public/auth/code/send',
-  VERIFY_CODE: 'public/auth/code/verify',
-  RESET_PASSWORD: 'public/auth/reset-password',
-  UPLOAD_FILE: 'private/file/upload',
-  PROJECT: 'private/project',
   GET_PROJECT_ROLES: 'private/project/:id/roles',
   GET_PROJECT_CONTRACTORS: 'private/project/:id/contractors',
-  CREATE_PROJECT: 'private/project/create',
-  GET_PROJECT: 'private/project/:id',
-  UPDATE_PROJECT: 'private/project/:id',
-  DELETE_PROJECT: 'private/project/:id',
   GET_CONTRACTOR_PROJECTS: 'private/contractor-project/list',
   CREATE_CONTRACTOR_PROJECT: 'private/contractor-project/create',
   GET_CONTRACTOR_PROJECT: 'private/contractor-project/:id',
   GET_CONTRACTOR_PROJECT_INVOICES: 'private/contractor-project/:id/invoices',
   GET_PROJECT_INVOICES: 'private/project/:id/invoices',
-  BUDGET: 'private/budget',
   GET_COMPANIES: '/company/list',
   CREATE_COMPANY: '/company/create',
   GET_SERVICES: '/service/list'
diff --git a/src/utils/services/budget.ts b/src/utils/services/budget.ts
index 56d928f..b70a060 100644
--- a/src/utils/services/budget.ts
+++ b/src/utils/services/budget.ts
@@ -6,14 +6,14 @@ import { generateQueryFromFilter } from '../helper';
 
 /** API get budgets by project */
 export const getBudgetsByProject = async (params?: IRequestFilterBudget) => {
-  const query = params ? generateQueryFromFilter(endPoints.BUDGET, params) : endPoints.BUDGET;
+  const query = params ? generateQueryFromFilter(endPoints.GET_BUDGETS, params) : endPoints.GET_BUDGETS;
   return await axios.get<IResponseListBudgets>(query);
 };
 /** API create a budget */
 export const createBudget = async (data: IRequestCreateBudget) => {
-  return await axios.post<IResponseCreateBudget>(endPoints.BUDGET, data);
+  return await axios.post<IResponseCreateBudget>(endPoints.CREATE_BUDGET, data);
 };
 /** API delete a budget by id */
 export const deleteBudget = async (id: string) => {
-  return await axios.delete<IResponseDeleteBudget>(`${endPoints.BUDGET}/${id}`);
+  return await axios.delete<IResponseDeleteBudget>(`${endPoints.DELETE_BUDGET}/${id}`);
 };
diff --git a/src/utils/services/builder.ts b/src/utils/services/builder.ts
index 2603f7b..01f9a1f 100644
--- a/src/utils/services/builder.ts
+++ b/src/utils/services/builder.ts
@@ -8,7 +8,7 @@ import { generateQueryFromFilter } from '../helper';
 
 /** API get list budgets */
 export const getBuilders = async (params?: IRequestFilter) => {
-  const query = params ? generateQueryFromFilter(endPoints.BUILDERS, params) : endPoints.BUILDERS;
+  const query = params ? generateQueryFromFilter(endPoints.GET_BUILDERS, params) : endPoints.GET_BUILDERS;
   return await axiosServices.get<IResponseListBuilders>(query);
 };
 /** API create a budgets */
@@ -19,7 +19,7 @@ export const createBuilder = async (payload: BuilderRequestType) => {
   formData.append('completionStatus', payload.completionStatus);
   formData.append('category', payload.category);
   !!payload?.image && formData.append('image', payload.image);
-  return await axiosServices.post<IResponseCreateBuilder>(endPoints.BUILDERS, formData);
+  return await axiosServices.post<IResponseCreateBuilder>(endPoints.CREATE_BUILDER, formData);
 };
 /** API update a budget by id */
 export const updateBuilder = async (id: string, payload: IRequestUpdateBuilder) => {
@@ -29,9 +29,9 @@ export const updateBuilder = async (id: string, payload: IRequestUpdateBuilder)
   !!payload?.completionStatus && formData.append('completionStatus', payload.completionStatus);
   !!payload?.category && formData.append('category', payload.category);
   !!payload?.image && formData.append('image', payload.image);
-  return await axiosServices.put<IResponseUpdateBuilder>(`${endPoints.BUILDERS}/${id}`, formData);
+  return await axiosServices.put<IResponseUpdateBuilder>(`${endPoints.UPDATE_BUILDER}/${id}`, formData);
 };
 /** API delete a budget by id */
 export const deleteBuilder = async (id: string) => {
-  return await axiosServices.delete<IResponseDeleteBuilder>(`${endPoints.BUILDERS}/${id}`);
+  return await axiosServices.delete<IResponseDeleteBuilder>(`${endPoints.DELETE_BUILDER}/${id}`);
 };
diff --git a/src/utils/services/project.ts b/src/utils/services/project.ts
index 93e7b2b..4653763 100644
--- a/src/utils/services/project.ts
+++ b/src/utils/services/project.ts
@@ -10,7 +10,7 @@ import { generateQueryFromFilter } from '../helper';
  * @summary: (method: GET) Get a project list
  */
 export const getProjects = async (params?: IRequestFilter): Promise<IResponseProjects> => {
-  const query = params ? generateQueryFromFilter(endPoints.PROJECT, params) : endPoints.PROJECT;
+  const query = params ? generateQueryFromFilter(endPoints.GET_PROJECTS, params) : endPoints.GET_PROJECTS;
   return axios.get(query);
 };
 
@@ -25,14 +25,14 @@ export const createProject = async (payload: IRequestCreateProject) => {
   formData.append('startDate', payload.startDate);
   !!payload?.image && formData.append('image', payload.image);
 
-  return axios.post<IResponseCreateBuilder>(endPoints.PROJECT, formData);
+  return axios.post<IResponseCreateBuilder>(endPoints.CREATE_PROJECT, formData);
 };
 
 /**
  * @summary: (method: POST) get a project detail by id
  */
 export const getProject = async (id: string): Promise<IProject> => {
-  return axios.get(`${endPoints.PROJECT}/${id}`);
+  return axios.get(endPoints.GET_PROJECT_DETAIL.replace(':id', id));
 };
 
 /**
@@ -45,14 +45,14 @@ export const updateProject = async (payload: IRequestUpdateProject, id: string)
   !!payload?.currentClaimNumber && formData.append('currentClaimNumber', payload.currentClaimNumber + '');
   !!payload?.startDate && formData.append('startDate', payload.startDate);
   !!payload?.image && formData.append('image', payload.image);
-  return axios.put<IResponseUpdateProject>(`${endPoints.PROJECT}/${id}`, formData);
+  return axios.put<IResponseUpdateProject>(`${endPoints.UPDATE_PROJECT}/${id}`, formData);
 };
 
 /**
  * @summary: (method: DELETE) remove a project detail by id
  */
 export const deleteProject = async (id: string): Promise<IResponseDeleteProject> => {
-  return axios.delete(`${endPoints.PROJECT}/${id}`);
+  return axios.delete(`${endPoints.DELETE_PROJECT}/${id}`);
 };
 
 /**
diff --git a/src/utils/services/user.ts b/src/utils/services/user.ts
index 02bb500..c538649 100644
--- a/src/utils/services/user.ts
+++ b/src/utils/services/user.ts
@@ -26,7 +26,7 @@ export const bulkControlUser = async (ids: string[], action: Actions) => {
 };
 /** API delete a user by id */
 export const deleteUser = async (id: string) => {
-  return await axiosServices.delete<IResponseDeleteUser>(endPoints.DELETE_USER.replace(':id', id));
+  return await axiosServices.delete<IResponseDeleteUser>(`${endPoints.DELETE_USER}/${id}`);
 };
 /** API get detail a user by id */
 export const getUserDetail = async (id: string) => {
diff --git a/tsconfig.json b/tsconfig.json
index c37b76b..9ca0194 100644
--- a/tsconfig.json
+++ b/tsconfig.json
@@ -58,6 +58,7 @@
     ".next/types/**/*.ts"
   ],
   "exclude": [
-    "node_modules"
+    "node_modules",
+    ".next/"
   ]
 }

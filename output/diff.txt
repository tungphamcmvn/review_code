title:	J2C-157: API for Project Details - Budgets
state:	OPEN
author:	huyphamnguyen
labels:	
assignees:	
reviewers:	tungphamcmvn (Requested)
projects:	
milestone:	
number:	19
url:	https://github.com/invik-33/j2c-app/pull/19
additions:	526
deletions:	254
--
- Api gets list budgets by project id
- Api delete a budget


diff --git a/lib/swagger/doc/budget/delete.ts b/lib/swagger/doc/budget/delete.ts
new file mode 100644
index 0000000..12c45d8
--- /dev/null
+++ b/lib/swagger/doc/budget/delete.ts
@@ -0,0 +1,49 @@
+// @ts-nocheck
+/**
+* @swagger
+ 
+* /api/budget/{id}:
+*   delete:
+*     tags:
+*       - Budget
+*     description: Delete a budget
+*     summary: Delete a budget
+*     security:
+*       - bearerAuth: []
+*     parameters:
+*       - in: path
+*         name: id
+*         schema:
+*           type: string
+*         required: true
+*         description: The Budget's id
+*     requestBody:
+*       required: false
+*       content:
+*         application/json:
+*     responses:
+*       200:
+*         description: Budget deleted
+*         content:
+*           application/json:
+*             schema:
+*               type: object
+*               properties:
+*                 success:
+*                   type: boolean
+*                   description: Budget deleted
+*       400:
+*         description: Bad request
+*         content:
+*           application/json:
+*             schema:
+*               type: object
+*               properties:
+*                 errors:
+*                   type: array
+*                   items:
+*                     type: string
+* @param request
+* @constructor
+*/
+export {};
diff --git a/lib/swagger/doc/budget/get.ts b/lib/swagger/doc/budget/get.ts
new file mode 100644
index 0000000..e0faf23
--- /dev/null
+++ b/lib/swagger/doc/budget/get.ts
@@ -0,0 +1,111 @@
+/**
+@swagger
+* /api/budget:
+*   get:
+*     summary: Get list budgets
+*     description: Get list budgets
+*     tags:
+*       - Budget
+*     security:
+*       - bearerAuth: []
+*     parameters:
+*       - in: query
+*         name: projectId
+*         schema:
+*           type: string
+*         required: true
+*       - in: query
+*         name: page
+*         schema:
+*           type: number
+*         required: false
+*         description: Current page
+*       - in: query
+*         name: limit
+*         schema:
+*           type: number
+*         required: false
+*         description: Page size
+*       - in: query
+*         name: sort
+*         schema:
+*           type: string
+*         required: false
+*         description: Sort direction
+*       - in: query
+*         name: field
+*         schema:
+*           type: string
+*         required: false
+*         description: Sort by this field
+*       - in: query
+*         name: fields
+*         schema:
+*           type: string
+*         required: false
+*         description: Sort by these fields
+*       - in: query
+*         name: search
+*         schema:
+*           type: string
+*         required: false
+*         description: Search budget name
+*     responses:
+*       '200':
+*         description: List Budget
+*         content:
+*           application/json:
+*             schema:
+*               $ref: '#/components/schemas/Budget'
+* components:
+*   schemas:
+*     Budget:
+*       type: array
+*       items:
+*         type: object
+*         properties:
+*           id:
+*             type: string      
+*           budgetCategory:
+*             type: string
+*           budgetCode:
+*             type: string
+*           budgetIndex:
+*             type: number
+*           budgetOriginalBudget:
+*             type: number
+*           budgetCurrentBudget:
+*             type: number
+*           budgetRevision:
+*             type: number
+*           budgetClaimedToDate:
+*             type: number
+*           budgetCurrentClaim:
+*             type: number
+*           budgetTotalClaim:
+*             type: number
+*           budgetTotalClaimPercentage:
+*             type: number
+*           budgetCostToComplete:
+*             type: number
+*           dateCreate:
+*             type: string
+*           dateModify:
+*             type: string
+*           creatorId:
+*             type: string
+*           creator:
+*             type: object
+*             properties:
+*               email:
+*                 type: string
+*               name:
+*                 type: string
+*               imageUrl:
+*                 type: string
+*               id:
+*                 type: string
+* @param request
+* @constructor
+**/
+export {};
diff --git a/lib/swagger/doc/budget/post.ts b/lib/swagger/doc/budget/post.ts
index 4689afe..96b8a35 100644
--- a/lib/swagger/doc/budget/post.ts
+++ b/lib/swagger/doc/budget/post.ts
@@ -86,6 +86,10 @@
 *           type: number
 *           format: budgetTotalClaimPercentage
 *           description: Total Claim %
+*         budgetCostToComplete:
+*           type: number
+*           format: budgetCostToComplete
+*           description: Budget Cost To Complete
 *           required: true
 *     BudgetResponse:
 *       type: object
diff --git a/src/app/api/budget/[id]/route.ts b/src/app/api/budget/[id]/route.ts
new file mode 100644
index 0000000..773c8a0
--- /dev/null
+++ b/src/app/api/budget/[id]/route.ts
@@ -0,0 +1,36 @@
+import MongoConnect from '@/backend/connection/mongo.connection';
+import { NextRequest, NextResponse } from 'next/server';
+import ObjectIdValidator from '@/backend/validator/objectId.validator';
+import BudgetService from '@/backend/services/budget.service';
+import Logger from '@/utils/logger';
+
+export async function DELETE(_: NextRequest, { params }: { params: { id: string } }) {
+  const { id } = params;
+
+  try {
+    const objectIdValidator = new ObjectIdValidator({ id });
+    await objectIdValidator.validate();
+
+    if (objectIdValidator.getErrors().length > 0) {
+      return NextResponse.json({ errors: ['Invalid budget id'] }, { status: 400 });
+    }
+
+    const conn = await MongoConnect();
+    const budgetService = new BudgetService(conn);
+
+    const budget = await budgetService.getBudget(id);
+    if (!budget) {
+      return NextResponse.json({ errors: ['Budget not found'] }, { status: 400 });
+    }
+
+    await budgetService.deleteBudget(id);
+
+    return NextResponse.json({ success: true }, { status: 200 });
+  } catch (error: any) {
+    Logger.error(error.message, {
+      status: 500,
+      stack: error.stack
+    });
+    return NextResponse.json({ errors: [error?.message] }, { status: 400 });
+  }
+}
diff --git a/src/app/api/budget/route.ts b/src/app/api/budget/route.ts
index ba62631..079b4ee 100644
--- a/src/app/api/budget/route.ts
+++ b/src/app/api/budget/route.ts
@@ -6,6 +6,10 @@ import BudgetValidator from '@/backend/validator/budget.validator';
 import { Budget } from '@/utils/dtos/budget.dto';
 import mongoose from 'mongoose';
 import NotFoundException from '@/backend/exceptions/notfound.exception';
+import ProjectService from '@/backend/services/project.service';
+import ResponseStruct from '@/backend/structs/response.struct';
+import { getListingQuery } from '../listing';
+import ObjectIdValidator from '@/backend/validator/objectId.validator';
 import Logger from '@/utils/logger';
 
 export async function POST(request: NextRequest) {
@@ -47,3 +51,47 @@ export async function POST(request: NextRequest) {
     return NextResponse.json({ errors: [error.message] }, { status: 400 });
   }
 }
+
+export async function GET(request: NextRequest) {
+  const responseStruct = new ResponseStruct(true);
+  try {
+    const projectId = request.nextUrl.searchParams.get('projectId');
+
+    if (!projectId) {
+      throw new NotFoundException('Project id not found');
+    }
+
+    const objectIdValidator = new ObjectIdValidator({ id: projectId });
+    await objectIdValidator.validate();
+
+    if (objectIdValidator.getErrors().length > 0) {
+      return NextResponse.json({ errors: ['Invalid project id'] }, { status: 400 });
+    }
+
+    const conn = await MongoConnect();
+    const budgetService = new BudgetService(conn);
+    const projectService = new ProjectService(conn);
+
+    const projectDetail = await projectService.getProject(projectId);
+    if (!projectDetail) {
+      throw new NotFoundException('Project not found');
+    }
+
+    const { limit: limitValue, page: pageValue, order: orderValue } = getListingQuery(request);
+    const data = await budgetService.findBudgetsByProjectId(projectId, limitValue, pageValue, orderValue);
+
+    responseStruct.setData({
+      meta: data.pagination,
+      data: data.collection
+    });
+
+    return NextResponse.json(responseStruct.getResponse(), { status: 200 });
+  } catch (error: any) {
+    Logger.error(error.message, {
+      status: 500,
+      stack: error.stack
+    });
+    responseStruct.pushError(error.message);
+    return NextResponse.json(responseStruct.getResponse(), { status: 400 });
+  }
+}
diff --git a/src/app/api/project/[id]/budgets/route.ts b/src/app/api/project/[id]/budgets/route.ts
deleted file mode 100644
index ad00a05..0000000
--- a/src/app/api/project/[id]/budgets/route.ts
+++ /dev/null
@@ -1,149 +0,0 @@
-import { IBudget } from '@/types/resource/budget';
-import { NextResponse } from 'next/server';
-
-export async function GET() {
-  const budgets: Partial<IBudget>[] = [
-    {
-      id: 'U001',
-      projectId: 'P001',
-      budgetCode: 'P808-1',
-      budgetCategory: 'A',
-      budgetOriginalBudget: 180000,
-      budgetRevision: 5000,
-      budgetCurrentBudget: 12000,
-      budgetCurrentClaim: 0,
-      budgetClaimToDate: 35600,
-      budgetTotalClaim: 500000,
-      budgetTotalClaimPercentage: 0.12,
-      budgetCostToComplete: 40000
-    },
-    {
-      id: 'U002',
-      projectId: 'P002',
-      budgetCode: 'P808-5',
-      budgetCategory: 'A',
-      budgetOriginalBudget: 190000,
-      budgetRevision: 50000,
-      budgetCurrentBudget: 12300,
-      budgetCurrentClaim: 10,
-      budgetClaimToDate: 35600,
-      budgetTotalClaim: 400000,
-      budgetTotalClaimPercentage: 0.12,
-      budgetCostToComplete: 40000
-    },
-    {
-      id: 'U003',
-      projectId: 'P003',
-      budgetCode: 'P808-4',
-      budgetCategory: 'A',
-      budgetOriginalBudget: 180000,
-      budgetRevision: 5000,
-      budgetCurrentBudget: 12000,
-      budgetCurrentClaim: 0,
-      budgetClaimToDate: 35600,
-      budgetTotalClaim: 500000,
-      budgetTotalClaimPercentage: 0.12,
-      budgetCostToComplete: 40000
-    },
-    {
-      id: 'U004',
-      projectId: 'P004',
-      budgetCode: 'P808-1',
-      budgetCategory: 'A',
-      budgetOriginalBudget: 180000,
-      budgetRevision: 5000,
-      budgetCurrentBudget: 12000,
-      budgetCurrentClaim: 0,
-      budgetClaimToDate: 35600,
-      budgetTotalClaim: 500000,
-      budgetTotalClaimPercentage: 0.12,
-      budgetCostToComplete: 40000
-    },
-    {
-      id: 'U005',
-      projectId: 'P005',
-      budgetCode: 'P808-7',
-      budgetCategory: 'A',
-      budgetOriginalBudget: 180000,
-      budgetRevision: 5000,
-      budgetCurrentBudget: 12000,
-      budgetCurrentClaim: 0,
-      budgetClaimToDate: 35600,
-      budgetTotalClaim: 500000,
-      budgetTotalClaimPercentage: 0.12,
-      budgetCostToComplete: 40000
-    },
-    {
-      id: 'U006',
-      projectId: 'P006',
-      budgetCode: 'P808-1',
-      budgetCategory: 'A',
-      budgetOriginalBudget: 180000,
-      budgetRevision: 5000,
-      budgetCurrentBudget: 12000,
-      budgetCurrentClaim: 0,
-      budgetClaimToDate: 35600,
-      budgetTotalClaim: 500000,
-      budgetTotalClaimPercentage: 0.12,
-      budgetCostToComplete: 40000
-    },
-    {
-      id: 'U010',
-      projectId: 'P007',
-      budgetCode: 'P808-2',
-      budgetCategory: 'A',
-      budgetOriginalBudget: 180000,
-      budgetRevision: 5000,
-      budgetCurrentBudget: 12000,
-      budgetCurrentClaim: 0,
-      budgetClaimToDate: 35600,
-      budgetTotalClaim: 500000,
-      budgetTotalClaimPercentage: 0.12,
-      budgetCostToComplete: 40000
-    },
-    {
-      id: 'U007',
-      projectId: 'P008',
-      budgetCode: 'P808-3',
-      budgetCategory: 'A',
-      budgetOriginalBudget: 180000,
-      budgetRevision: 5000,
-      budgetCurrentBudget: 12000,
-      budgetCurrentClaim: 0,
-      budgetClaimToDate: 35600,
-      budgetTotalClaim: 500000,
-      budgetTotalClaimPercentage: 0.12,
-      budgetCostToComplete: 40000
-    },
-    {
-      id: 'U008',
-      projectId: 'P009',
-      budgetCode: 'P808-1',
-      budgetCategory: 'A',
-      budgetOriginalBudget: 180000,
-      budgetRevision: 5000,
-      budgetCurrentBudget: 12000,
-      budgetCurrentClaim: 0,
-      budgetClaimToDate: 35600,
-      budgetTotalClaim: 500000,
-      budgetTotalClaimPercentage: 0.12,
-      budgetCostToComplete: 40000
-    },
-    {
-      id: 'U009',
-      projectId: 'P001',
-      budgetCode: 'P808-9',
-      budgetCategory: 'A',
-      budgetOriginalBudget: 180000,
-      budgetRevision: 5000,
-      budgetCurrentBudget: 12000,
-      budgetCurrentClaim: 0,
-      budgetClaimToDate: 35600,
-      budgetTotalClaim: 500000,
-      budgetTotalClaimPercentage: 0.12,
-      budgetCostToComplete: 40000
-    }
-  ];
-
-  return NextResponse.json({ budgets }, { status: 200 });
-}
diff --git a/src/backend/models/budget.model.ts b/src/backend/models/budget.model.ts
index ae5e3d5..0e99d4a 100644
--- a/src/backend/models/budget.model.ts
+++ b/src/backend/models/budget.model.ts
@@ -5,8 +5,9 @@ import { Budget as BudgetType } from '@/utils/dtos/budget.dto';
 export const BudgetSchema: mongoose.Schema<BudgetType> = new mongoose.Schema(
   {
     creatorId: {
-      type: String,
-      required: true
+      type: mongoose.Schema.Types.ObjectId,
+      required: true,
+      ref: 'User'
     },
     projectId: {
       type: String,
diff --git a/src/backend/services/budget.service.ts b/src/backend/services/budget.service.ts
index 6ca2b63..557dc27 100644
--- a/src/backend/services/budget.service.ts
+++ b/src/backend/services/budget.service.ts
@@ -1,11 +1,13 @@
 import BudgetRepositoryInterface from '@/backend/repositories/interfaces/budget.repository.interface';
-import mongoose, { Mongoose } from 'mongoose';
-import BudgetDto, { Budget as BudgetType } from '@/utils/dtos/budget.dto';
+import mongoose, { Mongoose, SortOrder } from 'mongoose';
+import BudgetDto, { Budget, Budget as BudgetType } from '@/utils/dtos/budget.dto';
 import { BUDGET_ENUM } from '@/utils/common';
 import { ObjectId } from 'bson';
 import BudgetRepository from '../repositories/mongodb/budget.repository';
 import UserDto from '@/utils/dtos/user.dto';
 import { IRequestCreateBudget } from '@/types/request';
+import PaginationStruct from '../structs/pagination.struct';
+import { IUser } from '@/types/resource/user';
 
 export default class BudgetService {
   protected budgetRepository: BudgetRepositoryInterface;
@@ -14,66 +16,6 @@ export default class BudgetService {
     this.budgetRepository = new BudgetRepository(conn);
   }
 
-  async getBudgetsByProjectId(projectId: string): Promise<{
-    budgets: BudgetType[] | [];
-    budgetIndexMax: number;
-    budgetBudgetTotal: number;
-  }> {
-    const result: mongoose.Document[] = await this.budgetRepository.findWithSort({ projectId }, { budgetIndex: 'asc' });
-
-    const budgets: BudgetType[] = [];
-    let budgetIndexMax = -1;
-    let budgetBudgetTotal = 0;
-
-    if (!result.length) {
-      return {
-        budgets: [],
-        budgetIndexMax,
-        budgetBudgetTotal
-      };
-    }
-
-    result.forEach((item: mongoose.Document<BudgetType>) => {
-      const budgetDto = new BudgetDto();
-      const data = {
-        id: item.get('_id'),
-        creatorEmail: item.get('creatorEmail'),
-        creatorId: item.get('creatorId'),
-        projectId: item.get('projectId'),
-        budgetAdditionalFields: item.get('budgetAdditionalFields'),
-        budgetCategory: item.get('budgetCategory'),
-        budgetCode: item.get('budgetCode'),
-        budgetCurrentBudget: item.get('budgetCurrentBudget'),
-        budgetCurrentClaim: item.get('budgetCurrentClaim'),
-        budgetDescription: item.get('budgetDescription'),
-        budgetIndex: item.get('budgetIndex'),
-        budgetOriginalBudget: item.get('budgetOriginalBudget'),
-        budgetRevision: item.get('budgetRevision'),
-        budgetTotalClaim: item.get('budgetTotalClaim'),
-        budgetTotalClaimBeforeHoldback: item.get('budgetTotalClaimBeforeHoldback'),
-        budgetTotalClaimPercentage: item.get('budgetTotalClaimPercentage'),
-        dateCreate: item.get('dateCreate'),
-        dateModify: item.get('dateModify'),
-        budgetCostToComplete: item.get('budgetCostToComplete')
-      };
-      budgetDto.setData(data);
-
-      budgets.push(budgetDto.toObject() as BudgetType);
-
-      if (item.get('budgetIndex') > budgetIndexMax) {
-        budgetIndexMax = item.get('budgetIndex');
-      }
-
-      budgetBudgetTotal += item.get('budgetOriginalBudget');
-    });
-
-    return {
-      budgets,
-      budgetIndexMax,
-      budgetBudgetTotal
-    };
-  }
-
   async updateBudgetCurrentClaims(projectId: string, currentClaimNumber: number): Promise<void> {
     const budgets: mongoose.Document[] = await this.budgetRepository.findWithSort({ projectId }, { budgetIndex: 'asc' });
 
@@ -171,6 +113,53 @@ export default class BudgetService {
     await this.budgetRepository.createMany(budgetData);
   }
 
+  async findBudgetsByProjectId(
+    projectId: string,
+    limit: number,
+    offset: number,
+    order: { [key: string]: SortOrder }
+  ): Promise<{
+    pagination: PaginationStruct;
+    collection: Budget[];
+  }> {
+    const budgetDto = new BudgetDto();
+
+    const validOrderFields = Object.keys(budgetDto);
+
+    for (const key in order) {
+      if (!validOrderFields.includes(key)) {
+        delete order[key];
+      }
+    }
+
+    if (Object.keys(order).length === 0) {
+      order = { budgetIndex: 'asc' };
+    }
+
+    const filterSearch = { projectId };
+    const total = await this.budgetRepository.count(filterSearch);
+    const budgets = await this.budgetRepository.findWithSort(filterSearch, order, limit, offset);
+
+    const collection: Budget[] = [];
+
+    budgets.forEach((budget: mongoose.Document<Budget>) => {
+      budgetDto.setData(budget.toJSON());
+      const currentObject = budgetDto.toObject() as Budget;
+      const creator = currentObject.creatorId as Partial<IUser>;
+      collection.push({
+        ...currentObject,
+        creatorId: creator.id || '',
+        creator
+      });
+    });
+
+    const pagination = new PaginationStruct(offset, limit, total);
+    return {
+      pagination,
+      collection
+    };
+  }
+
   async findLastBudget() {
     return await this.budgetRepository.findWithSort({}, { dateCreate: -1 }, 1);
   }
@@ -183,4 +172,12 @@ export default class BudgetService {
 
     return this.budgetRepository.update(budgetId, budgetTotalClaimDictionary);
   }
+
+  async getBudget(budgetId: string): Promise<mongoose.Document | null> {
+    return this.budgetRepository.findOne({ _id: budgetId });
+  }
+
+  async deleteBudget(budgetId: string): Promise<mongoose.Document | null> {
+    return await this.budgetRepository.delete(budgetId);
+  }
 }
diff --git a/src/backend/validator/objectId.validator.ts b/src/backend/validator/objectId.validator.ts
index b7f82c2..6b623c0 100644
--- a/src/backend/validator/objectId.validator.ts
+++ b/src/backend/validator/objectId.validator.ts
@@ -1,18 +1,17 @@
 import BaseValidator from '@/backend/validator/base.validator';
 import { string } from 'yup';
-import { Types } from 'mongoose';
 
 export default class ObjectIdValidator extends BaseValidator {
   constructor(data: { id: string }) {
     super();
     this.data = data;
   }
-
-  validateTypeObject() {
-    return Types.ObjectId.isValid(this.data.id);
+  validateId(dataId: string) {
+    const objectIdValidatorRegex = /^[0-9a-fA-F]{24}$/;
+    return objectIdValidatorRegex.test(dataId);
   }
   validateRules(): BaseValidator {
-    const idRule = { id: string().required() };
+    const idRule = { id: string().required().test('valid-object-id', 'Invalid id format', this.validateId) };
     this.rules = [idRule];
     return this;
   }
@@ -22,6 +21,6 @@ export default class ObjectIdValidator extends BaseValidator {
     if (this.getErrors().length > 0) {
       return false;
     }
-    return this.validateTypeObject();
+    return true;
   }
 }
diff --git a/src/components/projects/Detail/budgets/addBudget/index.tsx b/src/components/projects/Detail/budgets/addBudget/index.tsx
index 23b4e9b..88d9d11 100644
--- a/src/components/projects/Detail/budgets/addBudget/index.tsx
+++ b/src/components/projects/Detail/budgets/addBudget/index.tsx
@@ -12,7 +12,6 @@ import useCommonValidates from '@/hooks/useCommonValidates';
 import { Button } from 'ui-component/buttons';
 import styles from '@/styles/dataDialog.module.scss';
 import { PROJECT_CATEGORY } from '@/constant/project';
-import { IProject } from '@/types/resource/project';
 import { IRequestCreateBudget } from '@/types/request';
 import { useAsync } from '@/hooks/useAsync';
 import { createBudget } from '@/utils/services/budget';
@@ -34,7 +33,7 @@ export interface IFormValues {
 interface ProjectAddDialogProps extends Omit<DialogProps, 'onError' | 'onClose'> {
   projectId: string;
   onClose: () => void;
-  onSuccess?: (project: IProject) => void;
+  onSuccess?: () => void;
   loading?: boolean;
 }
 
@@ -58,6 +57,7 @@ export default function ProjectAddBudgetDialog({
       notifySuccess(formatMessage({ id: 'budgetApiAdded' }));
       resetForm();
       onClose();
+      onSuccess?.();
     },
     validationSchema: yupObject().shape({
       budgetCode: validates.text({ isRequired: true, maxLength: 25 }),
diff --git a/src/components/projects/Detail/budgets/deleteBudget/index.tsx b/src/components/projects/Detail/budgets/deleteBudget/index.tsx
new file mode 100644
index 0000000..534c964
--- /dev/null
+++ b/src/components/projects/Detail/budgets/deleteBudget/index.tsx
@@ -0,0 +1,71 @@
+import { Dialog, DialogActions, DialogContent, DialogProps, DialogTitle, IconButton, Typography } from '@mui/material';
+import { GridCloseIcon } from '@mui/x-data-grid';
+import { Button } from '@/components/ui-component/buttons';
+import { useIntl } from 'react-intl';
+import { useAsync } from '@/hooks/useAsync';
+import { success as notifySuccess } from '@/utils/notify';
+import LoadingButton from '@mui/lab/LoadingButton';
+import { IBudget } from '@/types/resource/budget';
+import { deleteBudget } from '@/utils/services/budget';
+
+interface BudgetDialogProps extends Omit<DialogProps, 'onClose'> {
+  budgets: Partial<IBudget>[];
+  onClose?: () => void;
+  onSuccess?: () => void;
+}
+
+export default function BudgetDeleteDialog({ budgets, onClose, onSuccess, ...props }: BudgetDialogProps): JSX.Element {
+  const { formatMessage } = useIntl();
+  const { isLoading, execute } = useAsync();
+  const handleClose = () => {
+    onClose?.();
+  };
+
+  const handleDelete = async () => {
+    for (let index = 0; index < budgets.length; index++) {
+      const item = budgets[index];
+      await execute(deleteBudget(item.id + ''));
+    }
+
+    handleClose();
+    notifySuccess(formatMessage({ id: 'budgetApiDeleted' }));
+    onSuccess?.();
+  };
+
+  return (
+    <Dialog onClose={handleClose} {...props}>
+      <DialogTitle sx={{ pt: '8px' }}>{formatMessage({ id: 'budgetDialogDeleteTitle' })}</DialogTitle>
+      <IconButton
+        aria-label="close"
+        onClick={handleClose}
+        sx={{
+          position: 'absolute',
+          right: 10,
+          top: 16,
+          color: (theme) => theme.palette.grey[500]
+        }}
+      >
+        <GridCloseIcon />
+      </IconButton>
+      <DialogContent dividers sx={{ minWidth: '600px' }}>
+        <Typography gutterBottom sx={{ my: '12px' }}>
+          <span dangerouslySetInnerHTML={{ __html: formatMessage({ id: 'budgetDialogDeleteContent' }) }} />
+        </Typography>
+      </DialogContent>
+      <DialogActions sx={{ gap: '20px', pt: '24px', pb: '12px', px: '24px' }}>
+        <Button variant="text" color="error" onClick={handleClose}>
+          {formatMessage({ id: 'buttonLabelCancel' })}
+        </Button>
+        {isLoading ? (
+          <LoadingButton loading variant="contained" color="error" type="submit">
+            {formatMessage({ id: 'delete' })}
+          </LoadingButton>
+        ) : (
+          <Button variant="contained" color="error" type="submit" onClick={handleDelete}>
+            {formatMessage({ id: 'delete' })}
+          </Button>
+        )}
+      </DialogActions>
+    </Dialog>
+  );
+}
diff --git a/src/components/projects/Detail/budgets/index.tsx b/src/components/projects/Detail/budgets/index.tsx
index e71af8d..9d9ffd1 100644
--- a/src/components/projects/Detail/budgets/index.tsx
+++ b/src/components/projects/Detail/budgets/index.tsx
@@ -4,12 +4,17 @@ import { Plus, Trash, Upload } from '@phosphor-icons/react';
 import { useIntl } from 'react-intl';
 import { useEffect, useState } from 'react';
 import { useAsync } from '@/hooks/useAsync';
-import { getProjectBudgets } from '@/utils/services/project';
 import Table from '@/components/ui-component/table';
-import { GridColDef } from '@mui/x-data-grid';
+import { GridColDef, GridPaginationModel, GridRowSelectionModel, GridSortModel } from '@mui/x-data-grid';
 import { formatPrice } from '@/utils/currency';
 import ProjectAddBudgetDialog from './addBudget';
+import ProjectDeleteBudgetDialog from './deleteBudget';
 import { IProject } from '@/types/resource/project';
+import { IBudget } from '@/types/resource/budget';
+import { getBudgetsByProject } from '@/utils/services/budget';
+import { ResponseMeta } from '@/types/pagination';
+import { IRequestFilter, IRequestFilterBudget } from '@/types/request';
+import { PAGINATE_PAGE_SIZE, SORT_DIRECTION_DEFAULT } from '@/utils/constant';
 
 interface Props {
   project: IProject;
@@ -17,16 +22,57 @@ interface Props {
 export const ProjectBudgets = ({ project }: Props) => {
   const { formatMessage } = useIntl();
   const [openAddDialog, setOpenAddDialog] = useState(false);
-  const [listContractors, setListContractors] = useState([]);
+  const [openDeleteDialog, setOpenDeleteDialog] = useState(false);
+  const [rowsSelected, setRowsSelected] = useState<GridRowSelectionModel>([]);
+  const [selectedBudgets, setSelectedBudgets] = useState<IBudget[]>([]);
+  const [listBudgets, setListBudgets] = useState<IBudget[]>([]);
+  const [budgetFilters, setBudgetFilters] = useState<IRequestFilterBudget>({ projectId: project.id, field: 'budgetIndex', sort: 'asc' });
+  const [budgetMeta, setBudgetMeta] = useState<ResponseMeta | null>(null);
   const { execute, isLoading } = useAsync();
 
-  const getData = async () => {
-    const result = await execute(getProjectBudgets(project.id + ''));
-    const data = result.data?.budgets && result.data?.budgets.length > 0 ? result.data?.budgets : [];
-    setListContractors(data);
+  const getBudgets = async (filters?: IRequestFilter) => {
+    const newFilter: IRequestFilterBudget = {
+      ...budgetFilters,
+      ...filters
+    };
+    const result = await execute(getBudgetsByProject(newFilter));
+    const data = result.data?.data && result.data?.data.length > 0 ? result.data?.data : [];
+    const meta = result.data.meta || null;
+    setBudgetMeta(meta);
+    setListBudgets(data);
+    setBudgetFilters(newFilter);
   };
+
+  const handleSort = async (model: GridSortModel) => {
+    const field = model?.[0]?.field || 'budgetIndex';
+    const dir = model?.[0]?.sort || SORT_DIRECTION_DEFAULT;
+    await getBudgets({
+      field: field,
+      sort: dir
+    });
+  };
+
+  const handleSelectRow = (rowSelectionModel: GridRowSelectionModel) => {
+    const budgets = listBudgets.filter((l) => rowSelectionModel.includes(l.id));
+    setRowsSelected(rowSelectionModel);
+    setSelectedBudgets(budgets);
+  };
+
+  const handlePaginationChange = async (model: GridPaginationModel) => {
+    const newPage = (model?.page || 0) + 1;
+    const limit = model?.pageSize || PAGINATE_PAGE_SIZE;
+    await getBudgets({
+      page: newPage,
+      limit
+    });
+  };
+
+  const handleActionSuccess = async () => {
+    await getBudgets({});
+  };
+
   useEffect(() => {
-    getData();
+    getBudgets({});
     // eslint-disable-next-line react-hooks/exhaustive-deps
   }, []);
 
@@ -38,9 +84,8 @@ export const ProjectBudgets = ({ project }: Props) => {
       align: 'center'
     },
     {
-      field: 'index',
+      field: 'budgetIndex',
       headerName: formatMessage({ id: 'budgetTableIndex' }),
-      valueGetter: (params) => params.id,
       width: 120,
       align: 'center'
     },
@@ -73,7 +118,7 @@ export const ProjectBudgets = ({ project }: Props) => {
       renderCell: ({ value }) => <Typography variant="h5">{formatPrice(value)}</Typography>
     },
     {
-      field: 'budgetClaimToDate',
+      field: 'budgetClaimedToDate',
       headerName: formatMessage({ id: 'budgetTableClaimedToDate' }),
       width: 200,
       align: 'center',
@@ -118,22 +163,60 @@ export const ProjectBudgets = ({ project }: Props) => {
         <Button variant="contained" startIcon={<Plus size={14} />} color="primary" sx={{ px: 3 }} onClick={() => setOpenAddDialog(true)}>
           {formatMessage({ id: 'projectDetailBtnAddBudget' })}
         </Button>
-        <Button variant="contained" startIcon={<Trash size={14} />} color="danger" sx={{ px: 3, color: '#fff' }}>
-          {formatMessage({ id: 'projectDetailBtnDeleteBudget' })}
-        </Button>
+        {rowsSelected.length > 0 && (
+          <Button
+            variant="contained"
+            startIcon={<Trash size={14} />}
+            color="danger"
+            sx={{ px: 3, color: '#fff' }}
+            onClick={() => setOpenDeleteDialog(true)}
+          >
+            {formatMessage({ id: 'projectDetailBtnDeleteBudget' })}
+          </Button>
+        )}
       </Box>
       <Table
-        rows={listContractors}
+        rows={listBudgets}
         columns={columns}
         loading={isLoading}
         checkboxSelection
+        onRowSelectionModelChange={handleSelectRow}
+        onSortModelChange={handleSort}
+        rowSelectionModel={rowsSelected}
+        paginationModel={{
+          page: (budgetFilters?.page || 1) - 1,
+          pageSize: budgetFilters.limit || PAGINATE_PAGE_SIZE
+        }}
+        rowCount={budgetMeta?.total || 0}
+        onPaginationModelChange={handlePaginationChange}
         sx={{
           '& .MuiDataGrid-main': {
             border: 0
           }
         }}
+        initialState={{
+          sorting: {
+            sortModel: [
+              {
+                field: 'budgetIndex',
+                sort: SORT_DIRECTION_DEFAULT
+              }
+            ]
+          }
+        }}
+      />
+      <ProjectAddBudgetDialog
+        open={openAddDialog}
+        projectId={project.id}
+        onClose={() => setOpenAddDialog(false)}
+        onSuccess={handleActionSuccess}
+      />
+      <ProjectDeleteBudgetDialog
+        open={openDeleteDialog && selectedBudgets.length > 0}
+        budgets={selectedBudgets}
+        onClose={() => setOpenDeleteDialog(false)}
+        onSuccess={handleActionSuccess}
       />
-      <ProjectAddBudgetDialog open={openAddDialog} projectId={project.id} onClose={() => setOpenAddDialog(false)} />
     </Box>
   );
 };
diff --git a/src/hooks/useAsync.ts b/src/hooks/useAsync.ts
index 10e6fee..425bcfc 100644
--- a/src/hooks/useAsync.ts
+++ b/src/hooks/useAsync.ts
@@ -51,9 +51,10 @@ export function useAsync<T = any, E = ResponseError>(initState?: Partial<State<T
         (error) => {
           setState({ status: 'rejected', data: null, error });
           if (state.showNotifOnError) {
-            notifyError(error.errors[0]);
+            const msgError = error.errors[0]?.message || error.errors[0];
+            notifyError(msgError);
           }
-          return Promise.reject(Error);
+          return Promise.reject(error);
         }
       );
     },
diff --git a/src/types/request.ts b/src/types/request.ts
index 5b0425a..2b54b9f 100644
--- a/src/types/request.ts
+++ b/src/types/request.ts
@@ -128,6 +128,10 @@ export interface IRequestContractorCreateProject {
 
 /* BUDGET */
 
+export interface IRequestFilterBudget extends IRequestFilter {
+  projectId: string;
+}
+
 export interface IRequestCreateBudget {
   projectId: string;
   budgetCategory: string;
diff --git a/src/types/resource/budget.ts b/src/types/resource/budget.ts
index c911c81..45f1843 100644
--- a/src/types/resource/budget.ts
+++ b/src/types/resource/budget.ts
@@ -1,7 +1,4 @@
 import { Budget as BudgetDto } from '@/utils/dtos/budget.dto';
-
-export interface IBudget extends Omit<BudgetDto, '_id'> {
+export interface IBudget extends BudgetDto {
   id: string;
-  budgetClaimToDate: number;
-  budgetCostToComplete: number;
 }
diff --git a/src/types/response.ts b/src/types/response.ts
index fee9b9a..5f1534c 100644
--- a/src/types/response.ts
+++ b/src/types/response.ts
@@ -2,6 +2,7 @@ import { Builder } from '@/utils/dtos/builder.dto';
 import { ResponseMeta } from './pagination';
 import { IContractor } from '@/utils/services/contractor';
 import { IProject } from './resource/project';
+import { IBudget } from './resource/budget';
 
 export interface IResponse<T> {
   data: T;
@@ -117,7 +118,16 @@ export interface IResponseUpload {
   url: string;
 }
 
+/* BUDGET */
+export interface IResponseListBudgets {
+  data: IBudget[];
+  meta: ResponseMeta;
+}
 export interface IResponseCreateBudget {
   success: boolean;
   status: number;
 }
+
+export interface IResponseDeleteBudget {
+  success: boolean;
+}
diff --git a/src/utils/api.ts b/src/utils/api.ts
index 56de730..7cc6bc8 100644
--- a/src/utils/api.ts
+++ b/src/utils/api.ts
@@ -29,7 +29,6 @@ const APIS = {
   PROJECT: '/project',
   GET_PROJECT_ROLES: '/project/:id/roles',
   GET_PROJECT_CONTRACTORS: '/project/:id/contractors',
-  GET_PROJECT_BUDGETS: '/project/:id/budgets',
   CREATE_PROJECT: '/project/create',
   GET_PROJECT: '/project/:id',
   UPDATE_PROJECT: '/project/:id',
diff --git a/src/utils/dtos/budget.dto.ts b/src/utils/dtos/budget.dto.ts
index bb769b4..2b55bf1 100644
--- a/src/utils/dtos/budget.dto.ts
+++ b/src/utils/dtos/budget.dto.ts
@@ -3,10 +3,12 @@
  * Copyright 2024 J2C
  */
 
+import { IUser } from '@/types/resource/user';
 import BaseDto from '@/utils/dtos/base.dto';
 
 export type Budget = {
-  creatorId: string;
+  creatorId: object | string;
+  creator?: Partial<IUser>;
   projectId: string;
   budgetIndex: number;
   budgetCategory: string;
diff --git a/src/utils/locales/en/budget.json b/src/utils/locales/en/budget.json
index 548cdd7..660dbeb 100644
--- a/src/utils/locales/en/budget.json
+++ b/src/utils/locales/en/budget.json
@@ -14,5 +14,8 @@
   "budgetDialogAddTitle": "Add Budget",
   "budgetApiAdded": "Added budget",
   "budgetDialogAddCodePlaceholder": "Enter project code",
-  "budgetDialogAddCategoryPlaceholder": "Select budget category"
+  "budgetDialogAddCategoryPlaceholder": "Select budget category",
+  "budgetApiDeleted": "Deleled budget",
+  "budgetDialogDeleteTitle": "Delete Budget",
+  "budgetDialogDeleteContent": "Are you sure you want to delete ? <br />This action cannot be undone."
 }
\ No newline at end of file
diff --git a/src/utils/locales/en/default.json b/src/utils/locales/en/default.json
index 24ba100..1f91f57 100644
--- a/src/utils/locales/en/default.json
+++ b/src/utils/locales/en/default.json
@@ -37,5 +37,6 @@
   "maxSizeFileUpload": "File size exceeds maximum limit {size} MB.",
   "resetPasswordValidateEmailAndToken": "Email or Token is invalid",
   "edit": "Edit",
-  "add": "Add"
+  "add": "Add",
+  "delete": "Delete"
 }
diff --git a/src/utils/services/budget.ts b/src/utils/services/budget.ts
index 87eb953..68b0935 100644
--- a/src/utils/services/budget.ts
+++ b/src/utils/services/budget.ts
@@ -1,8 +1,18 @@
-import { IResponseCreateBudget } from 'types/response';
+import { IResponseListBudgets, IResponseCreateBudget, IResponseDeleteBudget } from 'types/response';
 import axios from '../axios';
 import endPoints from '../api';
-import { IRequestCreateBudget } from '@/types/request';
+import { IRequestCreateBudget, IRequestFilterBudget } from '@/types/request';
+import { generateQueryFromFilter } from '../helper';
+
+export const getBudgetsByProject = async (params?: IRequestFilterBudget) => {
+  const query = params ? generateQueryFromFilter(endPoints.BUDGET, params) : endPoints.BUDGET;
+  return await axios.get<IResponseListBudgets>(query);
+};
 
 export const createBudget = async (data: IRequestCreateBudget) => {
   return await axios.post<IResponseCreateBudget>(endPoints.BUDGET, data);
 };
+
+export const deleteBudget = async (id: string) => {
+  return await axios.delete<IResponseDeleteBudget>(`${endPoints.BUDGET}/${id}`);
+};
diff --git a/src/utils/services/project.ts b/src/utils/services/project.ts
index ef35466..d05d376 100644
--- a/src/utils/services/project.ts
+++ b/src/utils/services/project.ts
@@ -2,7 +2,6 @@ import axios from '../axios';
 import endPoints from '../api';
 import { IResponseProjects, IResponseDeleteProject, IResponseCreateBuilder, IResponseUpdateProject } from 'types/response';
 import { IRequestCreateProject, IRequestFilter, IRequestUpdateProject } from 'types/request';
-import { IBudget } from '@/types/resource/budget';
 import { IInvoice } from '@/types/resource/invoice';
 import { IProject } from '@/types/resource/project';
 import { generateQueryFromFilter } from '../helper';
@@ -49,10 +48,6 @@ export const getProjectContractors = async (id: string): Promise<IProject> => {
   return axios.get(endPoints.GET_PROJECT_CONTRACTORS.replace(':id', id));
 };
 
-export const getProjectBudgets = async (id: string): Promise<IBudget[]> => {
-  return axios.get(endPoints.GET_PROJECT_BUDGETS.replace(':id', id));
-};
-
 export const getProjectInvoices = async (id: string): Promise<IInvoice[]> => {
   return axios.get(endPoints.GET_PROJECT_INVOICES.replace(':id', id));
 };

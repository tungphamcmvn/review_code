title:	J2C-116 Change name to first name and last name for user & refactor response struct
state:	MERGED
author:	MinhT191195
labels:	
assignees:	
reviewers:	
projects:	
milestone:	
number:	11
url:	https://github.com/invik-33/j2c-app/pull/11
additions:	181
deletions:	55
--
â€¦esponse struct


diff --git a/lib/swagger/doc/auth/register.ts b/lib/swagger/doc/auth/register.ts
index 35c28fc..ddf32b0 100644
--- a/lib/swagger/doc/auth/register.ts
+++ b/lib/swagger/doc/auth/register.ts
@@ -18,8 +18,17 @@
  *             schema:
  *               type: object
  *               properties:
- *                 message:
- *                   type: string
+ *                 status:
+ *                   type: number
+ *                   example: 200
+ *                 success:
+ *                   type: boolean
+ *                   example: true
+ *                 data:
+ *                   type: object
+ *                   properties:
+ *                     message:
+ *                       type: string
  *       400:
  *         description: Bad request
  *         content:
@@ -27,6 +36,12 @@
  *             schema:
  *               type: object
  *               properties:
+ *                 status:
+ *                   type: number
+ *                   example: 400
+ *                 success:
+ *                   type: boolean
+ *                   example: false
  *                 errors:
  *                   type: array
  *                   items:
diff --git a/lib/swagger/doc/auth/resetPassword.ts b/lib/swagger/doc/auth/resetPassword.ts
index 95c0d95..34f3be4 100644
--- a/lib/swagger/doc/auth/resetPassword.ts
+++ b/lib/swagger/doc/auth/resetPassword.ts
@@ -37,6 +37,10 @@
  *             schema:
  *               type: object
  *               properties:
+ *                 status:
+ *                   type: number
+ *                   description: Status code of the request
+ *                   example: 200
  *                 success:
  *                   type: boolean
  *                   description: Status of the request
@@ -57,6 +61,9 @@
  *     ResetPasswordResponseError:
  *       type: object
  *       properties:
+ *         status:
+ *           type: number
+ *           description: Status code of the request
  *         success:
  *           type: boolean
  *           description: Status of the request
diff --git a/lib/swagger/doc/auth/sendCode.ts b/lib/swagger/doc/auth/sendCode.ts
index a58af39..378c4a4 100644
--- a/lib/swagger/doc/auth/sendCode.ts
+++ b/lib/swagger/doc/auth/sendCode.ts
@@ -25,6 +25,10 @@
  *             schema:
  *               type: object
  *               properties:
+ *                 status:
+ *                   type: number
+ *                   description: Status of the request
+ *                   example: 200
  *                 success:
  *                   type: boolean
  *                   description: Status of the request
@@ -45,6 +49,9 @@
  *     ForgotPasswordResponseError:
  *       type: object
  *       properties:
+ *         status:
+ *           type: number
+ *           description: Status of the request
  *         success:
  *           type: boolean
  *           description: Status of the request
diff --git a/lib/swagger/doc/auth/verifyCode.ts b/lib/swagger/doc/auth/verifyCode.ts
index 1615b3e..389c6e0 100644
--- a/lib/swagger/doc/auth/verifyCode.ts
+++ b/lib/swagger/doc/auth/verifyCode.ts
@@ -29,14 +29,21 @@
  *             schema:
  *               type: object
  *               properties:
+ *                 status:
+ *                   type: number
+ *                   description: Status of the request
+ *                   example: 200
  *                 success:
  *                   type: boolean
  *                   description: Status of the request
  *                   example: true
- *                 linkResetPassword:
- *                   type: string
- *                   description: The link to reset the password if the code is valid
- *                   example: /reset-password?email=example@gmail.com&token=123456
+ *                 data:
+ *                   type: object
+ *                   properties:
+ *                     linkResetPassword:
+ *                       type: string
+ *                       description: The link to reset the password if the code is valid
+ *                       example: /reset-password?email=example@gmail.com&token=123456
  *       400:
  *         description: Bad Request
  *         content:
@@ -54,6 +61,9 @@
  *     VerifyCodeResponseError:
  *       type: object
  *       properties:
+ *         status:
+ *           type: number
+ *           description: Status of the request
  *         success:
  *           type: boolean
  *           description: Status of the request
diff --git a/src/app/api/auth/code/send/route.ts b/src/app/api/auth/code/send/route.ts
index 0f0ccde..3c95052 100644
--- a/src/app/api/auth/code/send/route.ts
+++ b/src/app/api/auth/code/send/route.ts
@@ -2,6 +2,7 @@ import { NextRequest, NextResponse } from 'next/server';
 import MongoConnect from '@/backend/connection/mongo.connection';
 import ForgotPasswordValidator from '@/backend/validator/forgot-password.validator';
 import AuthService from '@/backend/services/auth.service';
+import ResponseStruct from '@/backend/structs/response.struct';
 
 export type RequestType = {
   email: string;
@@ -9,7 +10,7 @@ export type RequestType = {
 
 export async function POST(request: NextRequest) {
   const { email }: RequestType = await request.json();
-
+  const responseStruct = new ResponseStruct(true);
   const conn = await MongoConnect();
 
   try {
@@ -18,14 +19,19 @@ export async function POST(request: NextRequest) {
     await validator.validate();
 
     if (validator.getErrors().length > 0) {
-      return NextResponse.json({ success: false, errors: validator.getErrors() }, { status: 400 });
+      responseStruct.setStatus(400);
+      responseStruct.setErrors(validator.getErrors());
+
+      return NextResponse.json(responseStruct.getResponse(), { status: responseStruct.getValue('status') });
     }
 
     const authService = new AuthService(conn);
     await authService.forgotPassword(email);
+    responseStruct.setStatus(200);
   } catch (err: any) {
-    return NextResponse.json({ success: false, errors: [err.message] }, { status: 500 });
+    responseStruct.pushError(err.message);
+    responseStruct.setStatus(400);
   }
 
-  return NextResponse.json({ success: true }, { status: 200 });
+  return NextResponse.json(responseStruct.getResponse(), { status: responseStruct.getValue('status') });
 }
diff --git a/src/app/api/auth/code/verify/route.ts b/src/app/api/auth/code/verify/route.ts
index dc1e97b..35ffcdf 100644
--- a/src/app/api/auth/code/verify/route.ts
+++ b/src/app/api/auth/code/verify/route.ts
@@ -1,6 +1,7 @@
 import { NextRequest, NextResponse } from 'next/server';
 import MongoConnect from '@/backend/connection/mongo.connection';
 import AuthService from '@/backend/services/auth.service';
+import ResponseStruct from '@/backend/structs/response.struct';
 
 type RequestType = {
   email: string;
@@ -9,6 +10,7 @@ type RequestType = {
 
 export async function POST(request: NextRequest) {
   const data: RequestType = await request.json();
+  const responseStruct = new ResponseStruct(true);
 
   let linkResetPassword = '';
   try {
@@ -18,9 +20,17 @@ export async function POST(request: NextRequest) {
     const userDto = await authService.verifyCode(data.email, data.code);
 
     linkResetPassword = await authService.generatePasswordResetToken(userDto._id.valueOf() as string);
+
+    responseStruct.setStatus(200);
+    responseStruct.setData({
+      data: {
+        linkResetPassword
+      }
+    });
   } catch (error: any) {
-    return NextResponse.json({ success: false, errors: [error.message] }, { status: 500 });
+    responseStruct.pushError(error.message);
+    responseStruct.setStatus(500);
   }
 
-  return NextResponse.json({ success: data?.code?.length === 4, linkResetPassword }, { status: 200 });
+  return NextResponse.json(responseStruct.getResponse(), { status: responseStruct.getValue('status') });
 }
diff --git a/src/app/api/auth/register/route.ts b/src/app/api/auth/register/route.ts
index ba547f9..3ceef6b 100644
--- a/src/app/api/auth/register/route.ts
+++ b/src/app/api/auth/register/route.ts
@@ -3,17 +3,20 @@ import RegisterValidator from '@/backend/validator/register.validator';
 import MongoConnect from '@/backend/connection/mongo.connection';
 import AuthService from '@/backend/services/auth.service';
 import { UserStatus } from '@/utils/enums';
+import ResponseStruct from '@/backend/structs/response.struct';
 
 export async function POST(request: NextRequest) {
-  const data: { email: string; password: string; name: string } = await request.json();
+  const data: { email: string; password: string; firstName: string; lastName: string } = await request.json();
 
   const conn = await MongoConnect();
   const authService = new AuthService(conn);
+  const responseStruct = new ResponseStruct(true);
 
   const requestData = {
     email: data.email,
     password: data.password,
-    name: data.name
+    firstName: data.firstName,
+    lastName: data.lastName
   };
 
   const requestValidator = new RegisterValidator(requestData, conn);
@@ -22,15 +25,33 @@ export async function POST(request: NextRequest) {
     await requestValidator.validate();
 
     if (requestValidator.getErrors().length > 0) {
-      return NextResponse.json({ errors: requestValidator.getErrors() }, { status: 400 });
-    }
+      responseStruct.setStatus(400);
+      responseStruct.setErrors(requestValidator.getErrors());
 
-    const user = await authService.createNewUser(data.email, data.name, false, UserStatus.INACTIVE, data.password, null);
+      return NextResponse.json(responseStruct.getResponse(), { status: responseStruct.getValue('status') });
+    }
 
-    await authService.sendEmailConfirmation(user.get('_id').valueOf(), user.get('email'), user.get('name'));
+    const user = await authService.createNewUser(
+      data.email,
+      data.firstName,
+      data.lastName,
+      false,
+      UserStatus.INACTIVE,
+      data.password,
+      null
+    );
+
+    await authService.sendEmailConfirmation(user.get('_id').valueOf(), user.get('email'), `${data.firstName} ${data.lastName}`);
+    responseStruct.setStatus(200);
+    responseStruct.setData({
+      data: {
+        message: 'User created successfully. Please check your email to verify your account.'
+      }
+    });
   } catch (error: any) {
-    return NextResponse.json({ errors: [error.message] }, { status: 400 });
+    responseStruct.pushError(error.message);
+    responseStruct.setStatus(500);
   }
 
-  return NextResponse.json({ message: 'success' }, { status: 200 });
+  return NextResponse.json(responseStruct.getResponse(), { status: responseStruct.getValue('status') });
 }
diff --git a/src/app/api/auth/reset-password/route.ts b/src/app/api/auth/reset-password/route.ts
index a300905..83db717 100644
--- a/src/app/api/auth/reset-password/route.ts
+++ b/src/app/api/auth/reset-password/route.ts
@@ -3,6 +3,7 @@ import UserRepository from '@/backend/repositories/mongodb/user.repository';
 import MongoConnect from '@/backend/connection/mongo.connection';
 import UserService from '@/backend/services/user.service';
 import ResetPasswordValidator from '@/backend/validator/reset-password.validator';
+import ResponseStruct from '@/backend/structs/response.struct';
 
 export type RequestType = {
   email: string;
@@ -13,12 +14,16 @@ export type RequestType = {
 
 export async function POST(request: NextRequest) {
   const { email, password, confirmPassword, token } = await request.json();
+  const responseStruct = new ResponseStruct(true);
 
   const validator = new ResetPasswordValidator({ email, password, confirmPassword, token });
   validator.validate();
 
   if (validator.getErrors().length > 0) {
-    return NextResponse.json({ success: false, errors: validator.getErrors() }, { status: 400 });
+    responseStruct.setStatus(400);
+    responseStruct.setErrors(validator.getErrors());
+
+    return NextResponse.json(responseStruct.getResponse(), { status: responseStruct.getValue('status') });
   }
 
   try {
@@ -26,9 +31,11 @@ export async function POST(request: NextRequest) {
     const userRepository = new UserRepository(conn);
     const userServices = new UserService(userRepository);
     await userServices.changePassword(email, password, token);
+    responseStruct.setStatus(200);
   } catch (err: any) {
-    return NextResponse.json({ success: false, errors: [err.message] }, { status: 500 });
+    responseStruct.pushError(err.message);
+    responseStruct.setStatus(500);
   }
 
-  return NextResponse.json({ success: true }, { status: 200 });
+  return NextResponse.json(responseStruct.getResponse(), { status: responseStruct.getValue('status') });
 }
diff --git a/src/app/api/auth/token/[email]/route.ts b/src/app/api/auth/token/[email]/route.ts
index 7f11af4..1daaee8 100644
--- a/src/app/api/auth/token/[email]/route.ts
+++ b/src/app/api/auth/token/[email]/route.ts
@@ -2,10 +2,11 @@ import { NextRequest, NextResponse } from 'next/server';
 import { encode } from 'next-auth/jwt';
 import MongoConnect from '@/backend/connection/mongo.connection';
 import UserRepository from '@/backend/repositories/mongodb/user.repository';
+import ResponseStruct from '@/backend/structs/response.struct';
 
 export async function GET(request: NextRequest, { params }: { params: { email: string } }) {
   const { email } = params;
-
+  const responseStruct = new ResponseStruct(true);
   const conn = await MongoConnect();
 
   try {
@@ -13,7 +14,10 @@ export async function GET(request: NextRequest, { params }: { params: { email: s
     const user = await userRepo.findOne({ email });
 
     if (!user) {
-      return NextResponse.json({ message: 'Email not found' }, { status: 404 });
+      responseStruct.setStatus(404);
+      responseStruct.pushError('Email not found');
+
+      return NextResponse.json(responseStruct.getResponse(), { status: responseStruct.getValue('status') });
     }
 
     const token = await encode({
@@ -24,8 +28,12 @@ export async function GET(request: NextRequest, { params }: { params: { email: s
       maxAge: 60 * 60 * 4 // 4 hours
     });
 
-    return NextResponse.json({ token }, { status: 200, statusText: 'OK' });
+    responseStruct.setStatus(200);
+    responseStruct.setData({ data: { token } });
   } catch (error) {
-    return NextResponse.json({ errors: ['Unauthorized'] }, { status: 401 });
+    responseStruct.pushError('Unauthorized');
+    responseStruct.setStatus(401);
   }
+
+  return NextResponse.json(responseStruct.getResponse(), { status: responseStruct.getValue('status') });
 }
diff --git a/src/app/api/profile/update/[id]/route.ts b/src/app/api/profile/update/[id]/route.ts
index a291bd5..73d63bb 100644
--- a/src/app/api/profile/update/[id]/route.ts
+++ b/src/app/api/profile/update/[id]/route.ts
@@ -33,7 +33,8 @@ export async function PUT(request: NextRequest, { params }: { params: { id: stri
 
     await userService.updateProfile(id, {
       email: data.email,
-      name: data.name,
+      firstName: data.firstName,
+      lastName: data.lastName,
       phoneNumber: data.phoneNumber,
       company: data.company,
       country: data.country,
diff --git a/src/app/api/user/[id]/delete/route.ts b/src/app/api/user/[id]/delete/route.ts
index 4831775..b1238e8 100644
--- a/src/app/api/user/[id]/delete/route.ts
+++ b/src/app/api/user/[id]/delete/route.ts
@@ -6,7 +6,7 @@ import UserService from '@/backend/services/user.service';
 import { Actions } from '@/utils/enums';
 import NotFoundException from '@/backend/exceptions/notfound.exception';
 import { headers } from 'next/headers';
-import { decode, JWT}  from 'next-auth/jwt';
+import { decode, JWT } from 'next-auth/jwt';
 
 export async function DELETE(_: NextRequest, { params }: { params: { id: string } }) {
   const token = headers().get('authorization')?.split(' ')[1];
diff --git a/src/auth.ts b/src/auth.ts
index a6ca3d7..1e3dc61 100644
--- a/src/auth.ts
+++ b/src/auth.ts
@@ -47,7 +47,7 @@ export const authOptions = {
 
             return {
               id: user.get('_id').valueOf(),
-              name: user.get('name') || '',
+              name: `${user.get('firstName')} ${user.get('lastName')}` || '',
               email: user.get('email') || '',
               image: user.get('imageUrl') || null
             };
@@ -109,6 +109,17 @@ export const authOptions = {
           provider: params.account.provider || ''
         };
       }
+
+      if (params.account?.provider === 'google') {
+        params.token = {
+          ...params.token,
+          // @ts-ignore
+          firstName: params.profile?.given_name || '',
+          // @ts-ignore
+          lastName: params.profile?.family_name || ''
+        };
+      }
+
       // Persist the OAuth access_token and or the user id to the token right after signin
       return params.token;
     },
@@ -134,7 +145,8 @@ export const authOptions = {
 
           const newUser = await authService.getOrCreateNewUser(
             params.token.email as string,
-            params.token.name as string,
+            params.token.firstName as string,
+            params.token.lastName as string,
             params.token.image as string
           );
 
@@ -148,12 +160,14 @@ export const authOptions = {
         params.session.user = {
           ...params.session.user,
           id: user.get('_id').valueOf() || '',
+          firstName: user.get('firstName') || '',
+          lastName: user.get('lastName') || '',
           password: user.get('password') || null,
           token: await encode({
             token: {
               id: user.get('_id').valueOf(),
               email: user.get('email'),
-              name: user.get('name')
+              name: `${user.get('firstName')} ${user.get('lastName')}`
             },
             secret: (process.env.NEXTAUTH_SECRET as string) || '',
             maxAge: 60 * 60 * 4 // 4 hours
diff --git a/src/backend/models/user.model.ts b/src/backend/models/user.model.ts
index 5b7f0b5..8a2aa92 100644
--- a/src/backend/models/user.model.ts
+++ b/src/backend/models/user.model.ts
@@ -9,7 +9,11 @@ export const UserSchema: mongoose.Schema<UserType> = new mongoose.Schema(
       required: true,
       unique: true
     },
-    name: {
+    firstName: {
+      type: String,
+      required: true
+    },
+    lastName: {
       type: String,
       required: true
     },
diff --git a/src/backend/repositories/mongodb/user.repository.ts b/src/backend/repositories/mongodb/user.repository.ts
index ee9223b..a132a78 100644
--- a/src/backend/repositories/mongodb/user.repository.ts
+++ b/src/backend/repositories/mongodb/user.repository.ts
@@ -35,7 +35,8 @@ export default class UserRepository extends BaseRepositoryAbstract implements Us
     userDto.setData({
       id: data[0].get('_id').toString(),
       email: data[0].get('email'),
-      name: data[0].get('name'),
+      firstName: data[0].get('firstName'),
+      lastName: data[0].get('lastName'),
       imageUrl: data[0].get('imageUrl'),
       password: data[0].get('password'),
       isContractor: data[0].get('isContractor'),
diff --git a/src/backend/services/auth.service.ts b/src/backend/services/auth.service.ts
index 8e601fc..e5dbff3 100644
--- a/src/backend/services/auth.service.ts
+++ b/src/backend/services/auth.service.ts
@@ -19,19 +19,20 @@ export default class AuthService {
     this.userRepository = new UserRepository(conn);
   }
 
-  async getOrCreateNewUser(email: string, name: string, imageUrl: string | null = null): Promise<mongoose.Document> {
+  async getOrCreateNewUser(email: string, firstName: string, lastName: string, imageUrl: string | null = null): Promise<mongoose.Document> {
     const existsUser: mongoose.Document | null = await this.userRepository.findOne({ email });
 
     if (existsUser) {
       return existsUser;
     } else {
-      return await this.createNewUser(email, name, true, UserStatus.ACTIVE, null, imageUrl);
+      return await this.createNewUser(email, firstName, lastName, true, UserStatus.ACTIVE, null, imageUrl);
     }
   }
 
   async createNewUser(
     email: string,
-    name: string,
+    firstName: string,
+    lastName: string,
     emailConfirmed: boolean,
     status: UserStatus,
     password: string | null = null,
@@ -49,7 +50,8 @@ export default class AuthService {
 
     userDto.setData({
       email,
-      name,
+      firstName,
+      lastName,
       imageUrl: imageUrl || '',
       password: passwordHash,
       isContractor: false,
diff --git a/src/backend/services/builder.service.ts b/src/backend/services/builder.service.ts
index 05e2182..2e6e55e 100644
--- a/src/backend/services/builder.service.ts
+++ b/src/backend/services/builder.service.ts
@@ -240,7 +240,7 @@ export default class BuilderService {
       const newObject = (item as unknown as mongoose.Document<Builder>).toObject();
       return {
         ...newObject,
-        creatorId: newObject.creatorId._id,
+        creatorId: newObject.creatorId?._id,
         creator: newObject.creatorId
       };
     });
diff --git a/src/backend/services/user.service.ts b/src/backend/services/user.service.ts
index 46d3236..488b29b 100644
--- a/src/backend/services/user.service.ts
+++ b/src/backend/services/user.service.ts
@@ -5,7 +5,7 @@ import { Actions, UserStatus } from '@/utils/enums';
 import PaginationStruct from '@/backend/structs/pagination.struct';
 import { User as UserType } from '@/utils/dtos/user.dto';
 import IdsNotFoundException from '@/backend/exceptions/idsnotfound.exception';
-import NotFoundException from "@/backend/exceptions/notfound.exception";
+import NotFoundException from '@/backend/exceptions/notfound.exception';
 import DateCustom from '@/utils/datetime/date.custom';
 
 export default class UserService {
diff --git a/src/backend/validator/profile.validator.ts b/src/backend/validator/profile.validator.ts
index 254e755..c663889 100644
--- a/src/backend/validator/profile.validator.ts
+++ b/src/backend/validator/profile.validator.ts
@@ -7,7 +7,7 @@ import UserRepository from '@/backend/repositories/mongodb/user.repository';
 export default class ProfileValidator extends BaseValidator {
   private userRepository: UserRepositoryInterface;
 
-  constructor(data: { id: string; email: string; password: string; name: string }, connection: Mongoose) {
+  constructor(data: { id: string; email: string; password: string; firstName: string; lastName: string }, connection: Mongoose) {
     super();
     this.data = data;
 
@@ -39,14 +39,15 @@ export default class ProfileValidator extends BaseValidator {
 
     const idRule = { id: string().required() };
     const mailRule = { email: string().email().required() };
-    const nameRule = { name: string().required() };
+    const firstNameRule = { name: string().required() };
+    const lastNameNameRule = { name: string().required() };
     const phoneRule = { phoneNumber: phoneNumberRule };
     const companyRule = { company: string().max(255).nullable() };
     const countryRule = { country: string().max(20).nullable() };
     const birthDateRule = { birthDate: birthDateRulesSchema.nullable() };
     const imageRule = { image: string().url().nullable() };
 
-    this.rules = [idRule, mailRule, nameRule, phoneRule, companyRule, countryRule, birthDateRule, imageRule];
+    this.rules = [idRule, mailRule, firstNameRule, lastNameNameRule, phoneRule, companyRule, countryRule, birthDateRule, imageRule];
 
     return this;
   }
diff --git a/src/backend/validator/register.validator.ts b/src/backend/validator/register.validator.ts
index c06e51e..ad7d441 100644
--- a/src/backend/validator/register.validator.ts
+++ b/src/backend/validator/register.validator.ts
@@ -7,7 +7,7 @@ import UserRepository from '@/backend/repositories/mongodb/user.repository';
 export default class RegisterValidator extends BaseValidator {
   private userRepository: UserRepositoryInterface;
 
-  constructor(data: { email: string; password: string; name: string }, connection: Mongoose) {
+  constructor(data: { email: string; password: string; firstName: string; lastName: string }, connection: Mongoose) {
     super();
     this.data = data;
     this.userRepository = new UserRepository(connection);
@@ -16,9 +16,10 @@ export default class RegisterValidator extends BaseValidator {
   validateRules() {
     const mailRule = { email: string().email().required() };
     const passRule = { password: string().min(8).required() };
-    const nameRule = { name: string().required() };
+    const firstNameRule = { firstName: string().required() };
+    const lastNameRule = { lastName: string().required() };
 
-    this.rules = [mailRule, passRule, nameRule];
+    this.rules = [mailRule, passRule, firstNameRule, lastNameRule];
 
     return this;
   }
diff --git a/src/components/authentication/auth-forms/RegisterForm/index.tsx b/src/components/authentication/auth-forms/RegisterForm/index.tsx
index c468386..b729e01 100644
--- a/src/components/authentication/auth-forms/RegisterForm/index.tsx
+++ b/src/components/authentication/auth-forms/RegisterForm/index.tsx
@@ -61,14 +61,15 @@ function RegisterForm() {
       register({
         email: values.email,
         password: values.password,
-        name: `${values.firstName} ${values.lastName}`
+        firstName: values.firstName,
+        lastName: values.lastName
       })
     );
 
     if (!result.error) {
       setStatus({ success: true });
       setSubmitting(false);
-      notify.success(formatMessage({ id: 'registerSuccessfull' }));
+      notify.success(formatMessage({ id: 'registerSuccessfully' }));
 
       setTimeout(() => {
         router.push(routes.login.getUrl());
diff --git a/src/components/authentication/auth-forms/VerifyEmailForm/index.tsx b/src/components/authentication/auth-forms/VerifyEmailForm/index.tsx
index 31283c8..6738de3 100644
--- a/src/components/authentication/auth-forms/VerifyEmailForm/index.tsx
+++ b/src/components/authentication/auth-forms/VerifyEmailForm/index.tsx
@@ -60,7 +60,7 @@ function ConfirmEmailForm(props: IConfirmEmailFormProps) {
         })
       );
       setTimeout(() => {
-        const linkResetPassword = result.data?.linkResetPassword;
+        const linkResetPassword = result.data?.data.linkResetPassword;
         router.push(linkResetPassword || routes.resetPassword.getUrl());
       }, 500);
     }
diff --git a/src/types/request.ts b/src/types/request.ts
index 4743719..8552d73 100644
--- a/src/types/request.ts
+++ b/src/types/request.ts
@@ -15,7 +15,8 @@ export interface IRequestFilter {
 export interface IRequestRegister {
   email: string;
   password: string;
-  name: string;
+  firstName: string;
+  lastName: string;
 }
 
 export interface IRequestUpdateProfile extends UserProfile {}
diff --git a/src/types/response.ts b/src/types/response.ts
index 89d9971..5a91d95 100644
--- a/src/types/response.ts
+++ b/src/types/response.ts
@@ -75,6 +75,10 @@ export interface ResponseError {
 /* AUTH */
 export interface IResponseVerifyCode {
   success: boolean;
+  status: number;
+  data: {
+    linkResetPassword: string;
+  };
 }
 
 export interface IResponseSendCode {
diff --git a/src/utils/dtos/user.dto.ts b/src/utils/dtos/user.dto.ts
index a92ef51..e4fe4bf 100644
--- a/src/utils/dtos/user.dto.ts
+++ b/src/utils/dtos/user.dto.ts
@@ -9,7 +9,8 @@ import DateCustom from '@/utils/datetime/date.custom';
 
 export type User = {
   email: string;
-  name: string;
+  firstName: string;
+  lastName: string;
   password: string | null;
   emailConfirmed: boolean;
   confirmationToken: string | null;
@@ -32,7 +33,8 @@ export type User = {
 
 export default class UserDto extends BaseDto {
   email: string = '';
-  name: string = '';
+  firstName: string = '';
+  lastName: string = '';
   password: string | null = null;
   emailConfirmed: boolean = false;
   confirmationToken: string | null = null;
diff --git a/src/utils/locales/en/auth.json b/src/utils/locales/en/auth.json
index 1995d1b..4d25fa1 100644
--- a/src/utils/locales/en/auth.json
+++ b/src/utils/locales/en/auth.json
@@ -27,7 +27,7 @@
   "requiredValidateMessage": "This field is required",
   "maxLengthValidateMessage": "This field must be at most {number} characters",
   "minLengthValidateMessage": "This field must be at least {number} characters",
-  "registerSuccessfull": "Your registration has been successfully completed.",
+  "registerSuccessfully": "Your registration has been successfully completed.",
   "agreeWithTermsCondition": "Agree with <link>Terms & Condition.</link>",
   "hasAccount": "Already have an account?",
   "verificationCodeFormTitle": "Verification Code",
@@ -76,4 +76,4 @@
   "updateSuccessful": "Update Successful",
   "updateFailed": "Update Failed",
   "emailInValid": "Email is invalid"
-}
\ No newline at end of file
+}
diff --git a/src/utils/services/auth.ts b/src/utils/services/auth.ts
index 1a9a50c..f5e19bb 100644
--- a/src/utils/services/auth.ts
+++ b/src/utils/services/auth.ts
@@ -14,7 +14,8 @@ import { IResponseRegister, IResponseVerifyCode, IResponseSendCode, IResponseSuc
 export const register = async (user: IRequestRegister): Promise<IResponseRegister> => {
   const res: IResponseRegister = await axios.post(endPoints.REGISTER, {
     email: user.email,
-    name: user.name,
+    firstName: user.firstName,
+    lastName: user.lastName,
     password: user.password
   });
 
diff --git a/types/next-auth.d.ts b/types/next-auth.d.ts
index c2bb6c9..ae81c5a 100644
--- a/types/next-auth.d.ts
+++ b/types/next-auth.d.ts
@@ -4,6 +4,8 @@ declare module 'next-auth' {
   interface Session {
     user: {
       id: string;
+      firstName: string;
+      lastName: string;
       token: string;
       password: string | null;
       provider: string;

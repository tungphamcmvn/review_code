project.model.ts```ts
	import DateUTC from '@/utils/datetime/date.custom';
	import mongoose from 'mongoose';
	import { Project as ProjectType } from '@/utils/dtos/project.dto';
	import User from '@/backend/models/user.model';
	import Company from '@/backend/models/company.model';
	import Role from '@/backend/models/role.model';
	
	/* ProjectSchema will correspond to the project collection in the MongoDB database. */
	const ProjectSchema: mongoose.Schema<ProjectType> = new mongoose.Schema(
	  {
	    name: {
	      type: String,
	      required: true
	    },
	    key: {
	      type: String,
	      required: true,
	      unique: true
	    },
	    address: {
	      type: String,
	      required: false,
	      default: ''
	    },
	    amount: {
	      type: Number,
	      required: false,
	      default: 0
	    },
	    builderId: {
	      type: String,
	      required: false,
	      default: ''
	    },
	    category: {
	      type: String,
	      required: false,
	      default: ''
	    },
	    creatorEmail: {
	      type: String,
	      required: true
	    },
	    creatorId: {
	      type: String,
	      required: true,
	      ref: User.modelName
	    },
	    currency: {
	      type: String,
	      required: true
	    },
	    currentClaimNumber: {
	      type: Number,
	      required: false,
	      default: 0
	    },
	    date: {
	      type: Date,
	      required: false,
	      default: new DateUTC()
	    },
	    dateCreate: {
	      type: Date,
	      required: false,
	      default: new DateUTC()
	    },
	    dateModify: {
	      type: Date,
	      required: false,
	      default: null
	    },
	    startDate: {
	      type: Date,
	      required: false,
	      default: new DateUTC()
	    },
	    items: {
	      type: String,
	      required: false,
	      default: ''
	    },
	    imageUrl: {
	      type: String,
	      required: false,
	      default: ''
	    },
	    role0: {
	      type: String,
	      required: false
	    },
	    role1: {
	      type: String,
	      required: false,
	      default: ''
	    },
	    role2: {
	      type: String,
	      required: false,
	      default: ''
	    },
	    role3: {
	      type: String,
	      required: false,
	      default: ''
	    },
	    role4: {
	      type: String,
	      required: false,
	      default: ''
	    },
	    roleProjectContractors: {
	      type: String,
	      required: false,
	      default: ''
	    },
	    participants: [
	      {
	        userId: {
	          type: String,
	          required: true,
	          ref: User.modelName
	        },
	        companyId: {
	          type: String,
	          required: true,
	          ref: Company.modelName
	        },
	        roleId: {
	          type: String,
	          required: true,
	          ref: Role.modelName
	        },
	        inviteSource: {
	          type: String,
	          enum: ['company', 'external_email', 'internal_email'],
	          required: true
	        },
	        inviteStatus: {
	          type: String,
	          enum: ['pending_signup', 'pending_accept', 'accepted', 'rejected'],
	          required: true
	        },
	        inviteKey: {
	          type: String,
	          required: true,
	          unique: true
	        },
	        inviteCreatedAt: {
	          type: Date,
	          required: false,
	          default: new DateUTC()
	        },
	        inviteExpiration: {
	          type: Date,
	          required: false,
	          default: new DateUTC()
	        },
	        inviteUpdatedAt: {
	          type: Date,
	          required: false,
	          default: new DateUTC()
	        }
	      }
	    ],
	    status: {
	      type: String,
	      required: true,
	      enum: ['active', 'inactive', 'completed', 'archived']
	    }
	  },
	  { _id: true }
	);
	
	export default mongoose.models.Project || mongoose.model<ProjectType>('Project', ProjectSchema);

```

invoice.model.ts```ts
	import mongoose from 'mongoose';
	import { Invoice as InvoiceType } from '@/utils/dtos/invoice.dto';
	
	/* InvoiceSchema will correspond to the invoice collection in the MongoDB database. */
	const InvoiceSchema: mongoose.Schema<InvoiceType> = new mongoose.Schema(
	  {
	    budgetId: {
	      type: String,
	      required: true
	    },
	    projectId: {
	      type: String,
	      required: true
	    },
	    creatorId: {
	      type: String,
	      required: true
	    },
	    creatorEmail: {
	      type: String,
	      required: true
	    },
	    invoiceContractorId: {
	      type: String,
	      required: true
	    },
	    invoiceContractorName: {
	      type: String,
	      required: true
	    },
	    invoiceIndex: {
	      type: Number,
	      required: true
	    },
	    invoiceNumber: {
	      type: String,
	      required: true
	    },
	    invoicePst: {
	      type: String,
	      required: true
	    },
	    invoicePstOverride: {
	      type: Boolean,
	      required: true
	    },
	    invoiceReceivedDate: {
	      type: String,
	      required: true
	    },
	    invoiceStatus: {
	      type: Number,
	      required: true
	    },
	    invoiceSubtotal: {
	      type: Number,
	      required: true
	    },
	    invoiceTotal: {
	      type: Number,
	      required: true
	    },
	    invoiceDate: {
	      type: Date,
	      required: true
	    },
	    invoiceDescription: {
	      type: String,
	      required: true
	    },
	    dateCreate: {
	      type: Date,
	      required: true
	    },
	    dateModify: {
	      type: Date,
	      required: true
	    },
	    imageBucket: {
	      type: String,
	      required: true
	    },
	    invoiceAdditionalFields: {
	      type: [String],
	      required: true
	    },
	    invoiceApprove: {
	      type: Boolean,
	      required: false
	    },
	    invoiceCategory: {
	      type: String,
	      required: true
	    },
	    invoiceChqDate: {
	      type: String,
	      required: true
	    },
	    invoiceChqNumber: {
	      type: String,
	      required: true
	    },
	    invoiceClaimNumber: {
	      type: String,
	      required: true
	    },
	    invoiceCode: {
	      type: String,
	      required: true
	    },
	    invoiceGst: {
	      type: Object,
	      required: true
	    },
	    invoiceGstOverride: {
	      type: Boolean,
	      required: true
	    },
	    invoiceHoldbackEnabled: {
	      type: Boolean,
	      required: false
	    }
	  },
	  { _id: true }
	);
	
	export default mongoose.models.Invoice || mongoose.model<InvoiceType>('Invoice', InvoiceSchema);

```

user.model.ts```ts
	import mongoose from 'mongoose';
	import { User as UserType } from '@/utils/dtos/user.dto';
	import Role from '@/backend/models/role.model';
	
	/* UserSchema will correspond to the user collection in the MongoDB database. */
	export const UserSchema: mongoose.Schema<UserType> = new mongoose.Schema(
	  {
	    email: {
	      type: String,
	      required: true,
	      unique: true
	    },
	    firstName: {
	      type: String,
	      required: true
	    },
	    lastName: {
	      type: String,
	      required: true
	    },
	    imageUrl: {
	      type: String,
	      required: false
	    },
	    company: {
	      type: String,
	      required: false
	    },
	    country: {
	      type: String,
	      required: false
	    },
	    phoneNumber: {
	      type: String,
	      required: false
	    },
	    birthDate: {
	      type: Date,
	      required: false
	    },
	    password: {
	      type: String,
	      required: false
	    },
	    emailConfirmed: {
	      type: Boolean,
	      required: true
	    },
	    confirmationToken: {
	      type: String,
	      required: false
	    },
	    passwordResetToken: {
	      type: String,
	      required: false
	    },
	    isContractor: {
	      type: Boolean,
	      required: true
	    },
	    status: {
	      type: String,
	      required: true
	    },
	    selectedContractorId: {
	      type: String,
	      required: false
	    },
	    selectedBuilderId: {
	      type: String,
	      required: false
	    },
	    failedLoginAttempts: {
	      type: Number,
	      required: true
	    },
	    accountLockedUntil: {
	      type: Date,
	      required: false
	    },
	    lastLogin: {
	      type: Date,
	      required: false
	    },
	    dateCreate: {
	      type: Date,
	      required: true
	    },
	    dateModify: {
	      type: Date,
	      required: true
	    },
	    systemRole: {
	      type: String,
	      required: true,
	      ref: Role.modelName
	    }
	  },
	  { _id: true }
	);
	
	export default mongoose.models.User || mongoose.model<UserType>('User', UserSchema);

```

builder.model.ts```ts
	import mongoose from 'mongoose';
	import { Builder as BuilderType } from '@/utils/dtos/builder.dto';
	
	/* BuilderSchema will correspond to the builder collection in the MongoDB database. */
	const BuilderSchema: mongoose.Schema<BuilderType> = new mongoose.Schema(
	  {
	    creatorEmail: {
	      type: String,
	      required: true
	    },
	    creatorId: {
	      type: mongoose.Schema.Types.ObjectId,
	      required: true,
	      ref: 'User'
	    },
	    address: {
	      type: String,
	      required: true
	    },
	    budgetSeperatorComma: {
	      type: Boolean,
	      required: true
	    },
	    budgetSeperatorSemiColon: {
	      type: Boolean,
	      required: true
	    },
	    budgetSeperatorTab: {
	      type: Boolean,
	      required: true
	    },
	    builderName: {
	      type: String,
	      required: true
	    },
	    category: {
	      type: String,
	      required: true
	    },
	    completionStatus: {
	      type: String,
	      required: true
	    },
	    date: {
	      type: Date,
	      required: true
	    },
	    dateCreate: {
	      type: Date,
	      required: true
	    },
	    dateModify: {
	      type: Date,
	      required: true
	    },
	    generalContractor: {
	      type: String,
	      required: true
	    },
	    imageUrl: {
	      type: String,
	      required: true
	    },
	    items: {
	      type: String,
	      required: true
	    },
	    role0: {
	      type: String,
	      required: false
	    },
	    role1: {
	      type: String,
	      required: false
	    },
	    role2: {
	      type: String,
	      required: false
	    },
	    role3: {
	      type: String,
	      required: false
	    },
	    role4: {
	      type: String,
	      required: false
	    }
	  },
	  { _id: true }
	);
	
	export default mongoose.models.Builder || mongoose.model<BuilderType>('Builder', BuilderSchema);

```

budget.model.ts```ts
	import mongoose from 'mongoose';
	import { Budget as BudgetType } from '@/utils/dtos/budget.dto';
	
	/* BudgetSchema will correspond to the budget collection in the MongoDB database. */
	export const BudgetSchema: mongoose.Schema<BudgetType> = new mongoose.Schema(
	  {
	    creatorId: {
	      type: mongoose.Schema.Types.ObjectId,
	      required: true,
	      ref: 'User'
	    },
	    projectId: {
	      type: String,
	      required: true
	    },
	    budgetCategory: {
	      type: String,
	      required: true
	    },
	    budgetCode: {
	      type: String,
	      required: true
	    },
	    budgetCurrentBudget: {
	      type: Number,
	      required: true
	    },
	    budgetCurrentClaim: {
	      type: Number,
	      required: true
	    },
	    budgetClaimedToDate: {
	      type: Number,
	      required: true
	    },
	    budgetIndex: {
	      type: Number,
	      default: 0
	    },
	    budgetOriginalBudget: {
	      type: Number,
	      required: true
	    },
	    budgetRevision: {
	      type: Number,
	      required: true
	    },
	    budgetTotalClaim: {
	      type: Number,
	      required: true
	    },
	    budgetTotalClaimPercentage: {
	      type: Number,
	      required: true
	    },
	    budgetCostToComplete: {
	      type: Number,
	      required: true
	    },
	    dateCreate: {
	      type: Date,
	      required: true
	    },
	    dateModify: {
	      type: Date,
	      required: true
	    }
	  },
	  { _id: true }
	);
	
	export default mongoose.models.Budget || mongoose.model<BudgetType>('Budget', BudgetSchema);

```

role.model.ts```ts
	import mongoose from 'mongoose';
	import { Role as RoleType } from '@/utils/dtos/role.dto';
	import Permission from '@/backend/models/permission.model';
	
	/* RoleSchema will correspond to the role collection in the MongoDB database. */
	const RoleSchema: mongoose.Schema<RoleType> = new mongoose.Schema(
	  {
	    name: {
	      type: String,
	      required: true
	    },
	    key: {
	      type: String,
	      required: true,
	      unique: true
	    },
	    type: {
	      type: String,
	      enum: ['Builder', 'Contractor', 'Super Admin', 'Admin', 'Generic'],
	      required: true
	    },
	    permissionIds: [
	      {
	        permissionId: {
	          type: String,
	          ref: Permission.modelName,
	          required: true
	        }
	      }
	    ],
	    dateCreate: {
	      type: Date,
	      default: new Date(),
	      required: true
	    },
	    dateModify: {
	      type: Date,
	      required: false
	    }
	  },
	  { _id: true }
	);
	
	export default mongoose.models.Role || mongoose.model<RoleType>('Role', RoleSchema);

```

company.model.ts```ts
	import mongoose from 'mongoose';
	import { Company as CompanyType } from '@/utils/dtos/company.dto';
	import Role from '@/backend/models/role.model';
	import User from '@/backend/models/user.model';
	
	/* RoleSchema will correspond to the role collection in the MongoDB database. */
	const CompanySchema: mongoose.Schema<CompanyType> = new mongoose.Schema(
	  {
	    name: {
	      type: String,
	      required: true
	    },
	    key: {
	      type: String,
	      required: true,
	      unique: true
	    },
	    type: {
	      type: String,
	      required: true
	    },
	    imageUrl: {
	      type: String,
	      required: false
	    },
	    projectIds: [
	      {
	        projectId: {
	          type: String,
	          required: false
	        }
	      }
	    ],
	    members: [
	      {
	        roleId: {
	          type: String,
	          required: true,
	          ref: Role.modelName
	        },
	        userId: {
	          type: String,
	          required: false,
	          ref: User.modelName
	        }
	      }
	    ],
	    dateCreate: {
	      type: Date,
	      required: false
	    },
	    dateModify: {
	      type: Date,
	      required: false
	    }
	  },
	  { _id: true }
	);
	
	export default mongoose.models.Company || mongoose.model<CompanyType>('Company', CompanySchema);

```

permission.model.ts```ts
	import mongoose from 'mongoose';
	import { Permission as PermissionType } from '@/utils/dtos/permission.dto';
	
	/* RoleSchema will correspond to the role collection in the MongoDB database. */
	const PermissionSchema: mongoose.Schema<PermissionType> = new mongoose.Schema(
	  {
	    name: {
	      type: String,
	      required: true
	    },
	    key: {
	      type: String,
	      required: true,
	      unique: true
	    },
	    description: {
	      type: String,
	      required: false
	    },
	    urls: [
	      {
	        url: {
	          type: String,
	          required: true
	        },
	        method: {
	          type: String,
	          required: true
	        }
	      }
	    ],
	    roleIds: [
	      {
	        roleId: {
	          type: String,
	          required: false
	        }
	      }
	    ],
	    dateCreate: {
	      type: Date
	    },
	    dateModify: {
	      type: Date
	    }
	  },
	  { _id: true }
	);
	
	export default mongoose.models.Permission || mongoose.model<PermissionType>('Permission', PermissionSchema);

```

contractor.model.ts```ts
	import mongoose from 'mongoose';
	import { Contractor as ContractorType } from '@/utils/dtos/contractor.dto';
	
	/* ContractorSchema will correspond to the contractor collection in the MongoDB database. */
	const ContractorSchema: mongoose.Schema<ContractorType> = new mongoose.Schema(
	  {
	    creatorEmail: {
	      type: String,
	      required: true
	    },
	    creatorId: {
	      type: String,
	      required: true,
	      ref: 'User'
	    },
	    address: {
	      type: String,
	      required: true
	    },
	    budgetSeperatorComma: {
	      type: Boolean,
	      required: true
	    },
	    budgetSeperatorSemiColon: {
	      type: Boolean,
	      required: true
	    },
	    budgetSeperatorTab: {
	      type: Boolean,
	      required: true
	    },
	    category: {
	      type: String,
	      required: true
	    },
	    completionStatus: {
	      type: String,
	      required: true
	    },
	    contractorName: {
	      type: String,
	      required: true
	    },
	    currency: {
	      type: String,
	      required: true
	    },
	    date: {
	      type: Date,
	      required: true
	    },
	    dateCreate: {
	      type: Date,
	      required: true
	    },
	    dateModify: {
	      type: Date,
	      required: true
	    },
	    generalContractor: {
	      type: String,
	      required: true
	    },
	    imageUrl: {
	      type: String,
	      required: false
	    },
	    items: {
	      type: String,
	      required: true
	    },
	    role0: {
	      type: String,
	      required: false
	    },
	    role1: {
	      type: String,
	      required: false
	    },
	    role2: {
	      type: String,
	      required: false
	    }
	  },
	  { _id: true }
	);
	
	export default mongoose.models.Contractor || mongoose.model<ContractorType>('Contractor', ContractorSchema);

```


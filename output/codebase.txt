README.md```md
	# Guideline
	
	## ENV
	
	Copy the .env.sample to .env before starting anything
	
	## Development Mode
	
	```bash
	
	# MongoDB: 27017
	# MongoEx: http://localhost:8081
	
	# Start 
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml up -d
	
	# Stop
	docker-compose -f docker-compose.yml -f docker-compose.dev.yml stop
	```
	
	## Production Mode
	
	```bash
	
	# MongoDB:27017
	
	# Start 
	docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d
	
	# Stop
	docker-compose -f docker-compose.yml -f docker-compose.prod.yml --build stop
	```

```

next.config.js```js
	/**
	 * @license
	 * Copyright 2024 J2C
	 */
	
	const path = require('path');
	
	/** @type {import('next').NextConfig} */
	module.exports = {
	  typescript: {
	    // !! WARN !!
	    // Dangerously allow production builds to successfully complete even if
	    // your project has type errors.
	    // !! WARN !!
	    ignoreBuildErrors: false
	  },
	  eslint: {
	    // Warning: This allows production builds to successfully complete even if
	    // your project has ESLint errors.
	    ignoreDuringBuilds: false,
	    dirs: ['src', 'pages', 'components', 'lib', 'utils']
	  },
	  sassOptions: {
	    includePaths: [path.join(__dirname, 'styles')]
	  },
	  // todo: this need to set to true or remove it as default is true. set false as chart was giving error when first render
	  // https://github.com/apexcharts/apexcharts.js/issues/3652
	  reactStrictMode: false,
	  modularizeImports: {
	    '@mui/material': {
	      transform: '@mui/material/{{member}}'
	    },
	    '@mui/lab': {
	      transform: '@mui/lab/{{member}}'
	    },
	    '@mui/icons-material': {
	      transform: '@mui/icons-material/{{member}}'
	    }
	  },
	  images: {
	    domains: ['flagcdn.com']
	  },
	  env: {
	    GOOGLE_CLIENT_ID: process.env.GOOGLE_CLIENT_ID,
	    GOOGLE_CLIENT_SECRET: process.env.GOOGLE_CLIENT_SECRET,
	    REACT_APP_VERSION: process.env.REACT_APP_VERSION,
	    REACT_APP_API_URL: process.env.REACT_APP_API_URL,
	
	    REACT_APP_MAPBOX_ACCESS_TOKEN: process.env.REACT_APP_MAPBOX_ACCESS_TOKEN,
	
	    REACT_APP_FIREBASE_API_KEY: process.env.REACT_APP_FIREBASE_API_KEY,
	    REACT_APP_FIREBASE_AUTH_DOMAIN: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,
	    REACT_APP_FIREBASE_PROJECT_ID: process.env.REACT_APP_FIREBASE_PROJECT_ID,
	    REACT_APP_FIREBASE_STORAGE_BUCKET: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,
	    REACT_APP_FIREBASE_MESSAGING_SENDER_ID: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,
	    REACT_APP_FIREBASE_APP_ID: process.env.REACT_APP_FIREBASE_APP_ID,
	    REACT_APP_FIREBASE_MEASUREMENT_ID: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,
	
	    REACT_APP_AWS_POOL_ID: process.env.REACT_APP_AWS_POOL_ID,
	    REACT_APP_AWS_APP_CLIENT_ID: process.env.REACT_APP_AWS_APP_CLIENT_ID,
	
	    REACT_APP_AUTH0_CLIENT_ID: process.env.REACT_APP_AUTH0_CLIENT_ID,
	    REACT_APP_AUTH0_DOMAIN: process.env.REACT_APP_AUTH0_DOMAIN
	  }
	};

```

src/config.ts```ts
	import { LAYOUT_CONST } from 'constant';
	
	// third party
	import { Roboto } from 'next/font/google';
	
	// types
	import { ConfigProps } from 'types/config';
	
	// basename: only at build time to set, and Don't add '/' at end off BASENAME for breadcrumbs, also Don't put only '/' use blank('') instead,
	// like '/berry-material-react/react/default'
	export const BASE_PATH = '';
	
	export const DASHBOARD_PATH = '/builder';
	export const CONTRACTOR_PATH = '/contractor';
	export const PROJECT_PATH = '/project';
	export const HORIZONTAL_MAX_ITEM = 7;
	
	const roboto = Roboto({ subsets: ['latin'], weight: ['300', '400', '500', '700'] });
	
	const config: ConfigProps = {
	  layout: LAYOUT_CONST.VERTICAL_LAYOUT, // vertical, horizontal
	  drawerType: LAYOUT_CONST.DEFAULT_DRAWER, // default, mini-drawer
	  fontFamily: roboto.style.fontFamily,
	  borderRadius: 8,
	  outlinedFilled: true,
	  navType: 'light', // light, dark
	  presetColor: 'default', // default, theme1, theme2, theme3, theme4, theme5, theme6
	  locale: 'en', // 'en' - English, 'fr' - French, 'ro' - Romanian, 'zh' - Chinese
	  rtlLayout: false,
	  container: false
	};
	
	export default config;

```

src/middleware.ts```ts
	import stackMiddlewares from '@/backend/middlewares/stack.middleware';
	import { withAuth } from '@/backend/middlewares/auth.middleware';
	import { withUnAuth } from '@/backend/middlewares/unauth.middleware';
	import { withJwt } from '@/backend/middlewares/jwt.middleware';
	
	export default stackMiddlewares([withUnAuth, withAuth, withJwt]);
	
	export const config = {
	  // matcher: ['/((?!api/auth|_next/static|_next/image|images|icons|favicon.ico|style-guide).*)'],
	  unstable_allowDynamic: [
	    '**/node_modules/lodash/_root.js' // use a glob to allow anything in the function-bind 3rd party module
	  ]
	};

```

src/routes.ts```ts
	const routes = {
	  dashboard: {
	    label: 'Builders',
	    getUrl: () => '/builder',
	    key: 'builder'
	  },
	  register: {
	    label: 'Register',
	    getUrl: () => '/register',
	    key: 'register'
	  },
	  login: {
	    label: 'Login',
	    getUrl: () => '/login',
	    key: 'register'
	  },
	  forgotPassword: {
	    label: 'Forgot Password',
	    getUrl: () => '/forgot-password',
	    key: 'forgotPassword'
	  },
	  termAndCondition: {
	    label: 'Terms & Condition.',
	    getUrl: () => '/term-condition',
	    key: 'termAndCondition'
	  },
	  contractor: {
	    label: 'Contractor',
	    getUrl: () => '/contractor',
	    key: 'contractor'
	  },
	  user: {
	    label: 'System Users',
	    getUrl: (id?: string | number) => `/user${!!id ? `/${id}` : ''}`,
	    key: 'user'
	  },
	  myAccount: {
	    label: 'My Account',
	    getUrl: () => '/my-account',
	    key: 'myAccount'
	  },
	  profile: {
	    label: 'Profile',
	    getUrl: () => '/my-account',
	    key: 'profile'
	  },
	  err500: {
	    label: 'Error 500',
	    getUrl: () => '/maintenance/500',
	    key: 'err500'
	  },
	  verifyEmail: {
	    label: 'Verify Email',
	    getUrl: () => '/verify-email',
	    key: 'verifyEmail'
	  },
	  resetPassword: {
	    label: 'Reset Password',
	    getUrl: () => '/reset-password',
	    key: 'resetPassword'
	  },
	  apiDocs: {
	    label: 'Api Docs',
	    getUrl: () => '/api-docs',
	    key: 'apiDocs'
	  },
	  projects: {
	    label: 'Projects',
	    getUrl: (id?: string | number) => `/projects${!!id ? `/${id}` : ''}`,
	    key: 'projects'
	  }
	};
	
	export default routes;

```

src/auth.ts```ts
	import NextAuth, { Account, Awaitable, Profile, Session, User, AuthOptions, DefaultSession } from 'next-auth';
	import CredentialsConfig from 'next-auth/providers/credentials';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import UserRepository from '@/backend/repositories/mongodb/user.repository';
	import GoogleProvider from 'next-auth/providers/google';
	import mongoose from 'mongoose';
	import { ErrorLoggIn, UserStatus } from '@/utils/enums';
	import DateCustom from '@/utils/datetime/date.custom';
	import { JWT, encode } from 'next-auth/jwt';
	import { AdapterUser } from 'next-auth/adapters';
	import AuthService from '@/backend/services/auth.service';
	
	export const authOptions = {
	  secret: process.env.NEXTAUTH_SECRET,
	  providers: [
	    CredentialsConfig({
	      name: 'credentials',
	      credentials: {
	        username: { label: 'Username', type: 'text' },
	        password: { label: 'Password', type: 'password' }
	      },
	      async authorize(credential: Record<'username' | 'password', string> | undefined): Promise<User | null> {
	        if (!credential || !credential.username || !credential.password) {
	          return null;
	        }
	
	        const conn = await MongoConnect();
	
	        const userRepository = new UserRepository(conn);
	        const bcrypt = require('bcrypt');
	
	        const user: mongoose.Document | null = await userRepository.findOne({
	          email: credential?.username,
	          emailConfirmed: true,
	          status: UserStatus.ACTIVE
	        });
	
	        if (user) {
	          const isCorrectPassword = await bcrypt.compare(credential.password, user.get('password'));
	
	          if (isCorrectPassword) {
	            await userRepository.update(user.get('_id').toString(), {
	              failedLoginAttempts: 0,
	              lastLogin: new DateCustom(),
	              dateModify: new DateCustom()
	            });
	
	            return {
	              id: user.get('_id').valueOf(),
	              name: user.get('name') || '',
	              email: user.get('email') || '',
	              image: user.get('imageUrl') || null
	            };
	          }
	
	          if (user.get('failedLoginAttempts') >= 5) {
	            await userRepository.update(user.get('_id').toString(), {
	              status: UserStatus.LOCKED,
	              dateModify: new DateCustom()
	            });
	
	            throw new Error(ErrorLoggIn.MAX_FAILED_ATTEMPTS);
	          }
	
	          // Update failed login attempts if password is incorrect
	          await userRepository.update(user.get('_id').toString(), {
	            failedLoginAttempts: user.get('failedLoginAttempts') + 1,
	            lastFailedLogin: new DateCustom().toISOString(),
	            dateModify: new DateCustom().toISOString()
	          });
	
	          throw new Error(ErrorLoggIn.INVALID_CREDENTIALS);
	        }
	
	        throw new Error(ErrorLoggIn.USER_NOT_FOUND);
	      }
	    }),
	    GoogleProvider({
	      clientId: process.env.GOOGLE_CLIENT_ID || '',
	      clientSecret: process.env.GOOGLE_CLIENT_SECRET || ''
	    })
	  ],
	  session: {
	    // Set it as jwt instead of database
	    strategy: 'jwt',
	    maxAge: 60 * 60 * 4 // 4 hours
	  },
	  jwt: {
	    // The maximum age of the NextAuth.js issued JWT in seconds.
	    // Defaults to `session.maxAge`.
	    maxAge: 60 * 60 * 4 // 4 hours
	  },
	  callbacks: {
	    authorized({ request, auth }: { request: Record<string, any>; auth: Record<string, any> }): boolean {
	      return true;
	    },
	    async jwt(params: {
	      token: JWT;
	      user: User | AdapterUser;
	      account: Account | null;
	      profile?: Profile | undefined;
	      trigger?: 'signIn' | 'signUp' | 'update' | undefined;
	      isNewUser?: boolean | undefined;
	      session?: any;
	    }): Promise<Record<string, any>> {
	      if (params.account) {
	        params.token = {
	          ...params.token,
	          provider: params.account.provider || ''
	        };
	      }
	      // Persist the OAuth access_token and or the user id to the token right after signin
	      return params.token;
	    },
	    // @ts-ignore
	    async session(
	      params: {
	        session: Session;
	        token: JWT;
	        user: AdapterUser;
	      } & {
	        newSession: any;
	        trigger: 'update';
	      }
	    ): Promise<Awaitable<Session | DefaultSession>> {
	      if (params.token) {
	        const conn = await MongoConnect();
	
	        const userRepository = new UserRepository(conn);
	        let user = await userRepository.findOne({ email: params.token.email || '' });
	
	        if (!user) {
	          const authService = new AuthService(conn);
	
	          const newUser = await authService.getOrCreateNewUser(
	            params.token.email as string,
	            params.token.name as string,
	            params.token.image as string
	          );
	
	          if (!newUser) {
	            throw new Error('User not found');
	          }
	
	          user = newUser;
	        }
	
	        params.session.user = {
	          ...params.session.user,
	          id: user.get('_id').valueOf() || '',
	          password: user.get('password') || null,
	          token: await encode({
	            token: {
	              id: user.get('_id').valueOf(),
	              email: user.get('email'),
	              name: user.get('name')
	            },
	            secret: (process.env.NEXTAUTH_SECRET as string) || '',
	            maxAge: 60 * 60 * 4 // 4 hours
	          }),
	          // @ts-ignore
	          provider: params.token.provider || ''
	        };
	      }
	
	      return params.session;
	    }
	  },
	  pages: {
	    signIn: '/login'
	  }
	} satisfies AuthOptions;
	
	export const { auth, signIn, signOut } = NextAuth(authOptions as unknown as AuthOptions);

```

src/backend/exceptions/idsnotfound.exception.ts```ts
	export default class IdsNotFoundException extends Error {
	  constructor(message: string) {
	    super(message);
	    this.name = 'IdsNotFoundException';
	  }
	}

```

src/backend/exceptions/notfound.exception.ts```ts
	export default class NotFoundException extends Error {
	  constructor(
	    message: string,
	    public status: number = 404
	  ) {
	    super(message);
	    this.name = 'NotFoundException';
	    this.status = status;
	  }
	}

```

src/backend/services/user.service.ts```ts
	import UserRepositoryInterface from '@/backend/repositories/interfaces/user.repository.interface';
	import UserDto from '@/utils/dtos/user.dto';
	import mongoose from 'mongoose';
	import { Actions, UserStatus } from '@/utils/enums';
	import PaginationStruct from '@/backend/structs/pagination.struct';
	import { User as UserType } from '@/utils/dtos/user.dto';
	import IdsNotFoundException from '@/backend/exceptions/idsnotfound.exception';
	import NotFoundException from "@/backend/exceptions/notfound.exception";
	
	export default class UserService {
	  protected userRepository: UserRepositoryInterface;
	
	  constructor(userRepository: UserRepositoryInterface) {
	    this.userRepository = userRepository;
	  }
	
	  async getUserSelectedContractorId(userId: string): Promise<UserDto> {
	    return this.userRepository.findUserId(userId);
	  }
	
	  async deleteUser(userId: string): Promise<mongoose.Document | null> {
	    return this.userRepository.delete(userId);
	  }
	
	  async listingUsers(
	    limit: number,
	    offset: number,
	    order: { [key: string]: 'asc' | 'desc' },
	    options: { [key: string]: any } | object = {}
	  ): Promise<{
	    pagination: PaginationStruct;
	    collection: UserType[];
	  }> {
	    const userDto = new UserDto();
	    // Check valid order field
	    const validOrderFields = Object.keys(userDto);
	
	    for (const key in order) {
	      if (!validOrderFields.includes(key)) {
	        delete order[key];
	      }
	    }
	
	    if (Object.keys(order).length === 0) {
	      order = { contractorName: 'asc' };
	    }
	
	    const skip = (offset - 1) * limit;
	    const query = {};
	
	    if (options.hasOwnProperty('exclude')) {
	      // @ts-ignore
	      query['_id'] = { $nin: options['exclude'] };
	    }
	
	    const total = await this.userRepository.count(query);
	    const users = await this.userRepository.findWithLimit(query, limit, skip, order);
	
	    const collection: UserType[] = [];
	
	    users.forEach((contractor: mongoose.Document<UserType>) => {
	      userDto.setData(contractor.toJSON() as UserType);
	      collection.push(userDto.toObject() as UserType);
	    });
	
	    const pagination = new PaginationStruct(offset, limit, total);
	
	    return {
	      pagination,
	      collection
	    };
	  }
	
	  async upsertUserSelectedCompanyId(
	    userId: string,
	    companyId: string,
	    isContractor: boolean
	  ): Promise<mongoose.Document<UserDto | any> | null> {
	    try {
	      const user: UserDto = await this.userRepository.findUserId(userId);
	
	      const selectedCompanyIdDictionary = isContractor
	        ? { selectedContractorId: companyId, dateModify: new Date() }
	        : { selectedBuilderId: companyId, dateModify: new Date() };
	
	      return this.userRepository.update(user._id, selectedCompanyIdDictionary);
	    } catch (e) {
	      console.log('Warning: User not logged yet');
	
	      return null;
	    }
	  }
	
	  async getProfile(userId: string): Promise<UserDto> {
	    return this.userRepository.findUserId(userId);
	  }
	
	  async updateProfile(userId: string, data: any): Promise<mongoose.Document | null> {
	    if (data.password) {
	      const bcrypt = require('bcrypt');
	      data.password = await bcrypt.hash(data.password, 10);
	    }
	
	    if (data.birthDate) {
	      const [day, month, year] = data.birthDate.split('-');
	      data.birthDate = new Date(parseInt(year, 10), parseInt(month, 10) - 1, parseInt(day, 10));
	    }
	
	    if (data.newPassword) {
	      const bcrypt = require('bcrypt');
	      data.password = await bcrypt.hash(data.newPassword.toString(), 10);
	    }
	
	    return this.userRepository.update(userId, data);
	  }
	
	  async changePassword(email: string, password: string, token: string): Promise<mongoose.Document | null> {
	    const user: mongoose.Document | null = await this.userRepository.findOne({
	      email,
	      passwordResetToken: token,
	      status: UserStatus.INACTIVE,
	      password: null
	    });
	
	    if (!user) {
	      throw new Error('User is not valid or already active. Please request a new password reset link.');
	    }
	    const userId: string = user.get('_id').valueOf();
	
	    return this.updateProfile(userId, {
	      password: password,
	      passwordResetToken: null,
	      dateModify: new Date(),
	      status: UserStatus.ACTIVE
	    });
	  }
	
	  async bulkUpdateOrDelete(ids: string[], action: Actions): Promise<void> {
	    const existingUsers = await this.userRepository.find({ _id: { $in: ids } });
	
	    if (existingUsers.length !== ids.length) {
	      const missingIds = ids.filter((id) => !existingUsers.some((user) => user.get('_id').valueOf() === id));
	
	      throw new IdsNotFoundException(`Users with ids ${missingIds.join(', ')} do not exist`);
	    }
	
	    switch (action) {
	      case Actions.DELETE:
	        await this.userRepository.deleteMany({ _id: { $in: ids } });
	        break;
	      case Actions.ACTIVATE:
	        await this.userRepository.updateMany({ _id: { $in: ids } }, { status: UserStatus.ACTIVE });
	        break;
	      case Actions.DEACTIVATE:
	        await this.userRepository.updateMany({ _id: { $in: ids } }, { status: UserStatus.INACTIVE });
	        break;
	      case Actions.ARCHIVE:
	        await this.userRepository.updateMany({ _id: { $in: ids } }, { status: UserStatus.LOCKED });
	        break;
	    }
	  }
	
	  async singleUpdateOrDelete(id: string, action: Actions): Promise<void> {
	    const existingUser = await this.userRepository.findOne({ _id: id });
	
	    if (!existingUser) {
	      throw new NotFoundException(`User with id ${id} does not exist`);
	    }
	
	    switch (action) {
	      case Actions.DELETE:
	        await this.userRepository.delete(id);
	        break;
	      case Actions.ACTIVATE:
	        await this.userRepository.update(id, { status: UserStatus.ACTIVE });
	        break;
	      case Actions.DEACTIVATE:
	        await this.userRepository.update(id, { status: UserStatus.INACTIVE });
	        break;
	      case Actions.ARCHIVE:
	        await this.userRepository.update(id, { status: UserStatus.LOCKED });
	        break;
	    }
	  }
	}

```

src/backend/services/role.service.ts```ts
	import RoleRepositoryInterface from '@/backend/repositories/interfaces/role.repository.interface';
	import {
	  ROLE_ARRAY_BUILDER,
	  ROLE_ARRAY_GENERAL,
	  ROLE_LEVEL_ENUM_BUILDER,
	  ROLE_LEVEL_ENUM_GENERAL,
	  ROLE_TARGET_TYPE_ENUM
	} from '@/utils/common';
	import mongoose from 'mongoose';
	import RoleDto, { Role as RoleType } from '@/utils/dtos/role.dto';
	import { Contractor as ContractorType } from '@/utils/dtos/contractor.dto';
	import ContractorRepositoryInterface from '@/backend/repositories/interfaces/contractor.repository.interface';
	import { isEmaillRoleTypeEnum } from '@/utils/helper';
	import { ROLE_REGEX_SEPARATOR } from '@/utils/constant';
	import { ObjectId } from 'bson';
	
	export default class RoleService {
	  protected roleRepository: RoleRepositoryInterface;
	  protected contractorRepository: ContractorRepositoryInterface;
	
	  constructor(roleRepository: RoleRepositoryInterface, contractorRepository: ContractorRepositoryInterface) {
	    this.roleRepository = roleRepository;
	    this.contractorRepository = contractorRepository;
	  }
	
	  async getRolesByTargetId(targetId: string, targetTypeEnum: number): Promise<RoleType[]> {
	    if (!targetId) {
	      return [];
	    }
	
	    const roles: mongoose.Document[] = await this.roleRepository.findWithSort({ targetId, targetTypeEnum }, { roleLevelEnum: 'desc' });
	
	    if (!roles.length) {
	      return [];
	    }
	
	    const data: RoleType[] = [];
	
	    for (const role of roles) {
	      let roleName = null;
	      let roleEmails = null;
	      if (targetTypeEnum == ROLE_TARGET_TYPE_ENUM.projectContractor) {
	        const contractorId = role.get('individualId');
	        const contractor: mongoose.Document<ContractorType> | null = await this.contractorRepository.findOne(contractorId);
	
	        if (!contractor) {
	          continue;
	        }
	
	        roleName = contractor.get('contractorName');
	        roleEmails = `${contractor.get('creatorEmail')}${contractor.get('role0')}${contractor.get('role1')}${contractor.get('role2')}`;
	      }
	
	      const roleDto = new RoleDto();
	      roleDto.setData({
	        id: role.get('_id'),
	        dateCreate: role.get('dateCreate'),
	        dateModify: role.get('dateModify'),
	        individualEmail: role.get('individualEmail'),
	        individualId: role.get('individualId'),
	        parentId: role.get('parentId'),
	        roleLevelEnum: role.get('roleLevelEnum'),
	        targetId: role.get('targetId'),
	        targetTypeEnum: role.get('targetTypeEnum'),
	        roleName,
	        roleEmails
	      });
	
	      data.push(roleDto.toObject() as RoleType);
	    }
	
	    return data;
	  }
	
	  async isUserInContractors(userId: string, contractorsIndividualId: string[]): Promise<boolean> {
	    const roles: mongoose.Document[] = await this.roleRepository.find({
	      targetTypeEnum: ROLE_TARGET_TYPE_ENUM.contractorEmail,
	      targetId: { $in: contractorsIndividualId },
	      individualId: userId
	    });
	
	    return !!roles.length;
	  }
	
	  async getHighestRoleLevel(
	    roleDictionaryArray: Array<{ individualId: string; targetTypeEnum: number; targetId: string }>
	  ): Promise<number> {
	    let roleLevelEnum = 0;
	    for (let i = 0; i < roleDictionaryArray.length; i++) {
	      const roleDictionary = roleDictionaryArray[i];
	      let individualId = roleDictionary['individualId'];
	      const targetTypeEnum = roleDictionary['targetTypeEnum'];
	      const targetId = roleDictionary['targetId'];
	
	      const result: mongoose.Document[] = await this.roleRepository.findWithSort(
	        { targetTypeEnum, targetId, individualId },
	        { roleLevelEnum: 'desc' }
	      );
	
	      // const querySnapshot = await getDocs(q);
	      result.forEach((role: mongoose.Document<RoleDto>) => {
	        if (role.get('roleLevelEnum') > roleLevelEnum) {
	          roleLevelEnum = role.get('roleLevelEnum');
	        }
	      });
	    }
	
	    return roleLevelEnum;
	  }
	
	  async updateRoles(
	    targetId: string,
	    targetTypeEnum: number,
	    creatorId: string | null,
	    creatorEmail: string | null,
	    parentId: string | any,
	    roleArray: string | any[]
	  ) {
	    await this.roleRepository.deleteMany({ targetId, targetTypeEnum });
	    // await deleteRoles(targetId, targetTypeEnum);
	    const isBuilder = targetTypeEnum === ROLE_TARGET_TYPE_ENUM.builderEmail || targetTypeEnum == ROLE_TARGET_TYPE_ENUM.projectEmail;
	
	    const roles: RoleDto[] = [];
	    for (let i = 0; i < roleArray.length; i++) {
	      const role = roleArray[i];
	      const individuals = role.split(ROLE_REGEX_SEPARATOR);
	
	      const roleLevelEnum = isBuilder ? ROLE_ARRAY_BUILDER[i] : ROLE_ARRAY_GENERAL[i];
	
	      for (const individual of individuals) {
	        let individualId = null;
	        let individualEmail = null;
	        if (isEmaillRoleTypeEnum(targetTypeEnum)) {
	          individualEmail = individual.toLowerCase();
	          // TODO individualId = userId
	          individualId = '';
	        } else {
	          individualId = individual;
	        }
	
	        const role = new RoleDto();
	        role.setData({
	          _id: new ObjectId(),
	          targetId,
	          targetTypeEnum,
	          individualId,
	          individualEmail,
	          parentId,
	          roleLevelEnum,
	          dateCreate: new Date(),
	          dateModify: new Date(),
	          roleName: '',
	          roleEmails: null
	        });
	        roles.push(role);
	      }
	    }
	
	    await this.roleRepository.createMany(roles);
	
	    // Add creatorEmail role only for builder/contractor emails
	    let roleLevel = null;
	    if (targetTypeEnum == ROLE_TARGET_TYPE_ENUM.builderEmail) {
	      roleLevel = ROLE_LEVEL_ENUM_BUILDER.max;
	    }
	    if (targetTypeEnum == ROLE_TARGET_TYPE_ENUM.contractorEmail) {
	      roleLevel = ROLE_LEVEL_ENUM_GENERAL.max;
	    }
	    if (roleLevel != null) {
	      const role = new RoleDto();
	
	      role.setData({
	        _id: new ObjectId(),
	        targetId,
	        targetTypeEnum,
	        individualId: creatorId ? creatorId : '',
	        individualEmail: creatorEmail ? creatorEmail : '',
	        parentId: '',
	        roleLevelEnum: roleLevel,
	        dateCreate: new Date(),
	        dateModify: new Date(),
	        roleName: '',
	        roleEmails: null
	      });
	      await this.roleRepository.create(role);
	    }
	  }
	}

```

src/backend/services/invoice.service.ts```ts
	import InvoiceRepositoryInterface from '@/backend/repositories/interfaces/invoice.repository.interface';
	import InvoiceDto, { Invoice as InvoiceType } from '@/utils/dtos/invoice.dto';
	import mongoose from 'mongoose';
	import { INVOICE_STATUS_ENUM, ROLE_LEVEL_ENUM_BUILDER, ROLE_TARGET_TYPE_ENUM } from '@/utils/common';
	import RoleRepositoryInterface from '@/backend/repositories/interfaces/role.repository.interface';
	import { Role as RoleType } from '@/utils/dtos/role.dto';
	import ContractorRepositoryInterface from '@/backend/repositories/interfaces/contractor.repository.interface';
	import { ObjectId } from 'bson';
	import { GST_RATE, HOLDBACK_RATE, PST_RATE } from '@/utils/constant';
	
	export default class InvoiceService {
	  protected invoiceRepository: InvoiceRepositoryInterface;
	  protected roleRepository: RoleRepositoryInterface;
	  protected contractorRepository: ContractorRepositoryInterface;
	
	  constructor(
	    invoiceRepository: InvoiceRepositoryInterface,
	    roleRepository: RoleRepositoryInterface,
	    contractorRepository: ContractorRepositoryInterface
	  ) {
	    this.invoiceRepository = invoiceRepository;
	    this.roleRepository = roleRepository;
	    this.contractorRepository = contractorRepository;
	  }
	
	  async getInvoicesByProjectId(
	    projectId: string,
	    highestRole: number,
	    contractorId: string | null
	  ): Promise<{
	    invoices: InvoiceType[];
	    invoiceIndexMax: number;
	    invoiceBudgetTotal: number;
	  }> {
	    const filter: { [key: string]: string | null } = {
	      projectId
	    };
	
	    if (highestRole >= ROLE_LEVEL_ENUM_BUILDER.min) {
	      filter['invoiceContractorId'] = contractorId;
	    }
	
	    const data: mongoose.Document[] = await this.invoiceRepository.findWithSort(filter, { invoiceIndex: 'asc' });
	
	    const invoices = [];
	    let invoiceIndexMax = -1;
	    let invoiceBudgetTotal = 0;
	
	    for (const item of data) {
	      const imageBucket: string = item.get('imageBucket') || '';
	      const invoiceDto = new InvoiceDto();
	      const data = {
	        id: item.get('_id'),
	        budgetId: item.get('budgetId'),
	        projectId: item.get('projectId'),
	        creatorId: item.get('creatorId'),
	        creatorEmail: item.get('creatorEmail'),
	        invoiceContractorId: item.get('invoiceContractorId'),
	        invoiceContractorName: item.get('invoiceContractorName'),
	        invoiceIndex: item.get('invoiceIndex'),
	        invoiceNumber: item.get('invoiceNumber'),
	        invoicePst: item.get('invoicePst'),
	        invoicePstOverride: item.get('invoicePstOverride'),
	        invoiceReceivedDate: item.get('invoiceReceivedDate'),
	        invoiceStatus: item.get('invoiceStatus'),
	        invoiceSubtotal: item.get('invoiceSubtotal'),
	        invoiceTotal: item.get('invoiceTotal'),
	        invoiceDate: item.get('invoiceDate'),
	        invoiceDescription: item.get('invoiceDescription'),
	        dateCreate: item.get('dateCreate'),
	        dateModify: item.get('dateModify'),
	        imageBucket: item.get('imageBucket'),
	        imageUrl: imageBucket,
	        invoiceAdditionalFields: item.get('invoiceAdditionalFields'),
	        invoiceCategory: item.get('invoiceCategory'),
	        invoiceChqDate: item.get('invoiceChqDate'),
	        invoiceChqNumber: item.get('invoiceChqNumber'),
	        invoiceClaimNumber: item.get('invoiceClaimNumber'),
	        invoiceCode: item.get('invoiceCode'),
	        invoiceGst: item.get('invoiceGst'),
	        invoiceGstOverride: item.get('invoiceGstOverride')
	      };
	      invoiceDto.setData(data);
	
	      if (item.get('invoiceIndex') > invoiceIndexMax) {
	        invoiceIndexMax = item.get('invoiceIndex');
	      }
	
	      invoiceBudgetTotal += item.get('invoiceTotal');
	
	      invoices.push(invoiceDto.toObject() as InvoiceType);
	    }
	
	    return {
	      invoices,
	      invoiceIndexMax,
	      invoiceBudgetTotal
	    };
	  }
	
	  async getInvoiceContractors(projectId: string): Promise<{ label: string; invoiceContractorId: string }[]> {
	    const roles: mongoose.Document[] = await this.roleRepository.find({
	      targetTypeEnum: ROLE_TARGET_TYPE_ENUM.projectContractor,
	      targetId: projectId
	    });
	
	    const invoiceContractors = [];
	    const contractorIds: string[] = roles.map((role: mongoose.Document<RoleType>) => role.get('individualId'));
	
	    const contractors: mongoose.Document[] = await this.contractorRepository.find({ _id: { $in: contractorIds } });
	
	    for (const contractor of contractors) {
	      invoiceContractors.push({
	        label: contractor.get('contractorName'),
	        invoiceContractorId: contractor.get('_id')
	      });
	    }
	
	    return invoiceContractors;
	  }
	
	  async upsertInvoice(isUpdate: boolean, data: any): Promise<mongoose.Document | null> {
	    const invoiceDto = new InvoiceDto();
	    const payload = {
	      ...data,
	      invoiceIndex: Number(data.invoiceIndex),
	      invoiceTotal: Number(data.invoiceTotal),
	      invoiceStatus: INVOICE_STATUS_ENUM.open,
	      imageBucket: data.imageBucket ? data.imageBucket : ''
	    };
	
	    if (isUpdate) {
	      return this.invoiceRepository.update(data._id, payload);
	    }
	
	    const newPayload = {
	      ...payload,
	      _id: new ObjectId(),
	      invoiceTotal: Number(data.invoiceTotal.toString().replace(/,|$/g, '')),
	      dateCreate: new Date(),
	      dateModify: new Date()
	    };
	
	    invoiceDto.setData(newPayload);
	
	    return this.invoiceRepository.create(invoiceDto);
	  }
	
	  async sumInvoiceTotals(budgetId: string, currentClaimNumber: string | null): Promise<number> {
	    const filter = currentClaimNumber === null ? { budgetId } : { budgetId, invoiceClaimNumber: currentClaimNumber };
	
	    const invoices: mongoose.Document[] = await this.invoiceRepository.find(filter);
	
	    let sum = 0;
	
	    invoices.forEach((invoice: mongoose.Document<InvoiceType>) => {
	      const invoiceApprove = invoice.get('invoiceApprove');
	      if (invoiceApprove === undefined || !invoiceApprove) {
	        // Only add completely approved invoices
	        return;
	      }
	      const invoiceSubtotal = invoice.get('invoiceSubtotal');
	      const invoiceGst = invoice.get('invoiceGst');
	      const invoiceGstOverride = invoice.get('invoiceGstOverride');
	      const invoicePst = invoice.get('invoicePst');
	      const invoicePstOverride = invoice.get('invoicePstOverride');
	      const invoiceHoldbackEnabled = invoice.get('invoiceHoldbackEnabled');
	
	      const invoiceTotal = this.calculateInvoiceTotal(
	        invoiceSubtotal,
	        invoiceGst,
	        invoiceGstOverride,
	        invoicePst,
	        invoicePstOverride,
	        invoiceHoldbackEnabled
	      );
	
	      sum += invoiceTotal;
	    });
	
	    return sum;
	  }
	
	  private calculateInvoiceTotal(
	    invoiceSubtotal: number,
	    invoiceGst: number,
	    invoiceGstOverride: any,
	    invoicePst: number,
	    invoicePstOverride: boolean,
	    invoiceHoldbackEnabled: boolean
	  ): number {
	    return (
	      invoiceSubtotal +
	      (invoiceGstOverride ? invoiceGst : invoiceSubtotal * GST_RATE) +
	      (invoicePstOverride ? invoicePst : invoiceSubtotal * PST_RATE) +
	      (invoiceHoldbackEnabled ? invoiceSubtotal * HOLDBACK_RATE : 0)
	    );
	  }
	}

```

src/backend/services/project.service.ts```ts
	import ProjectRepositoryInterface from '@/backend/repositories/interfaces/project.repository.interface';
	import RoleRepositoryInterface from '@/backend/repositories/interfaces/role.repository.interface';
	import { ROLE_LEVEL_ENUM_BUILDER, ROLE_TARGET_TYPE_ENUM } from '@/utils/common';
	import mongoose from 'mongoose';
	import ProjectDto, { Project as ProjectType } from '@/utils/dtos/project.dto';
	import { Role as RoleType } from '@/utils/dtos/role.dto';
	
	export default class ProjectService {
	  protected projectRepository: ProjectRepositoryInterface;
	  protected roleRepository: RoleRepositoryInterface;
	  constructor(projectRepository: ProjectRepositoryInterface, roleRepository: RoleRepositoryInterface) {
	    this.projectRepository = projectRepository;
	    this.roleRepository = roleRepository;
	  }
	
	  async getBuilderProjects(userId: string, highestRole: number, builderId: string): Promise<ProjectType[]> {
	    const projects: mongoose.Document[] = await this.projectRepository.findWithSort({ builderId: builderId }, { date: 'desc' });
	
	    if (!projects.length) {
	      return [];
	    }
	
	    const builderProjects: ProjectType[] = [];
	
	    for (const project of projects) {
	      const projectId = project.get('_id');
	
	      // Filter builder's projects according to user's builder/project role
	      if (!(highestRole >= ROLE_LEVEL_ENUM_BUILDER.min || (await this.isUserInProject(userId, projectId)))) {
	        continue;
	      }
	
	      const data = new ProjectDto();
	      data.setData({
	        _id: projectId.valueOf(),
	        address: project.get('address'),
	        amount: project.get('amount'),
	        builderId: project.get('builderId'),
	        category: project.get('category'),
	        completionStatus: project.get('completionStatus'),
	        creatorEmail: project.get('creatorEmail'),
	        creatorId: project.get('creatorId'),
	        currency: project.get('currency'),
	        currentClaimNumber: project.get('currentClaimNumber'),
	        budgetSeperatorComma: project.get('budgetSeperatorComma'),
	        budgetSeperatorSemiColon: project.get('budgetSeperatorSemiColon'),
	        budgetSeperatorTab: project.get('budgetSeperatorTab'),
	        date: project.get('date'),
	        dateCreate: project.get('dateCreate'),
	        dateModify: project.get('dateModify'),
	        imageBucket: project.get('imageBucket'),
	        imageUrl: project.get('imageBucket') || '',
	        items: project.get('items'),
	        projectName: project.get('projectName'),
	        role0: project.get('role0'),
	        role1: project.get('role1'),
	        role2: project.get('role2'),
	        role3: project.get('role3'),
	        role4: project.get('role4'),
	        roleProjectContractors: project.get('roleProjectContractors'),
	        startDate: null
	      });
	
	      builderProjects.push(data.toObject() as ProjectType);
	    }
	
	    return builderProjects;
	  }
	
	  async getContractorProjects(highestRole: number | null, contractorId: string): Promise<ProjectType[] | []> {
	    const roles: mongoose.Document[] = await this.roleRepository.find({
	      targetTypeEnum: ROLE_TARGET_TYPE_ENUM.projectContractor,
	      roleLevelEnum: { $gte: ROLE_LEVEL_ENUM_BUILDER.min },
	      individualId: contractorId
	    });
	
	    if (!roles.length) {
	      return [];
	    }
	
	    const projectIds: string[] = [];
	    roles.forEach((role: mongoose.Document<RoleType>) => {
	      if (highestRole && highestRole >= ROLE_LEVEL_ENUM_BUILDER.min) {
	        projectIds.push(role.get('targetId'));
	      }
	    });
	
	    const projects: mongoose.Document[] = await this.getProjects(projectIds);
	    const projectData = [];
	
	    for (const project of projects) {
	      const projectDto = new ProjectDto();
	      projectDto.setData({
	        _id: project.get('_id'),
	        address: project.get('address'),
	        amount: project.get('amount'),
	        builderId: project.get('builderId'),
	        category: project.get('category'),
	        completionStatus: project.get('completionStatus'),
	        creatorEmail: project.get('creatorEmail'),
	        creatorId: project.get('creatorId'),
	        currency: project.get('currency'),
	        currentClaimNumber: project.get('currentClaimNumber'),
	        budgetSeperatorComma: project.get('budgetSeperatorComma'),
	        budgetSeperatorSemiColon: project.get('budgetSeperatorSemiColon'),
	        budgetSeperatorTab: project.get('budgetSeperatorTab'),
	        date: project.get('date'),
	        dateCreate: project.get('dateCreate'),
	        dateModify: project.get('dateModify'),
	        imageBucket: project.get('imageBucket'),
	        imageUrl: project.get('imageBucket') || '',
	        items: project.get('items'),
	        projectName: project.get('projectName'),
	        role0: project.get('role0'),
	        role1: project.get('role1'),
	        role2: project.get('role2'),
	        role3: project.get('role3'),
	        role4: project.get('role4'),
	        roleProjectContractors: project.get('roleProjectContractors'),
	        startDate: null
	      });
	
	      projectData.push(projectDto.toObject() as ProjectType);
	    }
	
	    return projectData;
	  }
	
	  private async isUserInProject(userId: string, projectId: string): Promise<boolean> {
	    const roles = await this.roleRepository.find({
	      targetTypeEnum: ROLE_TARGET_TYPE_ENUM.projectEmail,
	      targetId: projectId,
	      individualId: userId
	    });
	
	    return !!roles.length;
	  }
	
	  async getProject(projectId: string): Promise<ProjectType | null> {
	    const project = await this.projectRepository.findOne({ _id: projectId });
	
	    if (!project) {
	      return null;
	    }
	
	    const data = new ProjectDto();
	    data.setData({
	      id: project.get('_id'),
	      address: project.get('address'),
	      amount: project.get('amount'),
	      builderId: project.get('builderId'),
	      category: project.get('category'),
	      completionStatus: project.get('completionStatus'),
	      creatorEmail: project.get('creatorEmail'),
	      creatorId: project.get('creatorId'),
	      currency: project.get('currency'),
	      currentClaimNumber: project.get('currentClaimNumber'),
	      budgetSeperatorComma: project.get('budgetSeperatorComma'),
	      budgetSeperatorSemiColon: project.get('budgetSeperatorSemiColon'),
	      budgetSeperatorTab: project.get('budgetSeperatorTab'),
	      date: project.get('date'),
	      dateCreate: project.get('dateCreate'),
	      dateModify: project.get('dateModify'),
	      imageBucket: project.get('imageBucket'),
	      imageUrl: project.get('imageBucket') || '',
	      items: project.get('items'),
	      projectName: project.get('projectName'),
	      role0: project.get('role0'),
	      role1: project.get('role1'),
	      role2: project.get('role2'),
	      role3: project.get('role3'),
	      role4: project.get('role4'),
	      roleProjectContractors: project.get('roleProjectContractors'),
	      startDate: null
	    });
	
	    return data.toObject() as ProjectType;
	  }
	
	  async getProjects(projectIds: string[]): Promise<mongoose.Document[]> {
	    return this.projectRepository.find({ _id: { $in: projectIds } });
	  }
	
	  async upsertProject(isUpdate: boolean, data: any): Promise<ProjectType> {
	    const projectDto = new ProjectDto();
	    projectDto.setData(data);
	
	    if (isUpdate) {
	      await this.projectRepository.update(data._id, projectDto);
	
	      return projectDto.toObject() as ProjectType;
	    }
	
	    await this.projectRepository.create(projectDto);
	
	    return projectDto.toObject() as ProjectType;
	  }
	
	  async updateProjectRoles(projectId: string, roles: string[]): Promise<string[]> {
	    const roleData: { [key: string]: string | Date } = {};
	    const roleArr: string[] = [];
	
	    roles.forEach((role: string, index: number): void => {
	      if (!role) {
	        roleData[`role${index}`] = '';
	      } else {
	        roleData[`role${index}`] = role.toLowerCase();
	      }
	
	      roleArr.push(roleData[`role${index}`] as string);
	    });
	
	    roleData['dateModify'] = new Date();
	
	    await this.projectRepository.update(projectId, roleData);
	
	    return roleArr;
	  }
	}

```

src/backend/services/budget.service.ts```ts
	import BudgetRepositoryInterface from '@/backend/repositories/interfaces/budget.repository.interface';
	import mongoose from 'mongoose';
	import BudgetDto, { Budget as BudgetType } from '@/utils/dtos/budget.dto';
	import { BUDGET_ENUM } from '@/utils/common';
	import { ObjectId } from 'bson';
	
	export default class BudgetService {
	  protected budgetRepository: BudgetRepositoryInterface;
	
	  constructor(budgetRepository: BudgetRepositoryInterface) {
	    this.budgetRepository = budgetRepository;
	  }
	
	  async getBudgetsByProjectId(projectId: string): Promise<{
	    budgets: BudgetType[] | [];
	    budgetIndexMax: number;
	    budgetBudgetTotal: number;
	  }> {
	    const result: mongoose.Document[] = await this.budgetRepository.findWithSort({ projectId }, { budgetIndex: 'asc' });
	
	    const budgets: BudgetType[] = [];
	    let budgetIndexMax = -1;
	    let budgetBudgetTotal = 0;
	
	    if (!result.length) {
	      return {
	        budgets: [],
	        budgetIndexMax,
	        budgetBudgetTotal
	      };
	    }
	
	    result.forEach((item: mongoose.Document<BudgetType>) => {
	      const budgetDto = new BudgetDto();
	      const data = {
	        id: item.get('_id'),
	        creatorEmail: item.get('creatorEmail'),
	        creatorId: item.get('creatorId'),
	        projectId: item.get('projectId'),
	        budgetAdditionalFields: item.get('budgetAdditionalFields'),
	        budgetCategory: item.get('budgetCategory'),
	        budgetCode: item.get('budgetCode'),
	        budgetCurrentBudget: item.get('budgetCurrentBudget'),
	        budgetCurrentClaim: item.get('budgetCurrentClaim'),
	        budgetDescription: item.get('budgetDescription'),
	        budgetIndex: item.get('budgetIndex'),
	        budgetOriginalBudget: item.get('budgetOriginalBudget'),
	        budgetRevision: item.get('budgetRevision'),
	        budgetTotalClaim: item.get('budgetTotalClaim'),
	        budgetTotalClaimBeforeHoldback: item.get('budgetTotalClaimBeforeHoldback'),
	        budgetTotalClaimPercentage: item.get('budgetTotalClaimPercentage'),
	        dateCreate: item.get('dateCreate'),
	        dateModify: item.get('dateModify')
	      };
	      budgetDto.setData(data);
	
	      budgets.push(budgetDto.toObject() as BudgetType);
	
	      if (item.get('budgetIndex') > budgetIndexMax) {
	        budgetIndexMax = item.get('budgetIndex');
	      }
	
	      budgetBudgetTotal += item.get('budgetOriginalBudget');
	    });
	
	    return {
	      budgets,
	      budgetIndexMax,
	      budgetBudgetTotal
	    };
	  }
	
	  async updateBudgetCurrentClaims(projectId: string, currentClaimNumber: number): Promise<void> {
	    const budgets: mongoose.Document[] = await this.budgetRepository.findWithSort({ projectId }, { budgetIndex: 'asc' });
	
	    const ids: string[] = [];
	
	    budgets.map((item: mongoose.Document<BudgetType>) => ids.push(item.get('_id')));
	
	    await this.budgetRepository.updateMany({ projectId }, { budgetTotalClaim: currentClaimNumber });
	  }
	
	  async addProjectBudget(budget: BudgetDto): Promise<mongoose.Document> {
	    return this.budgetRepository.create(budget);
	  }
	
	  async importBudgets(
	    projectId: string,
	    creatorId: string,
	    creatorEmail: string,
	    budgetsList: string,
	    budgetIndexMax: number,
	    budgetSeparatorArray: any[]
	  ): Promise<void> {
	    const sep = (budgetSeparatorArray[0] ? '\\t' : '') + (budgetSeparatorArray[1] ? ',' : '') + (budgetSeparatorArray[2] ? ';' : '');
	    const BUDGET_REGEX_SEPARATOR = new RegExp('[' + sep + ']');
	
	    const budgets = budgetsList.split('\n');
	
	    const budgetData: BudgetType[] = [];
	    budgets.forEach((budget, i) => {
	      const budgetFields = budget.split(BUDGET_REGEX_SEPARATOR);
	      if (budgetFields.length === 0 || (budgetFields.length === 1 && budgetFields[0].trim() === '')) {
	        console.log('Skipped empty row');
	        return;
	      }
	      if (budgetFields.length < BUDGET_ENUM.maxCount) {
	        const exceptionMsg = `Invalid budget fields: Only ${budgetFields.length}  field(s) for row ${i}`;
	
	        throw new Error(exceptionMsg);
	      }
	
	      const budgetCode = budgetFields[BUDGET_ENUM.budgetCode];
	      const budgetCategory = budgetFields[BUDGET_ENUM.budgetCategory];
	      const budgetOriginalBudget = budgetFields[BUDGET_ENUM.budgetOriginalBudget];
	      const budgetCurrentBudget = budgetFields[BUDGET_ENUM.budgetCurrentBudget];
	      const budgetDto = new BudgetDto();
	      budgetDto.setData({
	        _id: new ObjectId(),
	        projectId,
	        budgetIndex: budgetIndexMax + 1 + i,
	        budgetCode,
	        creatorId,
	        budgetOriginalBudget: isNaN(Number(budgetOriginalBudget)) ? 0 : Number(budgetOriginalBudget),
	        budgetCurrentBudget: isNaN(Number(budgetCurrentBudget)) ? 0 : Number(budgetCurrentBudget),
	        budgetCategory,
	        budgetRevision: 0,
	        budgetTotalClaimBeforeHoldback: 0,
	        budgetTotalHoldback: 0,
	        budgetCurrentClaim: 0,
	        budgetTotalClaim: 0,
	        budgetTotalClaimPercentage: 0,
	        budgetDescription: '',
	        budgetAdditionalFields: budgetFields.slice(BUDGET_ENUM.maxCount),
	        creatorEmail,
	        dateCreate: new Date(),
	        dateModify: new Date()
	      });
	
	      budgetData.push(budgetDto);
	    });
	
	    await this.budgetRepository.createMany(budgetData);
	  }
	
	  async updateBudgetTotalClaim(budgetId: string, currentClaimNumber: string | null, total: number): Promise<mongoose.Document | null> {
	    const budgetTotalClaimDictionary =
	      currentClaimNumber === null
	        ? { budgetTotalClaim: total, dateModify: new Date() }
	        : { budgetCurrentClaim: total, dateModify: new Date() };
	
	    return this.budgetRepository.update(budgetId, budgetTotalClaimDictionary);
	  }
	}

```

src/backend/services/contractor.service.ts```ts
	import mongoose, { Mongoose } from 'mongoose';
	import { CSV_COMPANY_ENUM, ROLE_TARGET_TYPE_ENUM } from '@/utils/common';
	import { Role as RoleType } from '@/utils/dtos/role.dto';
	import { CSV_SEP } from '@/utils/constant';
	import { getCsvCompanyFieldValue } from '@/utils/helper';
	import RoleRepositoryInterface from '@/backend/repositories/interfaces/role.repository.interface';
	import ContractorRepositoryInterface from '@/backend/repositories/interfaces/contractor.repository.interface';
	import ContractorDto, { Contractor as ContractorType } from '@/utils/dtos/contractor.dto';
	import DateCustom from '@/utils/datetime/date.custom';
	import StorageFactory from '@/backend/services/storage/storage.factory';
	import { FolderName } from '@/utils/enums';
	import RoleRepository from '@/backend/repositories/mongodb/role.repository';
	import ContractorRepository from '@/backend/repositories/mongodb/contractor.repository';
	import PaginationStruct from '@/backend/structs/pagination.struct';
	
	export default class ContractorService {
	  protected roleRepository: RoleRepositoryInterface;
	  protected contractorRepository: ContractorRepositoryInterface;
	  protected storageFactory: StorageFactory;
	
	  constructor(conn: Mongoose) {
	    this.roleRepository = new RoleRepository(conn);
	    this.contractorRepository = new ContractorRepository(conn);
	    this.storageFactory = new StorageFactory('s3');
	  }
	
	  async createContractor(payload: FormData): Promise<mongoose.Document | null> {
	    let imageUrl = '';
	    if (payload.get('file')) {
	      const file = payload.get('file') as File;
	      imageUrl = await this.storageFactory.getStorage().uploadFile(file, FolderName.CONTRACTORS);
	    }
	
	    const contractorDto = new ContractorDto();
	    const date = new DateCustom().toISOString();
	    contractorDto.setData({
	      // id: new ObjectId(),
	      creatorEmail: payload.get('creatorEmail') as string,
	      creatorId: payload.get('creatorId') as string,
	      address: payload.get('address') as string,
	      completionStatus: payload.get('completionStatus') as string,
	      contractorName: payload.get('contractorName') as string,
	      date: date,
	      dateCreate: date,
	      dateModify: date,
	      imageUrl: imageUrl
	    });
	
	    try {
	      return await this.contractorRepository.create(contractorDto);
	    } catch (error) {
	      console.error(error);
	      // Remove image if failed to create contractor
	      if (imageUrl) {
	        await this.storageFactory.getStorage().removeFile(imageUrl);
	      }
	
	      throw error;
	    }
	  }
	
	  async updateContractor(contractorId: string, payload: FormData): Promise<ContractorType | null> {
	    const contractor = await this.contractorRepository.findOne({ _id: contractorId });
	
	    if (!contractor) {
	      return null;
	    }
	
	    const oldImageUrl = (contractor.get('imageUrl') as string) || null;
	
	    let imageUrl = null;
	    if (payload.get('file')) {
	      const file = payload.get('file') as File;
	      imageUrl = await this.storageFactory.getStorage().uploadFile(file, FolderName.CONTRACTORS);
	    }
	
	    const contractorDto = new ContractorDto();
	    const date = new DateCustom().toISOString();
	    contractorDto.setData({
	      id: contractorId,
	      creatorEmail: payload.get('creatorEmail') as string,
	      creatorId: payload.get('creatorId') as string,
	      address: payload.get('address') as string,
	      completionStatus: payload.get('completionStatus') as string,
	      contractorName: payload.get('contractorName') as string,
	      dateModify: date,
	      imageUrl: imageUrl || oldImageUrl
	    });
	
	    try {
	      await this.contractorRepository.update(contractorId, contractorDto);
	
	      // Remove old image if new image is uploaded
	      if (imageUrl && oldImageUrl) {
	        await this.storageFactory.getStorage().removeFile(oldImageUrl);
	      }
	
	      contractorDto.setData(contractor.toJSON() as ContractorType);
	
	      return contractorDto.toObject() as ContractorType;
	    } catch (error) {
	      console.error(error);
	      // Remove image if failed to update contractor
	      if (imageUrl) {
	        await this.storageFactory.getStorage().removeFile(imageUrl);
	      }
	
	      return null;
	    }
	  }
	
	  async listingContractors(
	    limit: number,
	    offset: number,
	    order: { [key: string]: 'asc' | 'desc' }
	  ): Promise<{
	    pagination: PaginationStruct;
	    collection: ContractorType[];
	  }> {
	    const contractorDto = new ContractorDto();
	    // Check valid order field
	    const validOrderFields = Object.keys(contractorDto);
	
	    for (const key in order) {
	      if (!validOrderFields.includes(key)) {
	        delete order[key];
	      }
	    }
	
	    if (Object.keys(order).length === 0) {
	      order = { contractorName: 'asc' };
	    }
	
	    const skip = (offset - 1) * limit;
	
	    const total = await this.contractorRepository.count({});
	
	    const contractors = await this.contractorRepository.findWithLimit({}, limit, skip, order);
	
	    const collection: ContractorType[] = [];
	
	    contractors.forEach((contractor: mongoose.Document<ContractorType>) => {
	      contractorDto.setData(contractor.toJSON() as ContractorType);
	      collection.push(contractorDto.toObject() as ContractorType);
	    });
	
	    const pagination = new PaginationStruct(offset, limit, total);
	
	    return {
	      pagination,
	      collection
	    };
	  }
	
	  async deleteContractor(contractorId: string): Promise<boolean> {
	    const contractor = await this.contractorRepository.findOne({ _id: contractorId });
	
	    if (!contractor) {
	      throw new Error(`Contractor not found with id: ${contractorId}`);
	    }
	
	    const imageUrl = contractor.get('imageUrl') as string;
	
	    await this.contractorRepository.delete(contractorId);
	
	    if (!!imageUrl.trim()) {
	      await this.storageFactory.getStorage().removeFile(imageUrl);
	    }
	
	    return true;
	  }
	
	  async getInitContractorsByUser(userId: string): Promise<string[]> {
	    // User must have signed up to have userId in role
	    const roles: mongoose.Document[] = await this.roleRepository.findWithSort(
	      { individualId: userId, targetTypeEnum: ROLE_TARGET_TYPE_ENUM.contractorEmail },
	      { roleLevelEnum: 'desc' }
	    );
	
	    const csvContractors: string[] = [];
	
	    roles.forEach((role: mongoose.Document<RoleType>) => {
	      // const role = docSnapshot.data();
	      const contractorId = role.get('targetId');
	      const highestRole = role.get('roleLevelEnum');
	      this.pushContractors(csvContractors, contractorId, highestRole);
	    });
	
	    return csvContractors;
	  }
	
	  async getCsvContractors(
	    initContractors: string[] | null,
	    selectedCsvContractor: string | null
	  ): Promise<{
	    csvContractors: string[];
	    selectedCsvContractor: string | null;
	    contractor: ContractorDto | null;
	    highestRole: number | null;
	    contractorId: string | null;
	  }> {
	    // User must have signed up to have userId in role
	    const contractorIds: string[] | undefined = initContractors?.map((initContractor: string) => {
	      return getCsvCompanyFieldValue(initContractor, CSV_COMPANY_ENUM.companyId);
	    });
	
	    const csvContractors: string[] = [];
	    const contractor: ContractorDto = new ContractorDto();
	    let contractorId: string | null = null;
	    let highestRole: number | null = null;
	    let csvContractor: string | null = null;
	
	    if (!contractorIds) {
	      return {
	        csvContractors,
	        selectedCsvContractor: null,
	        contractor: null,
	        highestRole: null,
	        contractorId
	      };
	    }
	
	    const contractors: mongoose.Document[] = await this.getContractors(contractorIds);
	
	    initContractors?.forEach((initContractor: string) => {
	      contractors.forEach((contractor: mongoose.Document<ContractorType>) => {
	        const csvContractor = `${initContractor}${CSV_SEP}${contractor.get('contractorName')}`;
	
	        csvContractors.push(csvContractor);
	      });
	    });
	
	    // setCsvContractors(csvContractors);
	    if (!csvContractors.length) {
	      return {
	        csvContractors,
	        selectedCsvContractor: null,
	        contractor: null,
	        highestRole: null,
	        contractorId
	      };
	    }
	
	    csvContractor = csvContractors[0];
	
	    if (selectedCsvContractor != null) {
	      csvContractor = selectedCsvContractor;
	    }
	    contractorId = getCsvCompanyFieldValue(csvContractor, CSV_COMPANY_ENUM.companyId);
	    highestRole = Number(getCsvCompanyFieldValue(csvContractor, CSV_COMPANY_ENUM.highestRole));
	
	    //   upsertUserSelectedCompanyId(userId, contractorId, true);
	
	    const contractorData: mongoose.Document<ContractorType> | null = await this.getContractor(contractorId);
	
	    if (!contractorData) {
	      return {
	        csvContractors,
	        selectedCsvContractor: csvContractor,
	        highestRole,
	        contractor: null,
	        contractorId
	      };
	    }
	
	    contractor.setData({
	      _id: contractorData.get('_id'),
	      creatorEmail: contractorData.get('creatorEmail'),
	      creatorId: contractorData.get('creatorId'),
	      address: contractorData.get('address'),
	      budgetSeperatorComma: contractorData.get('budgetSeperatorComma'),
	      budgetSeperatorSemiColon: contractorData.get('budgetSeperatorSemiColon'),
	      budgetSeperatorTab: contractorData.get('budgetSeperatorTab'),
	      category: contractorData.get('category'),
	      completionStatus: contractorData.get('completionStatus'),
	      contractorName: contractorData.get('contractorName'),
	      currency: contractorData.get('currency'),
	      date: contractorData.get('date'),
	      dateCreate: contractorData.get('dateCreate'),
	      dateModify: contractorData.get('dateModify'),
	      generalContractor: contractorData.get('generalContractor'),
	      imageBucket: contractorData.get('imageBucket'),
	      imageUrl: contractorData.get('imageBucket') || '',
	      items: contractorData.get('items'),
	      role0: contractorData.get('role0'),
	      role1: contractorData.get('role1'),
	      role2: contractorData.get('role2')
	    });
	
	    return {
	      csvContractors,
	      selectedCsvContractor: csvContractor,
	      contractor,
	      highestRole,
	      contractorId
	    };
	  }
	
	  async getContractor(contractorId: string): Promise<mongoose.Document | null> {
	    return this.contractorRepository.findOne({ _id: contractorId });
	  }
	
	  async getContractors(contractorIds: string[]) {
	    return this.contractorRepository.find({ _id: { $in: contractorIds } });
	  }
	
	  private pushContractors(csvContractors: string[], contractorId: string, highestRole: number) {
	    let isFound = false;
	    for (const csvContractor of csvContractors) {
	      if (getCsvCompanyFieldValue(csvContractor, CSV_COMPANY_ENUM.companyId) == contractorId) {
	        isFound = true;
	        break;
	      }
	    }
	    if (!isFound) {
	      // const contractor = await getContractor(contractorId)
	      const newCsvContractor = `${contractorId}${CSV_SEP}${highestRole}`;
	      // const newCsvContractor = `${contractorId}${CSV_SEP}${highestRole}${CSV_SEP}${contractor.contractorName}`
	      csvContractors.push(newCsvContractor);
	    }
	  }
	
	  async updateContractorRoles(contractorId: string, roles: string[]): Promise<mongoose.Document | null> {
	    const rolesData: { [key: string]: number | string | Date } = {};
	    roles.forEach((role: string | undefined, index: number) => {
	      if (role === undefined) {
	        rolesData[`role${index}`] = '';
	        return;
	      }
	
	      rolesData[`role${index}`] = role.toLowerCase();
	    });
	
	    rolesData['dateModify'] = new Date();
	
	    return this.contractorRepository.update(contractorId, rolesData);
	  }
	}

```

src/backend/services/auth.service.ts```ts
	import UserRepository from '@/backend/repositories/mongodb/user.repository';
	import mongoose, { Mongoose } from 'mongoose';
	import UserDto from '@/utils/dtos/user.dto';
	import DateCustom from '@/utils/datetime/date.custom';
	import { UserStatus } from '@/utils/enums';
	import NotificationService from '@/backend/services/notification.service';
	import SmtpProvider from '@/backend/services/observer/providers/smtp.provider';
	import { render } from '@react-email/render';
	import ConfirmEmailTemplate from '@/views/mails/confirm-email-template';
	import ForgotPasswordEmailTemplate from '@/views/mails/forgot-password-email-template';
	import { NextRequest } from 'next/server';
	import { getToken } from 'next-auth/jwt';
	
	export default class AuthService {
	  private confirmationEndpoint: string = 'auth/confirm-email';
	  protected userRepository: UserRepository;
	
	  constructor(conn: Mongoose) {
	    this.userRepository = new UserRepository(conn);
	  }
	
	  async getOrCreateNewUser(email: string, name: string, imageUrl: string | null = null): Promise<mongoose.Document> {
	    const existsUser: mongoose.Document | null = await this.userRepository.findOne({ email });
	
	    if (existsUser) {
	      return existsUser;
	    } else {
	      return await this.createNewUser(email, name, true, UserStatus.ACTIVE, null, imageUrl);
	    }
	  }
	
	  async createNewUser(
	    email: string,
	    name: string,
	    emailConfirmed: boolean,
	    status: UserStatus,
	    password: string | null = null,
	    imageUrl: string | null = null
	  ): Promise<mongoose.Document> {
	    const userDto = new UserDto();
	
	    let passwordHash: string | null = null;
	
	    if (password) {
	      const bcrypt = require('bcrypt');
	      passwordHash = await bcrypt.hash(password, 10);
	    }
	    const date = new DateCustom().toISOString();
	
	    userDto.setData({
	      email,
	      name,
	      imageUrl: imageUrl || '',
	      password: passwordHash,
	      isContractor: false,
	      emailConfirmed,
	      status,
	      failedLoginAttempts: 0,
	      confirmationToken: null,
	      passwordResetToken: null,
	      accountLockedUntil: null,
	      lastLogin: null,
	      selectedContractorId: null,
	      selectedBuilderId: null,
	      dateCreate: date,
	      dateModify: date
	    });
	
	    return this.userRepository.create(userDto);
	  }
	
	  async sendEmailConfirmation(id: string, email: string, name: string): Promise<void> {
	    const notificator = new NotificationService();
	
	    const token = Math.floor(100000 + Math.random() * 900000);
	    const tokenHash = require('crypto').createHash('sha256').update(token.toString()).digest('hex');
	
	    await this.userRepository.update(id, {
	      confirmationToken: tokenHash,
	      dateModify: new DateCustom().toISOString()
	    });
	
	    const link = `${process.env.NEXT_APP_URL}/${this.confirmationEndpoint}?email=${email}&token=${tokenHash}`;
	
	    const html = render(ConfirmEmailTemplate({ name: name, link: link }));
	    const mailer = new SmtpProvider('Email confirmation', email, html);
	    notificator.addObserver(mailer);
	
	    notificator.notify();
	  }
	
	  async activeUser(email: string, token: string): Promise<void> {
	    const user = await this.userRepository.findOne({
	      email,
	      confirmationToken: token,
	      status: UserStatus.INACTIVE
	    });
	
	    if (!user) {
	      throw new Error('Invalid token');
	    }
	
	    await this.userRepository.update(user.get('_id').valueOf(), {
	      status: UserStatus.ACTIVE,
	      emailConfirmed: true,
	      confirmationToken: null,
	      dateModify: new DateCustom().toISOString()
	    });
	  }
	
	  async forgotPassword(email: string): Promise<UserDto> {
	    // Generate a random code with 4 digits
	    const code = Math.floor(1000 + Math.random() * 9000).toString();
	    const user = await this.userRepository.findOne({ email });
	
	    if (!user) {
	      throw new Error('User not found');
	    }
	
	    await this.userRepository.updateResetPasswordToken(user.get('_id'), code);
	
	    const userDto = new UserDto();
	    userDto.setData(user.toObject());
	
	    const mailService = new NotificationService();
	    const linkVerification = `${process.env.NEXT_APP_URL}/verify-email?email=${email}`;
	    const html = render(ForgotPasswordEmailTemplate({ code, linkVerification }));
	    const mailProvider = new SmtpProvider('Forgot Password', userDto.email, html);
	    mailService.addObserver(mailProvider);
	    mailService.notify();
	
	    return userDto;
	  }
	
	  async verifyCode(email: string, code: string): Promise<UserDto> {
	    const user = await this.userRepository.findOne({ email });
	
	    if (!user) {
	      throw new Error('User not found');
	    }
	
	    if (user.get('passwordResetToken') !== code) {
	      throw new Error('Invalid code');
	    }
	
	    const userDto = new UserDto();
	    userDto.setData(user.toObject());
	
	    return userDto;
	  }
	
	  async generatePasswordResetToken(userId: string): Promise<string> {
	    const token = Math.floor(100000 + Math.random() * 900000);
	    const tokenHash = require('crypto').createHash('sha256').update(token.toString()).digest('hex');
	
	    const user = await this.userRepository.update(userId, {
	      passwordResetToken: tokenHash,
	      password: null,
	      dateModify: new DateCustom().toISOString()
	    });
	
	    if (!user) {
	      throw new Error('User not found');
	    }
	
	    return `${process.env.NEXT_APP_URL}/reset-password?email=${user.get('email')}&token=${tokenHash}`;
	  }
	
	  async verifyEmail(email: string, token: string): Promise<UserDto> {
	    const user = await this.userRepository.findOne({ email });
	
	    if (!user) {
	      throw new Error('User not found');
	    }
	
	    // Check if the token is valid
	    if (user.get('passwordResetToken') !== token || user.get('passwordResetToken').length === 4) {
	      throw new Error('Invalid token');
	    }
	
	    const userDto = new UserDto();
	    userDto.setData(user.toObject());
	
	    return userDto;
	  }
	
	  async getUserByToken(req: NextRequest): Promise<UserDto> {
	    const token = await getToken({ req, secret: process.env.NEXTAUTH_SECRET });
	    const email = token?.email;
	    if (!!email) {
	      const user = await this.userRepository.findOne({ email });
	      if (!!user) {
	        const userDto = new UserDto();
	        userDto.setData(user.toObject());
	
	        return userDto;
	      }
	    }
	    throw new Error('User not found');
	  }
	}

```

src/backend/services/notification.service.ts```ts
	import NotificationInterface from '@/backend/services/observer/interfaces/notification.interface';
	
	export default class NotificationService {
	  private observers: NotificationInterface[] = [];
	
	  addObserver(observer: NotificationInterface): void {
	    this.observers.push(observer);
	  }
	
	  removeObserver(observer: NotificationInterface): void {
	    this.observers = this.observers.filter((obs) => obs !== observer);
	  }
	
	  notify(): void {
	    this.observers.forEach((observer) => {
	      observer.sendNotification();
	    });
	  }
	}

```

src/backend/services/builder.service.ts```ts
	import { ObjectId } from 'bson';
	import StorageFactory from '@/backend/services/storage/storage.factory';
	import BuilderRepository from '@/backend/repositories/mongodb/builder.repository';
	import { BuilderRepositoryInterface } from '@/backend/repositories/interfaces/builder.repository.interface';
	import { getCsvCompanyFieldValue, parsePayloadBuilderToCreateData } from '@/utils/helper';
	import { CSV_SEP } from '@/utils/constant';
	import { CSV_COMPANY_ENUM, ROLE_LEVEL_ENUM_BUILDER, ROLE_TARGET_TYPE_ENUM } from '@/utils/common';
	import mongoose, { Mongoose } from 'mongoose';
	import BuilderDto, { Builder, Builder as BuilderType } from '@/utils/dtos/builder.dto';
	import { Role as RoleType } from '@/utils/dtos/role.dto';
	import RoleRepositoryInterface from '@/backend/repositories/interfaces/role.repository.interface';
	import { PaginateQuery } from '@/types/pagination';
	import RoleRepository from '../repositories/mongodb/role.repository';
	import UserDto from '@/utils/dtos/user.dto';
	import { FolderName } from '@/utils/enums';
	
	export default class BuilderService {
	  protected builderRepository: BuilderRepositoryInterface;
	  protected roleRepository: RoleRepositoryInterface;
	  protected storageFactory: StorageFactory;
	
	  constructor(conn: Mongoose) {
	    this.builderRepository = new BuilderRepository(conn);
	    this.roleRepository = new RoleRepository(conn);
	    this.storageFactory = new StorageFactory('s3');
	  }
	
	  protected pushBuilders(csvBuilders: string[], builderId: string, highestRole: any) {
	    let isFound = false;
	    for (const csvBuilder of csvBuilders) {
	      if (getCsvCompanyFieldValue(csvBuilder, CSV_COMPANY_ENUM.companyId) == builderId) {
	        isFound = true;
	        break;
	      }
	    }
	    if (!isFound) {
	      const newCsvBuilder = `${builderId}${CSV_SEP}${highestRole}`;
	      csvBuilders.push(newCsvBuilder);
	    }
	  }
	
	  async getInitBuildersByUser(userId: string): Promise<string[]> {
	    // User must have signed up to have userId in role
	    const csvBuilders: string[] = [];
	
	    const builders: mongoose.Document[] = await this.builderRepository.find({ creatorId: userId });
	
	    if (!builders.length) {
	      return csvBuilders;
	    }
	
	    builders.forEach((item: mongoose.Document<BuilderType>) => {
	      const builderId: BuilderType | undefined = item._id;
	
	      if (!builderId) {
	        return;
	      }
	      const highestRole = ROLE_LEVEL_ENUM_BUILDER.max;
	      this.pushBuilders(csvBuilders, builderId.valueOf() as string, highestRole);
	    });
	
	    const filter = { targetTypeEnum: ROLE_TARGET_TYPE_ENUM.builderEmail, individualId: userId };
	    const roles: mongoose.Document[] | undefined = await this.roleRepository.findWithSort(filter, { roleLevelEnum: 'desc' });
	
	    roles.forEach((role: mongoose.Document<RoleType>) => {
	      const builderId: string = role.get('targetId');
	      const highestRole: string = role.get('roleLevelEnum');
	      this.pushBuilders(csvBuilders, builderId, highestRole);
	    });
	
	    roles.forEach((role: mongoose.Document<RoleType>) => {
	      const parentId = role.get('parentId');
	      const roleLevelEnum = role.get('roleLevelEnum');
	      this.pushBuilders(csvBuilders, parentId, roleLevelEnum);
	    });
	
	    return csvBuilders;
	  }
	
	  async getBuilders(builderIds: string[]): Promise<mongoose.Document[]> {
	    return this.builderRepository.find({ _id: { $in: builderIds } });
	  }
	
	  async getBuilder(builderId: string): Promise<mongoose.Document | null> {
	    return this.builderRepository.findOne({ _id: builderId });
	  }
	
	  async getCsvBuildersByUser(
	    initBuilders: string[],
	    selectedCsvBuilder: string | null
	  ): Promise<{
	    csvBuilders: string[];
	    csvBuilder: string | null;
	    highestRole: string | null;
	    builderId: string | null;
	    builder: mongoose.Document | null;
	  }> {
	    // User must have signed up to have userId in role
	    const csvBuilders: string[] = [];
	    const ids: string[] = [];
	    let csvBuilder = null;
	    let highestRole = null;
	    let builderId = null;
	    let builder = null;
	
	    for (const initBuilder of initBuilders) {
	      const builderId = getCsvCompanyFieldValue(initBuilder, CSV_COMPANY_ENUM.companyId);
	
	      if (builderId && builderId !== 'null' && builderId !== 'undefined') {
	        ids.push(builderId);
	      }
	    }
	
	    const builders: mongoose.Document[] = await this.getBuilders(ids);
	
	    builders.forEach((builder: mongoose.Document<BuilderType>) => {
	      const init = initBuilders.filter((initBuilder: string) => {
	        const index = initBuilder.indexOf(CSV_SEP);
	
	        return builder.get('_id') == initBuilder.substring(0, index);
	      });
	
	      if (init.length === 0) {
	        return;
	      }
	
	      const csvBuilder = `${init[0]}${CSV_SEP}${builder.get('builderName')}`;
	      csvBuilders.push(csvBuilder);
	    });
	
	    // setCsvBuilders(csvBuilders);
	    if (csvBuilders.length > 0) {
	      csvBuilder = csvBuilders[0];
	
	      if (selectedCsvBuilder != null) {
	        csvBuilder = selectedCsvBuilder;
	      }
	      builderId = getCsvCompanyFieldValue(csvBuilder, CSV_COMPANY_ENUM.companyId);
	      highestRole = getCsvCompanyFieldValue(csvBuilder, CSV_COMPANY_ENUM.highestRole);
	      builder = await this.getBuilder(builderId);
	    }
	
	    return {
	      csvBuilders,
	      csvBuilder,
	      highestRole,
	      builderId,
	      builder
	    };
	  }
	
	  async addBuilder(formData: FormData, currentUser: UserDto): Promise<mongoose.Document> {
	    const data = parsePayloadBuilderToCreateData(formData);
	    const builderDto = new BuilderDto();
	    const defaultData = builderDto.toObject();
	    let imageUrl = builderDto.imageUrl;
	    if (data.image) {
	      imageUrl = await this.storageFactory.getStorage().uploadFile(data.image, FolderName.BUILDERS);
	    }
	    builderDto.setData({
	      ...defaultData,
	      _id: new ObjectId(),
	      completionStatus: data.completionStatus,
	      builderName: data.builderName,
	      category: data.category,
	      address: data.address,
	      creatorId: currentUser.toObject().id + '',
	      creatorEmail: currentUser.email,
	      imageUrl
	    });
	    try {
	      return this.builderRepository.create(builderDto);
	    } catch (error) {
	      if (!!imageUrl) {
	        await this.storageFactory.getStorage().removeFile(imageUrl);
	      }
	
	      throw error;
	    }
	  }
	
	  async updateBuilder(builderId: string, formData: FormData): Promise<mongoose.Document | null> {
	    const currentBuilder = await this.getBuilder(builderId);
	
	    if (!currentBuilder) {
	      throw 'Builder not found';
	    }
	    const data = parsePayloadBuilderToCreateData(formData);
	
	    const builderDto = new BuilderDto();
	    const currentBuilderObject: Builder = currentBuilder.toObject();
	    let imageUrl = currentBuilderObject.imageUrl;
	
	    if (data.image) {
	      imageUrl = imageUrl = await this.storageFactory.getStorage().uploadFile(data.image, FolderName.BUILDERS);
	    }
	
	    try {
	      builderDto.setData({
	        ...currentBuilderObject,
	        completionStatus: data.completionStatus,
	        builderName: data.builderName,
	        category: data.category,
	        address: data.address,
	        imageUrl,
	        dateModify: new Date()
	      });
	
	      return await this.builderRepository.update(builderId, builderDto);
	    } catch (error) {
	      if (!!imageUrl) {
	        await this.storageFactory.getStorage().removeFile(imageUrl);
	      }
	      throw error;
	    }
	  }
	
	  async updateBuilderRoles(builderId: string, roles: (string | undefined)[]): Promise<mongoose.Document | null> {
	    const rolesData: { [key: string]: number | string | Date } = {};
	    roles.forEach((role: string | undefined, index: number) => {
	      if (role === undefined) {
	        rolesData[`role${index}`] = '';
	        return;
	      }
	
	      rolesData[`role${index}`] = role.toLowerCase();
	    });
	
	    rolesData['dateModify'] = new Date();
	
	    return this.builderRepository.update(builderId, rolesData);
	  }
	
	  async deleteBuilder(builderId: string): Promise<mongoose.Document | null> {
	    return await this.builderRepository.delete(builderId);
	  }
	
	  mapBuilder = (data: Builder[]): Builder[] => {
	    return data.map((item) => {
	      const newObject = (item as unknown as mongoose.Document<Builder>).toObject();
	      return {
	        ...newObject,
	        creatorId: newObject.creatorId._id,
	        creator: newObject.creatorId
	      };
	    });
	  };
	  async findBuilders(query: PaginateQuery<Builder>) {
	    const result = (await this.builderRepository.findWithSort(
	      !!query.search ? { builderName: { $regex: query.search } } : {},
	      { [query.sortBy || 'builderName']: query.sortDir || 'desc' },
	      query.limit,
	      query.page
	    )) as unknown as Builder[];
	
	    return this.mapBuilder(result);
	  }
	}

```

src/backend/services/observer/providers/smtp.provider.ts```ts
	import MailNotificationInterface from '@/backend/services/observer/interfaces/mail.notification.interface';
	
	export default class SmtpProvider implements MailNotificationInterface {
	  private subject: string;
	  private body: string;
	  private recipient: string;
	  private sender: string = process.env.NEXT_SMTP_USER as string;
	
	  private client: any;
	
	  constructor(subject: string, recipient: string, body: string) {
	    this.subject = subject;
	    this.body = body;
	    this.recipient = recipient;
	
	    const smtpOptions = {
	      host: process.env.NEXT_SMTP_HOST,
	      secure: false,
	      port: process.env.NEXT_SMTP_PORT,
	      auth: {
	        user: process.env.NEXT_SMTP_USER,
	        pass: process.env.NEXT_SMTP_PASS
	      }
	    };
	
	    const nodemailer = require('nodemailer');
	
	    this.client = nodemailer.createTransport({ ...smtpOptions });
	  }
	
	  setSubject(subject: string): void {
	    this.subject = subject;
	  }
	
	  setBody(body: string): void {
	    this.body = body;
	  }
	
	  setRecipient(recipient: string): void {
	    this.recipient = recipient;
	  }
	
	  setSender(sender: string): void {
	    this.sender = sender;
	  }
	
	  async sendNotification(): Promise<void> {
	    await this.client.sendMail({
	      from: this.sender,
	      to: this.recipient,
	      subject: this.subject,
	      html: this.body
	    });
	  }
	}

```

src/backend/services/observer/providers/mailjet.provider.ts```ts
	import MailNotificationInterface from '@/backend/services/observer/interfaces/mail.notification.interface';
	import axiosServices from '@/utils/axios';
	
	const API_URL: string = 'https://api.mailjet.com/v3.1/send';
	
	export default class MailjetProvider implements MailNotificationInterface {
	  private subject: string;
	  private body: string;
	  private recipient: string;
	  private sender: string = process.env.MAILJET_SENDER_MAIL as string;
	
	  private client: any;
	
	  constructor(subject: string, recipient: string, body: string) {
	    this.subject = subject;
	    this.body = body;
	    this.recipient = recipient;
	
	    this.client = axiosServices;
	  }
	
	  setSubject(subject: string): void {
	    this.subject = subject;
	  }
	
	  setBody(body: string): void {
	    this.body = body;
	  }
	
	  setRecipient(recipient: string): void {
	    this.recipient = recipient;
	  }
	
	  setSender(sender: string): void {
	    this.sender = sender;
	  }
	
	  async sendNotification(): Promise<void> {
	    await this.client.post(
	      API_URL,
	      {
	        Messages: [
	          {
	            From: {
	              Email: this.sender,
	              Name: process.env.MAILJET_SENDER_NAME
	            },
	            To: [
	              {
	                Email: this.recipient
	              }
	            ],
	            Subject: this.subject,
	            HTMLPart: this.body
	          }
	        ]
	      },
	      {
	        headers: {
	          'Content-Type': 'application/json'
	        },
	        auth: {
	          username: process.env.MAILJET_API_KEY as string,
	          password: process.env.MAILJET_API_SECRET as string
	        }
	      }
	    );
	  }
	}

```

src/backend/services/observer/interfaces/notification.interface.ts```ts
	export default interface NotificationInterface {
	  sendNotification(): void;
	}

```

src/backend/services/observer/interfaces/mail.notification.interface.ts```ts
	import NotificationInterface from '@/backend/services/observer/interfaces/notification.interface';
	
	export default interface MailNotificationInterface extends NotificationInterface {
	  setSubject(subject: string): void;
	
	  setBody(body: string): void;
	
	  setRecipient(recipient: string): void;
	
	  setSender(sender: string): void;
	}

```

src/backend/services/storage/s3.storage.ts```ts
	import { DeleteObjectCommand, PutObjectCommand, S3Client } from '@aws-sdk/client-s3';
	import StorageInterface from '@/backend/services/storage/interface/storage.interface';
	
	export default class S3Storage implements StorageInterface {
	  private readonly s3: S3Client;
	  private bucket: string = '';
	
	  constructor() {
	    this.s3 = new S3Client({
	      region: (process.env.AWS_S3_REGION as string) || '',
	      credentials: {
	        accessKeyId: (process.env.AWS_S3_ACCESS_KEY_ID as string) || '',
	        secretAccessKey: (process.env.AWS_S3_SECRET_ACCESS_KEY as string) || ''
	      }
	    });
	
	    this.setBucket((process.env.AWS_S3_BUCKET_NAME as string) || '');
	  }
	
	  public setBucket(bucket: string): S3Storage {
	    this.bucket = bucket;
	
	    return this;
	  }
	
	  public getBucket(): string {
	    return this.bucket;
	  }
	
	  public async uploadFile(file: File, folderName: string): Promise<string> {
	    const fileData = (await file.arrayBuffer()) as Buffer;
	    const keyName = new Date().toISOString().replace(/[-:.]/g, '');
	    const buffer = Buffer.from(fileData);
	    const extension = file.name.split('.').pop();
	
	    const bucket: string = this.getBucket();
	    const params = {
	      Bucket: bucket,
	      Key: `${folderName}/${keyName}.${extension}`,
	      Body: buffer,
	      ContentType: file.type
	    };
	
	    console.log(`Uploading file to S3: ${keyName}.${extension}`);
	    await this.s3.send(new PutObjectCommand(params));
	
	    return `${process.env.AWS_CLOUDFRONT_URL}/${folderName}/${keyName}.${extension}`;
	  }
	
	  public async removeFile(fileUrl: string): Promise<void> {
	    if (!fileUrl) {
	      throw new Error('File url is not valid');
	    }
	
	    const key = new URL(fileUrl).pathname;
	
	    console.log(`Removing file from S3: ${key}`);
	    await this.s3.send(new DeleteObjectCommand({ Bucket: this.getBucket(), Key: key }));
	  }
	}

```

src/backend/services/storage/storage.factory.ts```ts
	import StorageInterface from '@/backend/services/storage/interface/storage.interface';
	import S3Storage from '@/backend/services/storage/s3.storage';
	
	export default class StorageFactory {
	  private storage: StorageInterface | null = null;
	  private readonly drive: string;
	
	  constructor(drive: string) {
	    this.drive = drive;
	
	    this.factory();
	  }
	
	  public factory(): StorageInterface {
	    switch (this.drive) {
	      case 's3':
	        this.storage = new S3Storage();
	        break;
	      case 'local':
	      default:
	        throw new Error('Invalid storage drive');
	    }
	
	    return this.storage;
	  }
	
	  public getStorage(): StorageInterface {
	    return this.storage as StorageInterface;
	  }
	}

```

src/backend/services/storage/interface/storage.interface.ts```ts
	export default interface StorageInterface {
	  uploadFile(file: File, folderName: string): Promise<string>;
	
	  removeFile(fileUrl: string): Promise<void>;
	}

```

src/backend/validator/register.validator.ts```ts
	import BaseValidator from '@/backend/validator/base.validator';
	import { string } from 'yup';
	import { Mongoose } from 'mongoose';
	import UserRepositoryInterface from '@/backend/repositories/interfaces/user.repository.interface';
	import UserRepository from '@/backend/repositories/mongodb/user.repository';
	
	export default class RegisterValidator extends BaseValidator {
	  private userRepository: UserRepositoryInterface;
	
	  constructor(data: { email: string; password: string; name: string }, connection: Mongoose) {
	    super();
	    this.data = data;
	    this.userRepository = new UserRepository(connection);
	  }
	
	  validateRules() {
	    const mailRule = { email: string().email().required() };
	    const passRule = { password: string().min(8).required() };
	    const nameRule = { name: string().required() };
	
	    this.rules = [mailRule, passRule, nameRule];
	
	    return this;
	  }
	
	  async existsUser(): Promise<boolean> {
	    const user = await this.userRepository.findOne({ email: this.data.email });
	
	    if (user) {
	      this.setErrors(['Email already exists']);
	
	      return false;
	    }
	
	    return true;
	  }
	
	  /**
	   * Override the validate method
	   * Validate the data
	   */
	  async validate(): Promise<void> {
	    super.validate();
	
	    if (this.getErrors().length > 0) {
	      return;
	    }
	
	    await this.existsUser();
	  }
	}

```

src/backend/validator/base.validator.ts```ts
	export default abstract class BaseValidator {
	  protected messageError: string[] = [];
	  protected rules: object[] = [];
	  protected data: object | any = {};
	
	  abstract validateRules(): BaseValidator;
	
	  protected constructor() {
	    this.validateRules();
	  }
	
	  getRules() {
	    return this.rules;
	  }
	
	  getErrors() {
	    return this.messageError;
	  }
	
	  setErrors(errors: string[]): BaseValidator {
	    this.messageError = errors;
	
	    return this;
	  }
	
	  validate(): void {
	    if (!this.getRules().length) {
	      return;
	    }
	
	    this.getRules().forEach((rule: object) => {
	      const key = Object.keys(rule)[0];
	      // @ts-ignore
	      const validateFunc = rule[key];
	      try {
	        // @ts-ignore
	        validateFunc.validateSync(this.data[key]);
	      } catch (error: any) {
	        this.messageError.push(`${key} ${error.errors}`);
	      }
	    });
	  }
	}

```

src/backend/validator/change-password.validator.ts```ts
	import UserRepository from '@/backend/repositories/mongodb/user.repository';
	import BaseValidator from '@/backend/validator/base.validator';
	import UserRepositoryInterface from '@/backend/repositories/interfaces/user.repository.interface';
	import { string } from 'yup';
	import { Mongoose } from 'mongoose';
	
	export default class ChangePasswordValidator extends BaseValidator {
	  private userRepository: UserRepositoryInterface;
	
	  constructor(data: { id: string; oldPassword: string; newPassword: string }, connection: Mongoose) {
	    super();
	    this.data = data;
	
	    this.userRepository = new UserRepository(connection);
	  }
	
	  validateRules() {
	    const passRule = { oldPassword: string().min(8).nullable() };
	    const newPassRule = { newPassword: string().min(8).required() };
	    const passConfirmRule = { newPasswordConfirm: string().min(8).required() };
	
	    this.rules = [passRule, newPassRule, passConfirmRule];
	
	    return this;
	  }
	
	  /**
	   * Override the validate method
	   * Validate the data
	   */
	  async validate(): Promise<void> {
	    super.validate();
	
	    if (this.getErrors().length > 0) {
	      return;
	    }
	
	    await this.comparePassword();
	  }
	
	  async comparePassword(): Promise<boolean> {
	    const user = await this.userRepository.findUserId(this.data.id);
	
	    if (!user) {
	      this.setErrors(['User not found']);
	
	      return false;
	    }
	
	    if (user.password && !this.data.oldPassword) {
	      this.setErrors(['Old password is required']);
	
	      return false;
	    }
	
	    if (this.data.newPassword !== this.data.newPasswordConfirm) {
	      this.setErrors(['New password and confirm password are not the same']);
	
	      return false;
	    }
	
	    if (this.data.oldPassword === this.data.newPassword) {
	      this.setErrors(['Old password and new password are the same']);
	
	      return false;
	    }
	
	    if (this.data.newPassword !== this.data.newPasswordConfirm) {
	      this.setErrors(['New password and confirm password are not the same']);
	
	      return false;
	    }
	
	    const bcrypt = require('bcrypt');
	    const isMatch = user.password ? await bcrypt.compare(this.data.oldPassword.toString(), user.password) : true;
	
	    if (!isMatch) {
	      this.setErrors(['Old password is incorrect']);
	
	      return false;
	    }
	
	    return true;
	  }
	}

```

src/backend/validator/user-bulk-action.validator.ts```ts
	import BaseValidator from '@/backend/validator/base.validator';
	import { array, mixed, string } from 'yup';
	import { Actions } from '@/utils/enums';
	
	export default class UserBulkActionValidator extends BaseValidator {
	  private readonly objectIdValidatorRegex = /^[0-9a-fA-F]{24}$/;
	  constructor(data: { ids: string[]; action: Actions; currentUserId: string }) {
	    super();
	
	    this.data = data;
	  }
	
	  validateRules(): BaseValidator {
	    const objectIdValidator = (objectId: string) => {
	      return this.objectIdValidatorRegex.test(objectId);
	    };
	
	    const eachIdRule = string().required().test('valid-object-id', 'Invalid ObjectId format', objectIdValidator);
	
	    this.rules = [
	      { ids: array().of(eachIdRule).required() },
	      { action: mixed().required().oneOf([Actions.ACTIVATE, Actions.DEACTIVATE, Actions.DELETE, Actions.ARCHIVE]) },
	      { currentUserId: eachIdRule }
	    ];
	
	    return this;
	  }
	
	  validate() {
	    super.validate();
	
	    if (this.data.ids.includes(this.data.currentUserId)) {
	      this.setErrors(['You cannot perform this action on yourself']);
	    }
	  }
	}

```

src/backend/validator/forgot-password.validator.ts```ts
	import BaseValidator from '@/backend/validator/base.validator';
	import { string } from 'yup';
	import { Mongoose } from 'mongoose';
	import UserRepositoryInterface from '@/backend/repositories/interfaces/user.repository.interface';
	import UserRepository from '@/backend/repositories/mongodb/user.repository';
	
	export default class ForgotPasswordValidator extends BaseValidator {
	  private userRepository: UserRepositoryInterface;
	
	  constructor(data: { email: string }, conn: Mongoose) {
	    super();
	
	    this.data = data;
	    this.userRepository = new UserRepository(conn);
	  }
	
	  validateRules(): BaseValidator {
	    this.rules = [{ email: string().email().required() }];
	
	    return this;
	  }
	
	  async validate(): Promise<void> {
	    super.validate();
	    const userId: string | null = await this.userRepository.getUserIdFromEmail(this.data.email);
	
	    if (!userId) {
	      this.setErrors(['User not found']);
	    }
	  }
	}

```

src/backend/validator/upload.validator.ts```ts
	import BaseValidator from '@/backend/validator/base.validator';
	import { mixed, string } from 'yup';
	import { FolderName } from '@/utils/enums';
	
	export default class UploadValidator extends BaseValidator {
	  private readonly FILE_SIZE = 1024 * 1024 * 10; // 10MB
	
	  constructor(data: { file: File; folderName: string }) {
	    super();
	    this.data = data;
	  }
	
	  validateRules(): BaseValidator {
	    this.rules = [{ file: mixed().required() }, { folderName: string().required() }];
	
	    return this;
	  }
	
	  protected validateFileExtension(): boolean {
	    const allowedFiles = ['png', 'jpeg', 'jpg', 'gif'];
	    const extension = this.data.file.name.split('.').pop();
	
	    if (!allowedFiles.includes(extension)) {
	      this.setErrors(['Invalid file type']);
	
	      return false;
	    }
	
	    return true;
	  }
	
	  protected validateFileSize(): boolean {
	    if (this.data.file.size > this.FILE_SIZE) {
	      this.setErrors(['File is too large for upload (10MB max)']);
	
	      return false;
	    }
	
	    return true;
	  }
	
	  protected validateFolderName(): boolean {
	    const allowedFolders: string[] = [FolderName.BUILDERS, FolderName.USERS, FolderName.PROJECTS, FolderName.CONTRACTORS];
	
	    if (!allowedFolders.includes(this.data.folderName)) {
	      this.setErrors(['Invalid folder name']);
	
	      return false;
	    }
	
	    return true;
	  }
	
	  /**
	   * Override the validate method
	   * Validate the data
	   */
	  async validate(): Promise<void> {
	    super.validate();
	
	    if (this.getErrors().length > 0) {
	      return;
	    }
	
	    this.validateFileExtension();
	    this.validateFileSize();
	    this.validateFolderName();
	  }
	}

```

src/backend/validator/reset-password.validator.ts```ts
	import BaseValidator from '@/backend/validator/base.validator';
	import { string } from 'yup';
	
	export default class ResetPasswordValidator extends BaseValidator {
	  constructor(data: { email: string; password: string; confirmPassword: string; token: string }) {
	    super();
	
	    this.data = data;
	  }
	
	  validateRules() {
	    const emailRule = { email: string().email().required() };
	    const passRule = { password: string().min(8).required() };
	    const passConfirmRule = { confirmPassword: string().min(8).required() };
	    const tokenRule = { token: string().required() };
	
	    this.rules = [emailRule, passRule, passConfirmRule, tokenRule];
	
	    return this;
	  }
	
	  /**
	   * Override the validate method
	   * Validate the data
	   */
	  validate(): void {
	    super.validate();
	
	    if (this.getErrors().length > 0) {
	      return;
	    }
	
	    if (this.data.password !== this.data.confirmPassword) {
	      this.setErrors(['New password and confirm password are not the same']);
	    }
	  }
	}

```

src/backend/validator/builder.validator.ts```ts
	import BaseValidator from '@/backend/validator/base.validator';
	import { string } from 'yup';
	import UploadValidator from './upload.validator';
	import { BuilderRequestType } from '@/utils/dtos/builder.dto';
	import { FolderName } from '@/utils/enums';
	
	export default class BuilderValidator extends BaseValidator {
	  constructor(data: BuilderRequestType) {
	    super();
	    this.data = data;
	  }
	
	  validateRules() {
	    const builderNameRule = { builderName: string().required() };
	    const categoryRule = { category: string().required() };
	    const addressRule = { address: string().required() };
	    const completionStatusRule = { completionStatus: string().required() };
	    this.rules = [builderNameRule, categoryRule, addressRule, completionStatusRule];
	
	    return this;
	  }
	
	  validateBuilderImage() {
	    const data: BuilderRequestType = this.data;
	    if (!!data?.image) {
	      const uploadValidator = new UploadValidator({ file: data.image, folderName: FolderName.BUILDERS });
	      return uploadValidator.getErrors().length === 0;
	    }
	    return true;
	  }
	  async validate(): Promise<boolean> {
	    super.validate();
	    if (this.getErrors().length > 0) {
	      return false;
	    }
	    return this.validateBuilderImage();
	  }
	}

```

src/backend/validator/profile.validator.ts```ts
	import BaseValidator from '@/backend/validator/base.validator';
	import { string } from 'yup';
	import { Mongoose } from 'mongoose';
	import UserRepositoryInterface from '@/backend/repositories/interfaces/user.repository.interface';
	import UserRepository from '@/backend/repositories/mongodb/user.repository';
	
	export default class ProfileValidator extends BaseValidator {
	  private userRepository: UserRepositoryInterface;
	
	  constructor(data: { id: string; email: string; password: string; name: string }, connection: Mongoose) {
	    super();
	    this.data = data;
	
	    this.userRepository = new UserRepository(connection);
	  }
	
	  validateRules() {
	    const phoneRegex = /^\d{10,11}$/;
	    const phoneNumberRule = string().nullable();
	
	    if (this.data.phoneNumber === null || this.data.phoneNumber === undefined) {
	      phoneNumberRule.matches(phoneRegex);
	    }
	
	    const birthDateRulesSchema = string().test('date', 'Invalid date', (value: string | undefined) => {
	      const regex = /^\d{2}-\d{2}-\d{4}$/;
	
	      if (!value) return true;
	
	      if (!regex.test(value)) {
	        return false;
	      }
	
	      const [day, month, year] = value.split('-');
	      const date = new Date(parseInt(year, 10), parseInt(month, 10) - 1, parseInt(day, 10));
	
	      return !isNaN(date.getTime());
	    });
	
	    const idRule = { id: string().required() };
	    const mailRule = { email: string().email().required() };
	    const nameRule = { name: string().required() };
	    const phoneRule = { phoneNumber: phoneNumberRule };
	    const companyRule = { company: string().max(255).nullable() };
	    const countryRule = { country: string().max(20).nullable() };
	    const birthDateRule = { birthDate: birthDateRulesSchema.nullable() };
	    const imageRule = { image: string().url().nullable() };
	
	    this.rules = [idRule, mailRule, nameRule, phoneRule, companyRule, countryRule, birthDateRule, imageRule];
	
	    return this;
	  }
	
	  async existsUser(): Promise<boolean> {
	    const user = await this.userRepository.findOne({
	      email: this.data.email,
	      _id: { $ne: this.data.id }
	    });
	
	    if (user) {
	      this.setErrors(['Email already exists']);
	
	      return false;
	    }
	
	    return true;
	  }
	
	  /**
	   * Override the validate method
	   * Validate the data
	   */
	  async validate(): Promise<void> {
	    super.validate();
	
	    if (this.getErrors().length > 0) {
	      return;
	    }
	
	    await this.existsUser();
	  }
	}

```

src/backend/validator/contractor.validator.ts```ts
	import BaseValidator from '@/backend/validator/base.validator';
	import { string } from 'yup';
	
	type RequestType = {
	  creatorEmail: string;
	  creatorId: string;
	  contractorName: string;
	  service: string;
	  address: string;
	  completionStatus: string;
	  image?: File;
	};
	
	export default class ContractorValidator extends BaseValidator {
	  constructor(data: RequestType) {
	    super();
	
	    this.data = data;
	  }
	
	  validateRules(): BaseValidator {
	    this.rules = [
	      { creatorEmail: string().email().required() },
	      { creatorId: string().required() },
	      { contractorName: string().required() },
	      { service: string().required() },
	      { address: string().required() },
	      { completionStatus: string().required() }
	    ];
	
	    return this;
	  }
	}

```

src/backend/validator/objectId.validator.ts```ts
	import BaseValidator from '@/backend/validator/base.validator';
	import { string } from 'yup';
	import { Types } from 'mongoose';
	
	export default class ObjectIdValidator extends BaseValidator {
	  constructor(data: { id: string }) {
	    super();
	    this.data = data;
	  }
	
	  validateTypeObject() {
	    return Types.ObjectId.isValid(this.data.id);
	  }
	  validateRules(): BaseValidator {
	    const idRule = { id: string().required() };
	    this.rules = [idRule];
	    return this;
	  }
	
	  async validate(): Promise<boolean> {
	    super.validate();
	    if (this.getErrors().length > 0) {
	      return false;
	    }
	    return this.validateTypeObject();
	  }
	}

```

src/backend/models/project.model.ts```ts
	import mongoose from 'mongoose';
	import { Project as ProjectType } from '@/utils/dtos/project.dto';
	
	/* ProjectSchema will correspond to the project collection in the MongoDB database. */
	const ProjectSchema: mongoose.Schema<ProjectType> = new mongoose.Schema(
	  {
	    projectName: {
	      type: String,
	      required: true
	    },
	    address: {
	      type: String,
	      required: true
	    },
	    amount: {
	      type: Number
	    },
	    builderId: {
	      type: String,
	      required: true
	    },
	    category: {
	      type: String,
	      required: true
	    },
	    completionStatus: {
	      type: String,
	      required: true
	    },
	    creatorEmail: {
	      type: String,
	      required: true
	    },
	    creatorId: {
	      type: String,
	      required: true
	    },
	    currency: {
	      type: String,
	      required: true
	    },
	    currentClaimNumber: {
	      type: String,
	      required: true
	    },
	    budgetSeperatorComma: {
	      type: Boolean,
	      required: true
	    },
	    budgetSeperatorSemiColon: {
	      type: Boolean,
	      required: true
	    },
	    budgetSeperatorTab: {
	      type: Boolean,
	      required: true
	    },
	    date: {
	      type: Date,
	      required: true
	    },
	    dateCreate: {
	      type: Date,
	      required: true
	    },
	    dateModify: {
	      type: Date,
	      required: true
	    },
	    imageBucket: {
	      type: String,
	      required: true
	    },
	    items: {
	      type: String,
	      required: true
	    },
	    role0: {
	      type: String
	    },
	    role1: {
	      type: String
	    },
	    role2: {
	      type: String
	    },
	    role3: {
	      type: String
	    },
	    role4: {
	      type: String
	    },
	    roleProjectContractors: {
	      type: String
	    }
	  },
	  { _id: true }
	);
	
	export default mongoose.models.Project || mongoose.model<ProjectType>('Project', ProjectSchema);

```

src/backend/models/invoice.model.ts```ts
	import mongoose from 'mongoose';
	import { Invoice as InvoiceType } from '@/utils/dtos/invoice.dto';
	
	/* InvoiceSchema will correspond to the invoice collection in the MongoDB database. */
	const InvoiceSchema: mongoose.Schema<InvoiceType> = new mongoose.Schema(
	  {
	    budgetId: {
	      type: String,
	      required: true
	    },
	    projectId: {
	      type: String,
	      required: true
	    },
	    creatorId: {
	      type: String,
	      required: true
	    },
	    creatorEmail: {
	      type: String,
	      required: true
	    },
	    invoiceContractorId: {
	      type: String,
	      required: true
	    },
	    invoiceContractorName: {
	      type: String,
	      required: true
	    },
	    invoiceIndex: {
	      type: Number,
	      required: true
	    },
	    invoiceNumber: {
	      type: String,
	      required: true
	    },
	    invoicePst: {
	      type: String,
	      required: true
	    },
	    invoicePstOverride: {
	      type: Boolean,
	      required: true
	    },
	    invoiceReceivedDate: {
	      type: String,
	      required: true
	    },
	    invoiceStatus: {
	      type: Number,
	      required: true
	    },
	    invoiceSubtotal: {
	      type: Number,
	      required: true
	    },
	    invoiceTotal: {
	      type: Number,
	      required: true
	    },
	    invoiceDate: {
	      type: Date,
	      required: true
	    },
	    invoiceDescription: {
	      type: String,
	      required: true
	    },
	    dateCreate: {
	      type: Date,
	      required: true
	    },
	    dateModify: {
	      type: Date,
	      required: true
	    },
	    imageBucket: {
	      type: String,
	      required: true
	    },
	    invoiceAdditionalFields: {
	      type: [String],
	      required: true
	    },
	    invoiceApprove: {
	      type: Boolean,
	      required: false
	    },
	    invoiceCategory: {
	      type: String,
	      required: true
	    },
	    invoiceChqDate: {
	      type: String,
	      required: true
	    },
	    invoiceChqNumber: {
	      type: String,
	      required: true
	    },
	    invoiceClaimNumber: {
	      type: String,
	      required: true
	    },
	    invoiceCode: {
	      type: String,
	      required: true
	    },
	    invoiceGst: {
	      type: Object,
	      required: true
	    },
	    invoiceGstOverride: {
	      type: Boolean,
	      required: true
	    },
	    invoiceHoldbackEnabled: {
	      type: Boolean,
	      required: false
	    }
	  },
	  { _id: true }
	);
	
	export default mongoose.models.Invoice || mongoose.model<InvoiceType>('Invoice', InvoiceSchema);

```

src/backend/models/user.model.ts```ts
	import mongoose from 'mongoose';
	import { User as UserType } from '@/utils/dtos/user.dto';
	
	/* UserSchema will correspond to the user collection in the MongoDB database. */
	export const UserSchema: mongoose.Schema<UserType> = new mongoose.Schema(
	  {
	    email: {
	      type: String,
	      required: true,
	      unique: true
	    },
	    name: {
	      type: String,
	      required: true
	    },
	    imageUrl: {
	      type: String,
	      required: false
	    },
	    company: {
	      type: String,
	      required: false
	    },
	    country: {
	      type: String,
	      required: false
	    },
	    phoneNumber: {
	      type: String,
	      required: false
	    },
	    birthDate: {
	      type: Date,
	      required: false
	    },
	    password: {
	      type: String,
	      required: false
	    },
	    emailConfirmed: {
	      type: Boolean,
	      required: true
	    },
	    confirmationToken: {
	      type: String,
	      required: false
	    },
	    passwordResetToken: {
	      type: String,
	      required: false
	    },
	    isContractor: {
	      type: Boolean,
	      required: true
	    },
	    status: {
	      type: String,
	      required: true
	    },
	    selectedContractorId: {
	      type: String,
	      required: false
	    },
	    selectedBuilderId: {
	      type: String,
	      required: false
	    },
	    failedLoginAttempts: {
	      type: Number,
	      required: true
	    },
	    accountLockedUntil: {
	      type: Date,
	      required: false
	    },
	    lastLogin: {
	      type: Date,
	      required: false
	    },
	    dateCreate: {
	      type: Date,
	      required: true
	    },
	    dateModify: {
	      type: Date,
	      required: true
	    }
	  },
	  { _id: true }
	);
	
	export default mongoose.models.User || mongoose.model<UserType>('User', UserSchema);

```

src/backend/models/builder.model.ts```ts
	import mongoose from 'mongoose';
	import { Builder as BuilderType } from '@/utils/dtos/builder.dto';
	
	/* BuilderSchema will correspond to the builder collection in the MongoDB database. */
	const BuilderSchema: mongoose.Schema<BuilderType> = new mongoose.Schema(
	  {
	    creatorEmail: {
	      type: String,
	      required: true
	    },
	    creatorId: {
	      type: mongoose.Schema.Types.ObjectId,
	      required: true,
	      ref: 'User'
	    },
	    address: {
	      type: String,
	      required: true
	    },
	    budgetSeperatorComma: {
	      type: Boolean,
	      required: true
	    },
	    budgetSeperatorSemiColon: {
	      type: Boolean,
	      required: true
	    },
	    budgetSeperatorTab: {
	      type: Boolean,
	      required: true
	    },
	    builderName: {
	      type: String,
	      required: true
	    },
	    category: {
	      type: String,
	      required: true
	    },
	    completionStatus: {
	      type: String,
	      required: true
	    },
	    date: {
	      type: Date,
	      required: true
	    },
	    dateCreate: {
	      type: Date,
	      required: true
	    },
	    dateModify: {
	      type: Date,
	      required: true
	    },
	    generalContractor: {
	      type: String,
	      required: true
	    },
	    imageUrl: {
	      type: String,
	      required: true
	    },
	    items: {
	      type: String,
	      required: true
	    },
	    role0: {
	      type: String,
	      required: false
	    },
	    role1: {
	      type: String,
	      required: false
	    },
	    role2: {
	      type: String,
	      required: false
	    },
	    role3: {
	      type: String,
	      required: false
	    },
	    role4: {
	      type: String,
	      required: false
	    }
	  },
	  { _id: true }
	);
	
	export default mongoose.models.Builder || mongoose.model<BuilderType>('Builder', BuilderSchema);

```

src/backend/models/budget.model.ts```ts
	import mongoose from 'mongoose';
	import { Budget as BudgetType } from '@/utils/dtos/budget.dto';
	
	/* BudgetSchema will correspond to the budget collection in the MongoDB database. */
	export const BudgetSchema: mongoose.Schema<BudgetType> = new mongoose.Schema(
	  {
	    creatorId: {
	      type: String,
	      required: true
	    },
	    projectId: {
	      type: String,
	      required: true
	    },
	    creatorEmail: {
	      type: String,
	      required: true
	    },
	    budgetAdditionalFields: {
	      type: [String],
	      required: true
	    },
	    budgetCategory: {
	      type: String,
	      required: true
	    },
	    budgetCode: {
	      type: String,
	      required: true
	    },
	    budgetCurrentBudget: {
	      type: Number,
	      required: true
	    },
	    budgetCurrentClaim: {
	      type: Number,
	      required: true
	    },
	    budgetDescription: {
	      type: String
	    },
	    budgetIndex: {
	      type: Number,
	      required: true
	    },
	    budgetOriginalBudget: {
	      type: Number,
	      required: true
	    },
	    budgetRevision: {
	      type: Number,
	      required: true
	    },
	    budgetTotalClaim: {
	      type: Number,
	      required: true
	    },
	    budgetTotalClaimBeforeHoldback: {
	      type: Number,
	      required: true
	    },
	    budgetTotalClaimPercentage: {
	      type: Number,
	      required: true
	    },
	    budgetTotalHoldback: {
	      type: Number,
	      required: true
	    },
	    dateCreate: {
	      type: Date,
	      required: true
	    },
	    dateModify: {
	      type: Date,
	      required: true
	    }
	  },
	  { _id: true }
	);
	
	export default mongoose.models.Budget || mongoose.model<BudgetType>('Budget', BudgetSchema);

```

src/backend/models/role.model.ts```ts
	import mongoose from 'mongoose';
	import { Role as RoleType } from '@/utils/dtos/role.dto';
	
	/* RoleSchema will correspond to the role collection in the MongoDB database. */
	const RoleSchema: mongoose.Schema<RoleType> = new mongoose.Schema(
	  {
	    dateCreate: {
	      type: Date
	    },
	    dateModify: {
	      type: Date
	    },
	    individualEmail: {
	      type: String
	    },
	    individualId: {
	      type: String
	    },
	    parentId: {
	      type: String
	    },
	    roleLevelEnum: {
	      type: Number,
	      required: true
	    },
	    targetId: {
	      type: String,
	      required: true
	    },
	    targetTypeEnum: {
	      type: Number,
	      required: true
	    }
	  },
	  { _id: true }
	);
	
	export default mongoose.models.Role || mongoose.model('Role', RoleSchema);

```

src/backend/models/contractor.model.ts```ts
	import mongoose from 'mongoose';
	import { Contractor as ContractorType } from '@/utils/dtos/contractor.dto';
	
	/* ContractorSchema will correspond to the contractor collection in the MongoDB database. */
	const ContractorSchema: mongoose.Schema<ContractorType> = new mongoose.Schema(
	  {
	    creatorEmail: {
	      type: String,
	      required: true
	    },
	    creatorId: {
	      type: String,
	      required: true,
	      ref: 'User'
	    },
	    address: {
	      type: String,
	      required: true
	    },
	    budgetSeperatorComma: {
	      type: Boolean,
	      required: true
	    },
	    budgetSeperatorSemiColon: {
	      type: Boolean,
	      required: true
	    },
	    budgetSeperatorTab: {
	      type: Boolean,
	      required: true
	    },
	    category: {
	      type: String,
	      required: true
	    },
	    completionStatus: {
	      type: String,
	      required: true
	    },
	    contractorName: {
	      type: String,
	      required: true
	    },
	    currency: {
	      type: String,
	      required: true
	    },
	    date: {
	      type: Date,
	      required: true
	    },
	    dateCreate: {
	      type: Date,
	      required: true
	    },
	    dateModify: {
	      type: Date,
	      required: true
	    },
	    generalContractor: {
	      type: String,
	      required: true
	    },
	    imageUrl: {
	      type: String,
	      required: false
	    },
	    items: {
	      type: String,
	      required: true
	    },
	    role0: {
	      type: String,
	      required: false
	    },
	    role1: {
	      type: String,
	      required: false
	    },
	    role2: {
	      type: String,
	      required: false
	    }
	  },
	  { _id: true }
	);
	
	export default mongoose.models.Contractor || mongoose.model<ContractorType>('Contractor', ContractorSchema);

```

src/backend/structs/pagination.struct.ts```ts
	import BaseStruct from '@/backend/structs/base.struct';
	
	export default class PaginationStruct extends BaseStruct {
	  public page: number;
	  public limit: number;
	  public total: number;
	  public totalPages: number;
	
	  constructor(page: number, limit: number, total: number) {
	    super();
	    this.page = page;
	    this.limit = limit;
	    this.total = total;
	    this.totalPages = Math.ceil(total / limit);
	  }
	}

```

src/backend/structs/response.struct.ts```ts
	import BaseStruct from '@/backend/structs/base.struct';
	import PaginationStruct from '@/backend/structs/pagination.struct';
	
	type DataResponse = {
	  meta?: PaginationStruct | null;
	  data: any | null;
	};
	
	export default class ResponseStruct extends BaseStruct {
	  public success: boolean;
	  public errors: string[];
	  public status: number = 200;
	  public data: DataResponse | null = null;
	
	  constructor(success: boolean, data: DataResponse | null = null, errors: string[] = []) {
	    super();
	    this.success = success;
	    this.errors = errors;
	    this.data = data;
	  }
	
	  public setErrors(errors: string[]): void {
	    this.errors = [...this.errors, ...errors];
	  }
	
	  public pushError(error: string): void {
	    this.errors.push(error);
	  }
	
	  public setStatus(status: number): void {
	    this.status = status;
	  }
	
	  public setData(data: DataResponse): void {
	    this.data = data;
	  }
	
	  public getResponse(): {
	    success: boolean;
	    status: number;
	    errors?: string[];
	    meta?: PaginationStruct | null;
	    data?: any | null;
	  } {
	    if (this.errors.length > 0) {
	      this.success = false;
	    }
	
	    if (!this.data) {
	      return {
	        success: this.success,
	        errors: this.errors,
	        status: this.status
	      };
	    }
	
	    return {
	      success: this.success,
	      status: this.status,
	      meta: this.data?.meta,
	      data: this.data?.data
	    };
	  }
	}

```

src/backend/structs/base.struct.ts```ts
	export default abstract class BaseStruct {
	  public getValue(key: string): any {
	    if (!this.hasOwnProperty(key)) {
	      throw new Error(`Property ${key} does not exist`);
	    }
	
	    // @ts-ignore
	    return this[key];
	  }
	
	  public setValue(key: string, value: any): void {
	    if (!this.hasOwnProperty(key)) {
	      throw new Error(`Property ${key} does not exist`);
	    }
	
	    // @ts-ignore
	    this[key] = value;
	  }
	
	  public sortByKey(key: string, order: 'asc' | 'desc' = 'asc'): void {
	    if (!this.hasOwnProperty(key)) {
	      throw new Error(`Property ${key} does not exist`);
	    }
	
	    // @ts-ignore
	    this[key].sort((a: any, b: any) => {
	      if (order === 'asc') {
	        return a[key] - b[key];
	      }
	
	      return b[key] - a[key];
	    });
	  }
	}

```

src/backend/repositories/mongodb/role.repository.ts```ts
	import mongoose, { Mongoose } from 'mongoose';
	import BaseRepositoryAbstract from '@/backend/repositories/mongodb/base.repository.abstract';
	import RoleRepositoryInterface from '@/backend/repositories/interfaces/role.repository.interface';
	import Role from '@/backend/models/role.model';
	import { Role as RoleType } from '@/utils/dtos/role.dto';
	
	export default class RoleRepository extends BaseRepositoryAbstract implements RoleRepositoryInterface {
	  constructor(connection: Mongoose) {
	    super(connection);
	  }
	
	  getModel(): mongoose.Model<mongoose.Document> {
	    return Role;
	  }
	
	  async updateRelevantRoles(userId: string, relevantRoleIds: string[]): Promise<void> {
	    const arrPromises = relevantRoleIds.map((relevantRoleId: string) => {
	      return this.update(relevantRoleId, { individualId: userId, dateModify: new Date() });
	    });
	
	    await Promise.all(arrPromises);
	  }
	
	  async getRelevantRoleIds(email: string): Promise<RoleType[]> {
	    return this._model.find({ individualEmail: email });
	  }
	}

```

src/backend/repositories/mongodb/user.repository.ts```ts
	import BaseRepositoryAbstract from '@/backend/repositories/mongodb/base.repository.abstract';
	import UserRepositoryInterface from '@/backend/repositories/interfaces/user.repository.interface';
	import User from '@/backend/models/user.model';
	import mongoose, { Mongoose } from 'mongoose';
	import UserDto from '@/utils/dtos/user.dto';
	import { UserStatus } from '@/utils/enums';
	import NotFoundException from '@/backend/exceptions/notfound.exception';
	export default class UserRepository extends BaseRepositoryAbstract implements UserRepositoryInterface {
	  constructor(connection: Mongoose) {
	    super(connection);
	  }
	
	  getModel(): mongoose.Model<mongoose.Document> {
	    return User;
	  }
	
	  async getUserIdFromEmail(email: string): Promise<string | null> {
	    const user: mongoose.Document | null = await this._model.findOne({ email });
	
	    if (!user) {
	      return null;
	    }
	
	    return user.get('_id').toString();
	  }
	
	  async findUserId(userId: string): Promise<UserDto> {
	    const data: mongoose.Document[] = await this._model.find({ _id: userId });
	
	    if (data.length <= 0) {
	      throw new NotFoundException('User not found');
	    }
	
	    const userDto = new UserDto();
	    userDto.setData({
	      id: data[0].get('_id').toString(),
	      email: data[0].get('email'),
	      name: data[0].get('name'),
	      imageUrl: data[0].get('imageUrl'),
	      password: data[0].get('password'),
	      isContractor: data[0].get('isContractor'),
	      phoneNumber: data[0].get('phoneNumber'),
	      company: data[0].get('company'),
	      country: data[0].get('country'),
	      birthDate: data[0].get('birthDate'),
	      emailConfirmed: data[0].get('emailConfirmed'),
	      status: data[0].get('status'),
	      failedLoginAttempts: data[0].get('failedLoginAttempts'),
	      confirmationToken: data[0].get('confirmationToken'),
	      passwordResetToken: data[0].get('passwordResetToken'),
	      lastLogin: data[0].get('lastLogin'),
	      dateCreate: data[0].get('dateCreate'),
	      dateModify: data[0].get('dateModify')
	    });
	
	    return new Promise((resolve) => {
	      resolve(userDto);
	    });
	  }
	
	  async updateResetPasswordToken(userId: string, token: string): Promise<mongoose.UpdateWriteOpResult> {
	    return this._model.updateOne(
	      { _id: userId },
	      { passwordResetToken: token, failedLoginAttempts: 0, status: UserStatus.INACTIVE, dateModify: new Date() }
	    );
	  }
	}

```

src/backend/repositories/mongodb/budget.repository.ts```ts
	import BaseRepositoryAbstract from '@/backend/repositories/mongodb/base.repository.abstract';
	import BudgetRepositoryInterface from '@/backend/repositories/interfaces/budget.repository.interface';
	import mongoose, { Mongoose, Promise } from 'mongoose';
	import Budget from '@/backend/models/budget.model';
	import BudgetDto from '@/utils/dtos/budget.dto';
	
	export default class BudgetRepository extends BaseRepositoryAbstract implements BudgetRepositoryInterface {
	  constructor(connection: Mongoose) {
	    super(connection);
	  }
	
	  getModel(): mongoose.Model<mongoose.Document> {
	    return Budget;
	  }
	
	  async addBudget(data: BudgetDto): Promise<BudgetDto> {
	    await this.create(data);
	
	    return new Promise((resolve: (arg0: BudgetDto) => void) => {
	      resolve(data);
	    });
	  }
	
	  async getBudgetsByProjectId(projectId: string): Promise<any> {
	    return this.find({ projectId: projectId });
	  }
	}

```

src/backend/repositories/mongodb/project.repository.ts```ts
	import BaseRepositoryAbstract from '@/backend/repositories/mongodb/base.repository.abstract';
	import ProjectRepositoryInterface from '@/backend/repositories/interfaces/project.repository.interface';
	import mongoose, { Mongoose } from 'mongoose';
	import Project from '@/backend/models/project.model';
	
	export default class ProjectRepository extends BaseRepositoryAbstract implements ProjectRepositoryInterface {
	  constructor(connection: Mongoose) {
	    super(connection);
	  }
	
	  getModel(): mongoose.Model<mongoose.Document> {
	    return Project;
	  }
	}

```

src/backend/repositories/mongodb/contractor.repository.ts```ts
	import BaseRepositoryAbstract from '@/backend/repositories/mongodb/base.repository.abstract';
	import ContractorRepositoryInterface from '@/backend/repositories/interfaces/contractor.repository.interface';
	import mongoose, { Mongoose } from 'mongoose';
	import Contractor from '@/backend/models/contractor.model';
	
	export default class ContractorRepository extends BaseRepositoryAbstract implements ContractorRepositoryInterface {
	  constructor(connection: Mongoose) {
	    super(connection);
	  }
	
	  getModel(): mongoose.Model<mongoose.Document> {
	    return Contractor;
	  }
	
	  async findWithLimit(
	    filter: object,
	    limit: number,
	    offset: number,
	    sort: { [key: string]: 'asc' | 'desc' }
	  ): Promise<mongoose.Document[]> {
	    return this._model
	      .find(filter)
	      .populate({
	        path: 'creatorId',
	        select: { name: 1, email: 1, imageUrl: 1, _id: 1 }
	      })
	      .limit(limit)
	      .skip(offset)
	      .sort(sort)
	      .exec();
	  }
	}

```

src/backend/repositories/mongodb/base.repository.abstract.ts```ts
	/**
	 * @license
	 * Copyright 2024 J2C
	 */
	
	import mongoose, { Mongoose, SortOrder } from 'mongoose';
	import { DTO } from '@/utils/dtos/types/dto.type';
	import { PAGINATE_PAGE_SIZE } from '@/utils/constant';
	
	export default abstract class BaseRepositoryAbstract {
	  protected _db: Mongoose;
	  protected _model: mongoose.Model<mongoose.Document>;
	
	  protected constructor(db: Mongoose) {
	    this._db = db;
	    this._model = this.getModel();
	  }
	
	  abstract getModel(): mongoose.Model<mongoose.Document>;
	
	  async find(filter: object): Promise<mongoose.Document[]> {
	    return this._model.find(filter);
	  }
	
	  async findWithLimit(
	    filter: object,
	    limit: number,
	    offset: number,
	    sort: { [key: string]: 'asc' | 'desc' }
	  ): Promise<mongoose.Document[]> {
	    return this._model.find(filter).limit(limit).skip(offset).sort(sort).exec();
	  }
	
	  async findWithSort(
	    filter: object,
	    sort: { [key: string]: SortOrder },
	    limit = PAGINATE_PAGE_SIZE,
	    currentPage = 1
	  ): Promise<mongoose.Document[]> {
	    return this._model
	      .find(filter)
	      .sort(sort)
	      .limit(limit)
	      .skip(limit * (currentPage - 1));
	  }
	
	  async findOne(filter: object): Promise<mongoose.Document | null> {
	    return this._model.findOne(filter).exec();
	  }
	
	  async create(data: DTO): Promise<mongoose.Document> {
	    const newModel = new this._model(data.toObject());
	
	    return await newModel.save();
	  }
	
	  async createMany(data: DTO[]): Promise<mongoose.Document[]> {
	    return this._model.insertMany(data.map((item: DTO) => item.toObject() as Omit<DTO, '_id' | 'id' | any>));
	  }
	
	  async update(id: string | object | number, data: DTO | any): Promise<mongoose.Document<DTO | any> | null> {
	    const result = await this._model.findByIdAndUpdate(id, data, { new: true }).exec();
	
	    if (!result) {
	      throw new Error('Model not found');
	    }
	
	    return result;
	  }
	
	  async updateMany(filter: object, data: object): Promise<mongoose.UpdateWriteOpResult> {
	    return this._model.updateMany(filter, data).exec();
	  }
	
	  async delete(id: string | object | number): Promise<mongoose.Document | null> {
	    return this._model.findByIdAndDelete(id).exec();
	  }
	
	  async deleteMany(filter: object): Promise<mongoose.mongo.DeleteResult> {
	    return this._model.deleteMany(filter).exec();
	  }
	
	  async count(query: object): Promise<number> {
	    return this._model.countDocuments(query).exec();
	  }
	}

```

src/backend/repositories/mongodb/invoice.repository.ts```ts
	import BaseRepositoryAbstract from '@/backend/repositories/mongodb/base.repository.abstract';
	import mongoose, { Mongoose } from 'mongoose';
	import InvoiceRepositoryInterface from '@/backend/repositories/interfaces/invoice.repository.interface';
	import Invoice from '@/backend/models/invoice.model';
	
	export default class InvoiceRepository extends BaseRepositoryAbstract implements InvoiceRepositoryInterface {
	  constructor(connection: Mongoose) {
	    super(connection);
	  }
	
	  getModel(): mongoose.Model<mongoose.Document> {
	    return Invoice;
	  }
	
	  async updateBudgetTotalClaim(projectId: string, totalClaim: number, sum: number): Promise<any> {
	    const budgetTotalClaimDictionary: { [key: string]: any } = {
	      dateModify: new Date()
	    };
	
	    if (totalClaim === null) {
	      budgetTotalClaimDictionary['budgetTotalClaim'] = sum;
	    } else {
	      budgetTotalClaimDictionary['budgetCurrentClaim'] = sum;
	    }
	
	    const result = await this._model.findOneAndUpdate({ budgetId: projectId }, budgetTotalClaimDictionary);
	
	    return new Promise((resolve) => {
	      resolve(result);
	    });
	  }
	
	  async getInvoiceByBudgetIdOrCurrentClaim(budgetId: string, currentClaimNumber: number): Promise<any> {
	    const filter: { budgetId: string; invoiceClaimNumber?: number } = {
	      budgetId: budgetId
	    };
	
	    if (currentClaimNumber !== null) {
	      filter.invoiceClaimNumber = currentClaimNumber;
	    }
	
	    return this._model.find(filter);
	  }
	}

```

src/backend/repositories/mongodb/builder.repository.ts```ts
	import BaseRepositoryAbstract from '@/backend/repositories/mongodb/base.repository.abstract';
	import { BuilderRepositoryInterface } from '@/backend/repositories/interfaces/builder.repository.interface';
	import mongoose, { Mongoose, SortOrder } from 'mongoose';
	import Builder from '@/backend/models/builder.model';
	import { PAGINATE_PAGE_SIZE } from '@/utils/constant';
	
	export default class BuilderRepository extends BaseRepositoryAbstract implements BuilderRepositoryInterface {
	  constructor(connection: Mongoose) {
	    super(connection);
	  }
	
	  getModel(): mongoose.Model<mongoose.Document> {
	    return Builder;
	  }
	  async findWithSort(
	    filter: object,
	    sort: { [key: string]: SortOrder },
	    limit = PAGINATE_PAGE_SIZE,
	    currentPage = 1
	  ): Promise<mongoose.Document[]> {
	    return this._model
	      .find(filter)
	      .populate({
	        path: 'creatorId',
	        select: { name: 1, email: 1, imageUrl: 1, _id: 1 }
	      })
	      .limit(limit)
	      .skip(limit * (currentPage - 1))
	      .sort(sort)
	      .exec();
	  }
	}

```

src/backend/repositories/interfaces/budget.repository.interface.ts```ts
	import { Budget as BudgetType } from '@/utils/dtos/budget.dto';
	import BaseRepositoryInterface from '@/backend/repositories/interfaces/base.repository.interface';
	
	export default interface BudgetRepositoryInterface extends BaseRepositoryInterface {
	  addBudget(data: BudgetType): Promise<BudgetType>;
	
	  getBudgetsByProjectId(projectId: string): Promise<any>;
	}

```

src/backend/repositories/interfaces/user.repository.interface.ts```ts
	import UserDto from '@/utils/dtos/user.dto';
	import BaseRepositoryInterface from '@/backend/repositories/interfaces/base.repository.interface';
	import mongoose from 'mongoose';
	
	export default interface UserRepositoryInterface extends BaseRepositoryInterface {
	  getUserIdFromEmail(email: string): Promise<string | null>;
	
	  findUserId(id: string | object | number): Promise<UserDto>;
	
	  updateResetPasswordToken(userId: string, token: string): Promise<mongoose.UpdateWriteOpResult>;
	
	  findWithLimit(filter: object, limit: number, offset: number, sort: { [key: string]: 'asc' | 'desc' }): Promise<mongoose.Document[]>;
	}

```

src/backend/repositories/interfaces/builder.repository.interface.ts```ts
	import BaseRepositoryInterface from '@/backend/repositories/interfaces/base.repository.interface';
	
	export interface BuilderRepositoryInterface extends BaseRepositoryInterface {}

```

src/backend/repositories/interfaces/base.repository.interface.ts```ts
	import mongoose, { SortOrder } from 'mongoose';
	import { DTO } from '@/utils/dtos/types/dto.type';
	
	export default interface BaseRepositoryInterface {
	  find(filter: object): Promise<mongoose.Document[]>;
	
	  findWithSort(filter: object, sort: { [key: string]: SortOrder }, limit?: number, currentPage?: number): Promise<mongoose.Document[]>;
	
	  findOne(filter: object): Promise<mongoose.Document | null>;
	
	  create(data: DTO): Promise<mongoose.Document>;
	
	  createMany(data: DTO[] | object): Promise<mongoose.Document[]>;
	
	  update(id: string | object | number, data: DTO | any): Promise<mongoose.Document<DTO | any> | null>;
	
	  updateMany(filter: object, data: object): Promise<mongoose.UpdateWriteOpResult>;
	
	  delete(id: string): Promise<mongoose.Document | null>;
	
	  deleteMany(filter: object): Promise<mongoose.mongo.DeleteResult>;
	
	  count(query: object): Promise<number>;
	}

```

src/backend/repositories/interfaces/contractor.repository.interface.ts```ts
	import BaseRepositoryInterface from '@/backend/repositories/interfaces/base.repository.interface';
	import mongoose from 'mongoose';
	
	export default interface ContractorRepositoryInterface extends BaseRepositoryInterface {
	  count(query: object): Promise<number>;
	
	  findWithLimit(filter: object, limit: number, offset: number, sort: { [key: string]: 'asc' | 'desc' }): Promise<mongoose.Document[]>;
	}

```

src/backend/repositories/interfaces/invoice.repository.interface.ts```ts
	import BaseRepositoryInterface from '@/backend/repositories/interfaces/base.repository.interface';
	
	export default interface InvoiceRepositoryInterface extends BaseRepositoryInterface {
	  updateBudgetTotalClaim(projectId: string, totalClaim: number, sum: number): Promise<any>;
	
	  getInvoiceByBudgetIdOrCurrentClaim(budgetId: string, currentClaimNumber: number): Promise<number>;
	}

```

src/backend/repositories/interfaces/project.repository.interface.ts```ts
	import BaseRepositoryInterface from '@/backend/repositories/interfaces/base.repository.interface';
	
	export default interface ProjectRepositoryInterface extends BaseRepositoryInterface {}

```

src/backend/repositories/interfaces/role.repository.interface.ts```ts
	import { Role as RoleType } from '@/utils/dtos/role.dto';
	import BaseRepositoryInterface from '@/backend/repositories/interfaces/base.repository.interface';
	
	export default interface RoleRepositoryInterface extends BaseRepositoryInterface {
	  updateRelevantRoles(userId: string, relevantRoleIds: string[]): Promise<void>;
	
	  getRelevantRoleIds(email: string): Promise<RoleType[]>;
	}

```

src/backend/middlewares/unauth.middleware.ts```ts
	import { NextFetchEvent, NextMiddleware, NextRequest, NextResponse } from 'next/server';
	import { MiddlewareFactory } from '@/backend/middlewares/type/middleware.type';
	import { getCookie } from '@/utils/helper';
	import routes from '@/routes';
	
	const routesList = ['/register', '/login'];
	
	export const withUnAuth: MiddlewareFactory = (next: NextMiddleware) => {
	  return async (request: NextRequest, _next: NextFetchEvent) => {
	    let cookieName = 'next-auth.session-token';
	    if (process.env.NEXT_APP_ENV === 'production') {
	      cookieName = '__Secure-next-auth.session-token';
	    }
	
	    const token = getCookie(cookieName, request.headers.get('cookie'));
	
	    if (token && routesList.some((path) => request.nextUrl.pathname.startsWith(path))) {
	      return NextResponse.redirect(new URL(routes.dashboard.getUrl(), request.url));
	    }
	
	    return next(request, _next);
	  };
	};

```

src/backend/middlewares/stack.middleware.ts```ts
	import { NextMiddleware, NextResponse } from 'next/server';
	import { MiddlewareFactory } from '@/backend/middlewares/type/middleware.type';
	
	export default function stackMiddlewares(functions: MiddlewareFactory[] = [], index = 0): NextMiddleware {
	  const current = functions[index];
	
	  if (current) {
	    const next = stackMiddlewares(functions, index + 1);
	    return current(next);
	  }
	
	  return () => NextResponse.next();
	}

```

src/backend/middlewares/auth.middleware.ts```ts
	import { NextFetchEvent, NextMiddleware, NextRequest, NextResponse } from 'next/server';
	import { MiddlewareFactory } from '@/backend/middlewares/type/middleware.type';
	import { decode } from 'next-auth/jwt';
	import routes from '@/routes';
	import { getCookie } from '@/utils/helper';
	
	export const routeList = [routes.dashboard.getUrl(), routes.myAccount.getUrl(), '/contractor', '/project', '/builder'];
	
	export const withAuth: MiddlewareFactory = (next: NextMiddleware) => {
	  return async (request: NextRequest, _next: NextFetchEvent) => {
	    if (!routeList.some((path) => request.nextUrl.pathname.startsWith(path))) {
	      return next(request, _next);
	    }
	
	    let cookieName = 'next-auth.session-token';
	    if (process.env.NEXT_APP_ENV === 'production') {
	      cookieName = '__Secure-next-auth.session-token';
	    }
	
	    const token = getCookie(cookieName, request.headers.get('cookie'));
	
	    if (!token) {
	      return NextResponse.redirect(new URL(routes.login.getUrl(), request.url));
	    }
	
	    const session = await decode({
	      token: token as string,
	      secret: process.env.NEXTAUTH_SECRET as string
	    });
	
	    if (!session) {
	      return NextResponse.redirect(new URL(routes.login.getUrl(), request.url));
	    }
	
	    const res = await next(request, _next);
	
	    if (res) {
	      res.headers.set('x-content-type-options', 'nosniff');
	      res.headers.set('x-dns-prefetch-control', 'false');
	      res.headers.set('x-download-options', 'noopen');
	      res.headers.set('x-frame-options', 'SAMEORIGIN');
	    }
	
	    return res;
	  };
	};

```

src/backend/middlewares/jwt.middleware.ts```ts
	import { NextFetchEvent, NextMiddleware, NextRequest, NextResponse } from 'next/server';
	import { MiddlewareFactory } from '@/backend/middlewares/type/middleware.type';
	import { decode } from 'next-auth/jwt';
	import { headers } from 'next/headers';
	
	const publicApi: string[] = ['/api-docs', '/api/auth', '/api/auth/csrf', '/api/auth/signin', '/api/auth/signout', 'api/auth/providers'];
	
	export const withJwt: MiddlewareFactory = (next: NextMiddleware) => {
	  return async (request: NextRequest, _next: NextFetchEvent) => {
	    if (publicApi.some((path) => request.nextUrl.pathname.startsWith(path)) || !request.nextUrl.pathname.startsWith('/api')) {
	      return next(request, _next);
	    }
	
	    const headersList = headers();
	    const token = headersList.get('authorization')?.split(' ')[1];
	
	    if (!token) {
	      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
	    }
	
	    try {
	      await decode({
	        token: token as string,
	        secret: process.env.NEXTAUTH_SECRET as string
	      });
	    } catch (error) {
	      return NextResponse.json({ error: 'Token expired' }, { status: 401 });
	    }
	
	    return next(request, _next);
	  };
	};

```

src/backend/middlewares/type/middleware.type.ts```ts
	import { NextMiddleware } from 'next/server';
	
	export type MiddlewareFactory = (middleware: NextMiddleware) => NextMiddleware;

```

src/backend/connection/mongo.connection.ts```ts
	import mongoose, { Mongoose } from 'mongoose';
	
	const MONGODB_URI: string = process.env.MONGODB_URI!;
	
	if (!MONGODB_URI) {
	  throw new Error('Invalid/Missing environment variable: "MONGODB_URI"');
	}
	
	/**
	 * Global is used here to maintain a cached connection across hot reloads
	 * in development. This prevents connections growing exponentially
	 * during API Route usage.
	 */
	// @ts-ignore
	let cached = global.mongoose;
	
	if (!cached) {
	  // @ts-ignore
	  cached = global.mongoose = { conn: null, promise: null };
	}
	
	async function MongoConnect(): Promise<Mongoose> {
	  if (cached.conn) {
	    return cached.conn;
	  }
	
	  if (!cached.promise) {
	    const opts = {
	      bufferCommands: false,
	      dbName: process.env.MONGODB_DATABASE
	    };
	
	    cached.promise = mongoose.connect(MONGODB_URI, opts).then((mongoose) => {
	      return mongoose;
	    });
	  }
	
	  try {
	    cached.conn = await cached.promise;
	  } catch (e) {
	    cached.promise = null;
	    cached.conn = null;
	
	    throw e;
	  }
	
	  return cached.conn;
	}
	
	export default MongoConnect;

```

src/menu-items/pages.tsx```tsx
	// third-party
	import { FormattedMessage } from 'react-intl';
	
	// assets
	import { NavItemType } from 'types';
	import routes from '@/routes';
	
	import { UserCircleGear, Buildings, Users, Gear, FileText, Briefcase } from '@phosphor-icons/react';
	
	// ==============================|| EXTRA PAGES MENU ITEMS ||============================== //
	
	const pages: NavItemType = {
	  id: 'pages',
	  type: 'group',
	  children: [
	    {
	      id: routes.dashboard.key,
	      title: <FormattedMessage id="builder-page" />,
	      icon: Buildings,
	      type: 'item',
	      url: routes.dashboard.getUrl()
	    },
	    {
	      id: 'contractor',
	      title: <FormattedMessage id="contractor-page" />,
	      icon: Users,
	      type: 'item',
	      url: routes.contractor.getUrl()
	    },
	    {
	      id: 'user',
	      title: <FormattedMessage id="user-page" />,
	      icon: UserCircleGear,
	      type: 'item',
	      url: routes.user.getUrl()
	    },
	    {
	      id: 'maintenance',
	      title: <FormattedMessage id="maintenance" />,
	      type: 'collapse',
	      icon: Gear,
	      children: [
	        {
	          id: 'error',
	          title: <FormattedMessage id="error-404" />,
	          type: 'item',
	          url: '/pages/maintenance/error'
	        },
	        {
	          id: 'coming-soon',
	          title: <FormattedMessage id="coming-soon" />,
	          type: 'collapse',
	          children: [
	            {
	              id: 'coming-soon1',
	              title: (
	                <>
	                  <FormattedMessage id="coming-soon" /> 01
	                </>
	              ),
	              type: 'item',
	              url: '/pages/maintenance/coming-soon/coming-soon1'
	            },
	            {
	              id: 'coming-soon2',
	              title: (
	                <>
	                  <FormattedMessage id="coming-soon" /> 02
	                </>
	              ),
	              type: 'item',
	              url: '/pages/maintenance/coming-soon/coming-soon2'
	            }
	          ]
	        },
	        {
	          id: 'under-construction',
	          title: <FormattedMessage id="under-construction" />,
	          type: 'item',
	          url: '/pages/maintenance/under-construction'
	        }
	      ]
	    },
	    {
	      id: routes.projects.key,
	      title: <FormattedMessage id="projects" />,
	      icon: Briefcase,
	      type: 'item',
	      url: routes.projects.getUrl()
	    },
	    {
	      id: routes.apiDocs.key,
	      title: routes.apiDocs.label,
	      icon: FileText,
	      type: 'item',
	      url: routes.apiDocs.getUrl()
	    }
	  ]
	};
	
	export default pages;

```

src/menu-items/index.tsx```tsx
	// menu import
	import pages from './pages';
	
	// types
	import { NavItemType } from 'types';
	
	// ==============================|| MENU ITEMS ||============================== //
	
	const menuItems: { items: NavItemType[] } = {
	  items: [pages]
	};
	
	export default menuItems;

```

src/types/request.ts```ts
	import { SortOrder } from 'mongoose';
	import { UserProfile } from './user-profile';
	import { FolderName } from 'utils/enums';
	
	export interface IRequestFilter {
	  search?: string;
	  sortBy?: string;
	  sortDir?: SortOrder;
	  limit?: number;
	  page?: number;
	  filterBy?: string;
	  sort?: string; // TODO: for contractor - need update
	  field?: string; // TODO: for contractor - need update
	}
	export interface IRequestRegister {
	  email: string;
	  password: string;
	  name: string;
	}
	
	export interface IRequestUpdateProfile extends UserProfile {}
	
	export interface IRequestCreateBuilder {
	  builderName: string;
	  category: string;
	  address: string;
	  completionStatus: string;
	  image?: File;
	}
	
	export interface IRequestUpdateBuilder extends Partial<IRequestCreateBuilder> {}
	
	export interface IRequestCreateContractor {
	  contractorName: string;
	  service: string;
	  address: string;
	  completionStatus: string;
	  file?: File;
	}
	
	export interface IRequestUpdateContractor extends Partial<IRequestCreateContractor> {}
	
	export interface IRequestCreateUser {
	  firstName: string;
	  lastName: string;
	  email: string;
	  role: string;
	  completionStatus: string;
	  company: string;
	  country: string;
	  phoneNumber: string;
	  birthDate: string;
	  address?: string;
	  contactName?: string;
	  contactEmail?: string;
	  contactPhoneNumber?: string;
	  gst?: string;
	  insuranceNumber?: string;
	  workSafeBCNumber?: number;
	}
	
	export interface IRequestUpdateUser extends Partial<IRequestCreateUser> {}
	
	/* AUTH */
	export interface IRequestSendCode {
	  email: string;
	}
	
	export interface IRequestVerifyCode {
	  email: string;
	  code: string;
	}
	
	export interface IRequestResetPassword {
	  password: string;
	  confirmPassword: string;
	  email: string;
	  token: string;
	}
	
	export interface IRequestChangePassword {
	  id: string;
	  oldPassword: string;
	  password: string;
	  confirmPassword: string;
	}
	
	export interface IRequestChangeAvatar {
	  id: string;
	  imageUrl: string;
	  email: string;
	  name: string;
	}
	
	/* PROJECT */
	export interface IRequestCreateProject {
	  projectName: string;
	  startDate: string;
	  address: string;
	  imageUrl: string;
	  currentClaimNumber: number;
	}
	
	export interface IRequestUpdateProject {
	  id: string;
	  projectName: string;
	  startDate: string;
	  address: string;
	  imageUrl: string;
	  currentClaimNumber: number;
	}
	
	/* UPLOAD */
	export interface IRequestUpload {
	  folder: FolderName;
	  file: any;
	}
	
	export interface IRequestCreateProject {
	  projectName: string;
	  currentClaimNumber: number;
	  address: string;
	  startDate: string;
	  image?: File;
	}
	
	export interface IRequestUpdateProject extends Partial<IRequestCreateProject> {}

```

src/types/pagination.ts```ts
	import { SortOrder } from 'mongoose';
	
	export type PaginateQuery<T> = {
	  page: number;
	  limit?: number;
	  sortBy?: keyof T;
	  sortDir?: SortOrder;
	  search?: string;
	  filterBy?: string;
	};
	
	export type ResponseMeta = {
	  total: number;
	  page: number;
	  limit: number;
	  totalPages: number;
	};

```

src/types/snackbar.ts```ts
	// material-ui
	import { AlertProps, SnackbarOrigin } from '@mui/material';
	
	// ==============================|| SNACKBAR TYPES ||============================== //
	
	export interface SnackbarProps {
	  action: boolean;
	  open: boolean;
	  message: string;
	  anchorOrigin: SnackbarOrigin;
	  variant: string;
	  alert: AlertProps;
	  transition: string;
	  close: boolean;
	  dense: boolean;
	  maxStack: number;
	  iconVariant: string;
	  actionButton: boolean;
	}

```

src/types/config.ts```ts
	// material-ui
	import { PaletteMode } from '@mui/material';
	
	// ==============================|| TYPES - CONFIG ||============================== //
	
	export type ConfigProps = {
	  layout: string;
	  drawerType: string;
	  fontFamily: string;
	  borderRadius: number;
	  outlinedFilled: boolean;
	  navType: PaletteMode;
	  presetColor: string;
	  locale: string;
	  rtlLayout: boolean;
	  container: boolean;
	};
	
	export type CustomizationProps = {
	  layout: string;
	  drawerType: string;
	  fontFamily: string;
	  borderRadius: number;
	  outlinedFilled: boolean;
	  navType: PaletteMode;
	  presetColor: string;
	  locale: string;
	  rtlLayout: boolean;
	  container: boolean;
	  onChangeLayout: (layout: string) => void;
	  onChangeDrawer: (drawerType: string) => void;
	  onChangeMenuType: (navType: PaletteMode) => void;
	  onChangePresetColor: (presetColor: string) => void;
	  onChangeLocale: (locale: string) => void;
	  onChangeRTL: (rtlLayout: boolean) => void;
	  onChangeContainer: (container: boolean) => void;
	  onChangeFontFamily: (fontFamily: string) => void;
	  onChangeBorderRadius: (event: Event, newValue: number | number[]) => void;
	  onChangeOutlinedField: (outlinedFilled: boolean) => void;
	  onReset: () => void;
	};

```

src/types/response.ts```ts
	import { Builder } from '@/utils/dtos/builder.dto';
	import { Project } from '@/utils/dtos/project.dto';
	import { ResponseMeta } from './pagination';
	import { IContractor } from '@/utils/services/contractor';
	
	export interface IResponse<T> {
	  data: T;
	  status: number;
	  meta?: ResponseMeta;
	}
	export interface IResponseSuccessStatus {
	  success: boolean;
	  data?: any;
	}
	
	export interface IResponseRegister {
	  message?: string;
	  errors?: string[];
	}
	
	/* BUILDER */
	export interface IResponseListBuilders extends IResponse<Builder[]> {}
	
	export interface IResponseCreateBuilder {
	  builder: Builder;
	  status: number;
	}
	
	export interface IResponseDeleteBuilder {
	  status: number;
	}
	
	export interface IResponseUpdateBuilder {
	  builder: Builder;
	  status: number;
	}
	
	/* CONTRACTOR */
	
	export interface IResponseListContractors extends IResponse<IContractor[]> {}
	
	export interface IResponseCreateContractor {
	  status: number;
	}
	export interface IResponseUpdateContractor {
	  status: number;
	}
	
	/* USER */
	export interface IResponseListUsers<T> {
	  users: T[];
	}
	
	export interface IResponseCreateUser {
	  status: number;
	}
	
	export interface IResponseDeleteUser {
	  status: number;
	}
	
	export interface IResponseUpdateUser {
	  status: number;
	}
	
	export interface IResponseDeleteContractor {
	  status: number;
	}
	export interface ResponseError {
	  status: number;
	  message: string;
	  errors?: { [key: string]: string[] };
	}
	
	/* AUTH */
	export interface IResponseVerifyCode {
	  success: boolean;
	}
	
	export interface IResponseSendCode {
	  success: boolean;
	}
	
	export interface IResponseResetPassword {
	  success: boolean;
	}
	
	/* PROJECT */
	export interface IResponseProjects {
	  projects: Project[] | [];
	  totalItem: number;
	}
	
	export interface IResponseDeleteProject {
	  success: boolean;
	}
	
	/* UPLOAD */
	export interface IResponseUpload {
	  message: string;
	  url: string;
	}

```

src/types/menu.ts```ts
	// types
	import { NavItemType } from 'types';
	
	// ==============================|| MENU TYPES ||============================== //
	
	export type MenuProps = {
	  selectedItem: string[];
	  selectedID: string | null;
	  drawerOpen: boolean;
	  error: null;
	  menu: NavItemType;
	};

```

src/types/user-profile.ts```ts
	// types
	import { HandleFunction } from 'types';
	
	// ==============================|| TYPES - SNACKBAR ||============================== //
	
	export type ProfileProgress = {
	  label: string;
	  variant: string;
	  value: number;
	};
	
	export type UserProfile = {
	  id?: string;
	  avatar?: string;
	  image?: string;
	  name?: string;
	  role?: string;
	  about?: string;
	  email?: string;
	  work_email?: string;
	  personal_email?: string;
	  phone?: string;
	  work_phone?: string;
	  personal_phone?: string;
	  birthdayText?: string;
	  lastMessage?: string;
	  status?: string;
	  friends?: number;
	  followers?: number;
	  contact?: string;
	  company?: string;
	  location?: string;
	  online_status?: string;
	  unReadChatCount?: number;
	  groups?: Group[];
	  time?: string;
	  tier?: string;
	  Progress?: ProfileProgress;
	  provider?: string;
	};
	
	export type Profile = {
	  id: string;
	  avatar: string;
	  name: string;
	  time: string;
	};
	
	export type PostImage = {
	  img: string;
	  featured?: boolean;
	  title?: string;
	};
	
	export type Likes = {
	  like: boolean;
	  value: number;
	};
	
	export type Group = {
	  id: string;
	  avatar: string;
	  name: string;
	};
	
	export type Reply = {
	  id: string;
	  profile: Profile;
	  data: CommentData;
	};
	
	export type CommentData = {
	  name?: string;
	  comment?: string;
	  likes?: Likes;
	  video?: string;
	  replies?: Reply[];
	};
	
	export type PostData = {
	  id?: string;
	  content: string;
	  images: PostImage[];
	  video?: string;
	  likes: Likes;
	  comments?: Comment[];
	};
	export type Comment = {
	  id: string;
	  profile: Profile;
	  data?: CommentData;
	};
	export type Post = {
	  id?: string;
	  profile: Profile;
	  data: PostData;
	};
	
	export type PostDataType = { id: string; data: PostData; profile: Profile };
	
	export interface PostProps {
	  commentAdd: (s: string, c: Reply) => Promise<void>;
	  handleCommentLikes: HandleFunction;
	  editPost?: HandleFunction;
	  renderPost?: HandleFunction;
	  setPosts?: React.Dispatch<React.SetStateAction<PostDataType[]>>;
	  handlePostLikes: (s: string) => Promise<void>;
	  handleReplayLikes: (postId: string, commentId: string, replayId: string) => Promise<void>;
	  post: PostDataType;
	  replyAdd: (postId: string, commentId: string, reply: Reply) => Promise<void>;
	}

```

src/types/route.ts```ts
	export type IRoute = {
	  [k: string]: IItemRoute;
	};
	
	export interface IItemRoute {
	  getUrl: () => string;
	  label: string;
	  key: string;
	}

```

src/types/default-theme.ts```ts
	// material-ui
	import { Color, PaletteMode } from '@mui/material';
	
	// third party
	import { Property } from 'csstype';
	
	// ==============================|| THEME - PROPS ||============================== //
	
	export interface CustomizationProps {
	  fontFamily: Property.FontFamily;
	  borderRadius?: number;
	  navType: PaletteMode;
	  presetColor?: string;
	  rtlLayout?: boolean;
	  outlinedFilled?: boolean;
	}
	
	export interface CustomShadowProps {
	  z1: string;
	  z8: string;
	  z12: string;
	  z16: string;
	  z20: string;
	  z24: string;
	  primary: string;
	  secondary: string;
	  orange: string;
	  success: string;
	  warning: string;
	  error: string;
	}
	
	export interface CustomTypography {
	  customInput?: {
	    marginTop: number;
	    marginBottom: number;
	    '& > label': {
	      top: string;
	      left: number;
	      color?: Color | (Color | undefined)[] | Color[];
	      '&[data-shrink="false"]': {
	        top: string;
	      };
	    };
	    '& > div > input': {
	      padding: string;
	    };
	    '& legend': {
	      display: string;
	    };
	    '& fieldset': {
	      top: number;
	    };
	  };
	  mainContent?: {
	    backgroundColor?: string;
	    width: string;
	    minHeight: string;
	    flexGrow: number;
	    padding: string;
	    marginTop: string;
	    marginRight: string;
	    borderRadius: string;
	  };
	  menuCaption?: {
	    fontSize: string;
	    fontWeight: number;
	    color?: Color | (Color | undefined)[] | Color[];
	    padding: string;
	    textTransform: 'uppercase' | 'lowercase' | 'capitalize' | 'inherit';
	    marginTop: string;
	  };
	  subMenuCaption?: {
	    fontSize: string;
	    fontWeight: number;
	    color: Color | (Color | undefined)[] | Color[];
	    textTransform: 'uppercase' | 'lowercase' | 'capitalize' | 'inherit';
	  };
	  commonAvatar?: {
	    cursor: string;
	    borderRadius: string;
	  };
	  smallAvatar?: {
	    width: string;
	    height: string;
	    fontSize: string;
	  };
	  mediumAvatar?: {
	    width: string;
	    height: string;
	    fontSize: string;
	  };
	  largeAvatar?: {
	    width: string;
	    height: string;
	    fontSize: string;
	  };
	  heading?: string;
	  textDark?: string;
	  grey900?: string;
	  grey800?: string;
	  grey700?: string;
	  grey600?: string;
	  grey500?: string;
	  grey400?: string;
	  grey300?: string;
	  grey200?: string;
	  grey100?: string;
	  grey50?: string;
	  secondaryLight?: string;
	  secondary200?: string;
	  secondaryDark?: string;
	  secondaryMain?: string;
	  background?: string;
	  darkPrimaryLight?: string;
	  darkPrimaryMain?: string;
	  darkPrimaryDark?: string;
	  darkSecondaryMain?: string;
	  darkSecondaryLight?: string;
	  darkSecondary800?: string;
	  darkSecondary200?: string;
	  darkSecondaryDark?: string;
	  secondary800?: string;
	  darkPrimary800?: string;
	  darkPrimary200?: string;
	  darkLevel2?: string;
	  darkLevel1?: string;
	  darkPaper?: string;
	  darkTextPrimary?: string;
	  darkTextSecondary?: string;
	  darkBackground?: string;
	  primaryDark?: string;
	  primary800?: string;
	  primary200?: string;
	  primaryLight?: string;
	  primaryMain?: string;
	  colors?: CustomTypography;
	  paper?: string;
	  backgroundDefault?: string;
	  menuSelected?: string;
	  menuSelectedBack?: string;
	  divider?: string;
	  customization?: CustomizationProps;
	  z1?: string;
	  z8?: string;
	  z12?: string;
	  z16?: string;
	  z20?: string;
	  z24?: string;
	  primary?: string;
	  secondary?: string;
	  orange?: string;
	  orangeLight?: string;
	  orangeMain?: string;
	  orangeDark?: string;
	  successLight?: string;
	  success200?: string;
	  successMain?: string;
	  successDark?: string;
	  success?: string;
	  warning?: string;
	  error?: string;
	  errorLight?: string;
	  errorMain?: string;
	  errorDark?: string;
	  warningLight?: string;
	  warningMain?: string;
	  warningDark?: string;
	}

```

src/types/user.ts```ts
	// types
	import { GenericCardProps } from 'types';
	import { PostDataType, UserProfile, Profile } from 'types/user-profile';
	
	// ==============================|| TYPES - USER ||============================== //
	
	export interface UserSimpleCardProps {
	  avatar: string;
	  name: string;
	  status: string;
	}
	
	export interface UserProfileCardProps extends UserProfile {
	  profile: string;
	}
	
	export interface FriendsCardProps {
	  avatar: string;
	  location: string;
	  name: string;
	}
	
	export interface FriendRequestCardProps extends Profile {
	  mutual: number;
	}
	
	export interface FollowerCardProps {
	  avatar: string;
	  follow: number;
	  location: string;
	  name: string;
	}
	
	export interface UserStateProps {
	  usersS1: UserProfile[];
	  usersS2: UserProfileStyle2[];
	  followers: FollowerCardProps[];
	  friendRequests: FriendRequestCardProps[];
	  friends: FriendsCardProps[];
	  gallery: GenericCardProps[];
	  posts: PostDataType[];
	  detailCards: UserProfile[];
	  simpleCards: UserSimpleCardProps[];
	  profileCards: UserProfileCardProps[];
	  error: object | string | null;
	}
	
	export type UserProfileStyle2 = {
	  image: string;
	  name: string;
	  designation: string;
	  badgeStatus: string;
	  subContent: string;
	  email: string;
	  phone: string;
	  location: string;
	  progressValue: string;
	};

```

src/types/auth.ts```ts
	// types
	import { UserProfile } from 'types/user-profile';
	
	// ==============================|| TYPES - AUTH ||============================== //
	
	export interface JWTData {
	  userId: string;
	}
	
	export type JWTContextType = {
	  isLoggedIn: boolean;
	  isInitialized?: boolean;
	  user?: UserProfile | null | undefined;
	  logout: () => void;
	  login: (email: string, password: string) => Promise<void>;
	  register: (email: string, password: string, firstName: string, lastName: string) => Promise<void>;
	  resetPassword: (email: string) => Promise<void>;
	  updateProfile: VoidFunction;
	};
	
	export interface InitialLoginContextProps {
	  isLoggedIn: boolean;
	  isInitialized?: boolean;
	  user?: UserProfile | null | undefined;
	}

```

src/types/link.ts```ts
	import { LinkProps as NextLinkProps } from 'next/link';
	
	// material-ui
	import { LinkProps as MuiLinkProps } from '@mui/material/Link';
	
	// ==============================|| TYPES - LINKS ||============================== //
	
	export interface NextLinkComposedProps
	  extends Omit<React.AnchorHTMLAttributes<HTMLAnchorElement>, 'href'>,
	    Omit<NextLinkProps, 'href' | 'as' | 'onClick' | 'onMouseEnter' | 'onTouchStart'> {
	  to: NextLinkProps['href'];
	  linkAs?: NextLinkProps['as'];
	  href?: NextLinkProps['href'];
	}
	
	export type LinkProps = {
	  activeClassName?: string;
	  as?: NextLinkProps['as'];
	  href: NextLinkProps['href'];
	  linkAs?: NextLinkProps['as']; // Useful when the as prop is shallow by styled().
	  noLinkStyle?: boolean;
	} & Omit<NextLinkComposedProps, 'to' | 'linkAs' | 'href'> &
	  Omit<MuiLinkProps, 'href'>;

```

src/types/index.ts```ts
	import React, { FunctionComponent, ReactElement, ReactNode } from 'react';
	import { Theme } from '@mui/material/styles';
	
	declare module 'react' {
	  interface CSSProperties {
	    '--tree-view-color'?: string;
	    '--tree-view-bg-color'?: string;
	  }
	}
	
	// material-ui
	import { SvgIconTypeMap, ChipProps, TableCellProps } from '@mui/material';
	import { OverridableComponent } from '@mui/material/OverridableComponent';
	
	// project imports
	import { UserStateProps } from './user';
	import { SnackbarProps } from './snackbar';
	
	// types
	import { UserProfile } from 'types/user-profile';
	
	// ==============================|| TYPES ||============================== //
	
	export type ArrangementOrder = 'asc' | 'desc' | undefined;
	
	export type DateRange = { start: number | Date; end: number | Date };
	
	export type GetComparator = (o: ArrangementOrder, o1: string) => (a: KeyedObject, b: KeyedObject) => number;
	
	export type Direction = 'up' | 'down' | 'right' | 'left';
	
	export interface TabsProps {
	  children?: React.ReactElement | React.ReactNode | string;
	  value: string | number;
	  index: number;
	}
	
	export interface GenericCardProps {
	  title?: string;
	  primary?: string | number | undefined;
	  secondary?: string;
	  content?: string;
	  image?: string;
	  dateTime?: string;
	  iconPrimary?: OverrideIcon;
	  color?: string;
	  size?: string;
	}
	
	export type OverrideIcon =
	  | (OverridableComponent<SvgIconTypeMap<{}, 'svg'>> & {
	      muiName: string;
	    })
	  | React.ComponentClass<any>
	  | FunctionComponent<any>
	  | any;
	
	export interface EnhancedTableHeadProps extends TableCellProps {
	  onSelectAllClick: (e: React.ChangeEvent<HTMLInputElement>) => void;
	  order: ArrangementOrder;
	  orderBy?: string;
	  numSelected: number;
	  rowCount: number;
	  onRequestSort: (e: React.SyntheticEvent, p: string) => void;
	}
	
	export interface EnhancedTableToolbarProps {
	  numSelected: number;
	}
	
	export type HeadCell = {
	  id: string;
	  numeric: boolean;
	  label: string;
	  disablePadding?: string | boolean | undefined;
	  align?: 'left' | 'right' | 'inherit' | 'center' | 'justify' | undefined;
	};
	
	export type LinkTarget = '_blank' | '_self' | '_parent' | '_top';
	
	export type NavItemTypeObject = { children?: NavItemType[]; items?: NavItemType[]; type?: string };
	
	export type NavItemType = {
	  id?: string;
	  icon?: GenericCardProps['iconPrimary'];
	  target?: boolean;
	  external?: boolean;
	  url?: string | undefined;
	  type?: string;
	  title?: ReactNode | string;
	  color?: 'primary' | 'secondary' | 'default' | undefined;
	  caption?: ReactNode | string;
	  breadcrumbs?: boolean;
	  disabled?: boolean;
	  chip?: ChipProps;
	  children?: NavItemType[];
	  elements?: NavItemType[];
	  search?: string;
	};
	
	export type AuthSliderProps = {
	  title: string;
	  description: string;
	};
	
	export interface ColorPaletteProps {
	  color: string;
	  label: string;
	  value: string;
	}
	
	export interface DefaultRootStateProps {
	  snackbar: SnackbarProps;
	  user: UserStateProps;
	}
	
	export interface ColorProps {
	  readonly [key: string]: string;
	}
	
	export type GuardProps = {
	  children: ReactElement | null;
	};
	
	export interface StringColorProps {
	  id?: string;
	  label?: string;
	  color?: string;
	  primary?: string;
	  secondary?: string;
	}
	
	export type KeyedObject = {
	  [key: string]: string | number | KeyedObject | any;
	};
	
	export interface InitialLoginContextProps {
	  isLoggedIn: boolean;
	  isInitialized?: boolean;
	  user?: UserProfile | null | undefined;
	}
	
	export interface FormInputProps {
	  bug: KeyedObject;
	  fullWidth?: boolean;
	  size?: 'small' | 'medium' | undefined;
	  label: string;
	  name: string;
	  required?: boolean;
	  InputProps?: {
	    label: string;
	    startAdornment?: React.ReactNode;
	  };
	}
	
	export type HandleFunction = (i: string, s: string) => Promise<void>;
	
	export type LayoutType = 'authGuard' | 'guestGuard' | 'minimalLayout';
	/** ---- Common Functions types ---- */
	
	export type StringBoolFunc = (s: string) => boolean;
	export type StringNumFunc = (s: string) => number;
	export type NumbColorFunc = (n: number) => StringColorProps | undefined;
	export type ChangeEventFunc = (e: React.ChangeEvent<HTMLInputElement>) => void;
	
	// custom theme
	export interface ICMTheme extends Theme {
	  cmColors?: {
	    readonly [key: string]: string;
	  };
	}

```

src/types/overrides/createPalette.d.ts```ts
	// eslint-disable-next-line
	import * as createPalette from '@mui/material/styles/createPalette';
	
	declare module '@mui/material/styles/createPalette' {
	  interface PaletteColor {
	    100: string;
	    200: string;
	    300: string;
	    400: string;
	    500: string;
	    600: string;
	    700: string;
	    800: string;
	    900: string;
	  }
	
	  export interface TypeText {
	    dark: string;
	    hint: string;
	  }
	
	  interface CMPaletteOptions {
	    //primary colors
	    primaryLight?: string;
	    primaryLightHover?: string;
	    primaryLightActive?: string;
	    primaryNormal?: string;
	    primaryNormalHover?: string;
	    primaryNormalActive?: string;
	    primaryDark?: string;
	    primaryDarkHover?: string;
	    primaryDarkActive?: string;
	    primaryDarker?: string;
	
	    // secondary colors
	    secondaryLight?: string;
	    secondaryLightHover?: string;
	    secondaryLightActive?: string;
	    secondaryNormal?: string;
	    secondaryNormalHover?: string;
	    secondaryNormalActive?: string;
	    secondaryDark?: string;
	    secondaryDarkHover?: string;
	    secondaryDarkActive?: string;
	    secondaryDarker?: string;
	
	    // highlight
	    highlightLight?: string;
	    highlightHover?: string;
	    highlightActive?: string;
	    highlightNormal?: string;
	    highlightNormalHover?: string;
	    highlightNormalActive?: string;
	    highlightNormalDark?: string;
	    highlightNormalDarkHover?: string;
	    highlightNormalDarkActive?: string;
	    highlightNormalDarker?: string;
	  }
	
	  interface PaletteOptions {
	    orange?: PaletteColorOptions;
	    dark?: PaletteColorOptions;
	    icon?: IconPaletteColorOptions;
	    danger?: PaletteColorOptions;
	    cmColors?: PaletteColorOptions | CMPaletteOptions;
	  }
	  interface Palette {
	    orange: PaletteColor;
	    dark: PaletteColor;
	    danger: PaletteColor;
	    icon: IconPaletteColor;
	    cmColors?: PaletteColorOptions | CMPaletteOptions;
	  }
	}
	
	declare module '@mui/material/Button' {
	  interface ButtonPropsColorOverrides {
	    danger: true;
	  }
	}

```

src/types/overrides/Alert.d.ts```ts
	// eslint-disable-next-line
	import * as Alert from '@mui/material/Alert';
	
	declare module '@mui/material/Alert' {
	  interface AlertPropsColorOverrides {
	    primary;
	    secondary;
	  }
	}

```

src/types/overrides/createTypography.d.ts```ts
	// eslint-disable-next-line
	import * as createTypography from '@mui/material/styles/createTypography';
	
	declare module '@mui/material/styles/createTypography' {
	  export interface FontStyle
	    extends Required<{
	      textTransform: TextTransform;
	      fontSize: string | number; // added string
	    }> {}
	  export interface FontStyleOptions extends Partial<FontStyle> {
	    fontSize?: string | number; // added string
	  }
	  export type Variant =
	    | 'customInput'
	    | 'mainContent'
	    | 'menuCaption'
	    | 'subMenuCaption'
	    | 'commonAvatar'
	    | 'smallAvatar'
	    | 'mediumAvatar'
	    | 'largeAvatar';
	
	  export interface TypographyOptions extends Partial<Record<Variant, TypographyStyleOptions> & FontStyleOptions> {
	    customInput?: TypographyStyleOptions;
	    mainContent?: TypographyStyleOptions;
	    menuCaption?: TypographyStyleOptions;
	    subMenuCaption?: TypographyStyleOptions;
	    commonAvatar?: TypographyStyleOptions;
	    smallAvatar?: TypographyStyleOptions;
	    mediumAvatar?: TypographyStyleOptions;
	    largeAvatar?: TypographyStyleOptions;
	  }
	
	  export interface Typography extends Record<Variant, TypographyStyle>, FontStyle, TypographyUtils {
	    customInput: TypographyStyle;
	    mainContent: TypographyStyle;
	    menuCaption: TypographyStyleOptions;
	    subMenuCaption: TypographyStyleOptions;
	    commonAvatar: TypographyStyle;
	    smallAvatar: TypographyStyle;
	    mediumAvatar: TypographyStyle;
	    largeAvatar: TypographyStyle;
	  }
	}

```

src/types/overrides/createTheme.d.ts```ts
	// eslint-disable-next-line
	import * as createTheme from '@mui/material/styles';
	import { customShadows } from 'themes/shadows';
	
	declare module '@mui/material/styles' {
	  export interface ThemeOptions {
	    customShadows?: customShadows;
	    customization?: TypographyOptions | ((palette: Palette) => TypographyOptions);
	    darkTextSecondary?: string;
	    textDark?: string;
	    darkTextPrimary?: string;
	    grey500?: string;
	  }
	  interface Theme {
	    customShadows: customShadows;
	    customization: Typography;
	    darkTextSecondary: string;
	    textDark: string;
	    grey500: string;
	    darkTextPrimary: string;
	  }
	}

```

src/types/resource/invoice.ts```ts
	import { Invoice as InvoiceDto } from '@/utils/dtos/invoice.dto';
	
	export interface IInvoice extends Omit<InvoiceDto, '_id' | 'invoiceGst'> {
	  id: string;
	  invoiceGst: number;
	  invoiceHoldback: number;
	}

```

src/types/resource/budget.ts```ts
	import { Budget as BudgetDto } from '@/utils/dtos/budget.dto';
	
	export interface IBudget extends Omit<BudgetDto, '_id'> {
	  id: string;
	  budgetClaimToDate: number;
	  budgetCostToComplete: number;
	}

```

src/contexts/ConfigContext.tsx```tsx
	'use client';
	import { createContext, ReactNode } from 'react';
	
	// project import
	import defaultConfig from 'config';
	import useLocalStorage from 'hooks/useLocalStorage';
	
	// types
	import { PaletteMode } from '@mui/material';
	import { CustomizationProps } from 'types/config';
	
	// initial state
	const initialState: CustomizationProps = {
	  ...defaultConfig,
	  onChangeLayout: () => {},
	  onChangeDrawer: () => {},
	  onChangeMenuType: () => {},
	  onChangePresetColor: () => {},
	  onChangeLocale: () => {},
	  onChangeRTL: () => {},
	  onChangeContainer: () => {},
	  onChangeFontFamily: () => {},
	  onChangeBorderRadius: () => {},
	  onChangeOutlinedField: () => {},
	  onReset: () => {}
	};
	
	// ==============================|| CONFIG CONTEXT & PROVIDER ||============================== //
	
	const ConfigContext = createContext(initialState);
	
	type ConfigProviderProps = {
	  children: ReactNode;
	};
	
	function ConfigProvider({ children }: ConfigProviderProps) {
	  const [config, setConfig] = useLocalStorage('berry-config-ts', {
	    layout: initialState.layout,
	    drawerType: initialState.drawerType,
	    fontFamily: initialState.fontFamily,
	    borderRadius: initialState.borderRadius,
	    outlinedFilled: initialState.outlinedFilled,
	    navType: initialState.navType,
	    presetColor: initialState.presetColor,
	    locale: initialState.locale,
	    rtlLayout: initialState.rtlLayout
	  });
	
	  const onChangeLayout = (layout: string) => {
	    setConfig({
	      ...config,
	      layout
	    });
	  };
	
	  const onChangeDrawer = (drawerType: string) => {
	    setConfig({
	      ...config,
	      drawerType
	    });
	  };
	
	  const onChangeMenuType = (navType: PaletteMode) => {
	    setConfig({
	      ...config,
	      navType
	    });
	  };
	
	  const onChangePresetColor = (presetColor: string) => {
	    setConfig({
	      ...config,
	      presetColor
	    });
	  };
	
	  const onChangeLocale = (locale: string) => {
	    setConfig({
	      ...config,
	      locale
	    });
	  };
	
	  const onChangeRTL = (rtlLayout: boolean) => {
	    setConfig({
	      ...config,
	      rtlLayout
	    });
	  };
	
	  const onChangeContainer = (container: boolean) => {
	    setConfig({
	      ...config,
	      container
	    });
	  };
	
	  const onChangeFontFamily = (fontFamily: string) => {
	    setConfig({
	      ...config,
	      fontFamily
	    });
	  };
	
	  const onChangeBorderRadius = (event: Event, newValue: number | number[]) => {
	    setConfig({
	      ...config,
	      borderRadius: newValue as number
	    });
	  };
	
	  const onChangeOutlinedField = (outlinedFilled: boolean) => {
	    setConfig({
	      ...config,
	      outlinedFilled
	    });
	  };
	
	  const onReset = () => {
	    setConfig({ ...defaultConfig });
	  };
	
	  return (
	    <ConfigContext.Provider
	      value={{
	        ...config,
	        onChangeLayout,
	        onChangeDrawer,
	        onChangeMenuType,
	        onChangePresetColor,
	        onChangeLocale,
	        onChangeRTL,
	        onChangeContainer,
	        onChangeFontFamily,
	        onChangeBorderRadius,
	        onChangeOutlinedField,
	        onReset
	      }}
	    >
	      {children}
	    </ConfigContext.Provider>
	  );
	}
	
	export { ConfigProvider, ConfigContext };

```

src/contexts/SessionContext.tsx```tsx
	'use client';
	
	import { SessionProvider } from 'next-auth/react';
	import axiosServices from '@/utils/axios';
	
	const SessionContext = ({ children, session }: { children: any; session: any }) => {
	  if (session && session.user) {
	    axiosServices.defaults.headers.common['Authorization'] = `Bearer ${session.user.token}`;
	  }
	
	  return (
	    <SessionProvider baseUrl={'/'} basePath={'/api/auth'} session={session}>
	      {children}
	    </SessionProvider>
	  );
	};
	
	export default SessionContext;

```

src/layout/NavigationScroll.tsx```tsx
	import { useEffect, ReactElement } from 'react';
	
	// ==============================|| NAVIGATION SCROLL TO TOP ||============================== //
	
	const NavigationScroll = ({ children }: { children: ReactElement | null }) => {
	  useEffect(() => {
	    window.scrollTo({
	      top: 0,
	      left: 0,
	      behavior: 'smooth'
	    });
	  }, []);
	
	  return children || null;
	};
	
	export default NavigationScroll;

```

src/layout/NavMotion.tsx```tsx
	import { ReactElement } from 'react';
	
	// third-party
	import { motion } from 'framer-motion';
	
	// ==============================|| ANIMATION FOR CONTENT ||============================== //
	
	const NavMotion = ({ children }: { children: ReactElement | ReactElement[] }) => {
	  const motionVariants = {
	    initial: {
	      opacity: 0,
	      scale: 0.99
	    },
	    in: {
	      opacity: 1,
	      scale: 1
	    },
	    out: {
	      opacity: 0,
	      scale: 1.01
	    }
	  };
	
	  const motionTransition = {
	    type: 'tween',
	    ease: 'anticipate',
	    duration: 0.4
	  };
	
	  return (
	    <motion.div initial="initial" animate="in" exit="out" variants={motionVariants} transition={motionTransition}>
	      {children}
	    </motion.div>
	  );
	};
	
	export default NavMotion;

```

src/layout/index.tsx```tsx
	// project import
	import LAYOUT, { Props } from 'constant';
	import MainLayout from './MainLayout';
	import MinimalLayout from './MinimalLayout';
	import AuthGuard from 'utils/route-guard/AuthGuard';
	import GuestGuard from 'utils/route-guard/GuestGuard';
	
	// ==============================|| LAYOUTS - STRUCTURE ||============================== //
	
	export default function Layout({ variant = LAYOUT.main, children }: Props) {
	  switch (variant) {
	    case LAYOUT.minimal:
	      return <MinimalLayout>{children}</MinimalLayout>;
	
	    case LAYOUT.noauth:
	      return (
	        <GuestGuard>
	          <MinimalLayout>{children}</MinimalLayout>
	        </GuestGuard>
	      );
	
	    default:
	      return (
	        <AuthGuard>
	          <MainLayout>{children}</MainLayout>
	        </AuthGuard>
	      );
	  }
	}

```

src/layout/GuestGuard.tsx```tsx
	import { FC, ReactNode } from 'react';
	
	// project imports
	import GuestGuard from 'utils/route-guard/GuestGuard';
	import NavMotion from './NavMotion';
	
	interface Props {
	  children: ReactNode;
	}
	
	// ==============================|| MINIMAL LAYOUT ||============================== //
	
	const MinimalLayout: FC<Props> = ({ children }) => (
	  <NavMotion>
	    <GuestGuard>
	      <>{children}</>
	    </GuestGuard>
	  </NavMotion>
	);
	
	export default MinimalLayout;

```

src/layout/MinimalLayout/index.tsx```tsx
	import { FC, ReactNode } from 'react';
	
	interface Props {
	  children: ReactNode;
	}
	
	// ==============================|| MINIMAL LAYOUT ||============================== //
	
	const MinimalLayout: FC<Props> = ({ children }) => <>{children}</>;
	
	export default MinimalLayout;

```

src/layout/MainLayout/HorizontalBar.tsx```tsx
	import React, { ReactElement } from 'react';
	
	// material-ui
	import { useTheme } from '@mui/material/styles';
	import { AppBar, Box, Container, useScrollTrigger } from '@mui/material';
	
	// project imports
	import MenuList from './MenuList';
	import useConfig from 'hooks/useConfig';
	
	// ==============================|| HORIZONTAL MENU LIST ||============================== //
	
	interface ElevationScrollProps {
	  children: ReactElement;
	  window?: Window | Node;
	}
	
	function ElevationScroll({ children, window }: ElevationScrollProps) {
	  const theme = useTheme();
	  // Note that you normally won't need to set the window ref as useScrollTrigger
	  // will default to window.
	  // This is only being set here because the demo is in an iframe.
	  const trigger = useScrollTrigger({
	    disableHysteresis: true,
	    threshold: 0,
	    target: window!
	  });
	
	  theme.shadows[4] = theme.customShadows.z1;
	
	  return React.cloneElement(children, {
	    elevation: trigger ? 4 : 0
	  });
	}
	
	// ==============================|| HORIZONTAL MENU LIST ||============================== //
	
	const CustomAppBar = () => {
	  const theme = useTheme();
	
	  const { container } = useConfig();
	
	  return (
	    <ElevationScroll>
	      <AppBar
	        sx={{
	          top: 71,
	          bgcolor: theme.palette.mode === 'dark' ? 'background.default' : 'background.paper',
	          width: '100%',
	          height: 62,
	          justifyContent: 'center',
	          borderTop: `1px solid ${theme.palette.mode === 'dark' ? theme.palette.background.paper : theme.palette.grey[300] + 98}`,
	          zIndex: 1098
	        }}
	      >
	        <Container maxWidth={container ? 'lg' : false}>
	          <Box sx={{ display: 'flex', alignItems: 'center' }}>
	            <MenuList />
	          </Box>
	        </Container>
	      </AppBar>
	    </ElevationScroll>
	  );
	};
	
	export default CustomAppBar;

```

src/layout/MainLayout/index.tsx```tsx
	'use client';
	import { useEffect, useMemo, FC, ReactNode } from 'react';
	
	// material-ui
	import { styled, useTheme, Theme } from '@mui/material/styles';
	import { Container, AppBar, Box, CssBaseline, Toolbar, useMediaQuery } from '@mui/material';
	
	// project imports
	import Header from './Header';
	import Sidebar from './Sidebar';
	import HorizontalBar from './HorizontalBar';
	import useConfig from 'hooks/useConfig';
	import { LAYOUT_CONST } from 'constant';
	import { drawerWidth } from 'store/constant';
	import { openDrawer } from 'store/slices/menu';
	import { useDispatch, useSelector } from 'store';
	
	import styles from './styles.module.scss';
	import Footer from './Footer';
	
	interface MainStyleProps {
	  theme: Theme;
	  open: boolean;
	  layout: string;
	}
	
	// styles
	const Main = styled('main', { shouldForwardProp: (prop) => prop !== 'open' })(({ theme, open, layout }: MainStyleProps) => ({
	  ...theme.typography.mainContent,
	  borderBottomLeftRadius: 0,
	  borderBottomRightRadius: 0,
	  display: 'flex',
	  justifyContent: 'space-between',
	  flexDirection: 'column',
	  ...(!open && {
	    transition: theme.transitions.create('margin', {
	      easing: theme.transitions.easing.sharp,
	      duration: theme.transitions.duration.shorter + 200
	    }),
	    [theme.breakpoints.up('md')]: {
	      marginLeft: layout === LAYOUT_CONST.VERTICAL_LAYOUT ? -(drawerWidth - 72) : '20px',
	      width: `calc(100% - ${drawerWidth}px)`,
	      marginTop: layout === LAYOUT_CONST.HORIZONTAL_LAYOUT ? 135 : 88
	    }
	  }),
	  ...(open && {
	    transition: theme.transitions.create('margin', {
	      easing: theme.transitions.easing.easeOut,
	      duration: theme.transitions.duration.shorter + 200
	    }),
	    marginLeft: layout === LAYOUT_CONST.HORIZONTAL_LAYOUT ? '20px' : 0,
	    marginTop: layout === LAYOUT_CONST.HORIZONTAL_LAYOUT ? 135 : 88,
	    width: `calc(100% - ${drawerWidth}px)`,
	    [theme.breakpoints.up('md')]: {
	      marginTop: layout === LAYOUT_CONST.HORIZONTAL_LAYOUT ? 135 : 88
	    }
	  }),
	  [theme.breakpoints.down('md')]: {
	    marginLeft: '20px',
	    padding: '16px',
	    marginTop: 88,
	    ...(!open && {
	      width: `calc(100% - ${drawerWidth}px)`
	    })
	  },
	  [theme.breakpoints.down('sm')]: {
	    marginLeft: '10px',
	    marginRight: '10px',
	    padding: '16px',
	    marginTop: 88,
	    ...(!open && {
	      width: `calc(100% - ${drawerWidth}px)`
	    })
	  }
	}));
	
	interface Props {
	  children: ReactNode;
	}
	
	// ==============================|| MAIN LAYOUT ||============================== //
	
	const MainLayout: FC<Props> = ({ children }) => {
	  const theme = useTheme();
	  const matchDownMd = useMediaQuery(theme.breakpoints.down('md'));
	
	  const dispatch = useDispatch();
	  const { drawerOpen } = useSelector((state) => state.menu);
	  const { drawerType, container, layout } = useConfig();
	
	  useEffect(() => {
	    if (drawerType === LAYOUT_CONST.DEFAULT_DRAWER) {
	      dispatch(openDrawer(true));
	    } else {
	      dispatch(openDrawer(false));
	    }
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [drawerType]);
	
	  useEffect(() => {
	    if (drawerType === LAYOUT_CONST.DEFAULT_DRAWER) {
	      dispatch(openDrawer(true));
	    }
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, []);
	
	  useEffect(() => {
	    if (matchDownMd) {
	      dispatch(openDrawer(true));
	    }
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [matchDownMd]);
	
	  const condition = layout === LAYOUT_CONST.HORIZONTAL_LAYOUT && !matchDownMd;
	
	  const header = useMemo(
	    () => (
	      <Toolbar sx={{ p: condition ? '10px' : '16px' }}>
	        <Header />
	      </Toolbar>
	    ),
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	    [layout, matchDownMd]
	  );
	
	  return (
	    <Box sx={{ display: 'flex' }}>
	      <CssBaseline />
	      {/* header */}
	      <AppBar classes={{ root: styles.appBar }} enableColorOnDark position="fixed" elevation={0}>
	        {header}
	      </AppBar>
	
	      {/* horizontal menu-list bar */}
	      {layout === LAYOUT_CONST.HORIZONTAL_LAYOUT && !matchDownMd && <HorizontalBar />}
	
	      {/* drawer */}
	      {(layout === LAYOUT_CONST.VERTICAL_LAYOUT || matchDownMd) && <Sidebar />}
	
	      {/* main content */}
	      <Main theme={theme} open={drawerOpen} layout={layout}>
	        <Container maxWidth={container ? 'lg' : false} {...(!container && { sx: { px: { xs: 0 } } })}>
	          {children}
	        </Container>
	        <Footer />
	      </Main>
	    </Box>
	  );
	};
	
	export default MainLayout;

```

src/layout/MainLayout/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.appBar {
	  background-color: $primaryNormal;
	}

```

src/layout/MainLayout/Footer/style.module.scss```scss
	@import 'styles/variables.module';
	
	.container{
	  display: flex;
	  justify-content: space-between;
	  padding: 12px 24px;
	  margin-top: 32px;
	  background-color: #fff;
	  border-radius: 2px;
	  font-size: 12px;
	  color: $grey600;
	}
```

src/layout/MainLayout/Footer/index.tsx```tsx
	import { Box, Typography } from '@mui/material';
	import style from './style.module.scss';
	
	const Footer = () => {
	  return (
	    <Box className={style.container}>
	      <Typography>{new Date().getFullYear()} © J2C</Typography>
	      <Typography>version 1.0.0</Typography>
	    </Box>
	  );
	};
	export default Footer;

```

src/layout/MainLayout/MenuList/index.tsx```tsx
	import { memo } from 'react';
	
	// material-ui
	import { useTheme } from '@mui/material/styles';
	import { Box, Divider, List, Typography, useMediaQuery } from '@mui/material';
	
	// project imports
	import NavItem from './NavItem';
	import NavGroup from './NavGroup';
	import useConfig from 'hooks/useConfig';
	
	import menuItem from 'menu-items';
	import { useSelector } from 'store';
	import { LAYOUT_CONST } from 'constant';
	import { HORIZONTAL_MAX_ITEM } from 'config';
	
	// types
	import { NavItemType } from 'types';
	
	// ==============================|| SIDEBAR MENU LIST ||============================== //
	
	const MenuList = () => {
	  const theme = useTheme();
	  const matchDownMd = useMediaQuery(theme.breakpoints.down('md'));
	  const { layout } = useConfig();
	  const { drawerOpen } = useSelector((state) => state.menu);
	
	  // last menu-item to show in horizontal menu bar
	  const lastItem = layout === LAYOUT_CONST.HORIZONTAL_LAYOUT && !matchDownMd ? HORIZONTAL_MAX_ITEM : null;
	
	  let lastItemIndex = menuItem.items.length - 1;
	  let remItems: NavItemType[] = [];
	  let lastItemId: string;
	
	  if (lastItem && lastItem < menuItem.items.length) {
	    lastItemId = menuItem.items[lastItem - 1].id!;
	    lastItemIndex = lastItem - 1;
	    remItems = menuItem.items.slice(lastItem - 1, menuItem.items.length).map((item) => ({
	      title: item.title,
	      elements: item.children,
	      icon: item.icon,
	      ...(item.url && {
	        url: item.url
	      })
	    }));
	  }
	
	  const navItems = menuItem.items.slice(0, lastItemIndex + 1).map((item) => {
	    switch (item.type) {
	      case 'group':
	        if (item.url && item.id !== lastItemId) {
	          return (
	            <List
	              key={item.id}
	              {...(drawerOpen && layout !== LAYOUT_CONST.HORIZONTAL_LAYOUT && { sx: { mt: 1.5 } })}
	              disablePadding={!drawerOpen || layout === LAYOUT_CONST.HORIZONTAL_LAYOUT}
	            >
	              <NavItem item={item} level={1} isParents />
	              {layout !== LAYOUT_CONST.HORIZONTAL_LAYOUT && <Divider sx={{ py: 0.5 }} />}
	            </List>
	          );
	        }
	
	        return <NavGroup key={item.id} item={item} lastItem={lastItem!} remItems={remItems} lastItemId={lastItemId} />;
	      default:
	        return (
	          <Typography key={item.id} variant="h6" color="error" align="center">
	            Menu Items Error
	          </Typography>
	        );
	    }
	  });
	
	  return layout === LAYOUT_CONST.VERTICAL_LAYOUT || (layout === LAYOUT_CONST.HORIZONTAL_LAYOUT && matchDownMd) ? (
	    <Box {...(drawerOpen && { sx: { mt: 1.5 } })}>{navItems}</Box>
	  ) : (
	    <>{navItems}</>
	  );
	};
	
	export default memo(MenuList);

```

src/layout/MainLayout/MenuList/NavCollapse/index.tsx```tsx
	import { useEffect, useState } from 'react';
	import { usePathname } from 'next/navigation';
	
	// material-ui
	import { styled, useTheme } from '@mui/material/styles';
	import {
	  Box,
	  ClickAwayListener,
	  Collapse,
	  List,
	  ListItemButton,
	  ListItemIcon,
	  ListItemText,
	  Paper,
	  Popper,
	  Typography,
	  useMediaQuery
	} from '@mui/material';
	
	// project imports
	import NavItem from '../NavItem';
	import useConfig from 'hooks/useConfig';
	import Transitions from 'ui-component/extended/Transitions';
	
	import { useSelector } from 'store';
	import { LAYOUT_CONST } from 'constant';
	
	// types
	import { NavItemType } from 'types';
	
	// assets
	import { IconChevronDown, IconChevronRight, IconChevronUp } from '@tabler/icons-react';
	import FiberManualRecordIcon from '@mui/icons-material/FiberManualRecord';
	
	// mini-menu - wrapper
	const PopperStyledMini = styled(Popper)(({ theme }) => ({
	  overflow: 'visible',
	  zIndex: 1202,
	  minWidth: 180,
	  '&:before': {
	    content: '""',
	    backgroundColor: theme.palette.background.paper,
	    transform: 'translateY(-50%) rotate(45deg)',
	    zIndex: 120,
	    borderLeft: `1px solid ${theme.palette.divider}`,
	    borderBottom: `1px solid ${theme.palette.divider}`
	  }
	}));
	
	// horizontal-menu - wrapper
	const PopperStyled = styled(Popper)(({ theme }) => ({
	  overflow: 'visible',
	  zIndex: 1202,
	  minWidth: 180,
	  '&:before': {
	    content: '""',
	    display: 'block',
	    position: 'absolute',
	    top: 34,
	    left: -5,
	    width: 12,
	    height: 12,
	    transform: 'translateY(-50%) rotate(45deg)',
	    zIndex: 120,
	    borderWidth: '6px',
	    borderStyle: 'solid',
	    borderColor: `transparent transparent ${theme.palette.background.paper}  ${theme.palette.background.paper}`
	  },
	  '&[data-popper-placement="left-start"]:before': {
	    left: 'auto',
	    right: -5,
	    borderColor: `${theme.palette.background.paper}  ${theme.palette.background.paper} transparent transparent`
	  },
	  '&[data-popper-placement="left-end"]:before': {
	    top: 'auto',
	    bottom: 15,
	    left: 'auto',
	    right: -5,
	    borderColor: `${theme.palette.background.paper}  ${theme.palette.background.paper} transparent transparent`
	  },
	  '&[data-popper-placement="right-end"]:before': {
	    top: 'auto',
	    bottom: 15
	  }
	}));
	
	// ==============================|| SIDEBAR MENU LIST COLLAPSE ITEMS ||============================== //
	
	type VirtualElement = {
	  getBoundingClientRect: () => ClientRect | DOMRect;
	  contextElement?: Element;
	};
	
	interface NavCollapseProps {
	  menu: NavItemType;
	  level: number;
	  parentId: string;
	}
	
	const NavCollapse = ({ menu, level, parentId }: NavCollapseProps) => {
	  const theme = useTheme();
	  const matchDownMd = useMediaQuery(theme.breakpoints.down('md'));
	
	  const { layout, borderRadius } = useConfig();
	  const { drawerOpen } = useSelector((state) => state.menu);
	
	  const [open, setOpen] = useState(false);
	  const [selected, setSelected] = useState<string | null | undefined>(null);
	  const [anchorEl, setAnchorEl] = useState<VirtualElement | (() => VirtualElement) | null | undefined>(null);
	
	  const handleClickMini = (event: React.MouseEvent<HTMLAnchorElement> | React.MouseEvent<HTMLDivElement, MouseEvent> | undefined) => {
	    setAnchorEl(null);
	    if (drawerOpen) {
	      setOpen(!open);
	      setSelected(!selected ? menu.id : null);
	    } else {
	      setAnchorEl(event?.currentTarget);
	    }
	  };
	
	  const handleHover = (event: React.MouseEvent<HTMLAnchorElement> | React.MouseEvent<HTMLDivElement, MouseEvent> | undefined) => {
	    setAnchorEl(event?.currentTarget);
	  };
	
	  const handleClosePopper = () => {
	    setOpen(false);
	    setSelected(null);
	    setAnchorEl(null);
	  };
	
	  const openMini = Boolean(anchorEl);
	  const pathname = usePathname();
	
	  const checkOpenForParent = (child: NavItemType[], id: string) => {
	    child.forEach((item: NavItemType) => {
	      if (item.url === pathname) {
	        setOpen(true);
	        setSelected(id);
	      }
	    });
	  };
	
	  // menu collapse for sub-levels
	  useEffect(() => {
	    setOpen(false);
	    setSelected(null);
	    if (openMini) setAnchorEl(null);
	    if (menu.children) {
	      menu.children.forEach((item: NavItemType) => {
	        if (item.children?.length) {
	          checkOpenForParent(item.children, menu.id!);
	        }
	        if (pathname && pathname.includes('product-details')) {
	          if (item.url && item.url.includes('product-details')) {
	            setSelected(menu.id);
	            setOpen(true);
	          }
	        }
	        if (item.url === pathname) {
	          setSelected(menu.id);
	          setOpen(true);
	        }
	      });
	    }
	
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [pathname, menu.children]);
	
	  // menu collapse & item
	  const menus = menu.children?.map((item) => {
	    switch (item.type) {
	      case 'collapse':
	        return <NavCollapse key={item.id} menu={item} level={level + 1} parentId={parentId} />;
	      case 'item':
	        return <NavItem isParents key={item.id} item={item} level={level + 1} parentId={parentId} />;
	      default:
	        return (
	          <Typography key={item.id} variant="h6" color="error" align="center">
	            Menu Items Error
	          </Typography>
	        );
	    }
	  });
	
	  const isSelected = selected === menu.id;
	
	  const Icon = menu.icon!;
	  const menuIcon = menu.icon ? (
	    <Icon
	      strokeWidth={1.5}
	      size={drawerOpen ? '20px' : '24px'}
	      style={{ color: isSelected ? theme.palette.secondary.main : theme.palette.text.primary }}
	    />
	  ) : (
	    <FiberManualRecordIcon
	      sx={{
	        color: isSelected ? theme.palette.secondary.main : theme.palette.text.primary,
	        width: isSelected ? 8 : 6,
	        height: isSelected ? 8 : 6
	      }}
	      fontSize={level > 0 ? 'inherit' : 'medium'}
	    />
	  );
	
	  const collapseIcon = drawerOpen ? (
	    <IconChevronUp stroke={1.5} size="16px" style={{ marginTop: 'auto', marginBottom: 'auto' }} />
	  ) : (
	    <IconChevronRight stroke={1.5} size="16px" style={{ marginTop: 'auto', marginBottom: 'auto' }} />
	  );
	
	  const textColor = theme.palette.mode === 'dark' ? 'grey.400' : 'text.primary';
	  const iconSelectedColor = theme.palette.mode === 'dark' && drawerOpen ? 'text.primary' : 'secondary.main';
	
	  const popperId = openMini ? `collapse-pop-${menu.id}` : undefined;
	
	  return (
	    <>
	      {layout === LAYOUT_CONST.VERTICAL_LAYOUT || (layout === LAYOUT_CONST.HORIZONTAL_LAYOUT && matchDownMd) ? (
	        <>
	          <ListItemButton
	            sx={{
	              zIndex: 1201,
	              borderRadius: `${borderRadius}px`,
	              mb: 0.5,
	              pl: drawerOpen ? `${level * 24}px` : 1.25,
	              ...(drawerOpen &&
	                level === 1 &&
	                theme.palette.mode !== 'dark' && {
	                  '&:hover': {
	                    background: theme.palette.secondary.light
	                  },
	                  '&.Mui-selected': {
	                    background: theme.palette.secondary.light,
	                    color: iconSelectedColor,
	                    '&:hover': {
	                      color: iconSelectedColor,
	                      background: theme.palette.secondary.light
	                    }
	                  }
	                }),
	              ...((!drawerOpen || level !== 1) && {
	                py: level === 1 ? 0 : 1,
	                '&:hover': {
	                  bgcolor: 'transparent'
	                },
	                '&.Mui-selected': {
	                  '&:hover': {
	                    bgcolor: 'transparent'
	                  },
	                  bgcolor: 'transparent'
	                }
	              })
	            }}
	            selected={isSelected}
	            {...(!drawerOpen && { onMouseEnter: handleClickMini, onMouseLeave: handleClosePopper })}
	            onClick={handleClickMini}
	          >
	            {menuIcon && (
	              <ListItemIcon
	                sx={{
	                  minWidth: level === 1 ? 36 : 18,
	                  color: isSelected ? iconSelectedColor : textColor,
	                  ...(!drawerOpen &&
	                    level === 1 && {
	                      borderRadius: `${borderRadius}px`,
	                      width: 46,
	                      height: 46,
	                      alignItems: 'center',
	                      justifyContent: 'center',
	                      '&:hover': {
	                        bgcolor: theme.palette.mode === 'dark' ? theme.palette.secondary.main + 25 : 'secondary.light'
	                      },
	                      ...(isSelected && {
	                        bgcolor: theme.palette.mode === 'dark' ? theme.palette.secondary.main + 25 : 'secondary.light',
	                        '&:hover': {
	                          bgcolor: theme.palette.mode === 'dark' ? theme.palette.secondary.main + 30 : 'secondary.light'
	                        }
	                      })
	                    })
	                }}
	              >
	                {menuIcon}
	              </ListItemIcon>
	            )}
	            {(drawerOpen || (!drawerOpen && level !== 1)) && (
	              <ListItemText
	                primary={
	                  <Typography variant={isSelected ? 'h5' : 'body1'} color="inherit" sx={{ my: 'auto' }}>
	                    {menu.title}
	                  </Typography>
	                }
	                secondary={
	                  menu.caption && (
	                    <Typography variant="caption" sx={{ ...theme.typography.subMenuCaption }} display="block" gutterBottom>
	                      {menu.caption}
	                    </Typography>
	                  )
	                }
	              />
	            )}
	
	            {openMini || open ? (
	              collapseIcon
	            ) : (
	              <IconChevronDown stroke={1.5} size="16px" style={{ marginTop: 'auto', marginBottom: 'auto' }} />
	            )}
	
	            {!drawerOpen && (
	              <PopperStyledMini
	                open={openMini}
	                anchorEl={anchorEl}
	                placement="right-start"
	                style={{
	                  zIndex: 2001
	                }}
	                modifiers={[
	                  {
	                    name: 'offset',
	                    options: {
	                      offset: [-12, 0]
	                    }
	                  }
	                ]}
	              >
	                {({ TransitionProps }) => (
	                  <Transitions in={openMini} {...TransitionProps}>
	                    <Paper
	                      sx={{
	                        overflow: 'hidden',
	                        mt: 1.5,
	                        boxShadow: theme.shadows[8],
	                        backgroundImage: 'none'
	                      }}
	                    >
	                      <ClickAwayListener onClickAway={handleClosePopper}>
	                        <Box>{menus}</Box>
	                      </ClickAwayListener>
	                    </Paper>
	                  </Transitions>
	                )}
	              </PopperStyledMini>
	            )}
	          </ListItemButton>
	          {drawerOpen && (
	            <Collapse in={open} timeout="auto" unmountOnExit>
	              {open && (
	                <List
	                  component="div"
	                  disablePadding
	                  sx={{
	                    position: 'relative',
	                    '&:after': {
	                      content: "''",
	                      position: 'absolute',
	                      left: '32px',
	                      top: 0,
	                      height: '100%',
	                      width: '1px',
	                      opacity: theme.palette.mode === 'dark' ? 0.2 : 1,
	                      background: theme.palette.mode === 'dark' ? theme.palette.dark.light : theme.palette.primary.light
	                    }
	                  }}
	                >
	                  {menus}
	                </List>
	              )}
	            </Collapse>
	          )}
	        </>
	      ) : null}
	
	      {layout === LAYOUT_CONST.HORIZONTAL_LAYOUT && !matchDownMd ? (
	        <>
	          <ListItemButton
	            id={`boundary-${popperId}`}
	            disableRipple
	            selected={isSelected}
	            onMouseEnter={handleHover}
	            onMouseLeave={handleClosePopper}
	            onClick={handleHover}
	            aria-describedby={popperId}
	          >
	            {menuIcon && <ListItemIcon sx={{ my: 'auto', minWidth: !menu.icon ? 18 : 36 }}>{menuIcon}</ListItemIcon>}
	            <ListItemText
	              primary={
	                <Typography variant={isSelected ? 'h5' : 'body1'} color="inherit" sx={{ my: 'auto' }}>
	                  {menu.title}
	                </Typography>
	              }
	            />
	            {openMini ? <IconChevronRight stroke={1.5} size="16px" /> : <IconChevronDown stroke={1.5} size="16px" />}
	
	            {anchorEl && (
	              <PopperStyled
	                id={popperId}
	                open={openMini}
	                anchorEl={anchorEl}
	                placement="right-start"
	                style={{
	                  zIndex: 2001
	                }}
	                modifiers={[
	                  {
	                    name: 'offset',
	                    options: {
	                      offset: [-10, 0]
	                    }
	                  }
	                ]}
	              >
	                {({ TransitionProps }) => (
	                  <Transitions in={openMini} {...TransitionProps}>
	                    <Paper
	                      sx={{
	                        overflow: 'hidden',
	                        mt: 1.5,
	                        py: 0.5,
	                        boxShadow: theme.shadows[8],
	                        backgroundImage: 'none'
	                      }}
	                    >
	                      <ClickAwayListener onClickAway={handleClosePopper}>
	                        <Box>{menus}</Box>
	                      </ClickAwayListener>
	                    </Paper>
	                  </Transitions>
	                )}
	              </PopperStyled>
	            )}
	          </ListItemButton>
	        </>
	      ) : null}
	    </>
	  );
	};
	
	export default NavCollapse;

```

src/layout/MainLayout/MenuList/NavGroup/index.tsx```tsx
	import { Fragment, useEffect, useState } from 'react';
	import { usePathname } from 'next/navigation';
	
	// material-ui
	import { styled, useTheme } from '@mui/material/styles';
	import {
	  Box,
	  ClickAwayListener,
	  Divider,
	  List,
	  ListItemButton,
	  ListItemIcon,
	  ListItemText,
	  Paper,
	  Popper,
	  Typography,
	  useMediaQuery
	} from '@mui/material';
	
	// third-party
	import { FormattedMessage } from 'react-intl';
	
	// project imports
	import NavCollapse from '../NavCollapse';
	import NavItem from '../NavItem';
	import useConfig from 'hooks/useConfig';
	import Transitions from 'ui-component/extended/Transitions';
	import { LAYOUT_CONST } from 'constant';
	import { activeID } from 'store/slices/menu';
	import { dispatch, useSelector } from 'store';
	
	// types
	import { NavItemType } from 'types';
	
	// assets
	import { IconChevronDown, IconChevronRight, IconMinusVertical } from '@tabler/icons-react';
	
	// mini-menu - wrapper
	const PopperStyled = styled(Popper)(({ theme }) => ({
	  overflow: 'visible',
	  zIndex: 1202,
	  minWidth: 180,
	  '&:before': {
	    content: '""',
	    display: 'block',
	    position: 'absolute',
	    top: 5,
	    left: 32,
	    width: 12,
	    height: 12,
	    transform: 'translateY(-50%) rotate(45deg)',
	    zIndex: 120,
	    borderWidth: '6px',
	    borderStyle: 'solid',
	    borderColor: `${theme.palette.background.paper}  transparent transparent ${theme.palette.background.paper}`
	  }
	}));
	
	// ==============================|| SIDEBAR MENU LIST GROUP ||============================== //
	
	type VirtualElement = {
	  getBoundingClientRect: () => ClientRect | DOMRect;
	  contextElement?: Element;
	};
	
	interface NavGroupProps {
	  item: NavItemType;
	  lastItem: number;
	  remItems: NavItemType[];
	  lastItemId: string;
	}
	
	const NavGroup = ({ item, lastItem, remItems, lastItemId }: NavGroupProps) => {
	  const theme = useTheme();
	
	  const pathname = usePathname();
	  const { drawerOpen, selectedID } = useSelector((state) => state.menu);
	  const { layout, borderRadius } = useConfig();
	  const matchDownMd = useMediaQuery(theme.breakpoints.down('md'));
	  const [anchorEl, setAnchorEl] = useState<VirtualElement | (() => VirtualElement) | null | undefined>(null);
	  const [currentItem, setCurrentItem] = useState(item);
	
	  const openMini = Boolean(anchorEl);
	
	  useEffect(() => {
	    if (lastItem) {
	      if (item.id === lastItemId) {
	        const localItem: any = { ...item };
	        const elements = remItems.map((ele: NavItemType) => ele.elements);
	        localItem.children = elements.flat(1);
	        setCurrentItem(localItem);
	      } else {
	        setCurrentItem(item);
	      }
	    }
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [item, lastItem, layout, matchDownMd]);
	
	  const checkOpenForParent = (child: NavItemType[], id: string) => {
	    child.forEach((ele: NavItemType) => {
	      if (ele.children?.length) {
	        checkOpenForParent(ele.children, currentItem.id!);
	      }
	      if (ele.url === pathname) {
	        dispatch(activeID(id));
	      }
	    });
	  };
	
	  const checkSelectedOnload = (data: NavItemType) => {
	    const childrens = data.children ? data.children : [];
	    childrens.forEach((itemCheck: NavItemType) => {
	      if (itemCheck?.children?.length) {
	        checkOpenForParent(itemCheck.children, currentItem.id!);
	      }
	      if (itemCheck?.url === pathname) {
	        dispatch(activeID(currentItem.id!));
	      }
	    });
	  };
	
	  // keep selected-menu on page load and use for horizontal menu close on change routes
	  useEffect(() => {
	    checkSelectedOnload(currentItem);
	    if (openMini) setAnchorEl(null);
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [pathname, currentItem]);
	
	  const handleClick = (event: React.MouseEvent<HTMLAnchorElement> | React.MouseEvent<HTMLDivElement, MouseEvent> | undefined) => {
	    if (!openMini) {
	      setAnchorEl(event?.currentTarget);
	    }
	  };
	
	  const handleClose = () => {
	    setAnchorEl(null);
	  };
	
	  const Icon = currentItem?.icon!;
	  const itemIcon = currentItem?.icon ? <Icon stroke={1.5} size="20px" /> : null;
	
	  // menu list collapse & items
	  const items = currentItem.children?.map((menu) => {
	    switch (menu?.type) {
	      case 'collapse':
	        return <NavCollapse key={menu.id} menu={menu} level={1} parentId={currentItem.id!} />;
	      case 'item':
	        return <NavItem key={menu.id} item={menu} level={1} parentId={currentItem.id!} />;
	      default:
	        return (
	          <Typography key={menu?.id} variant="h6" color="error" align="center">
	            Menu Items Error
	          </Typography>
	        );
	    }
	  });
	
	  const moreItems = remItems.map((itemRem: NavItemType, i) => (
	    <Fragment key={i}>
	      {itemRem.url ? (
	        <NavItem item={itemRem} level={1} />
	      ) : (
	        itemRem.title && (
	          <Typography variant="caption" sx={{ pl: 2 }}>
	            {itemRem.title} {itemRem.url}
	          </Typography>
	        )
	      )}
	      {itemRem?.elements?.map((menu) => {
	        switch (menu?.type) {
	          case 'collapse':
	            return <NavCollapse key={menu.id} menu={menu} level={1} parentId={currentItem.id!} />;
	          case 'item':
	            return <NavItem key={menu.id} item={menu} level={1} parentId={currentItem.id!} />;
	          default:
	            return (
	              <Typography key={menu.id} variant="h6" color="error" align="center">
	                Menu Items Error
	              </Typography>
	            );
	        }
	      })}
	    </Fragment>
	  ));
	
	  const popperId = openMini ? `group-pop-${item.id}` : undefined;
	
	  return (
	    <>
	      {layout === LAYOUT_CONST.VERTICAL_LAYOUT || (layout === LAYOUT_CONST.HORIZONTAL_LAYOUT && matchDownMd) ? (
	        <>
	          <List
	            disablePadding={!drawerOpen}
	            subheader={
	              currentItem.title &&
	              drawerOpen && (
	                <Typography variant="caption" sx={{ ...theme.typography.menuCaption }} display="block" gutterBottom>
	                  {currentItem.title}
	                  {currentItem.caption && (
	                    <Typography variant="caption" sx={{ ...theme.typography.subMenuCaption }} display="block" gutterBottom>
	                      {currentItem.caption}
	                    </Typography>
	                  )}
	                </Typography>
	              )
	            }
	          >
	            {items}
	          </List>
	
	          {/* group divider */}
	          {drawerOpen && <Divider sx={{ mt: 0.25, mb: 1.25 }} />}
	        </>
	      ) : (
	        <List>
	          <ListItemButton
	            selected={selectedID === currentItem.id}
	            sx={{
	              borderRadius: `${borderRadius}px`,
	              p: 1,
	              my: 0.5,
	              mr: 1,
	              display: 'flex',
	              alignItems: 'center',
	              backgroundColor: 'inherit'
	            }}
	            onMouseEnter={handleClick}
	            onClick={handleClick}
	            onMouseLeave={handleClose}
	            aria-describedby={popperId}
	          >
	            {itemIcon && (
	              <ListItemIcon sx={{ minWidth: 36 }}>
	                {currentItem.id === lastItemId ? <IconMinusVertical stroke={1.5} size="20px" /> : itemIcon}
	              </ListItemIcon>
	            )}
	            <ListItemText
	              sx={{ mr: 1 }}
	              primary={
	                <Typography variant={selectedID === currentItem.id ? 'h5' : 'body1'} color="inherit">
	                  {currentItem.id === lastItemId ? <FormattedMessage id="more-items" /> : currentItem.title}
	                </Typography>
	              }
	            />
	            {openMini ? <IconChevronDown stroke={1.5} size="16px" /> : <IconChevronRight stroke={1.5} size="16px" />}
	
	            {anchorEl && (
	              <PopperStyled
	                id={popperId}
	                open={openMini}
	                anchorEl={anchorEl}
	                placement="bottom-start"
	                style={{
	                  zIndex: 2001
	                }}
	              >
	                {({ TransitionProps }) => (
	                  <Transitions in={openMini} {...TransitionProps}>
	                    <Paper
	                      sx={{
	                        mt: 0.5,
	                        py: 1.25,
	                        boxShadow: theme.shadows[8],
	                        backgroundImage: 'none'
	                      }}
	                    >
	                      <ClickAwayListener onClickAway={handleClose}>
	                        <Box
	                          sx={{
	                            minWidth: 200,
	                            maxHeight: 'calc(100vh - 170px)',
	                            overflowY: 'auto',
	                            '&::-webkit-scrollbar': {
	                              opacity: 0,
	                              width: 4,
	                              '&:hover': {
	                                opacity: 0.7
	                              }
	                            },
	                            '&::-webkit-scrollbar-track': {
	                              background: 'transparent'
	                            },
	                            '&::-webkit-scrollbar-thumb': {
	                              background: theme.palette.divider,
	                              borderRadius: 4
	                            }
	                          }}
	                        >
	                          {currentItem.id !== lastItemId ? items : moreItems}
	                        </Box>
	                      </ClickAwayListener>
	                    </Paper>
	                  </Transitions>
	                )}
	              </PopperStyled>
	            )}
	          </ListItemButton>
	        </List>
	      )}
	    </>
	  );
	};
	
	export default NavGroup;

```

src/layout/MainLayout/MenuList/NavItem/index.tsx```tsx
	import { useEffect } from 'react';
	import { usePathname } from 'next/navigation';
	import Link from 'next/link';
	
	// material-ui
	import { useTheme } from '@mui/material/styles';
	import { Avatar, ButtonBase, Chip, ListItemButton, ListItemIcon, ListItemText, Typography, useMediaQuery } from '@mui/material';
	
	// project imports
	import useConfig from 'hooks/useConfig';
	import { LAYOUT_CONST } from 'constant';
	import { useDispatch, useSelector } from 'store';
	import { activeID, activeItem, openDrawer } from 'store/slices/menu';
	
	// types
	import { LinkTarget, NavItemType } from 'types';
	
	// assets
	import FiberManualRecordIcon from '@mui/icons-material/FiberManualRecord';
	
	// ==============================|| SIDEBAR MENU LIST ITEMS ||============================== //
	
	interface NavItemProps {
	  item: NavItemType;
	  level: number;
	  parentId?: string;
	  isParents?: boolean;
	}
	
	const NavItem = ({ item, level, parentId, isParents = false }: NavItemProps) => {
	  const theme = useTheme();
	  const matchesSM = useMediaQuery(theme.breakpoints.down('lg'));
	  const matchDownMd = useMediaQuery(theme.breakpoints.down('md'));
	
	  const dispatch = useDispatch();
	  const pathname = usePathname();
	  const { layout, borderRadius } = useConfig();
	
	  const { selectedItem, drawerOpen } = useSelector((state) => state.menu);
	  const isSelected = selectedItem.findIndex((id) => id === item.id) > -1;
	
	  const Icon = item?.icon!;
	  const itemIcon = item?.icon ? (
	    <Icon
	      stroke={1.5}
	      size={drawerOpen ? '20px' : '24px'}
	      style={{
	        color: isSelected ? theme.palette.secondary.main : theme.palette.text.primary,
	        ...(layout === LAYOUT_CONST.HORIZONTAL_LAYOUT && isParents && { fontSize: 20, stroke: '1.5' })
	      }}
	    />
	  ) : (
	    <FiberManualRecordIcon
	      sx={{
	        color: isSelected ? theme.palette.secondary.main : theme.palette.text.primary,
	        width: selectedItem.findIndex((id) => id === item?.id) > -1 ? 8 : 6,
	        height: selectedItem.findIndex((id) => id === item?.id) > -1 ? 8 : 6
	      }}
	      fontSize={level > 0 ? 'inherit' : 'medium'}
	    />
	  );
	
	  let itemTarget: LinkTarget = '_self';
	  if (item.target) {
	    itemTarget = '_blank';
	  }
	
	  const itemHandler = (id: string) => {
	    dispatch(activeItem([id]));
	    if (matchesSM) dispatch(openDrawer(false));
	    dispatch(activeID(parentId));
	  };
	
	  // active menu item on page load
	  useEffect(() => {
	    const currentIndex = document.location.pathname
	      .toString()
	      .split('/')
	      .findIndex((id) => id === item.id);
	    if (currentIndex > -1) {
	      dispatch(activeItem([item.id]));
	    }
	    // eslint-disable-next-line
	  }, [pathname]);
	
	  const textColor = theme.palette.mode === 'dark' ? 'grey.400' : 'text.primary';
	  const iconSelectedColor = theme.palette.mode === 'dark' && drawerOpen ? 'text.primary' : 'secondary.main';
	
	  return (
	    <>
	      {layout === LAYOUT_CONST.VERTICAL_LAYOUT || (layout === LAYOUT_CONST.HORIZONTAL_LAYOUT && matchDownMd) ? (
	        <ListItemButton
	          component={Link}
	          href={item.url!}
	          target={itemTarget}
	          disabled={item.disabled}
	          disableRipple={!drawerOpen}
	          sx={{
	            zIndex: 1201,
	            borderRadius: `${borderRadius}px`,
	            mb: 0.5,
	            pl: drawerOpen ? `${level * 24}px` : 1.25,
	            ...(drawerOpen &&
	              level === 1 &&
	              theme.palette.mode !== 'dark' && {
	                '&:hover': {
	                  background: theme.palette.secondary.light
	                },
	                '&.Mui-selected': {
	                  background: theme.palette.secondary.light,
	                  color: iconSelectedColor,
	                  '&:hover': {
	                    color: iconSelectedColor,
	                    background: theme.palette.secondary.light
	                  }
	                }
	              }),
	            ...((!drawerOpen || level !== 1) && {
	              py: level === 1 ? 0 : 1,
	              '&:hover': {
	                bgcolor: 'transparent'
	              },
	              '&.Mui-selected': {
	                '&:hover': {
	                  bgcolor: 'transparent'
	                },
	                bgcolor: 'transparent'
	              }
	            })
	          }}
	          selected={isSelected}
	          onClick={() => itemHandler(item.id!)}
	        >
	          <ButtonBase sx={{ borderRadius: `${borderRadius}px` }} disableRipple={drawerOpen} aria-label="theme-icon">
	            <ListItemIcon
	              sx={{
	                minWidth: level === 1 ? 36 : 18,
	                color: isSelected ? iconSelectedColor : textColor,
	                ...(!drawerOpen &&
	                  level === 1 && {
	                    borderRadius: `${borderRadius}px`,
	                    width: 46,
	                    height: 46,
	                    alignItems: 'center',
	                    justifyContent: 'center',
	                    '&:hover': {
	                      bgcolor: theme.palette.mode === 'dark' ? theme.palette.secondary.main + 25 : 'secondary.light'
	                    },
	                    ...(isSelected && {
	                      bgcolor: theme.palette.mode === 'dark' ? theme.palette.secondary.main + 25 : 'secondary.light',
	                      '&:hover': {
	                        bgcolor: theme.palette.mode === 'dark' ? theme.palette.secondary.main + 30 : 'secondary.light'
	                      }
	                    })
	                  })
	              }}
	            >
	              {itemIcon}
	            </ListItemIcon>
	          </ButtonBase>
	
	          {(drawerOpen || (!drawerOpen && level !== 1)) && (
	            <ListItemText
	              primary={
	                <Typography variant={isSelected ? 'h5' : 'body1'} color="inherit">
	                  {item.title}
	                </Typography>
	              }
	              secondary={
	                item.caption && (
	                  <Typography variant="caption" sx={{ ...theme.typography.subMenuCaption }} display="block" gutterBottom>
	                    {item.caption}
	                  </Typography>
	                )
	              }
	            />
	          )}
	
	          {drawerOpen && item.chip && (
	            <Chip
	              color={item.chip.color}
	              variant={item.chip.variant}
	              size={item.chip.size}
	              label={item.chip.label}
	              avatar={item.chip.avatar && <Avatar>{item.chip.avatar}</Avatar>}
	            />
	          )}
	        </ListItemButton>
	      ) : (
	        <ListItemButton
	          component={Link}
	          href={item.url!}
	          target={itemTarget}
	          disabled={item.disabled}
	          {...(isParents && {
	            onClick: () => {
	              dispatch(activeID(item.id!));
	            }
	          })}
	          sx={{
	            borderRadius: isParents ? `${borderRadius}px` : 0,
	            mb: isParents ? 0 : 0.5,
	            alignItems: 'flex-start',
	            backgroundColor: level > 1 ? 'transparent !important' : 'inherit',
	            py: 1,
	            pl: 2,
	            mr: isParents ? 1 : 0
	          }}
	          selected={isSelected}
	          onClick={() => itemHandler(item.id!)}
	        >
	          <ListItemIcon
	            sx={{
	              my: 'auto',
	              minWidth: !item?.icon ? 18 : 36
	            }}
	          >
	            {itemIcon}
	          </ListItemIcon>
	
	          <ListItemText
	            primary={
	              <Typography variant={isSelected ? 'h5' : 'body1'} color="inherit">
	                {item.title}
	              </Typography>
	            }
	            secondary={
	              item.caption && (
	                <Typography variant="caption" sx={{ ...theme.typography.subMenuCaption }} display="block" gutterBottom>
	                  {item.caption}
	                </Typography>
	              )
	            }
	          />
	
	          {item.chip && (
	            <Chip
	              color={item.chip.color}
	              variant={item.chip.variant}
	              size={item.chip.size}
	              label={item.chip.label}
	              avatar={item.chip.avatar && <Avatar>{item.chip.avatar}</Avatar>}
	            />
	          )}
	        </ListItemButton>
	      )}
	    </>
	  );
	};
	
	export default NavItem;

```

src/layout/MainLayout/Header/index.tsx```tsx
	// material-ui
	import { useTheme } from '@mui/material/styles';
	import { Avatar, Box, useMediaQuery } from '@mui/material';
	
	// project imports
	import useConfig from 'hooks/useConfig';
	import LogoSection from '../LogoSection';
	//import SearchSection from './SearchSection';
	import MobileSection from './MobileSection';
	import ProfileSection from './ProfileSection';
	import FullScreenSection from './FullScreenSection';
	import LocalizationSection from './LocalizationSection';
	import MegaMenuSection from './MegaMenuSection';
	import NotificationSection from './NotificationSection';
	
	import { LAYOUT_CONST } from 'constant';
	import { useDispatch, useSelector } from 'store';
	import { openDrawer } from 'store/slices/menu';
	
	// assets
	import { IconMenu2 } from '@tabler/icons-react';
	
	// ==============================|| MAIN NAVBAR / HEADER ||============================== //
	
	const Header = () => {
	  const theme = useTheme();
	
	  const dispatch = useDispatch();
	  const { drawerOpen } = useSelector((state) => state.menu);
	
	  const matchDownMd = useMediaQuery(theme.breakpoints.down('md'));
	  const { layout } = useConfig();
	
	  return (
	    <>
	      {/* logo & toggler button */}
	      <Box
	        sx={{
	          width: 228,
	          display: 'flex',
	          [theme.breakpoints.down('md')]: {
	            width: 'auto'
	          }
	        }}
	      >
	        <Box component="span" sx={{ display: { xs: 'none', md: 'block' }, flexGrow: 1 }}>
	          <LogoSection />
	        </Box>
	        {(layout === LAYOUT_CONST.VERTICAL_LAYOUT || (layout === LAYOUT_CONST.HORIZONTAL_LAYOUT && matchDownMd)) && (
	          <Avatar
	            variant="rounded"
	            sx={{
	              ...theme.typography.commonAvatar,
	              ...theme.typography.mediumAvatar,
	              overflow: 'hidden',
	              transition: 'all .2s ease-in-out',
	              background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.secondary.light,
	              color: theme.palette.mode === 'dark' ? theme.palette.secondary.main : theme.palette.secondary.dark,
	              '&:hover': {
	                background: theme.palette.mode === 'dark' ? theme.palette.secondary.main : theme.palette.secondary.dark,
	                color: theme.palette.mode === 'dark' ? theme.palette.secondary.light : theme.palette.secondary.light
	              }
	            }}
	            onClick={() => dispatch(openDrawer(!drawerOpen))}
	            color="inherit"
	          >
	            <IconMenu2 stroke={1.5} size="20px" />
	          </Avatar>
	        )}
	      </Box>
	
	      {/* header search */}
	      {/* <SearchSection /> */}
	      <Box sx={{ flexGrow: 1 }} />
	      <Box sx={{ flexGrow: 1 }} />
	
	      {/* mega-menu */}
	      <Box sx={{ display: { xs: 'none', sm: 'block' } }}>
	        <MegaMenuSection />
	      </Box>
	
	      {/* live customization & localization */}
	      <Box sx={{ display: { xs: 'none', sm: 'block' } }}>
	        <LocalizationSection />
	      </Box>
	
	      {/* notification */}
	      <NotificationSection />
	
	      {/* full sceen toggler */}
	      <Box sx={{ display: { xs: 'none', lg: 'block' } }}>
	        <FullScreenSection />
	      </Box>
	
	      {/* profile */}
	      <ProfileSection />
	
	      {/* mobile header */}
	      <Box sx={{ display: { xs: 'block', sm: 'none' } }}>
	        <MobileSection />
	      </Box>
	    </>
	  );
	};
	
	export default Header;

```

src/layout/MainLayout/Header/LocalizationSection/index.tsx```tsx
	import { useEffect, useRef, useState } from 'react';
	
	// material-ui
	import { useTheme } from '@mui/material/styles';
	import {
	  Avatar,
	  Box,
	  ClickAwayListener,
	  Grid,
	  List,
	  ListItemButton,
	  ListItemText,
	  Paper,
	  Popper,
	  Typography,
	  useMediaQuery
	} from '@mui/material';
	
	// project imports
	import Transitions from 'ui-component/extended/Transitions';
	import useConfig from 'hooks/useConfig';
	
	// assets
	import TranslateTwoToneIcon from '@mui/icons-material/TranslateTwoTone';
	
	// ==============================|| LOCALIZATION ||============================== //
	
	const LocalizationSection = () => {
	  const { borderRadius, locale, onChangeLocale } = useConfig();
	
	  const theme = useTheme();
	  const matchesXs = useMediaQuery(theme.breakpoints.down('md'));
	
	  const [open, setOpen] = useState(false);
	  const anchorRef = useRef<any>(null);
	  const [language, setLanguage] = useState<string>(locale);
	
	  const handleListItemClick = (
	    event: React.MouseEvent<HTMLAnchorElement> | React.MouseEvent<HTMLDivElement, MouseEvent> | undefined,
	    lng: string
	  ) => {
	    setLanguage(lng);
	    onChangeLocale(lng);
	    setOpen(false);
	  };
	
	  const handleToggle = () => {
	    setOpen((prevOpen) => !prevOpen);
	  };
	
	  const handleClose = (event: MouseEvent | TouchEvent) => {
	    if (anchorRef.current && anchorRef.current.contains(event.target)) {
	      return;
	    }
	    setOpen(false);
	  };
	
	  const prevOpen = useRef(open);
	  useEffect(() => {
	    if (prevOpen.current === true && open === false) {
	      anchorRef.current.focus();
	    }
	    prevOpen.current = open;
	  }, [open]);
	
	  useEffect(() => {
	    setLanguage(locale);
	  }, [locale]);
	
	  return (
	    <>
	      <Box
	        sx={{
	          ml: 2,
	          [theme.breakpoints.down('md')]: {
	            ml: 1
	          }
	        }}
	      >
	        <Avatar
	          variant="rounded"
	          sx={{
	            ...theme.typography.commonAvatar,
	            ...theme.typography.mediumAvatar,
	            border: '1px solid',
	            borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light,
	            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light,
	            color: theme.palette.primary.dark,
	            transition: 'all .2s ease-in-out',
	            '&[aria-controls="menu-list-grow"],&:hover': {
	              borderColor: theme.palette.primary.main,
	              background: theme.palette.primary.main,
	              color: theme.palette.primary.light
	            }
	          }}
	          ref={anchorRef}
	          aria-controls={open ? 'menu-list-grow' : undefined}
	          aria-haspopup="true"
	          onClick={handleToggle}
	          color="inherit"
	        >
	          {language !== 'en' && (
	            <Typography variant="h5" sx={{ textTransform: 'uppercase' }} color="inherit">
	              {language}
	            </Typography>
	          )}
	          {language === 'en' && <TranslateTwoToneIcon sx={{ fontSize: '1.3rem' }} />}
	        </Avatar>
	      </Box>
	
	      <Popper
	        placement={matchesXs ? 'bottom-start' : 'bottom'}
	        open={open}
	        anchorEl={anchorRef.current}
	        role={undefined}
	        transition
	        disablePortal
	        modifiers={[
	          {
	            name: 'offset',
	            options: {
	              offset: [matchesXs ? 0 : 0, 20]
	            }
	          }
	        ]}
	      >
	        {({ TransitionProps }) => (
	          <ClickAwayListener onClickAway={handleClose}>
	            <Transitions position={matchesXs ? 'top-left' : 'top'} in={open} {...TransitionProps}>
	              <Paper elevation={16}>
	                {open && (
	                  <List
	                    component="nav"
	                    sx={{
	                      width: '100%',
	                      minWidth: 200,
	                      maxWidth: 280,
	                      bgcolor: theme.palette.background.paper,
	                      borderRadius: `${borderRadius}px`,
	                      [theme.breakpoints.down('md')]: {
	                        maxWidth: 250
	                      }
	                    }}
	                  >
	                    <ListItemButton selected={language === 'en'} onClick={(event) => handleListItemClick(event, 'en')}>
	                      <ListItemText
	                        primary={
	                          <Grid container>
	                            <Typography color="textPrimary">English</Typography>
	                            <Typography variant="caption" color="textSecondary" sx={{ ml: '8px' }}>
	                              (UK)
	                            </Typography>
	                          </Grid>
	                        }
	                      />
	                    </ListItemButton>
	                  </List>
	                )}
	              </Paper>
	            </Transitions>
	          </ClickAwayListener>
	        )}
	      </Popper>
	    </>
	  );
	};
	
	export default LocalizationSection;

```

src/layout/MainLayout/Header/MegaMenuSection/Banner.tsx```tsx
	// material-ui
	import { useTheme } from '@mui/material/styles';
	import { Box } from '@mui/material';
	
	// ==============================|| MEGA MENU ||============================== //
	
	const MegaMenuBanner = () => {
	  const theme = useTheme();
	
	  return (
	    <Box sx={{ py: 1, pl: 1, height: '100%', '& svg': { width: '100%', height: '100%', verticalAlign: 'middle' } }}>
	      <svg width="267" height="352" viewBox="0 0 267 352" fill="none" xmlns="http://www.w3.org/2000/svg">
	        <g clipPath="url(#clip0_4527_60659)">
	          <rect width="266.384" height="352" fill={theme.palette.primary.light} />
	          <path
	            d="M133.253 315.913C201.876 315.913 257.506 283.748 257.506 244.072C257.506 204.395 201.876 172.23 133.253 172.23C64.6299 172.23 9 204.395 9 244.072C9 283.748 64.6299 315.913 133.253 315.913Z"
	            fill="#F0F9FF"
	          />
	          <g opacity="0.09">
	            <mask id="mask0_4527_60659" style={{ maskType: 'alpha' }} maskUnits="userSpaceOnUse" x="0" y="0" width="267" height="354">
	              <rect width="266.384" height="353.338" fill="#FAFAFA" />
	            </mask>
	            <g mask="url(#mask0_4527_60659)">
	              <line
	                y1="-0.5"
	                x2="639.415"
	                y2="-0.5"
	                transform="matrix(0.866042 0.499972 -0.866042 0.499972 -472.843 156.136)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.416"
	                y2="-0.5"
	                transform="matrix(-0.866041 0.499972 -0.866041 -0.499973 80.9165 -155.387)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.416"
	                y2="-0.5"
	                transform="matrix(0.866041 0.499973 -0.866041 0.499972 -434.3 133.884)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.416"
	                y2="-0.5"
	                transform="matrix(-0.866042 0.499972 -0.866041 -0.499972 119.46 -133.135)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.415"
	                y2="-0.5"
	                transform="matrix(0.866042 0.499972 -0.866042 0.499972 -395.756 111.632)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.416"
	                y2="-0.5"
	                transform="matrix(-0.866041 0.499972 -0.866041 -0.499973 158.004 -110.883)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.416"
	                y2="-0.5"
	                transform="matrix(0.866041 0.499972 -0.866042 0.499972 -357.212 89.3809)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.416"
	                y2="-0.5"
	                transform="matrix(-0.866042 0.499972 -0.866041 -0.499972 196.547 -88.6318)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.415"
	                y2="-0.5"
	                transform="matrix(0.866041 0.499972 -0.866042 0.499972 -318.668 67.1289)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.416"
	                y2="-0.5"
	                transform="matrix(-0.866041 0.499972 -0.866041 -0.499973 235.091 -66.3799)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.415"
	                y2="-0.5"
	                transform="matrix(0.866042 0.499972 -0.866042 0.499972 -280.125 44.8779)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.416"
	                y2="-0.5"
	                transform="matrix(-0.866041 0.499972 -0.866041 -0.499973 273.635 -44.1289)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.416"
	                y2="-0.5"
	                transform="matrix(0.866041 0.499972 -0.866042 0.499972 -241.581 22.626)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.415"
	                y2="-0.5"
	                transform="matrix(-0.866042 0.499972 -0.866041 -0.499972 312.179 -21.877)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.416"
	                y2="-0.5"
	                transform="matrix(0.866041 0.499973 -0.866041 0.499972 -203.038 0.374023)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.416"
	                y2="-0.5"
	                transform="matrix(-0.866042 0.499972 -0.866041 -0.499972 350.722 0.374023)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.416"
	                y2="-0.5"
	                transform="matrix(0.866041 0.499973 -0.866041 0.499972 -164.495 -21.877)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.416"
	                y2="-0.5"
	                transform="matrix(-0.866041 0.499972 -0.866041 -0.499973 389.266 22.626)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.416"
	                y2="-0.5"
	                transform="matrix(0.866041 0.499972 -0.866042 0.499972 -125.951 -44.1289)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.416"
	                y2="-0.5"
	                transform="matrix(-0.866042 0.499972 -0.866041 -0.499972 427.81 44.8779)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.416"
	                y2="-0.5"
	                transform="matrix(0.866041 0.499972 -0.866042 0.499972 -87.4072 -66.3799)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.416"
	                y2="-0.5"
	                transform="matrix(-0.866042 0.499972 -0.866041 -0.499972 466.353 67.1289)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.415"
	                y2="-0.5"
	                transform="matrix(0.866041 0.499972 -0.866042 0.499972 -48.8633 -88.6318)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.415"
	                y2="-0.5"
	                transform="matrix(-0.866042 0.499972 -0.866042 -0.499972 504.896 89.3809)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.415"
	                y2="-0.5"
	                transform="matrix(0.866041 0.499973 -0.866041 0.499972 -10.3198 -110.883)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.416"
	                y2="-0.5"
	                transform="matrix(-0.866042 0.499972 -0.866041 -0.499972 543.44 111.632)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.416"
	                y2="-0.5"
	                transform="matrix(0.866041 0.499972 -0.866042 0.499972 28.2241 -133.135)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.416"
	                y2="-0.5"
	                transform="matrix(-0.866041 0.499973 -0.866041 -0.499973 581.984 133.884)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.416"
	                y2="-0.5"
	                transform="matrix(0.866041 0.499973 -0.866041 0.499972 66.7676 -155.387)"
	                stroke="black"
	              />
	              <line
	                y1="-0.5"
	                x2="639.416"
	                y2="-0.5"
	                transform="matrix(-0.866042 0.499972 -0.866042 -0.499972 620.528 156.136)"
	                stroke="black"
	              />
	            </g>
	          </g>
	          <path
	            d="M165.744 158.987L142.774 145.686C141.608 145.012 139.714 145.012 138.548 145.686L21.8748 213.113C20.7084 213.787 20.7084 214.881 21.8748 215.555L44.8453 228.856C46.0116 229.53 47.9051 229.53 49.0715 228.856L92.797 203.588L99.5169 207.5C103.074 209.557 108.848 209.557 112.405 207.5L132.443 196.007C136 193.951 136 190.619 132.443 188.563L125.728 184.655L165.749 161.434C166.916 160.755 166.916 159.661 165.744 158.987Z"
	            fill="#DFF1FF"
	          />
	          <path
	            d="M217.073 260.333C229.511 260.333 239.594 254.505 239.594 247.316C239.594 240.127 229.511 234.299 217.073 234.299C204.635 234.299 194.551 240.127 194.551 247.316C194.551 254.505 204.635 260.333 217.073 260.333Z"
	            fill="#DFF2FF"
	          />
	          <path
	            d="M178.517 205.106C192.899 205.106 204.558 198.358 204.558 190.034C204.558 181.711 192.899 174.963 178.517 174.963C164.135 174.963 152.477 181.711 152.477 190.034C152.477 198.358 164.135 205.106 178.517 205.106Z"
	            fill="#DFF2FF"
	          />
	          <path
	            d="M227.794 233.292C227.799 230.239 227.189 224.617 229.771 219.342C231.64 215.522 234.988 211.805 238.096 212.176C240.995 212.518 241.259 216.978 238.487 220.03C235.715 223.083 232.186 227.304 231.42 234.054L229.424 239.061L227.794 233.292Z"
	            fill="#27DEBF"
	          />
	          <g opacity="0.2">
	            <path
	              opacity="0.2"
	              d="M227.794 233.292C227.799 230.239 227.189 224.617 229.771 219.342C231.64 215.522 234.988 211.805 238.096 212.176C240.995 212.518 241.259 216.978 238.487 220.03C235.715 223.083 232.186 227.304 231.42 234.054L229.424 239.061L227.794 233.292Z"
	              fill="black"
	            />
	          </g>
	          <path
	            d="M228.834 235.437C228.936 235.417 229.014 235.324 229.009 235.222C228.658 226.547 231.479 219.342 237.169 214.394C237.257 214.316 237.266 214.184 237.188 214.096C237.11 214.008 236.978 213.998 236.891 214.076C231.103 219.112 228.228 226.434 228.585 235.241C228.59 235.358 228.687 235.451 228.804 235.446C228.814 235.437 228.824 235.437 228.834 235.437Z"
	            fill="white"
	          />
	          <path
	            d="M227.243 244.2C227.243 244.2 229.342 245.616 232.606 245.694C235.866 245.772 237.072 244.053 237.072 244.053C237.072 244.053 235.412 241.225 233.485 240.624C233.485 240.624 236.642 240.839 239.336 242.158C239.336 242.158 241.293 241.923 241.669 238.841C241.669 238.841 240.273 237.205 236.266 236.755C236.266 236.755 238.545 235.847 242.064 236.257C242.332 236.326 242.903 232.325 242.996 230.503C243.089 228.681 242.376 228.798 240.941 228.613C239.507 228.427 234.763 228.828 233.997 229.707C233.231 230.586 233.143 233.248 233.143 233.248C233.143 233.248 232.118 231.886 232.138 230.542C232.138 230.542 230.684 230.259 229.2 231.006C227.716 231.759 227.243 232.359 227.17 233.497C227.097 234.636 226.999 236.34 227.458 237.669C227.458 237.669 226.106 235.49 226.174 233.59C226.174 233.59 225.433 234.816 224.793 236.477C224.149 238.143 224.906 242.163 227.243 244.2Z"
	            fill="#27DEBF"
	          />
	          <path
	            d="M227.297 244.405C227.365 244.386 227.419 244.337 227.443 244.268C229.298 238.568 238.038 231.065 241.376 229.937C241.488 229.898 241.547 229.781 241.508 229.668C241.468 229.556 241.356 229.493 241.239 229.536C237.838 230.684 228.931 238.334 227.038 244.137C227.004 244.249 227.062 244.366 227.175 244.405C227.219 244.415 227.258 244.415 227.297 244.405Z"
	            fill="white"
	          />
	          <path
	            d="M112.405 205.557L129.666 195.568C131.447 194.537 132.335 193.194 132.335 191.846C132.335 190.498 132.345 189.443 132.345 189.443L116.099 180.216C115.153 179.669 114.382 178.335 114.382 177.236V155.935L84.2275 173.372V194.674C84.2275 195.773 84.9986 197.107 85.9453 197.654L99.5168 205.557C103.074 207.613 108.848 207.613 112.405 205.557Z"
	            fill="url(#paint0_linear_4527_60659)"
	          />
	          <path
	            d="M91.4696 198.445V200.838L85.9453 197.649C85.0035 197.101 84.2275 195.773 84.2275 194.669V173.367L89.9714 170.051C90.0885 171.511 90.2203 173.021 90.3374 174.491L86.3113 176.826V193.467C86.3113 194.571 87.0775 195.9 88.0291 196.447L91.4696 198.445Z"
	            fill="#263238"
	          />
	          <path
	            d="M86.3115 193.472C86.3115 194.571 87.0826 195.905 88.0293 196.452L99.517 203.158C103.075 205.215 108.848 205.215 112.405 203.158L129.676 193.169C133.234 191.113 133.234 187.782 129.676 185.725L118.179 179.019C117.227 178.472 116.461 177.138 116.461 176.039V159.393L86.3066 176.83V193.472H86.3115Z"
	            fill="url(#paint1_linear_4527_60659)"
	          />
	          <path
	            opacity="0.15"
	            d="M121.682 181.036L118.183 179.009C117.232 178.462 116.466 177.128 116.466 176.029V159.383L86.3115 176.821V193.467C86.3115 194.566 87.0826 195.9 88.0293 196.447L91.4698 198.435L121.682 181.036Z"
	            fill="black"
	          />
	          <path
	            d="M132.34 189.442C132.34 189.442 132.34 190.493 132.34 191.846C132.34 193.194 131.447 194.537 129.671 195.568L112.405 205.552C110.697 206.543 108.487 207.041 106.256 207.081V204.687C108.487 204.658 110.702 204.14 112.405 203.158L129.671 193.164C131.447 192.144 132.34 190.795 132.34 189.442Z"
	            fill="url(#paint2_linear_4527_60659)"
	          />
	          <path
	            d="M37.8959 216.454C39.0085 217.099 40.8727 217.065 42.0586 216.376C56.8843 207.808 143.847 157.556 158.668 148.993C159.854 148.309 160.815 146.639 160.815 145.271V43.1106C160.815 41.7381 159.913 40.1066 158.8 39.4619C157.687 38.8171 155.823 38.8513 154.637 39.54L38.0325 106.923C36.8466 107.606 35.8853 109.277 35.8853 110.645V212.805C35.8804 214.178 36.7832 215.814 37.8959 216.454Z"
	            fill="url(#paint3_linear_4527_60659)"
	          />
	          <path
	            d="M42.0584 216.376L158.668 148.994C159.854 148.31 160.815 146.639 160.815 145.272V43.1062C160.815 41.7337 159.854 41.1817 158.668 41.8655L42.0633 109.253C40.8774 109.937 39.916 111.607 39.916 112.975V215.136C39.9112 216.508 40.8725 217.06 42.0584 216.376Z"
	            fill="url(#paint4_linear_4527_60659)"
	          />
	          <path
	            d="M43.9424 201.639V114.313C43.9424 113.492 44.5182 112.491 45.2307 112.08L155.496 48.3614C156.209 47.9511 156.785 48.2832 156.785 49.1038L156.789 136.43C156.789 137.251 156.214 138.252 155.501 138.662L45.2307 202.386C44.5182 202.797 43.9424 202.464 43.9424 201.639Z"
	            fill="#27DEBF"
	          />
	          <path
	            d="M43.9424 201.639V114.313C43.9424 113.492 44.5182 112.491 45.2307 112.08L155.496 48.3614C156.209 47.9511 156.785 48.2832 156.785 49.1038L156.789 136.43C156.789 137.251 156.214 138.252 155.501 138.662L45.2307 202.386C44.5182 202.797 43.9424 202.464 43.9424 201.639Z"
	            fill="url(#paint5_linear_4527_60659)"
	          />
	          <path
	            d="M100.141 178.55C99.9071 178.55 99.6875 178.496 99.4972 178.384C99.0384 178.12 98.7847 177.578 98.7847 176.865C98.7847 175.478 99.7217 173.851 100.922 173.158C101.542 172.801 102.132 172.752 102.591 173.016C103.05 173.28 103.304 173.822 103.304 174.535C103.304 175.922 102.367 177.549 101.166 178.242C100.81 178.448 100.463 178.55 100.141 178.55ZM101.942 173.338C101.708 173.338 101.444 173.421 101.166 173.583C100.122 174.183 99.2727 175.658 99.2727 176.865C99.2727 177.397 99.4386 177.783 99.7412 177.959C100.044 178.135 100.463 178.081 100.922 177.817C101.966 177.212 102.816 175.742 102.816 174.535C102.816 174.003 102.65 173.617 102.347 173.441C102.23 173.373 102.093 173.338 101.942 173.338Z"
	            fill="#27DEBF"
	          />
	          <path
	            d="M175.939 64.793L62.3745 130.344V214.119C62.3745 215.233 63.5799 215.936 64.5461 215.379L66.5714 214.212L173.821 152.315C174.987 151.641 175.939 149.999 175.939 148.646V64.793Z"
	            fill="#EDE7F6"
	          />
	          <path
	            d="M175.451 65.638V148.641C175.451 149.814 174.592 151.299 173.577 151.89L66.3274 213.787L64.3021 214.954C64.1509 215.042 63.9947 215.086 63.8288 215.086C63.5848 215.086 63.3359 214.988 63.1553 214.812C62.965 214.632 62.8625 214.388 62.8625 214.119V130.622L175.451 65.638ZM175.939 64.793L62.3745 130.344V214.119C62.3745 214.964 63.0675 215.574 63.8288 215.574C64.0679 215.574 64.3168 215.511 64.5461 215.379L66.5714 214.212L173.821 152.315C174.987 151.64 175.939 149.999 175.939 148.646V64.793Z"
	            fill="#E0E0E0"
	          />
	          <path opacity="0.8" d="M173.245 63.2344L59.6709 128.78L62.3745 130.343L175.939 64.7926L173.245 63.2344Z" fill="#455A64" />
	          <path
	            d="M63.1357 215.398C63.1357 215.398 62.3745 215.027 62.3745 214.118V132.756C62.3745 132.087 62.3745 130.343 62.3745 130.343L59.6758 128.78L59.6709 212.096C59.6709 212.199 59.6758 212.301 59.6904 212.404C59.788 213.093 60.1931 213.703 60.7933 214.045L63.0235 215.335L63.1357 215.398Z"
	            fill="#673AB7"
	          />
	          <path
	            d="M59.6709 128.82V123.164C59.6709 122.489 60.1443 121.669 60.725 121.327L172.191 57.0119C172.772 56.67 173.718 56.67 174.299 57.0071L174.88 57.3441C175.465 57.6811 175.939 58.5017 175.939 59.1758V64.837L62.3745 130.378L59.6709 128.82Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M59.6709 128.82V123.164C59.6709 122.489 60.1443 121.669 60.725 121.327L172.191 57.0119C172.772 56.67 173.718 56.67 174.299 57.0071L174.88 57.3441C175.465 57.6811 175.939 58.5017 175.939 59.1758V64.837L62.3745 130.378L59.6709 128.82Z"
	            fill="#4527A0"
	          />
	          <path
	            d="M62.3745 124.727C62.3745 124.053 62.8479 123.232 63.4286 122.89L174.885 58.5703C175.466 58.2284 175.939 58.5019 175.939 59.176V64.8372L62.3745 130.378V124.727Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M62.3745 124.727C62.3745 124.053 62.8479 123.232 63.4286 122.89L174.885 58.5703C175.466 58.2284 175.939 58.5019 175.939 59.176V64.8372L62.3745 130.378V124.727Z"
	            fill="#BDAAE8"
	          />
	          <path
	            d="M62.6819 123.681C62.4916 124.013 62.3745 124.389 62.3745 124.727V130.378L59.6758 128.82V123.163C59.6758 122.826 59.7929 122.455 59.9832 122.123L62.6819 123.681Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M62.6819 123.681C62.4916 124.013 62.3745 124.389 62.3745 124.727V130.378L59.6758 128.82V123.163C59.6758 122.826 59.7929 122.455 59.9832 122.123L62.6819 123.681Z"
	            fill="#673AB7"
	          />
	          <path
	            d="M170.981 64.5777C170.981 65.2127 171.425 65.4667 171.972 65.1492C172.518 64.8317 172.962 64.0649 172.962 63.4299C172.962 62.7949 172.518 62.5409 171.972 62.8584C171.425 63.1759 170.981 63.9476 170.981 64.5777Z"
	            fill="#FAFAFA"
	          />
	          <path
	            d="M167.019 66.8687C167.019 67.5037 167.463 67.7577 168.009 67.4402C168.556 67.1227 169 66.3559 169 65.7209C169 65.0859 168.556 64.8319 168.009 65.1494C167.463 65.4669 167.019 66.2386 167.019 66.8687Z"
	            fill="#FAFAFA"
	          />
	          <path
	            d="M163.056 69.1598C163.056 69.7947 163.5 70.0487 164.046 69.7312C164.593 69.4138 165.037 68.6469 165.037 68.0119C165.037 67.3769 164.593 67.1229 164.046 67.4404C163.5 67.7579 163.056 68.5297 163.056 69.1598Z"
	            fill="#FAFAFA"
	          />
	          <path
	            d="M62.3745 130.378V214.119C62.3745 215.233 63.5799 215.936 64.5461 215.379L66.5714 214.212L91.3866 199.89V113.634L62.3745 130.378Z"
	            fill="white"
	          />
	          <path d="M93.3682 115.046V196.384L173.558 150.044V68.7109L93.3682 115.046Z" fill="white" />
	          <path
	            d="M84.7447 123.462L66.2345 134.169C65.8929 134.369 65.6147 134.848 65.6147 135.244V137.173C65.6147 137.569 65.8929 137.73 66.2345 137.53L84.7447 126.823C85.0863 126.622 85.3644 126.144 85.3644 125.748V123.819C85.3644 123.423 85.0863 123.262 84.7447 123.462Z"
	            fill="#69F0AE"
	          />
	          <path
	            opacity="0.8"
	            d="M84.7447 123.462L66.2345 134.169C65.8929 134.369 65.6147 134.848 65.6147 135.244V137.173C65.6147 137.569 65.8929 137.73 66.2345 137.53L84.7447 126.823C85.0863 126.622 85.3644 126.144 85.3644 125.748V123.819C85.3644 123.423 85.0863 123.262 84.7447 123.462Z"
	            fill="#FAFAFA"
	          />
	          <path
	            d="M88.8683 124.229L88.3218 123.701C88.4291 123.428 88.4975 123.125 88.4975 122.827C88.4975 122.382 88.3511 122.04 88.0875 121.889C87.8923 121.777 87.6532 121.786 87.4238 121.918C86.9456 122.197 86.5649 122.973 86.5649 123.691C86.5649 124.136 86.7113 124.478 86.9749 124.629C87.0676 124.683 87.1652 124.707 87.2677 124.707C87.3897 124.707 87.5166 124.673 87.6386 124.6C87.8191 124.497 87.985 124.321 88.1217 124.102L88.5707 124.532C88.6097 124.571 88.6634 124.59 88.7171 124.59C88.7756 124.59 88.8293 124.566 88.8732 124.527C88.9562 124.444 88.9513 124.307 88.8683 124.229ZM87.4238 124.229C87.3311 124.282 87.2482 124.292 87.1896 124.258C87.1018 124.204 86.9944 124.028 86.9944 123.691C86.9944 123.135 87.2872 122.49 87.6386 122.29C87.6971 122.255 87.7459 122.241 87.7947 122.241C87.824 122.241 87.8484 122.246 87.8728 122.26C87.9606 122.314 88.068 122.49 88.068 122.827C88.0631 123.389 87.7703 124.028 87.4238 124.229Z"
	            fill="#455A64"
	          />
	          <path
	            d="M66.0686 143.186L65.6538 143.425C65.6294 143.44 65.6099 143.425 65.6099 143.391V142.267C65.6099 142.233 65.6294 142.199 65.6538 142.184L66.0686 141.945C66.093 141.93 66.1125 141.945 66.1125 141.979V143.103C66.1125 143.137 66.093 143.171 66.0686 143.186Z"
	            fill="#455A64"
	          />
	          <path
	            d="M66.6882 142.829L66.2734 143.069C66.249 143.083 66.2295 143.069 66.2295 143.034V141.911C66.2295 141.877 66.249 141.843 66.2734 141.828L66.6882 141.589C66.7126 141.574 66.7321 141.589 66.7321 141.623V142.746C66.7321 142.776 66.7126 142.815 66.6882 142.829Z"
	            fill="#455A64"
	          />
	          <path
	            d="M67.3132 142.468L66.8984 142.707C66.874 142.722 66.8545 142.707 66.8545 142.673V141.55C66.8545 141.516 66.874 141.481 66.8984 141.467L67.3132 141.227C67.3376 141.213 67.3571 141.227 67.3571 141.262V142.385C67.3571 142.419 67.3376 142.453 67.3132 142.468Z"
	            fill="#455A64"
	          />
	          <path
	            d="M66.0686 144.637L65.6538 144.876C65.6294 144.891 65.6099 144.876 65.6099 144.842V143.719C65.6099 143.684 65.6294 143.65 65.6538 143.636L66.0686 143.396C66.093 143.382 66.1125 143.396 66.1125 143.43V144.554C66.1125 144.588 66.093 144.622 66.0686 144.637Z"
	            fill="#455A64"
	          />
	          <path
	            d="M66.6882 144.281L66.2734 144.52C66.249 144.535 66.2295 144.52 66.2295 144.486V143.362C66.2295 143.328 66.249 143.294 66.2734 143.279L66.6882 143.04C66.7126 143.025 66.7321 143.04 66.7321 143.074V144.197C66.7321 144.227 66.7126 144.266 66.6882 144.281Z"
	            fill="#455A64"
	          />
	          <path
	            d="M67.3132 143.918L66.8984 144.158C66.874 144.172 66.8545 144.158 66.8545 144.123V143C66.8545 142.966 66.874 142.932 66.8984 142.917L67.3132 142.678C67.3376 142.663 67.3572 142.678 67.3572 142.712V143.835C67.3572 143.869 67.3376 143.904 67.3132 143.918Z"
	            fill="#455A64"
	          />
	          <path
	            d="M66.132 148.471L65.6196 148.158C65.6001 148.149 65.6001 148.1 65.6196 148.066L66.132 147.162C66.1564 147.118 66.1906 147.123 66.1906 147.172V148.388C66.1954 148.437 66.1564 148.486 66.132 148.471Z"
	            fill="#455A64"
	          />
	          <path
	            d="M65.9174 147.782L66.5909 147.392V147.714L65.9174 148.105C65.8589 148.139 65.8149 148.095 65.8149 148.007C65.8149 147.914 65.8637 147.817 65.9174 147.782Z"
	            fill="#455A64"
	          />
	          <path d="M66.7178 147.323L66.9471 147.187V147.509L66.7178 147.641V147.323Z" fill="#455A64" />
	          <path
	            d="M67.5671 146.991V148.168C67.5671 148.256 67.5183 148.354 67.4646 148.388C67.4061 148.422 67.3622 148.378 67.3622 148.29V147.274L67.0791 147.441V147.118L67.4695 146.893C67.5183 146.859 67.5671 146.903 67.5671 146.991Z"
	            fill="#455A64"
	          />
	          <path
	            d="M66.3319 151.108C65.8537 151.436 65.5316 152.344 65.6243 153.013C65.7073 153.629 66.0733 153.604 66.1123 153.888C66.1172 153.917 66.1367 153.932 66.1611 153.917L66.615 153.658C66.6394 153.644 66.6589 153.609 66.6638 153.575C66.7126 153.199 67.1762 152.745 67.1811 151.836C67.1762 151.133 66.7955 150.791 66.3319 151.108Z"
	            fill="#455A64"
	          />
	          <path
	            d="M66.6052 154.396L66.166 154.65C66.1367 154.669 66.1123 154.65 66.1123 154.61V154.205C66.1123 154.166 66.1367 154.117 66.166 154.102L66.6052 153.848C66.6345 153.829 66.6589 153.848 66.6589 153.888V154.293C66.6589 154.327 66.6345 154.376 66.6052 154.396Z"
	            fill="#455A64"
	          />
	          <path
	            d="M66.4397 141.608C66.0347 141.941 65.7077 142.634 65.6443 143.294C65.6052 143.68 65.654 143.992 65.7614 144.217L65.615 144.984C65.6052 145.047 65.6394 145.081 65.6735 145.042L66.1176 144.559C66.3031 144.617 66.5227 144.564 66.7618 144.368C67.1669 144.031 67.4938 143.343 67.5573 142.678C67.6598 141.608 67.0985 141.066 66.4397 141.608ZM66.5959 144.129C66.1908 144.363 65.859 144.046 65.859 143.416C65.859 142.791 66.1908 142.087 66.5959 141.853C67.0009 141.618 67.3328 141.936 67.3328 142.566C67.3377 143.191 67.0058 143.894 66.5959 144.129Z"
	            fill="#455A64"
	          />
	          <path
	            d="M66.4397 156.433C66.0347 156.765 65.7077 157.458 65.6443 158.118C65.6052 158.504 65.654 158.816 65.7614 159.041L65.615 159.808C65.6052 159.871 65.6394 159.905 65.6735 159.866L66.1176 159.383C66.3031 159.441 66.5227 159.388 66.7618 159.192C67.1669 158.855 67.4938 158.167 67.5573 157.502C67.6598 156.428 67.0985 155.89 66.4397 156.433ZM66.5959 158.948C66.1908 159.182 65.859 158.865 65.859 158.235C65.859 157.61 66.1908 156.906 66.5959 156.672C67.0009 156.437 67.3328 156.755 67.3328 157.385C67.3377 158.015 67.0058 158.714 66.5959 158.948Z"
	            fill="#455A64"
	          />
	          <path
	            d="M67.064 161.864C67.064 162.197 66.8883 162.568 66.6736 162.69C66.4589 162.812 66.2832 162.646 66.2832 162.314C66.2832 161.982 66.4589 161.61 66.6736 161.488C66.8883 161.366 67.064 161.532 67.064 161.864Z"
	            fill="#455A64"
	          />
	          <path
	            d="M67.7326 161.982C67.7326 162.201 67.6155 162.451 67.474 162.534C67.3325 162.617 67.2153 162.504 67.2153 162.284C67.2153 162.065 67.3325 161.815 67.474 161.732C67.6155 161.649 67.7326 161.762 67.7326 161.982Z"
	            fill="#455A64"
	          />
	          <path
	            d="M67.1323 164.229L66.21 164.761V163.594C66.21 163.349 66.3612 163.061 66.5418 162.959L66.7956 162.812C66.981 162.705 67.1274 162.817 67.1274 163.066V164.229H67.1323Z"
	            fill="#455A64"
	          />
	          <path
	            d="M67.513 162.665L67.2593 162.812V164.155L67.7375 163.877V162.831C67.7375 162.67 67.635 162.597 67.513 162.665Z"
	            fill="#455A64"
	          />
	          <path
	            d="M65.6147 163.208C65.6147 163.428 65.7319 163.54 65.8734 163.457C66.0149 163.374 66.132 163.13 66.132 162.905C66.132 162.686 66.0149 162.573 65.8734 162.656C65.7319 162.739 65.6147 162.984 65.6147 163.208Z"
	            fill="#455A64"
	          />
	          <path
	            d="M65.8343 163.638L66.0881 163.491V164.834L65.6099 165.113V164.068C65.6099 163.902 65.7075 163.711 65.8343 163.638Z"
	            fill="#455A64"
	          />
	          <path
	            d="M70.1096 140.552L80.9482 134.29C81.241 134.119 81.4753 134.241 81.4753 134.559C81.4753 134.876 81.241 135.267 80.9482 135.438L70.1096 141.7C69.8168 141.871 69.5825 141.749 69.5825 141.432C69.5825 141.114 69.8168 140.718 70.1096 140.552Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M70.1096 145.657L80.9482 139.395C81.241 139.224 81.4753 139.346 81.4753 139.663C81.4753 139.981 81.241 140.372 80.9482 140.543L70.1096 146.805C69.8168 146.976 69.5825 146.853 69.5825 146.536C69.5825 146.218 69.8168 145.828 70.1096 145.657Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M70.1096 150.761L80.9482 144.499C81.241 144.328 81.4753 144.45 81.4753 144.768C81.4753 145.085 81.241 145.476 80.9482 145.647L70.1096 151.909C69.8168 152.08 69.5825 151.958 69.5825 151.641C69.5825 151.323 69.8168 150.932 70.1096 150.761Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M70.1096 155.871L80.9482 149.609C81.241 149.438 81.4753 149.56 81.4753 149.877C81.4753 150.195 81.241 150.586 80.9482 150.757L70.1096 157.019C69.8168 157.189 69.5825 157.067 69.5825 156.75C69.5825 156.432 69.8168 156.037 70.1096 155.871Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M70.1096 160.974L80.9482 154.712C81.241 154.541 81.4753 154.663 81.4753 154.981C81.4753 155.298 81.241 155.689 80.9482 155.86L70.1096 162.122C69.8168 162.293 69.5825 162.171 69.5825 161.853C69.5825 161.536 69.8168 161.14 70.1096 160.974Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M72.091 165.141L82.9297 158.879C83.2225 158.708 83.4567 158.83 83.4567 159.148C83.4567 159.465 83.2225 159.856 82.9297 160.027L72.091 166.289C71.7982 166.46 71.564 166.338 71.564 166.02C71.564 165.703 71.8031 165.312 72.091 165.141Z"
	            fill="#455A64"
	          />
	          <path
	            d="M72.091 168.594L82.9297 162.332C83.2225 162.161 83.4567 162.283 83.4567 162.601C83.4567 162.918 83.2225 163.309 82.9297 163.48L72.091 169.742C71.7982 169.913 71.564 169.791 71.564 169.473C71.564 169.156 71.8031 168.76 72.091 168.594Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M72.091 172.043L82.9297 165.781C83.2225 165.61 83.4567 165.732 83.4567 166.049C83.4567 166.367 83.2225 166.757 82.9297 166.928L72.091 173.19C71.7982 173.361 71.564 173.239 71.564 172.922C71.564 172.604 71.8031 172.209 72.091 172.043Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M74.2038 174.231L85.0425 167.969C85.3353 167.798 85.5695 167.92 85.5695 168.238C85.5695 168.555 85.3353 168.946 85.0425 169.117L74.2038 175.379C73.911 175.55 73.6768 175.428 73.6768 175.11C73.6768 174.793 73.911 174.402 74.2038 174.231Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M71.6664 177.201L72.5449 175.648C72.579 175.59 72.579 175.511 72.5449 175.492L71.6664 174.955C71.6225 174.93 71.564 175.013 71.564 175.091V177.182C71.564 177.265 71.6274 177.275 71.6664 177.201Z"
	            fill="#455A64"
	          />
	          <path
	            d="M74.2038 177.67L85.0425 171.408C85.3353 171.238 85.5695 171.36 85.5695 171.677C85.5695 171.995 85.3353 172.385 85.0425 172.556L74.2038 178.818C73.911 178.989 73.6768 178.867 73.6768 178.55C73.6768 178.232 73.911 177.841 74.2038 177.67Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M71.6664 180.64L72.5449 179.087C72.579 179.028 72.579 178.95 72.5449 178.93L71.6664 178.393C71.6225 178.369 71.564 178.452 71.564 178.53V180.62C71.564 180.703 71.6274 180.713 71.6664 180.64Z"
	            fill="#455A64"
	          />
	          <path
	            d="M74.2039 181.109L85.0425 174.847C85.3354 174.676 85.5696 174.798 85.5696 175.116C85.5696 175.433 85.3354 175.824 85.0425 175.995L74.2039 182.257C73.9111 182.428 73.6768 182.306 73.6768 181.988C73.672 181.671 73.9111 181.275 74.2039 181.109Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M71.6664 184.074L72.5449 182.52C72.579 182.462 72.579 182.383 72.5449 182.364L71.6664 181.827C71.6225 181.802 71.564 181.885 71.564 181.963V184.054C71.564 184.137 71.6274 184.152 71.6664 184.074Z"
	            fill="#455A64"
	          />
	          <path
	            d="M74.2039 184.543L85.0425 178.281C85.3354 178.11 85.5696 178.232 85.5696 178.549C85.5696 178.867 85.3354 179.257 85.0425 179.428L74.2039 185.69C73.9111 185.861 73.6768 185.739 73.6768 185.422C73.672 185.104 73.9111 184.714 74.2039 184.543Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M71.6664 187.512L72.5449 185.959C72.579 185.9 72.579 185.822 72.5449 185.802L71.6664 185.265C71.6225 185.241 71.564 185.324 71.564 185.402V187.492C71.564 187.575 71.6274 187.585 71.6664 187.512Z"
	            fill="#455A64"
	          />
	          <path
	            d="M74.2039 187.981L85.0425 181.719C85.3354 181.548 85.5696 181.67 85.5696 181.988C85.5696 182.305 85.3354 182.696 85.0425 182.867L74.2039 189.129C73.9111 189.3 73.6768 189.178 73.6768 188.86C73.672 188.543 73.9111 188.152 74.2039 187.981Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M71.6664 190.951L72.5449 189.398C72.579 189.34 72.579 189.261 72.5449 189.242L71.6664 188.705C71.6225 188.68 71.564 188.763 71.564 188.841V190.932C71.564 191.015 71.6274 191.025 71.6664 190.951Z"
	            fill="#455A64"
	          />
	          <path
	            d="M74.2039 191.42L85.0425 185.158C85.3354 184.988 85.5696 185.11 85.5696 185.427C85.5696 185.745 85.3354 186.135 85.0425 186.306L74.2039 192.568C73.9111 192.739 73.6768 192.617 73.6768 192.3C73.672 191.982 73.9111 191.587 74.2039 191.42Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M71.6664 194.385L72.5449 192.832C72.579 192.773 72.579 192.695 72.5449 192.675L71.6664 192.138C71.6225 192.114 71.564 192.197 71.564 192.275V194.366C71.564 194.449 71.6274 194.463 71.6664 194.385Z"
	            fill="#455A64"
	          />
	          <path
	            d="M74.2039 194.854L85.0425 188.592C85.3354 188.421 85.5696 188.543 85.5696 188.861C85.5696 189.178 85.3354 189.569 85.0425 189.74L74.2039 196.002C73.9111 196.173 73.6768 196.051 73.6768 195.733C73.672 195.416 73.9111 195.025 74.2039 194.854Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M71.6664 197.824L72.5449 196.27C72.579 196.212 72.579 196.133 72.5449 196.114L71.6664 195.577C71.6225 195.552 71.564 195.635 71.564 195.713V197.804C71.564 197.887 71.6274 197.897 71.6664 197.824Z"
	            fill="#455A64"
	          />
	          <path
	            d="M74.2039 198.293L85.0425 192.031C85.3354 191.86 85.5696 191.982 85.5696 192.299C85.5696 192.617 85.3354 193.007 85.0425 193.178L74.2039 199.44C73.9111 199.611 73.6768 199.489 73.6768 199.172C73.672 198.854 73.9111 198.464 74.2039 198.293Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M71.6664 201.263L72.5449 199.71C72.579 199.651 72.579 199.573 72.5449 199.553L71.6664 199.016C71.6225 198.992 71.564 199.075 71.564 199.153V201.243C71.564 201.326 71.6274 201.336 71.6664 201.263Z"
	            fill="#455A64"
	          />
	          <path
	            d="M95.8811 126.202L131.501 105.618C131.794 105.447 132.028 105.042 132.028 104.7V95.6146C132.028 95.2776 131.794 95.1408 131.501 95.3069L95.8811 115.886C95.5883 116.057 95.3541 116.462 95.3541 116.799V125.894C95.3492 126.236 95.5883 126.373 95.8811 126.202Z"
	            fill="#F0F0F0"
	          />
	          <path
	            d="M98.9853 119.788C98.9853 119.783 98.9853 119.779 98.9902 119.769L99.2244 118.792L98.9023 118.977C98.8926 118.982 98.8877 118.982 98.8828 118.977C98.8779 118.973 98.873 118.963 98.873 118.948V118.772C98.873 118.758 98.8779 118.748 98.8828 118.733C98.8877 118.719 98.8975 118.714 98.9023 118.709L99.4196 118.411C99.4294 118.406 99.4343 118.406 99.4391 118.411C99.444 118.416 99.4489 118.426 99.4489 118.44V118.596C99.4489 118.616 99.444 118.645 99.4294 118.689L99.1951 119.666C99.1903 119.676 99.1903 119.691 99.1854 119.7C99.1805 119.71 99.1756 119.72 99.1659 119.725L99.0146 119.813C99.0097 119.818 98.9999 119.818 98.995 119.813C98.9902 119.808 98.9853 119.798 98.9853 119.788Z"
	            fill="#455A64"
	          />
	          <path
	            d="M99.8489 118.143C99.9026 118.113 99.9514 118.099 99.9904 118.099C100.029 118.099 100.064 118.113 100.088 118.143C100.112 118.167 100.132 118.206 100.147 118.255C100.161 118.304 100.166 118.358 100.166 118.416C100.166 118.465 100.166 118.514 100.166 118.568C100.166 118.621 100.166 118.67 100.166 118.714C100.166 118.778 100.156 118.836 100.147 118.9C100.132 118.963 100.112 119.022 100.088 119.076C100.064 119.129 100.029 119.183 99.9904 119.232C99.9514 119.281 99.9026 119.32 99.8489 119.349C99.7952 119.378 99.7464 119.393 99.7074 119.393C99.6684 119.393 99.6342 119.378 99.6098 119.349C99.5854 119.325 99.5659 119.286 99.5513 119.237C99.5366 119.188 99.5317 119.134 99.5269 119.076C99.5269 119.032 99.5269 118.983 99.5269 118.929C99.5269 118.875 99.5269 118.826 99.5269 118.778C99.5269 118.714 99.5366 118.655 99.5513 118.592C99.5659 118.528 99.5805 118.47 99.6098 118.416C99.6342 118.358 99.6684 118.309 99.7074 118.26C99.7513 118.216 99.7952 118.177 99.8489 118.143ZM99.966 118.817C99.9709 118.719 99.9709 118.626 99.966 118.538C99.966 118.509 99.9612 118.489 99.9563 118.465C99.9514 118.445 99.9465 118.426 99.9368 118.416C99.927 118.406 99.9172 118.397 99.9026 118.397C99.888 118.397 99.8684 118.401 99.8489 118.411C99.8294 118.426 99.8099 118.441 99.7952 118.455C99.7806 118.475 99.7708 118.494 99.7611 118.514C99.7513 118.538 99.7464 118.558 99.7416 118.587C99.7367 118.612 99.7367 118.641 99.7367 118.67C99.7318 118.763 99.7318 118.856 99.7367 118.949C99.7367 118.978 99.7416 119.002 99.7416 119.022C99.7464 119.041 99.7513 119.061 99.7611 119.071C99.7708 119.08 99.7806 119.09 99.7952 119.09C99.8099 119.09 99.8294 119.085 99.8489 119.076C99.8684 119.061 99.888 119.046 99.9026 119.032C99.9172 119.012 99.927 118.993 99.9368 118.968C99.9465 118.944 99.9514 118.919 99.9563 118.895C99.9612 118.875 99.966 118.846 99.966 118.817Z"
	            fill="#455A64"
	          />
	          <path
	            d="M100.6 117.957C100.6 118.001 100.6 118.045 100.6 118.084C100.6 118.118 100.596 118.152 100.586 118.182C100.581 118.216 100.566 118.245 100.556 118.274C100.542 118.304 100.522 118.333 100.503 118.357C100.483 118.382 100.459 118.401 100.43 118.416C100.4 118.431 100.376 118.441 100.356 118.441C100.337 118.441 100.317 118.431 100.303 118.421C100.288 118.406 100.278 118.387 100.273 118.362C100.264 118.338 100.264 118.309 100.259 118.279C100.259 118.26 100.259 118.235 100.259 118.216C100.259 118.196 100.259 118.177 100.259 118.152C100.259 118.118 100.264 118.084 100.273 118.05C100.278 118.016 100.293 117.986 100.303 117.957C100.317 117.928 100.332 117.898 100.356 117.874C100.376 117.849 100.4 117.83 100.43 117.815C100.459 117.801 100.483 117.791 100.503 117.791C100.522 117.791 100.542 117.796 100.556 117.81C100.571 117.825 100.581 117.845 100.591 117.869C100.596 117.893 100.596 117.923 100.6 117.957ZM100.869 117.605C100.874 117.591 100.879 117.581 100.883 117.571C100.888 117.561 100.898 117.556 100.908 117.552L100.996 117.498C101.005 117.493 101.01 117.493 101.015 117.498C101.02 117.503 101.02 117.508 101.02 117.517C101.02 117.517 101.02 117.522 101.02 117.527C101.02 117.532 101.02 117.537 101.015 117.537L100.478 118.929C100.474 118.944 100.469 118.953 100.464 118.963C100.459 118.973 100.449 118.978 100.439 118.983L100.352 119.032C100.342 119.036 100.337 119.036 100.332 119.032C100.327 119.027 100.327 119.022 100.327 119.012C100.327 119.012 100.327 119.007 100.327 119.002C100.327 118.997 100.327 118.992 100.332 118.992L100.869 117.605ZM100.386 118.196C100.386 118.226 100.391 118.245 100.395 118.255C100.4 118.265 100.415 118.265 100.43 118.26C100.444 118.25 100.454 118.235 100.464 118.221C100.469 118.201 100.474 118.177 100.474 118.147C100.474 118.108 100.474 118.074 100.474 118.035C100.474 118.006 100.469 117.986 100.464 117.976C100.459 117.967 100.449 117.967 100.43 117.976C100.415 117.986 100.405 118.001 100.395 118.016C100.391 118.035 100.386 118.06 100.386 118.089C100.381 118.128 100.381 118.162 100.386 118.196ZM101.103 118.25C101.103 118.294 101.103 118.338 101.103 118.377C101.103 118.411 101.098 118.445 101.088 118.475C101.084 118.509 101.069 118.538 101.059 118.568C101.044 118.597 101.03 118.626 101.005 118.651C100.986 118.675 100.962 118.695 100.932 118.709C100.903 118.724 100.879 118.734 100.859 118.734C100.84 118.734 100.82 118.729 100.805 118.714C100.791 118.699 100.781 118.68 100.776 118.655C100.771 118.631 100.766 118.602 100.761 118.572C100.761 118.553 100.761 118.528 100.761 118.514C100.761 118.494 100.761 118.475 100.761 118.45C100.761 118.416 100.766 118.382 100.776 118.353C100.786 118.318 100.796 118.289 100.805 118.26C100.82 118.23 100.835 118.201 100.859 118.177C100.879 118.152 100.903 118.133 100.932 118.113C100.962 118.099 100.986 118.089 101.005 118.089C101.025 118.089 101.044 118.094 101.059 118.108C101.074 118.123 101.084 118.143 101.088 118.167C101.098 118.191 101.098 118.216 101.103 118.25ZM100.888 118.494C100.888 118.524 100.893 118.543 100.898 118.553C100.903 118.563 100.913 118.563 100.932 118.553C100.947 118.543 100.957 118.528 100.966 118.514C100.971 118.494 100.976 118.47 100.976 118.441C100.976 118.401 100.976 118.367 100.976 118.328C100.976 118.299 100.971 118.279 100.966 118.27C100.962 118.26 100.947 118.26 100.932 118.265C100.918 118.274 100.903 118.289 100.898 118.304C100.893 118.323 100.888 118.348 100.888 118.377C100.883 118.421 100.883 118.455 100.888 118.494Z"
	            fill="#455A64"
	          />
	          <path
	            d="M98.9803 116.989L98.6241 116.438C98.2336 117.107 97.9311 117.903 97.7798 118.719L98.3556 118.675C98.4679 118.069 98.6924 117.478 98.9803 116.989Z"
	            fill="#455A64"
	          />
	          <path
	            d="M99.9905 115.896V114.958C99.478 115.251 99.0096 115.779 98.624 116.433L98.9803 116.985C99.2633 116.506 99.6098 116.116 99.9905 115.896Z"
	            fill="#455A64"
	          />
	          <path
	            d="M98.2726 119.539C98.2726 119.256 98.3019 118.963 98.3556 118.675L97.7797 118.719C97.7065 119.11 97.6675 119.505 97.6675 119.891C97.6675 120.277 97.7065 120.629 97.7797 120.931L98.3556 120.306C98.3019 120.082 98.2726 119.823 98.2726 119.539Z"
	            fill="#455A64"
	          />
	          <path
	            d="M102.201 116.159C102.05 115.519 101.747 115.07 101.357 114.855C100.971 114.645 100.503 114.665 99.9905 114.958V115.895C100.366 115.676 100.718 115.666 101.001 115.822C101.289 115.978 101.513 116.311 101.625 116.784C101.679 117.009 101.708 117.268 101.708 117.551C101.708 117.835 101.679 118.128 101.625 118.416C101.513 119.017 101.289 119.608 101.001 120.101C100.718 120.585 100.371 120.975 99.9905 121.19C99.6147 121.41 99.2633 121.42 98.9803 121.264C98.6924 121.107 98.4679 120.775 98.3556 120.301L97.7798 120.927C97.9311 121.566 98.2336 122.016 98.624 122.231C99.0096 122.441 99.4781 122.421 99.9905 122.128C100.503 121.835 100.971 121.308 101.357 120.653C101.747 119.984 102.05 119.188 102.201 118.372C102.274 117.981 102.313 117.585 102.313 117.2C102.313 116.814 102.274 116.467 102.201 116.159Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M105.793 113.595L116.631 107.333C116.924 107.162 117.158 107.284 117.158 107.602C117.158 107.919 116.924 108.31 116.631 108.481L105.793 114.743C105.5 114.914 105.266 114.792 105.266 114.475C105.266 114.157 105.5 113.766 105.793 113.595Z"
	            fill="#455A64"
	          />
	          <path
	            d="M105.793 115.906L124.561 105.062C124.854 104.891 125.089 105.013 125.089 105.33C125.089 105.648 124.854 106.039 124.561 106.21L105.793 117.053C105.5 117.224 105.266 117.102 105.266 116.785C105.266 116.467 105.5 116.076 105.793 115.906Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M134.531 103.86L170.151 83.2764C170.444 83.1055 170.678 82.7001 170.678 82.3581V73.2728C170.678 72.9358 170.444 72.799 170.151 72.9651L134.531 93.5438C134.239 93.7148 134.004 94.1202 134.004 94.4621V103.557C134.004 103.894 134.239 104.031 134.531 103.86Z"
	            fill="#F0F0F0"
	          />
	          <path
	            d="M137.811 96.6167C137.811 96.5532 137.821 96.4897 137.835 96.4262C137.855 96.3627 137.874 96.309 137.909 96.2553C137.938 96.2015 137.972 96.1576 138.011 96.1136C138.05 96.0745 138.089 96.0403 138.128 96.0159C138.167 95.9915 138.206 95.9817 138.245 95.9768C138.284 95.9719 138.319 95.9817 138.348 96.0013C138.377 96.0208 138.401 96.0501 138.421 96.0892C138.44 96.1283 138.445 96.182 138.445 96.2455C138.445 96.2797 138.445 96.309 138.441 96.3383C138.436 96.3676 138.431 96.3969 138.421 96.4262C138.416 96.4555 138.406 96.4799 138.397 96.5092C138.387 96.5337 138.377 96.563 138.367 96.5874L138.162 97.1442C138.157 97.154 138.153 97.1589 138.153 97.1735C138.148 97.1833 138.143 97.1931 138.133 97.198L137.962 97.2957C137.957 97.3005 137.953 97.3005 137.948 97.2957C137.943 97.2908 137.943 97.281 137.943 97.2712C137.943 97.2664 137.943 97.2615 137.943 97.2566C137.943 97.2517 137.943 97.2468 137.948 97.2468L138.084 96.8658C138.05 96.8805 138.016 96.8854 137.982 96.8805C137.948 96.8756 137.923 96.8658 137.899 96.8463C137.874 96.8267 137.855 96.7974 137.84 96.7584C137.821 96.7242 137.811 96.6753 137.811 96.6167ZM138.245 96.3627C138.245 96.3432 138.24 96.3236 138.236 96.309C138.231 96.2943 138.221 96.2846 138.211 96.2797C138.201 96.2748 138.187 96.2699 138.172 96.2699C138.157 96.2699 138.143 96.2748 138.128 96.2846C138.114 96.2943 138.099 96.3041 138.084 96.3187C138.07 96.3334 138.06 96.3529 138.045 96.3725C138.035 96.392 138.026 96.4116 138.021 96.436C138.016 96.4555 138.011 96.4799 138.011 96.5044C138.011 96.5288 138.016 96.5434 138.021 96.5581C138.026 96.5727 138.035 96.5825 138.045 96.5874C138.055 96.5923 138.07 96.5972 138.084 96.5972C138.099 96.5972 138.114 96.5923 138.128 96.5825C138.143 96.5727 138.157 96.563 138.172 96.5483C138.187 96.5337 138.197 96.5141 138.211 96.4946C138.221 96.4751 138.231 96.4555 138.236 96.4311C138.245 96.4067 138.245 96.3871 138.245 96.3627Z"
	            fill="#455A64"
	          />
	          <path
	            d="M138.855 95.5957C138.909 95.5664 138.958 95.5518 138.997 95.5518C139.036 95.5518 139.07 95.5664 139.094 95.5957C139.119 95.6201 139.138 95.6592 139.153 95.7081C139.168 95.7569 139.173 95.8106 139.173 95.8693C139.173 95.9181 139.173 95.9669 139.173 96.0207C139.173 96.0744 139.173 96.1233 139.173 96.1672C139.173 96.2307 139.163 96.2893 139.153 96.3528C139.138 96.4163 139.119 96.4749 139.094 96.5287C139.07 96.5824 139.036 96.6361 138.997 96.685C138.958 96.7338 138.909 96.7729 138.855 96.8022C138.802 96.8315 138.753 96.8462 138.714 96.8462C138.675 96.8462 138.641 96.8315 138.616 96.8022C138.592 96.7778 138.572 96.7387 138.558 96.6899C138.543 96.641 138.538 96.5873 138.538 96.5287C138.538 96.4847 138.538 96.4359 138.538 96.3821C138.538 96.3284 138.538 96.2796 138.538 96.2307C138.538 96.1672 138.548 96.1086 138.558 96.0451C138.572 95.9816 138.592 95.923 138.616 95.8693C138.641 95.8106 138.675 95.7618 138.714 95.7129C138.753 95.669 138.802 95.6299 138.855 95.5957ZM138.968 96.2698C138.972 96.1721 138.972 96.0793 138.968 95.9914C138.968 95.9621 138.963 95.9425 138.958 95.9181C138.953 95.8986 138.948 95.879 138.938 95.8693C138.929 95.8595 138.919 95.8497 138.904 95.8497C138.889 95.8497 138.87 95.8546 138.85 95.8644C138.826 95.879 138.811 95.8937 138.797 95.9083C138.782 95.9279 138.772 95.9474 138.763 95.9669C138.753 95.9914 138.748 96.0109 138.743 96.0402C138.738 96.0646 138.738 96.0939 138.738 96.1233C138.733 96.2161 138.733 96.3089 138.738 96.4017C138.738 96.431 138.743 96.4554 138.743 96.4749C138.748 96.4945 138.753 96.514 138.763 96.5238C138.772 96.5336 138.782 96.5433 138.797 96.5433C138.811 96.5433 138.831 96.5384 138.85 96.5287C138.87 96.514 138.889 96.4994 138.904 96.4847C138.919 96.4652 138.929 96.4456 138.938 96.4212C138.948 96.3968 138.953 96.3724 138.958 96.3479C138.968 96.3284 138.968 96.2991 138.968 96.2698Z"
	            fill="#455A64"
	          />
	          <path
	            d="M139.602 95.4101C139.602 95.454 139.602 95.498 139.602 95.5371C139.602 95.5713 139.597 95.6055 139.587 95.6348C139.582 95.669 139.568 95.6983 139.558 95.7276C139.543 95.7569 139.524 95.7862 139.504 95.8106C139.485 95.835 139.46 95.8546 139.431 95.8692C139.402 95.8839 139.377 95.8937 139.358 95.8937C139.338 95.8937 139.319 95.8839 139.304 95.8741C139.29 95.8595 139.28 95.8399 139.275 95.8155C139.265 95.7911 139.265 95.7618 139.26 95.7325C139.26 95.7129 139.26 95.6885 139.26 95.669C139.26 95.6494 139.26 95.6299 139.26 95.6055C139.26 95.5713 139.265 95.5371 139.275 95.5029C139.28 95.4687 139.294 95.4394 139.304 95.4101C139.319 95.3808 139.333 95.3515 139.358 95.327C139.377 95.3026 139.402 95.2831 139.431 95.2684C139.46 95.2538 139.485 95.244 139.504 95.244C139.524 95.244 139.543 95.2489 139.558 95.2635C139.573 95.2782 139.582 95.2977 139.592 95.3222C139.597 95.3466 139.602 95.3759 139.602 95.4101ZM139.875 95.0584C139.88 95.0437 139.885 95.034 139.89 95.0242C139.895 95.0144 139.904 95.0095 139.914 95.0047L140.002 94.9509C140.012 94.946 140.017 94.946 140.022 94.9509C140.026 94.9558 140.026 94.9607 140.026 94.9705C140.026 94.9705 140.026 94.9754 140.026 94.9802C140.026 94.9851 140.026 94.99 140.022 94.99L139.485 96.3821C139.48 96.3968 139.475 96.4065 139.47 96.4163C139.465 96.4261 139.455 96.431 139.446 96.4359L139.358 96.4896C139.348 96.4945 139.343 96.4945 139.338 96.4896C139.333 96.4847 139.333 96.4798 139.333 96.47C139.333 96.47 139.333 96.4652 139.333 96.4603C139.333 96.4554 139.333 96.4505 139.338 96.4505L139.875 95.0584ZM139.387 95.6543C139.387 95.6836 139.392 95.7032 139.397 95.7129C139.402 95.7227 139.416 95.7227 139.431 95.7178C139.446 95.708 139.455 95.6934 139.465 95.6787C139.47 95.6592 139.475 95.6348 139.475 95.6055C139.475 95.5664 139.475 95.5322 139.475 95.4931C139.475 95.4638 139.47 95.4443 139.465 95.4345C139.46 95.4247 139.451 95.4247 139.431 95.4345C139.416 95.4443 139.407 95.4589 139.397 95.4736C139.392 95.4931 139.387 95.5175 139.387 95.5469C139.387 95.581 139.387 95.6152 139.387 95.6543ZM140.105 95.7032C140.105 95.7471 140.105 95.7911 140.105 95.8302C140.105 95.8644 140.1 95.8985 140.09 95.9279C140.085 95.962 140.07 95.9914 140.061 96.0207C140.046 96.05 140.031 96.0793 140.007 96.1037C139.987 96.1281 139.963 96.1477 139.934 96.1623C139.904 96.177 139.88 96.1867 139.861 96.1867C139.841 96.1867 139.821 96.1819 139.807 96.1672C139.792 96.1525 139.782 96.133 139.778 96.1086C139.773 96.0842 139.768 96.0549 139.763 96.0255C139.763 96.006 139.763 95.9816 139.763 95.9669C139.763 95.9474 139.763 95.923 139.763 95.9034C139.763 95.8692 139.768 95.835 139.778 95.8057C139.782 95.7715 139.797 95.7422 139.807 95.7129C139.821 95.6836 139.836 95.6543 139.861 95.6348C139.88 95.6104 139.904 95.5908 139.934 95.5713C139.963 95.5566 139.987 95.5469 140.007 95.5469C140.026 95.5469 140.046 95.5517 140.061 95.5664C140.075 95.581 140.085 95.6006 140.09 95.625C140.1 95.6445 140.105 95.669 140.105 95.7032ZM139.89 95.9474C139.89 95.9767 139.895 95.9962 139.9 96.006C139.904 96.0158 139.914 96.0158 139.934 96.006C139.948 95.9962 139.958 95.9816 139.968 95.9669C139.973 95.9474 139.978 95.923 139.978 95.8937C139.978 95.8546 139.978 95.8204 139.978 95.7813C139.978 95.752 139.973 95.7325 139.968 95.7227C139.963 95.7129 139.948 95.7129 139.934 95.7178C139.919 95.7276 139.904 95.7422 139.9 95.7569C139.895 95.7764 139.89 95.8009 139.89 95.8302C139.89 95.8741 139.89 95.9083 139.89 95.9474Z"
	            fill="#455A64"
	          />
	          <path
	            d="M138.963 93.3685V92.4307C138.45 92.7237 137.982 93.2513 137.596 93.9058L137.952 94.4578C138.235 93.9791 138.587 93.5883 138.963 93.3685Z"
	            fill="#455A64"
	          />
	          <path
	            d="M141.173 93.6318C141.022 92.992 140.719 92.5426 140.329 92.3277C139.943 92.1176 139.475 92.1372 138.963 92.4302V93.3681C139.338 93.1483 139.69 93.1385 139.973 93.2948C140.261 93.4511 140.485 93.7833 140.597 94.2571C140.651 94.4818 140.68 94.7407 140.68 95.024C140.68 95.3073 140.651 95.6003 140.597 95.8885C140.485 96.4893 140.266 97.0755 139.973 97.5688C139.69 98.0475 139.338 98.4432 138.963 98.663C138.587 98.8828 138.235 98.8925 137.952 98.7362C137.664 98.5799 137.44 98.2478 137.328 97.774C137.274 97.5493 137.245 97.2904 137.245 97.0071C137.245 96.7238 137.274 96.4307 137.328 96.1425C137.44 95.5417 137.664 94.9507 137.952 94.4573L137.596 93.9054C137.206 94.5746 136.903 95.3708 136.752 96.1865C136.679 96.5773 136.64 96.9729 136.64 97.3588C136.64 97.7447 136.679 98.0964 136.752 98.3992C136.903 99.0391 137.206 99.4885 137.596 99.7034C137.982 99.9134 138.45 99.8939 138.963 99.6008C139.475 99.3077 139.943 98.7802 140.329 98.1257C140.719 97.4565 141.022 96.6603 141.173 95.8446C141.246 95.4538 141.286 95.0581 141.286 94.6723C141.286 94.2864 141.246 93.9347 141.173 93.6318Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M144.755 91.067L155.594 84.805C155.887 84.634 156.121 84.7561 156.121 85.0736C156.121 85.3911 155.887 85.7819 155.594 85.9528L144.755 92.2149C144.462 92.3858 144.228 92.2637 144.228 91.9462C144.228 91.6287 144.462 91.2379 144.755 91.067Z"
	            fill="#455A64"
	          />
	          <path
	            d="M144.755 93.3782L163.524 82.5344C163.817 82.3635 164.051 82.4856 164.051 82.8031C164.051 83.1206 163.817 83.5114 163.524 83.6823L144.755 94.526C144.462 94.697 144.228 94.5749 144.228 94.2574C144.228 93.9399 144.462 93.5491 144.755 93.3782Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M99.507 128.693L107.11 124.287C107.403 124.116 107.637 124.239 107.637 124.556C107.637 124.874 107.403 125.264 107.11 125.435L99.507 129.841C99.2142 130.012 98.98 129.89 98.98 129.572C98.98 129.255 99.2191 128.864 99.507 128.693Z"
	            fill="#455A64"
	          />
	          <path
	            d="M170.19 90.6965V148.808C170.19 148.969 170.049 149.218 169.907 149.301L95.842 192.1V133.988C95.842 133.827 95.9835 133.578 96.1251 133.495L97.0523 132.958C97.4915 132.704 97.8233 132.127 97.8233 131.619V128.259C97.8233 128.098 97.9648 127.848 98.1064 127.765L108.74 121.621V124.747C108.74 125.313 109.13 125.611 109.521 125.611C109.682 125.611 109.843 125.567 109.999 125.475L170.19 90.6965ZM170.385 90.0811C170.312 90.0811 170.234 90.1055 170.151 90.1543L109.755 125.055C109.672 125.103 109.589 125.128 109.521 125.128C109.345 125.128 109.228 124.991 109.228 124.752V121.391C109.228 121.152 109.111 121.015 108.935 121.015C108.862 121.015 108.784 121.039 108.701 121.088L97.8624 127.35C97.5696 127.521 97.3353 127.927 97.3353 128.269V131.629C97.3353 131.966 97.1011 132.376 96.8083 132.547L95.8811 133.085C95.5882 133.256 95.354 133.661 95.354 134.003V192.349C95.354 192.588 95.4711 192.725 95.6468 192.725C95.72 192.725 95.7981 192.701 95.8811 192.652L170.151 149.731C170.444 149.56 170.678 149.155 170.678 148.813V90.4669C170.678 90.2178 170.561 90.0811 170.385 90.0811Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M100.127 136.523C100.034 136.523 99.9461 136.499 99.868 136.455C99.6923 136.353 99.5898 136.152 99.5898 135.903V133.686C99.5898 133.265 99.8778 132.767 100.239 132.557L106.129 129.158C106.344 129.031 106.573 129.021 106.749 129.118C106.925 129.221 107.027 129.421 107.027 129.67V131.888C107.027 132.308 106.739 132.806 106.378 133.016L100.488 136.416C100.366 136.489 100.244 136.523 100.127 136.523ZM100.488 132.982C100.273 133.109 100.083 133.436 100.083 133.686V135.903C100.083 135.986 100.107 136.03 100.117 136.035C100.127 136.04 100.175 136.04 100.249 135.996L106.139 132.596C106.354 132.469 106.544 132.142 106.544 131.893V129.675C106.544 129.592 106.52 129.548 106.51 129.543C106.5 129.539 106.451 129.539 106.378 129.582L100.488 132.982Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M100.834 133.896L104.675 131.668C104.87 131.556 105.026 131.634 105.026 131.844C105.026 132.054 104.87 132.318 104.675 132.43L100.834 134.658C100.639 134.77 100.483 134.692 100.483 134.477C100.483 134.272 100.644 134.008 100.834 133.896Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M105.568 131.302L105.885 131.756C105.895 131.776 105.919 131.761 105.934 131.727L106.251 130.906C106.266 130.867 106.251 130.828 106.227 130.843L105.592 131.209C105.568 131.224 105.553 131.278 105.568 131.302Z"
	            fill="#455A64"
	          />
	          <path
	            d="M99.3166 157.991C99.5997 157.829 99.8242 157.961 99.8242 158.284C99.8242 158.611 99.5948 159.007 99.3166 159.168C99.0336 159.329 98.8091 159.197 98.8091 158.875C98.8091 158.548 99.0336 158.152 99.3166 157.991Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M103.279 153.409C103.562 153.247 103.787 153.379 103.787 153.702C103.787 154.029 103.557 154.425 103.279 154.586C102.996 154.747 102.771 154.615 102.771 154.293C102.771 153.97 103.001 153.57 103.279 153.409Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M107.247 151.119C107.53 150.957 107.754 151.089 107.754 151.412C107.754 151.739 107.525 152.135 107.247 152.296C106.964 152.457 106.739 152.325 106.739 152.003C106.739 151.68 106.964 151.28 107.247 151.119Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M111.209 149.833C111.492 149.672 111.717 149.804 111.717 150.127C111.717 150.449 111.487 150.849 111.209 151.011C110.926 151.172 110.702 151.04 110.702 150.718C110.702 150.39 110.931 149.995 111.209 149.833Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M115.182 145.706C115.465 145.544 115.689 145.676 115.689 145.999C115.689 146.326 115.46 146.722 115.182 146.883C114.899 147.044 114.674 146.912 114.674 146.59C114.67 146.262 114.899 145.867 115.182 145.706Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M119.139 144.246C119.422 144.084 119.647 144.216 119.647 144.539C119.647 144.866 119.418 145.262 119.139 145.423C118.856 145.584 118.632 145.452 118.632 145.13C118.632 144.802 118.856 144.407 119.139 144.246Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M123.102 139.659C123.385 139.497 123.61 139.629 123.61 139.952C123.61 140.279 123.38 140.675 123.102 140.836C122.819 140.997 122.595 140.865 122.595 140.543C122.595 140.22 122.824 139.825 123.102 139.659Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M127.07 138.516C127.353 138.355 127.577 138.487 127.577 138.809C127.577 139.136 127.348 139.532 127.07 139.693C126.787 139.854 126.562 139.723 126.562 139.4C126.562 139.078 126.787 138.677 127.07 138.516Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M131.032 125.914C131.315 125.752 131.54 125.884 131.54 126.207C131.54 126.534 131.311 126.929 131.032 127.091C130.749 127.252 130.525 127.12 130.525 126.798C130.525 126.475 130.754 126.075 131.032 125.914Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M135 132.787C135.283 132.625 135.507 132.757 135.507 133.08C135.507 133.407 135.278 133.803 135 133.964C134.717 134.125 134.492 133.993 134.492 133.671C134.492 133.348 134.717 132.953 135 132.787Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M138.963 132.787C139.246 132.625 139.47 132.757 139.47 133.08C139.47 133.407 139.241 133.803 138.963 133.964C138.68 134.125 138.455 133.993 138.455 133.671C138.455 133.348 138.68 132.953 138.963 132.787Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M142.925 132.787C143.208 132.625 143.433 132.757 143.433 133.08C143.433 133.402 143.203 133.803 142.925 133.964C142.647 134.125 142.417 133.993 142.417 133.671C142.417 133.348 142.647 132.953 142.925 132.787Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M146.892 125.914C147.175 125.752 147.4 125.884 147.4 126.207C147.4 126.534 147.17 126.929 146.892 127.091C146.609 127.252 146.385 127.12 146.385 126.798C146.38 126.47 146.609 126.075 146.892 125.914Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M150.855 124.6C151.138 124.439 151.363 124.571 151.363 124.893C151.363 125.22 151.133 125.616 150.855 125.777C150.572 125.938 150.348 125.807 150.348 125.484C150.348 125.162 150.577 124.761 150.855 124.6Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M154.832 119.041C155.115 118.88 155.34 119.012 155.34 119.335C155.34 119.662 155.11 120.057 154.832 120.219C154.549 120.38 154.325 120.248 154.325 119.926C154.325 119.603 154.554 119.203 154.832 119.041Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M159.157 119.835C159.357 119.489 159.358 119.116 159.159 119.001C158.961 118.887 158.638 119.074 158.439 119.42C158.239 119.766 158.238 120.139 158.437 120.253C158.635 120.368 158.958 120.181 159.157 119.835Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M163.121 119.837C163.32 119.491 163.321 119.118 163.123 119.003C162.924 118.889 162.602 119.076 162.402 119.422C162.203 119.768 162.202 120.141 162.4 120.255C162.599 120.37 162.921 120.183 163.121 119.837Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M166.716 116.75C166.999 116.589 167.223 116.721 167.223 117.044C167.223 117.371 166.994 117.766 166.716 117.928C166.432 118.089 166.208 117.957 166.208 117.635C166.208 117.312 166.432 116.912 166.716 116.75Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M99.3069 158.709C99.2777 158.709 99.2484 158.7 99.2289 158.68C99.1801 158.636 99.1703 158.558 99.2191 158.509L103.221 153.903C103.231 153.893 103.24 153.883 103.25 153.879L107.188 151.602L111.146 150.318L115.089 146.215C115.104 146.2 115.118 146.19 115.133 146.185L119.066 144.735L123.009 140.177C123.024 140.158 123.044 140.148 123.068 140.138L126.967 139.01L130.91 126.471C130.925 126.427 130.964 126.393 131.013 126.388C131.057 126.383 131.106 126.408 131.13 126.447L135.058 133.261L138.962 133.256L142.847 133.261L146.775 126.447C146.79 126.422 146.815 126.403 146.844 126.393L150.772 125.089L154.715 119.565C154.74 119.53 154.774 119.516 154.813 119.516H162.709L166.647 117.239C166.706 117.205 166.779 117.225 166.813 117.283C166.847 117.342 166.828 117.415 166.769 117.45L162.807 119.74C162.787 119.75 162.768 119.755 162.748 119.755H154.881L150.953 125.26C150.938 125.279 150.919 125.299 150.894 125.304L146.976 126.608L143.032 133.442C143.008 133.481 142.969 133.5 142.925 133.5L138.972 133.495L135 133.5C134.956 133.5 134.917 133.476 134.892 133.442L131.067 126.808L127.187 139.142C127.172 139.181 127.143 139.21 127.104 139.225L123.175 140.358L119.232 144.915C119.218 144.93 119.203 144.945 119.184 144.95L115.245 146.4L111.302 150.508C111.288 150.523 111.273 150.533 111.253 150.538L107.291 151.822L103.396 154.074L99.4045 158.665C99.3753 158.695 99.3411 158.709 99.3069 158.709Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M99.3167 161.111C99.2337 161.111 99.1508 161.067 99.1069 160.989C99.0385 160.872 99.0776 160.725 99.1947 160.657L166.593 121.707C166.711 121.639 166.857 121.678 166.925 121.795C166.994 121.913 166.955 122.059 166.837 122.128L99.4387 161.077C99.3997 161.101 99.3557 161.111 99.3167 161.111Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M99.3166 155.7C99.5996 155.538 99.8241 155.67 99.8241 155.993C99.8241 156.315 99.5948 156.716 99.3166 156.877C99.0336 157.038 98.8091 156.906 98.8091 156.584C98.8091 156.256 99.0336 155.861 99.3166 155.7Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M103.279 148.827C103.562 148.665 103.787 148.797 103.787 149.12C103.787 149.447 103.557 149.843 103.279 150.004C102.996 150.165 102.771 150.033 102.771 149.711C102.771 149.388 103.001 148.988 103.279 148.827Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M107.617 148.764C107.816 148.418 107.817 148.045 107.619 147.93C107.42 147.815 107.098 148.003 106.898 148.349C106.699 148.694 106.698 149.068 106.896 149.182C107.095 149.297 107.417 149.109 107.617 148.764Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M111.209 139.659C111.492 139.497 111.717 139.629 111.717 139.952C111.717 140.279 111.487 140.675 111.209 140.836C110.926 140.997 110.702 140.865 110.702 140.543C110.702 140.22 110.926 139.825 111.209 139.659Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M115.182 141.949C115.465 141.787 115.689 141.919 115.689 142.242C115.689 142.569 115.46 142.965 115.182 143.126C114.899 143.287 114.674 143.155 114.674 142.833C114.67 142.51 114.899 142.115 115.182 141.949Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M119.139 140.806C119.422 140.645 119.647 140.777 119.647 141.099C119.647 141.426 119.418 141.822 119.139 141.983C118.856 142.144 118.632 142.013 118.632 141.69C118.632 141.363 118.856 140.967 119.139 140.806Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M123.102 137.367C123.385 137.205 123.61 137.337 123.61 137.66C123.61 137.987 123.38 138.383 123.102 138.544C122.819 138.705 122.595 138.573 122.595 138.251C122.595 137.928 122.824 137.533 123.102 137.367Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M127.07 132.786C127.353 132.624 127.577 132.756 127.577 133.079C127.577 133.406 127.348 133.802 127.07 133.963C126.786 134.124 126.562 133.992 126.562 133.67C126.562 133.347 126.786 132.952 127.07 132.786Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M131.032 131.643C131.316 131.482 131.54 131.614 131.54 131.936C131.54 132.263 131.311 132.659 131.032 132.82C130.749 132.981 130.525 132.85 130.525 132.527C130.525 132.205 130.754 131.804 131.032 131.643Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M135 128.204C135.283 128.042 135.507 128.174 135.507 128.497C135.507 128.824 135.278 129.22 135 129.381C134.717 129.542 134.492 129.41 134.492 129.088C134.487 128.76 134.717 128.365 135 128.204Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M138.963 128.204C139.246 128.042 139.47 128.174 139.47 128.497C139.47 128.824 139.241 129.22 138.963 129.381C138.68 129.542 138.455 129.41 138.455 129.088C138.455 128.765 138.68 128.37 138.963 128.204Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M142.925 119.04C143.208 118.879 143.433 119.011 143.433 119.334C143.433 119.656 143.203 120.056 142.925 120.218C142.647 120.379 142.417 120.247 142.417 119.925C142.417 119.597 142.647 119.202 142.925 119.04Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M146.892 123.588C147.175 123.427 147.4 123.559 147.4 123.881C147.4 124.209 147.17 124.604 146.892 124.766C146.609 124.927 146.385 124.795 146.385 124.472C146.385 124.15 146.609 123.754 146.892 123.588Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M150.855 119.04C151.138 118.879 151.363 119.011 151.363 119.334C151.363 119.661 151.133 120.056 150.855 120.218C150.572 120.379 150.348 120.247 150.348 119.925C150.348 119.602 150.577 119.202 150.855 119.04Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M154.822 116.749C155.106 116.588 155.33 116.72 155.33 117.043C155.33 117.37 155.101 117.765 154.822 117.927C154.539 118.088 154.315 117.956 154.315 117.634C154.315 117.311 154.539 116.911 154.822 116.749Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M158.785 116.749C159.068 116.588 159.293 116.72 159.293 117.043C159.293 117.37 159.064 117.765 158.785 117.927C158.502 118.088 158.278 117.956 158.278 117.634C158.278 117.306 158.502 116.911 158.785 116.749Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M162.748 114.458C163.031 114.297 163.255 114.429 163.255 114.752C163.255 115.079 163.026 115.474 162.748 115.636C162.465 115.797 162.24 115.665 162.24 115.343C162.24 115.015 162.47 114.62 162.748 114.458Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M166.715 114.458C166.998 114.297 167.223 114.429 167.223 114.752C167.223 115.079 166.993 115.474 166.715 115.636C166.432 115.797 166.208 115.665 166.208 115.343C166.203 115.015 166.432 114.62 166.715 114.458Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M99.3166 156.407C99.297 156.407 99.2726 156.403 99.258 156.393C99.1994 156.359 99.1799 156.285 99.2141 156.227L103.206 149.335C103.226 149.305 103.25 149.286 103.284 149.276L107.164 148.446L111.102 140.191C111.117 140.161 111.146 140.137 111.175 140.127C111.209 140.117 111.243 140.122 111.273 140.137L115.196 142.403L119.081 141.275L123.019 137.861L126.977 133.289C126.992 133.269 127.011 133.259 127.035 133.25L130.974 132.112L134.917 128.692C134.941 128.673 134.966 128.663 134.995 128.663H138.879L142.813 119.573C142.827 119.534 142.866 119.509 142.905 119.5C142.944 119.495 142.988 119.509 143.018 119.539L146.888 124.013L150.758 119.539C150.767 119.529 150.777 119.519 150.787 119.514L154.764 117.214C154.784 117.204 154.803 117.199 154.823 117.199H158.756L162.68 114.933C162.699 114.923 162.719 114.918 162.738 114.918H166.701C166.769 114.918 166.823 114.972 166.823 115.04C166.823 115.108 166.769 115.162 166.701 115.162H162.767L158.844 117.429C158.824 117.438 158.805 117.443 158.785 117.443H154.852L150.919 119.715L146.966 124.282C146.917 124.335 146.829 124.335 146.78 124.282L142.944 119.846L139.055 128.834C139.036 128.878 138.992 128.907 138.943 128.907H135.024L131.096 132.312C131.081 132.322 131.066 132.331 131.052 132.336L127.123 133.47L123.175 138.027L119.203 141.47C119.188 141.48 119.174 141.49 119.159 141.495L115.196 142.643C115.162 142.653 115.128 142.648 115.104 142.633L111.248 140.406L107.339 148.592C107.325 148.626 107.291 148.651 107.256 148.661L103.372 149.491L99.4044 156.334C99.3995 156.388 99.3605 156.407 99.3166 156.407Z"
	            fill="#69F0AE"
	          />
	          <g opacity="0.3">
	            <g opacity="0.3">
	              <g opacity="0.3">
	                <path
	                  opacity="0.3"
	                  d="M99.3166 155.7C99.5996 155.538 99.8241 155.67 99.8241 155.993C99.8241 156.315 99.5948 156.716 99.3166 156.877C99.0336 157.038 98.8091 156.906 98.8091 156.584C98.8091 156.256 99.0336 155.861 99.3166 155.7Z"
	                  fill="black"
	                />
	              </g>
	              <g opacity="0.3">
	                <path
	                  opacity="0.3"
	                  d="M103.279 148.827C103.562 148.665 103.787 148.797 103.787 149.12C103.787 149.447 103.557 149.843 103.279 150.004C102.996 150.165 102.771 150.033 102.771 149.711C102.771 149.388 103.001 148.988 103.279 148.827Z"
	                  fill="black"
	                />
	              </g>
	              <g opacity="0.3">
	                <path
	                  opacity="0.3"
	                  d="M107.617 148.764C107.816 148.418 107.817 148.045 107.619 147.93C107.42 147.815 107.098 148.003 106.898 148.349C106.699 148.694 106.698 149.068 106.896 149.182C107.095 149.297 107.417 149.109 107.617 148.764Z"
	                  fill="black"
	                />
	              </g>
	              <g opacity="0.3">
	                <path
	                  opacity="0.3"
	                  d="M111.209 139.659C111.492 139.497 111.717 139.629 111.717 139.952C111.717 140.279 111.487 140.675 111.209 140.836C110.926 140.997 110.702 140.865 110.702 140.543C110.702 140.22 110.926 139.825 111.209 139.659Z"
	                  fill="black"
	                />
	              </g>
	              <g opacity="0.3">
	                <path
	                  opacity="0.3"
	                  d="M115.182 141.949C115.465 141.787 115.689 141.919 115.689 142.242C115.689 142.569 115.46 142.965 115.182 143.126C114.899 143.287 114.674 143.155 114.674 142.833C114.67 142.51 114.899 142.115 115.182 141.949Z"
	                  fill="black"
	                />
	              </g>
	              <g opacity="0.3">
	                <path
	                  opacity="0.3"
	                  d="M119.139 140.806C119.422 140.645 119.647 140.777 119.647 141.099C119.647 141.426 119.418 141.822 119.139 141.983C118.856 142.144 118.632 142.013 118.632 141.69C118.632 141.363 118.856 140.967 119.139 140.806Z"
	                  fill="black"
	                />
	              </g>
	              <g opacity="0.3">
	                <path
	                  opacity="0.3"
	                  d="M123.102 137.367C123.385 137.205 123.61 137.337 123.61 137.66C123.61 137.987 123.38 138.383 123.102 138.544C122.819 138.705 122.595 138.573 122.595 138.251C122.595 137.928 122.824 137.533 123.102 137.367Z"
	                  fill="black"
	                />
	              </g>
	              <g opacity="0.3">
	                <path
	                  opacity="0.3"
	                  d="M127.07 132.786C127.353 132.624 127.577 132.756 127.577 133.079C127.577 133.406 127.348 133.802 127.07 133.963C126.786 134.124 126.562 133.992 126.562 133.67C126.562 133.347 126.786 132.952 127.07 132.786Z"
	                  fill="black"
	                />
	              </g>
	              <g opacity="0.3">
	                <path
	                  opacity="0.3"
	                  d="M131.032 131.643C131.316 131.482 131.54 131.614 131.54 131.936C131.54 132.263 131.311 132.659 131.032 132.82C130.749 132.981 130.525 132.85 130.525 132.527C130.525 132.205 130.754 131.804 131.032 131.643Z"
	                  fill="black"
	                />
	              </g>
	              <g opacity="0.3">
	                <path
	                  opacity="0.3"
	                  d="M135 128.204C135.283 128.042 135.507 128.174 135.507 128.497C135.507 128.824 135.278 129.22 135 129.381C134.717 129.542 134.492 129.41 134.492 129.088C134.487 128.76 134.717 128.365 135 128.204Z"
	                  fill="black"
	                />
	              </g>
	              <g opacity="0.3">
	                <path
	                  opacity="0.3"
	                  d="M138.963 128.204C139.246 128.042 139.47 128.174 139.47 128.497C139.47 128.824 139.241 129.22 138.963 129.381C138.68 129.542 138.455 129.41 138.455 129.088C138.455 128.765 138.68 128.37 138.963 128.204Z"
	                  fill="black"
	                />
	              </g>
	              <g opacity="0.3">
	                <path
	                  opacity="0.3"
	                  d="M142.925 119.04C143.208 118.879 143.433 119.011 143.433 119.334C143.433 119.656 143.203 120.056 142.925 120.218C142.647 120.379 142.417 120.247 142.417 119.925C142.417 119.597 142.647 119.202 142.925 119.04Z"
	                  fill="black"
	                />
	              </g>
	              <g opacity="0.3">
	                <path
	                  opacity="0.3"
	                  d="M146.892 123.588C147.175 123.427 147.4 123.559 147.4 123.881C147.4 124.209 147.17 124.604 146.892 124.766C146.609 124.927 146.385 124.795 146.385 124.472C146.385 124.15 146.609 123.754 146.892 123.588Z"
	                  fill="black"
	                />
	              </g>
	              <g opacity="0.3">
	                <path
	                  opacity="0.3"
	                  d="M150.855 119.04C151.138 118.879 151.363 119.011 151.363 119.334C151.363 119.661 151.133 120.056 150.855 120.218C150.572 120.379 150.348 120.247 150.348 119.925C150.348 119.602 150.577 119.202 150.855 119.04Z"
	                  fill="black"
	                />
	              </g>
	              <g opacity="0.3">
	                <path
	                  opacity="0.3"
	                  d="M154.822 116.749C155.106 116.588 155.33 116.72 155.33 117.043C155.33 117.37 155.101 117.765 154.822 117.927C154.539 118.088 154.315 117.956 154.315 117.634C154.315 117.311 154.539 116.911 154.822 116.749Z"
	                  fill="black"
	                />
	              </g>
	              <g opacity="0.3">
	                <path
	                  opacity="0.3"
	                  d="M158.785 116.749C159.068 116.588 159.293 116.72 159.293 117.043C159.293 117.37 159.064 117.765 158.785 117.927C158.502 118.088 158.278 117.956 158.278 117.634C158.278 117.306 158.502 116.911 158.785 116.749Z"
	                  fill="black"
	                />
	              </g>
	              <g opacity="0.3">
	                <path
	                  opacity="0.3"
	                  d="M162.748 114.458C163.031 114.297 163.255 114.429 163.255 114.752C163.255 115.079 163.026 115.474 162.748 115.636C162.465 115.797 162.24 115.665 162.24 115.343C162.24 115.015 162.47 114.62 162.748 114.458Z"
	                  fill="black"
	                />
	              </g>
	              <g opacity="0.3">
	                <path
	                  opacity="0.3"
	                  d="M166.715 114.458C166.998 114.297 167.223 114.429 167.223 114.752C167.223 115.079 166.993 115.474 166.715 115.636C166.432 115.797 166.208 115.665 166.208 115.343C166.203 115.015 166.432 114.62 166.715 114.458Z"
	                  fill="black"
	                />
	              </g>
	            </g>
	            <g opacity="0.3">
	              <path
	                opacity="0.3"
	                d="M99.3166 156.407C99.297 156.407 99.2726 156.403 99.258 156.393C99.1994 156.359 99.1799 156.285 99.2141 156.227L103.206 149.335C103.226 149.305 103.25 149.286 103.284 149.276L107.164 148.446L111.102 140.191C111.117 140.161 111.146 140.137 111.175 140.127C111.209 140.117 111.243 140.122 111.273 140.137L115.196 142.403L119.081 141.275L123.019 137.861L126.977 133.289C126.992 133.269 127.011 133.259 127.035 133.25L130.974 132.112L134.917 128.692C134.941 128.673 134.966 128.663 134.995 128.663H138.879L142.813 119.573C142.827 119.534 142.866 119.509 142.905 119.5C142.944 119.495 142.988 119.509 143.018 119.539L146.888 124.013L150.758 119.539C150.767 119.529 150.777 119.519 150.787 119.514L154.764 117.214C154.784 117.204 154.803 117.199 154.823 117.199H158.756L162.68 114.933C162.699 114.923 162.719 114.918 162.738 114.918H166.701C166.769 114.918 166.823 114.972 166.823 115.04C166.823 115.108 166.769 115.162 166.701 115.162H162.767L158.844 117.429C158.824 117.438 158.805 117.443 158.785 117.443H154.852L150.919 119.715L146.966 124.282C146.917 124.335 146.829 124.335 146.78 124.282L142.944 119.846L139.055 128.834C139.036 128.878 138.992 128.907 138.943 128.907H135.024L131.096 132.312C131.081 132.322 131.066 132.331 131.052 132.336L127.123 133.47L123.175 138.027L119.203 141.47C119.188 141.48 119.174 141.49 119.159 141.495L115.196 142.643C115.162 142.653 115.128 142.648 115.104 142.633L111.248 140.406L107.339 148.592C107.325 148.626 107.291 148.651 107.256 148.661L103.372 149.491L99.4044 156.334C99.3995 156.388 99.3605 156.407 99.3166 156.407Z"
	                fill="black"
	              />
	            </g>
	          </g>
	          <path
	            d="M101.395 138.696L105.236 136.469C105.431 136.357 105.587 136.435 105.587 136.65C105.587 136.865 105.431 137.124 105.236 137.236L101.395 139.463C101.2 139.576 101.044 139.498 101.044 139.283C101.039 139.073 101.2 138.809 101.395 138.696Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M99.3166 139.659C99.5997 139.497 99.8242 139.629 99.8242 139.952C99.8242 140.279 99.5948 140.675 99.3166 140.836C99.0336 140.997 98.8091 140.865 98.8091 140.543C98.8091 140.22 99.0336 139.825 99.3166 139.659Z"
	            fill="#69F0AE"
	          />
	          <path
	            opacity="0.3"
	            d="M99.3166 139.659C99.5997 139.497 99.8242 139.629 99.8242 139.952C99.8242 140.279 99.5948 140.675 99.3166 140.836C99.0336 140.997 98.8091 140.865 98.8091 140.543C98.8091 140.22 99.0336 139.825 99.3166 139.659Z"
	            fill="black"
	          />
	          <path
	            d="M101.395 140.983L105.236 138.755C105.431 138.643 105.587 138.721 105.587 138.936C105.587 139.146 105.431 139.41 105.236 139.522L101.395 141.75C101.2 141.862 101.044 141.784 101.044 141.574C101.039 141.359 101.2 141.095 101.395 140.983Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M99.3166 141.95C99.5997 141.788 99.8242 141.92 99.8242 142.243C99.8242 142.57 99.5948 142.966 99.3166 143.127C99.0336 143.288 98.8091 143.156 98.8091 142.834C98.8091 142.511 99.0336 142.116 99.3166 141.95Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M99.3165 172.479C99.2872 172.479 99.253 172.469 99.2335 172.444C99.1847 172.396 99.1847 172.322 99.2286 172.273L101.239 170.202L103.216 169.953L105.212 167.374L107.208 167.648L109.145 165.894L111.126 164.707L113.147 161.908L115.152 162.539L117.08 160.814C117.129 160.77 117.207 160.775 117.251 160.824C117.295 160.873 117.29 160.951 117.241 160.995L115.211 162.812L113.244 162.197L111.278 164.908L109.296 166.095L107.291 167.912L105.324 167.643L103.352 170.193L101.361 170.447L99.4092 172.454C99.3799 172.469 99.3506 172.479 99.3165 172.479Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M100.102 165.782C100.117 165.767 100.131 165.752 100.151 165.738C100.17 165.723 100.19 165.708 100.205 165.699C100.312 165.635 100.415 165.606 100.502 165.606C100.595 165.606 100.673 165.64 100.741 165.694C100.81 165.752 100.859 165.835 100.898 165.943C100.937 166.05 100.956 166.182 100.956 166.334C100.956 166.485 100.937 166.636 100.898 166.793C100.859 166.944 100.81 167.091 100.741 167.227C100.673 167.364 100.595 167.486 100.502 167.594C100.41 167.701 100.312 167.789 100.205 167.848C100.097 167.911 99.9948 167.941 99.9021 167.941C99.8094 167.941 99.7313 167.906 99.663 167.848C99.5946 167.789 99.5458 167.706 99.5068 167.599C99.4678 167.491 99.4482 167.359 99.4482 167.208C99.4482 167.12 99.4531 167.037 99.4678 166.954C99.4824 166.871 99.497 166.793 99.5166 166.715C99.5361 166.636 99.5605 166.563 99.5849 166.485C99.6093 166.412 99.6337 166.338 99.6581 166.27L100.185 164.766C100.195 164.746 100.205 164.722 100.219 164.692C100.229 164.663 100.249 164.644 100.278 164.624L100.444 164.526C100.463 164.517 100.473 164.517 100.488 164.531C100.497 164.546 100.502 164.565 100.502 164.59C100.502 164.604 100.502 164.619 100.497 164.629C100.493 164.639 100.493 164.648 100.488 164.658L100.102 165.782ZM99.7264 167.052C99.7264 167.14 99.7362 167.218 99.7606 167.286C99.785 167.354 99.8143 167.408 99.8533 167.447C99.8923 167.486 99.9411 167.506 100.005 167.511C100.063 167.516 100.131 167.496 100.205 167.452C100.278 167.408 100.346 167.354 100.405 167.281C100.463 167.208 100.512 167.13 100.556 167.047C100.595 166.959 100.629 166.871 100.649 166.778C100.668 166.685 100.683 166.592 100.683 166.505C100.683 166.417 100.673 166.338 100.649 166.27C100.624 166.202 100.595 166.148 100.556 166.109C100.517 166.07 100.463 166.05 100.405 166.045C100.346 166.041 100.278 166.06 100.205 166.104C100.131 166.148 100.063 166.202 100.005 166.275C99.946 166.348 99.8972 166.426 99.8533 166.509C99.8143 166.597 99.7801 166.685 99.7606 166.778C99.741 166.871 99.7264 166.959 99.7264 167.052Z"
	            fill="#455A64"
	          />
	          <path
	            d="M101.449 166.333C101.459 166.377 101.473 166.416 101.488 166.45C101.508 166.489 101.532 166.514 101.566 166.533C101.6 166.553 101.649 166.553 101.703 166.548C101.761 166.538 101.835 166.509 101.927 166.455C101.986 166.421 102.044 166.377 102.098 166.323C102.152 166.27 102.201 166.206 102.24 166.138C102.279 166.065 102.313 165.991 102.337 165.903C102.362 165.82 102.371 165.727 102.371 165.63C102.371 165.532 102.362 165.459 102.337 165.405C102.313 165.351 102.284 165.317 102.245 165.298C102.205 165.278 102.157 165.278 102.103 165.293C102.049 165.307 101.991 165.332 101.927 165.366L101.688 165.508C101.669 165.522 101.649 165.517 101.635 165.503C101.62 165.488 101.61 165.464 101.61 165.43V165.268C101.61 165.239 101.615 165.215 101.625 165.185C101.635 165.156 101.644 165.132 101.654 165.107L102.176 163.94L101.342 164.423C101.322 164.438 101.303 164.433 101.288 164.418C101.273 164.404 101.264 164.379 101.264 164.345V164.184C101.264 164.15 101.273 164.12 101.288 164.086C101.303 164.052 101.322 164.033 101.342 164.018L102.484 163.358C102.503 163.344 102.523 163.349 102.537 163.363C102.552 163.378 102.562 163.402 102.562 163.437V163.598C102.562 163.627 102.557 163.652 102.547 163.686C102.537 163.715 102.523 163.749 102.508 163.783L101.996 164.936C102.093 164.882 102.181 164.853 102.259 164.853C102.342 164.848 102.406 164.873 102.464 164.917C102.523 164.961 102.567 165.034 102.596 165.127C102.63 165.219 102.645 165.337 102.645 165.478C102.645 165.63 102.625 165.776 102.586 165.923C102.547 166.065 102.493 166.196 102.43 166.319C102.367 166.436 102.288 166.543 102.201 166.641C102.113 166.739 102.02 166.812 101.922 166.87C101.791 166.944 101.683 166.988 101.586 166.993C101.493 167.002 101.415 166.983 101.351 166.944C101.293 166.905 101.244 166.846 101.215 166.768C101.186 166.69 101.171 166.607 101.166 166.509C101.166 166.48 101.171 166.455 101.186 166.426C101.2 166.402 101.215 166.382 101.229 166.372L101.361 166.294C101.381 166.279 101.4 166.279 101.41 166.294C101.439 166.294 101.444 166.309 101.449 166.333Z"
	            fill="#455A64"
	          />
	          <path
	            d="M103.177 165.337C103.186 165.381 103.201 165.42 103.216 165.459C103.235 165.498 103.26 165.523 103.294 165.542C103.328 165.562 103.377 165.562 103.43 165.552C103.489 165.542 103.562 165.513 103.655 165.459C103.713 165.425 103.772 165.381 103.826 165.327C103.879 165.274 103.928 165.21 103.967 165.142C104.006 165.068 104.04 164.99 104.065 164.907C104.089 164.824 104.099 164.731 104.099 164.634C104.099 164.536 104.089 164.463 104.065 164.409C104.04 164.355 104.011 164.321 103.972 164.302C103.933 164.282 103.884 164.282 103.831 164.297C103.777 164.311 103.718 164.336 103.655 164.37L103.416 164.512C103.396 164.521 103.377 164.521 103.362 164.507C103.347 164.492 103.338 164.468 103.338 164.433V164.272C103.338 164.248 103.343 164.219 103.352 164.189C103.362 164.16 103.372 164.135 103.382 164.111L103.904 162.944L103.069 163.427C103.05 163.442 103.03 163.437 103.016 163.422C103.001 163.408 102.991 163.383 102.991 163.349V163.188C102.991 163.154 103.001 163.124 103.016 163.09C103.03 163.056 103.05 163.036 103.069 163.022L104.211 162.362C104.231 162.348 104.25 162.353 104.265 162.367C104.28 162.382 104.289 162.406 104.289 162.441V162.602C104.289 162.631 104.284 162.655 104.275 162.69C104.265 162.719 104.25 162.753 104.236 162.787L103.723 163.94C103.821 163.886 103.909 163.857 103.987 163.857C104.07 163.852 104.138 163.877 104.192 163.921C104.25 163.965 104.294 164.038 104.323 164.131C104.358 164.223 104.372 164.341 104.372 164.482C104.372 164.634 104.353 164.78 104.314 164.927C104.275 165.068 104.221 165.2 104.158 165.322C104.094 165.445 104.016 165.547 103.928 165.645C103.84 165.743 103.748 165.816 103.65 165.874C103.518 165.948 103.406 165.992 103.313 165.997C103.221 166.006 103.142 165.987 103.079 165.948C103.02 165.909 102.972 165.85 102.942 165.772C102.913 165.694 102.898 165.606 102.894 165.513C102.894 165.484 102.898 165.459 102.913 165.43C102.928 165.405 102.942 165.386 102.957 165.376L103.089 165.298C103.108 165.283 103.128 165.288 103.138 165.298C103.162 165.298 103.172 165.313 103.177 165.337Z"
	            fill="#455A64"
	          />
	          <path
	            d="M99.6727 174.057L116.802 164.122C116.997 164.009 117.153 164.087 117.153 164.297C117.153 164.508 116.997 164.771 116.802 164.884L99.6727 174.819C99.4775 174.931 99.3213 174.853 99.3213 174.643C99.3213 174.433 99.4823 174.169 99.6727 174.057Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M99.6727 162.597L103.513 160.37C103.708 160.257 103.865 160.335 103.865 160.546C103.865 160.756 103.708 161.019 103.513 161.132L99.6727 163.359C99.4775 163.471 99.3213 163.393 99.3213 163.183C99.3213 162.968 99.4823 162.709 99.6727 162.597Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M99.3165 186.214C99.2872 186.214 99.253 186.204 99.2335 186.18C99.1847 186.131 99.1847 186.058 99.2286 186.009L101.239 183.938L103.225 183.684L105.226 181.93L107.154 181.403L109.165 177.392L111.18 178.379L113.127 176.665L113.161 176.66L115.094 176.293L117.046 172.918C117.08 172.86 117.153 172.84 117.212 172.874C117.27 172.908 117.29 172.982 117.256 173.04L115.25 176.513L113.239 176.894L111.219 178.672L109.272 177.72L107.32 181.613L105.314 182.16L103.323 183.918L101.347 184.167L99.3946 186.175C99.3799 186.204 99.3506 186.214 99.3165 186.214Z"
	            fill="#69F0AE"
	          />
	          <g opacity="0.3">
	            <path
	              opacity="0.3"
	              d="M99.3165 186.214C99.2872 186.214 99.253 186.204 99.2335 186.18C99.1847 186.131 99.1847 186.058 99.2286 186.009L101.239 183.938L103.225 183.684L105.226 181.93L107.154 181.403L109.165 177.392L111.18 178.379L113.127 176.665L113.161 176.66L115.094 176.293L117.046 172.918C117.08 172.86 117.153 172.84 117.212 172.874C117.27 172.908 117.29 172.982 117.256 173.04L115.25 176.513L113.239 176.894L111.219 178.672L109.272 177.72L107.32 181.613L105.314 182.16L103.323 183.918L101.347 184.167L99.3946 186.175C99.3799 186.204 99.3506 186.214 99.3165 186.214Z"
	              fill="black"
	            />
	          </g>
	          <path
	            d="M100.331 181.349C100.331 181.383 100.322 181.412 100.307 181.446C100.292 181.481 100.273 181.5 100.253 181.515L100.136 181.583C100.117 181.598 100.097 181.593 100.083 181.578C100.068 181.564 100.058 181.539 100.058 181.505V179.043L99.5896 179.864C99.5701 179.898 99.5506 179.918 99.5311 179.923C99.5115 179.927 99.492 179.923 99.4774 179.908L99.409 179.81C99.3944 179.791 99.3895 179.766 99.3944 179.732C99.3993 179.698 99.409 179.664 99.4237 179.634L100.043 178.54C100.058 178.516 100.073 178.496 100.092 178.482C100.107 178.472 100.122 178.462 100.136 178.452L100.253 178.384C100.273 178.369 100.292 178.374 100.307 178.389C100.322 178.403 100.331 178.428 100.331 178.462V181.349Z"
	            fill="#455A64"
	          />
	          <path
	            d="M101.595 179.091C101.654 178.979 101.698 178.872 101.727 178.769C101.756 178.666 101.771 178.549 101.771 178.417C101.771 178.261 101.742 178.144 101.683 178.07C101.625 178.002 101.527 178.002 101.4 178.075C101.332 178.114 101.273 178.163 101.229 178.217C101.18 178.276 101.141 178.339 101.112 178.408C101.083 178.476 101.054 178.554 101.039 178.632C101.019 178.71 101.005 178.789 100.995 178.867C100.99 178.901 100.98 178.935 100.966 178.959C100.951 178.984 100.936 179.003 100.922 179.013L100.79 179.091C100.77 179.101 100.756 179.101 100.746 179.086C100.731 179.072 100.727 179.052 100.727 179.028C100.727 178.916 100.746 178.793 100.775 178.662C100.805 178.53 100.849 178.403 100.907 178.276C100.966 178.149 101.034 178.031 101.122 177.924C101.205 177.816 101.302 177.729 101.41 177.67C101.517 177.606 101.61 177.582 101.693 177.582C101.776 177.587 101.844 177.616 101.898 177.67C101.951 177.724 101.995 177.802 102.02 177.904C102.049 178.007 102.064 178.119 102.064 178.251C102.064 178.349 102.059 178.437 102.049 178.52C102.039 178.603 102.025 178.686 102 178.769C101.976 178.852 101.951 178.935 101.912 179.023C101.878 179.106 101.834 179.199 101.786 179.296L101.136 180.601L102.025 180.088C102.044 180.073 102.064 180.078 102.078 180.093C102.093 180.107 102.103 180.132 102.103 180.166V180.327C102.103 180.361 102.093 180.391 102.078 180.425C102.064 180.459 102.044 180.479 102.025 180.493L100.775 181.216C100.756 181.231 100.736 181.226 100.722 181.211C100.707 181.197 100.697 181.172 100.697 181.138V180.977C100.697 180.943 100.702 180.913 100.712 180.884C100.722 180.855 100.736 180.816 100.761 180.772L101.595 179.091Z"
	            fill="#455A64"
	          />
	          <path
	            d="M103.889 177.47C103.889 177.602 103.894 177.729 103.894 177.846C103.894 177.963 103.894 178.09 103.889 178.227C103.889 178.403 103.869 178.574 103.84 178.74C103.811 178.906 103.767 179.062 103.703 179.209C103.645 179.355 103.567 179.482 103.474 179.6C103.381 179.717 103.274 179.81 103.147 179.883C103.02 179.956 102.908 179.99 102.82 179.981C102.727 179.971 102.654 179.927 102.591 179.854C102.532 179.78 102.483 179.673 102.454 179.541C102.425 179.409 102.41 179.258 102.405 179.082C102.405 178.95 102.4 178.823 102.4 178.706C102.4 178.588 102.4 178.461 102.405 178.325C102.405 178.149 102.425 177.978 102.454 177.812C102.483 177.646 102.527 177.489 102.591 177.343C102.649 177.196 102.727 177.064 102.82 176.952C102.913 176.835 103.02 176.737 103.147 176.664C103.274 176.591 103.386 176.561 103.474 176.571C103.567 176.581 103.64 176.625 103.703 176.703C103.762 176.776 103.806 176.884 103.84 177.016C103.874 177.148 103.889 177.299 103.889 177.47ZM102.683 178.926C102.688 179.204 102.727 179.39 102.805 179.477C102.884 179.565 103.001 179.565 103.147 179.477C103.298 179.39 103.411 179.258 103.489 179.077C103.567 178.896 103.611 178.667 103.611 178.378C103.611 178.242 103.616 178.115 103.616 177.997C103.616 177.88 103.616 177.753 103.611 177.621C103.606 177.338 103.567 177.152 103.489 177.064C103.411 176.977 103.298 176.972 103.147 177.06C102.996 177.148 102.884 177.279 102.805 177.46C102.727 177.641 102.683 177.875 102.683 178.159C102.683 178.295 102.679 178.422 102.679 178.54C102.683 178.667 102.683 178.789 102.683 178.926Z"
	            fill="#455A64"
	          />
	          <path
	            d="M99.6727 187.791L116.802 177.856C116.997 177.744 117.153 177.822 117.153 178.037C117.153 178.247 116.997 178.51 116.802 178.623L99.6727 188.558C99.4775 188.67 99.3213 188.592 99.3213 188.377C99.3213 188.167 99.4823 187.903 99.6727 187.791Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M99.6727 176.332L103.513 174.105C103.708 173.993 103.865 174.071 103.865 174.281C103.865 174.491 103.708 174.755 103.513 174.867L99.6727 177.094C99.4775 177.207 99.3213 177.129 99.3213 176.918C99.3213 176.704 99.4823 176.445 99.6727 176.332Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M123.102 158.704C123.068 158.704 123.029 158.69 123.004 158.66C122.96 158.607 122.97 158.528 123.024 158.489L125.005 156.907L127.001 154.626L129.026 154.333L130.959 153.898L132.96 151.534L134.931 151.881L136.908 148.749L138.913 148.784L140.856 147.045C140.904 147.001 140.982 147.006 141.026 147.055C141.07 147.103 141.065 147.182 141.017 147.226L139.001 149.028L137.034 148.994L135.043 152.149L133.047 151.797L131.086 154.118L129.065 154.572L127.118 154.855L125.166 157.087L123.17 158.685C123.156 158.699 123.131 158.704 123.102 158.704Z"
	            fill="#69F0AE"
	          />
	          <path
	            d="M123.887 152.007C123.902 151.993 123.917 151.978 123.936 151.963C123.956 151.949 123.975 151.934 123.99 151.924C124.097 151.861 124.2 151.831 124.288 151.831C124.38 151.831 124.458 151.866 124.527 151.919C124.595 151.978 124.644 152.061 124.683 152.168C124.722 152.276 124.741 152.408 124.741 152.559C124.741 152.711 124.722 152.862 124.683 153.018C124.644 153.17 124.595 153.316 124.527 153.453C124.458 153.59 124.38 153.712 124.288 153.819C124.195 153.927 124.097 154.015 123.99 154.073C123.882 154.137 123.78 154.166 123.687 154.166C123.595 154.166 123.516 154.132 123.448 154.073C123.38 154.015 123.331 153.932 123.292 153.824C123.253 153.717 123.233 153.585 123.233 153.434C123.233 153.346 123.238 153.263 123.253 153.18C123.268 153.097 123.282 153.018 123.302 152.94C123.321 152.862 123.346 152.789 123.37 152.711C123.394 152.637 123.419 152.564 123.443 152.496L123.97 150.991C123.98 150.972 123.99 150.947 124.004 150.918C124.014 150.889 124.034 150.869 124.063 150.85L124.229 150.752C124.248 150.742 124.258 150.742 124.273 150.757C124.283 150.771 124.288 150.791 124.288 150.815C124.288 150.83 124.288 150.845 124.283 150.855C124.278 150.864 124.278 150.874 124.273 150.884L123.887 152.007ZM123.516 153.277C123.516 153.365 123.526 153.443 123.551 153.512C123.575 153.58 123.604 153.634 123.643 153.673C123.682 153.712 123.731 153.731 123.795 153.736C123.853 153.741 123.922 153.722 123.995 153.678C124.068 153.634 124.136 153.58 124.195 153.507C124.253 153.434 124.302 153.355 124.346 153.272C124.385 153.184 124.419 153.097 124.439 153.004C124.458 152.911 124.473 152.818 124.473 152.73C124.473 152.642 124.463 152.564 124.439 152.496C124.414 152.427 124.385 152.374 124.346 152.335C124.307 152.295 124.253 152.276 124.195 152.271C124.136 152.266 124.068 152.286 123.995 152.33C123.922 152.374 123.853 152.427 123.795 152.501C123.736 152.574 123.687 152.652 123.643 152.735C123.604 152.823 123.57 152.911 123.551 153.004C123.526 153.097 123.516 153.184 123.516 153.277Z"
	            fill="#455A64"
	          />
	          <path
	            d="M125.898 151.284C125.956 151.171 126 151.064 126.03 150.961C126.059 150.859 126.074 150.742 126.074 150.61C126.074 150.453 126.044 150.336 125.986 150.263C125.927 150.194 125.83 150.194 125.703 150.268C125.634 150.307 125.576 150.356 125.532 150.409C125.483 150.468 125.444 150.532 125.415 150.6C125.381 150.668 125.356 150.746 125.337 150.825C125.317 150.903 125.303 150.981 125.293 151.059C125.288 151.093 125.278 151.127 125.264 151.152C125.249 151.176 125.234 151.196 125.22 151.206L125.088 151.284C125.068 151.294 125.054 151.294 125.044 151.279C125.029 151.264 125.024 151.245 125.024 151.22C125.024 151.108 125.044 150.986 125.073 150.854C125.102 150.722 125.151 150.595 125.205 150.468C125.264 150.341 125.332 150.224 125.42 150.116C125.503 150.009 125.6 149.921 125.708 149.862C125.815 149.799 125.908 149.774 125.991 149.774C126.074 149.779 126.137 149.809 126.196 149.862C126.249 149.916 126.293 149.994 126.318 150.097C126.347 150.199 126.362 150.312 126.362 150.444C126.362 150.541 126.357 150.629 126.347 150.712C126.337 150.795 126.323 150.878 126.298 150.961C126.279 151.044 126.249 151.127 126.21 151.215C126.176 151.298 126.132 151.391 126.083 151.489L125.434 152.793L126.322 152.28C126.342 152.266 126.362 152.27 126.376 152.285C126.391 152.3 126.401 152.324 126.401 152.358V152.52C126.401 152.554 126.391 152.583 126.376 152.617C126.362 152.651 126.342 152.671 126.322 152.686L125.073 153.409C125.054 153.423 125.034 153.418 125.02 153.404C125.005 153.389 124.995 153.365 124.995 153.33V153.169C124.995 153.135 125 153.106 125.01 153.076C125.02 153.047 125.034 153.008 125.059 152.964L125.898 151.284Z"
	            fill="#455A64"
	          />
	          <path
	            d="M127.869 148.661C127.889 148.647 127.908 148.651 127.923 148.666C127.938 148.681 127.947 148.705 127.947 148.739V148.901C127.947 148.925 127.943 148.959 127.938 148.988C127.933 149.023 127.923 149.057 127.913 149.096L127.269 152.032C127.259 152.061 127.25 152.095 127.24 152.124C127.225 152.154 127.211 152.173 127.186 152.188L127.054 152.266C127.035 152.276 127.02 152.276 127.006 152.261C126.991 152.246 126.986 152.227 126.986 152.198C126.986 152.193 126.986 152.183 126.986 152.178C126.986 152.168 126.991 152.159 126.996 152.139L127.645 149.198L126.693 149.75C126.674 149.765 126.654 149.76 126.64 149.746C126.625 149.731 126.615 149.706 126.615 149.672V149.511C126.615 149.477 126.625 149.448 126.64 149.413C126.654 149.379 126.674 149.36 126.693 149.345L127.869 148.661Z"
	            fill="#455A64"
	          />
	          <path
	            d="M123.463 160.282L140.592 150.347C140.787 150.235 140.944 150.313 140.944 150.528C140.944 150.738 140.787 151.002 140.592 151.114L123.463 161.049C123.268 161.161 123.112 161.083 123.112 160.868C123.112 160.658 123.268 160.395 123.463 160.282Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M123.463 148.822L127.304 146.595C127.499 146.483 127.655 146.561 127.655 146.776C127.655 146.986 127.499 147.25 127.304 147.362L123.463 149.589C123.268 149.702 123.112 149.624 123.112 149.414C123.112 149.194 123.268 148.935 123.463 148.822Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M123.102 172.44C123.082 172.44 123.058 172.435 123.038 172.42C122.98 172.386 122.96 172.308 122.999 172.254L125.025 168.928L127.06 169.304L128.977 168.781L130.959 166.358L132.93 165.86L134.936 162.285L136.986 162.88L138.908 162.514L140.86 160.775C140.909 160.731 140.987 160.736 141.031 160.785C141.075 160.834 141.07 160.912 141.021 160.956L139.021 162.739L138.986 162.744L136.971 163.125L135.053 162.568L133.091 166.065L131.095 166.568L129.114 168.986L129.075 168.996L127.064 169.543L127.035 169.538L125.137 169.186L123.199 172.366C123.185 172.42 123.146 172.44 123.102 172.44Z"
	            fill="#69F0AE"
	          />
	          <g opacity="0.3">
	            <path
	              opacity="0.3"
	              d="M123.102 172.44C123.082 172.44 123.058 172.435 123.038 172.42C122.98 172.386 122.96 172.308 122.999 172.254L125.025 168.928L127.06 169.304L128.977 168.781L130.959 166.358L132.93 165.86L134.936 162.285L136.986 162.88L138.908 162.514L140.86 160.775C140.909 160.731 140.987 160.736 141.031 160.785C141.075 160.834 141.07 160.912 141.021 160.956L139.021 162.739L138.986 162.744L136.971 163.125L135.053 162.568L133.091 166.065L131.095 166.568L129.114 168.986L129.075 168.996L127.064 169.543L127.035 169.538L125.137 169.186L123.199 172.366C123.185 172.42 123.146 172.44 123.102 172.44Z"
	              fill="black"
	            />
	          </g>
	          <path
	            d="M124.019 166.675C124.009 166.685 123.995 166.695 123.98 166.704C123.961 166.714 123.951 166.724 123.941 166.729C123.848 166.783 123.756 166.812 123.673 166.817C123.585 166.822 123.507 166.797 123.438 166.748C123.37 166.699 123.316 166.621 123.272 166.514C123.228 166.406 123.209 166.27 123.209 166.099C123.209 165.947 123.229 165.796 123.268 165.644C123.307 165.493 123.36 165.351 123.424 165.219C123.492 165.088 123.565 164.97 123.658 164.863C123.746 164.76 123.839 164.677 123.936 164.619C124.048 164.555 124.151 164.521 124.239 164.526C124.327 164.526 124.405 164.555 124.468 164.614C124.531 164.672 124.58 164.755 124.614 164.863C124.649 164.97 124.663 165.102 124.663 165.254C124.663 165.327 124.658 165.41 124.639 165.493C124.624 165.576 124.605 165.664 124.58 165.747C124.556 165.83 124.531 165.913 124.502 165.996C124.473 166.079 124.449 166.152 124.429 166.221L123.902 167.725C123.892 167.745 123.882 167.769 123.868 167.799C123.858 167.828 123.839 167.852 123.809 167.867L123.643 167.965C123.624 167.974 123.614 167.974 123.599 167.96C123.59 167.945 123.585 167.926 123.585 167.901C123.585 167.886 123.585 167.872 123.59 167.862C123.595 167.852 123.595 167.842 123.599 167.833L124.019 166.675ZM124.395 165.415C124.395 165.322 124.385 165.244 124.361 165.175C124.336 165.107 124.307 165.058 124.268 165.019C124.229 164.985 124.18 164.965 124.126 164.965C124.073 164.965 124.009 164.985 123.946 165.024C123.878 165.063 123.819 165.117 123.76 165.18C123.707 165.244 123.658 165.317 123.619 165.4C123.58 165.478 123.551 165.566 123.526 165.659C123.502 165.752 123.492 165.845 123.492 165.937C123.492 166.035 123.502 166.113 123.526 166.182C123.546 166.25 123.58 166.299 123.619 166.333C123.658 166.367 123.707 166.387 123.76 166.387C123.814 166.387 123.878 166.367 123.946 166.328C124.009 166.289 124.073 166.24 124.126 166.172C124.185 166.108 124.229 166.035 124.268 165.952C124.307 165.869 124.336 165.786 124.361 165.693C124.385 165.605 124.395 165.508 124.395 165.415Z"
	            fill="#455A64"
	          />
	          <path
	            d="M125.151 166.343C125.161 166.387 125.176 166.426 125.19 166.465C125.21 166.504 125.234 166.529 125.268 166.548C125.302 166.568 125.351 166.568 125.405 166.558C125.464 166.548 125.537 166.519 125.629 166.465C125.688 166.431 125.747 166.387 125.8 166.333C125.854 166.279 125.903 166.216 125.942 166.148C125.981 166.074 126.015 165.996 126.039 165.913C126.064 165.83 126.078 165.737 126.078 165.64C126.078 165.542 126.069 165.469 126.044 165.415C126.02 165.361 125.991 165.327 125.952 165.307C125.913 165.288 125.864 165.288 125.81 165.303C125.756 165.317 125.698 165.342 125.634 165.376L125.395 165.517C125.376 165.532 125.356 165.527 125.342 165.513C125.327 165.498 125.317 165.474 125.317 165.439V165.278C125.317 165.249 125.322 165.224 125.332 165.195C125.342 165.166 125.351 165.141 125.361 165.117L125.883 163.95L125.049 164.433C125.029 164.448 125.01 164.443 124.995 164.428C124.98 164.414 124.971 164.389 124.971 164.355V164.194C124.971 164.16 124.98 164.13 124.995 164.096C125.01 164.062 125.029 164.042 125.049 164.028L126.191 163.368C126.21 163.354 126.23 163.358 126.244 163.373C126.259 163.388 126.269 163.412 126.269 163.446V163.608C126.269 163.632 126.264 163.661 126.254 163.695C126.244 163.725 126.23 163.759 126.215 163.793L125.703 164.946C125.8 164.892 125.888 164.863 125.966 164.863C126.049 164.858 126.117 164.882 126.171 164.926C126.23 164.97 126.274 165.044 126.303 165.136C126.332 165.229 126.352 165.347 126.352 165.488C126.352 165.64 126.332 165.786 126.293 165.933C126.254 166.074 126.2 166.206 126.137 166.328C126.074 166.446 125.995 166.553 125.908 166.651C125.82 166.748 125.727 166.822 125.629 166.88C125.498 166.954 125.385 166.998 125.293 167.002C125.2 167.012 125.122 166.993 125.058 166.954C125 166.914 124.951 166.856 124.922 166.778C124.893 166.7 124.878 166.617 124.873 166.519C124.873 166.49 124.878 166.465 124.893 166.436C124.907 166.411 124.922 166.392 124.936 166.382L125.068 166.304C125.088 166.289 125.107 166.289 125.117 166.304C125.137 166.304 125.146 166.323 125.151 166.343Z"
	            fill="#455A64"
	          />
	          <path
	            d="M123.463 174.017L140.592 164.082C140.787 163.969 140.944 164.047 140.944 164.257C140.944 164.467 140.787 164.731 140.592 164.844L123.463 174.779C123.268 174.891 123.112 174.813 123.112 174.603C123.112 174.393 123.268 174.129 123.463 174.017Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M123.463 162.553L127.304 160.326C127.499 160.213 127.655 160.292 127.655 160.502C127.655 160.712 127.499 160.975 127.304 161.088L123.463 163.315C123.268 163.427 123.112 163.349 123.112 163.139C123.112 162.929 123.268 162.665 123.463 162.553Z"
	            fill="#E0E0E0"
	          />
	          <path d="M148.874 136.41C149.718 135.922 150.499 135.897 151.133 136.244L148.874 142.34V136.41Z" fill="#69F0AE" />
	          <path d="M146.614 138.852C147.249 137.773 148.03 136.899 148.874 136.41V142.34L146.614 138.852Z" fill="#69F0AE" />
	          <path d="M145.214 142.619C145.468 141.27 145.965 139.952 146.614 138.848L148.874 142.335L145.214 142.619Z" fill="#69F0AE" />
	          <path
	            opacity="0.3"
	            d="M146.614 138.852C145.965 139.956 145.468 141.275 145.214 142.623L148.874 142.34V136.41C148.03 136.899 147.249 137.773 146.614 138.852Z"
	            fill="black"
	          />
	          <path d="M151.134 136.239C151.783 136.591 152.28 137.333 152.534 138.393L148.874 142.34L151.134 136.239Z" fill="#69F0AE" />
	          <path
	            d="M145.214 146.287C145.092 145.779 145.023 145.202 145.023 144.562C145.023 143.922 145.092 143.268 145.214 142.623L148.874 142.34L145.214 146.287Z"
	            fill="#69F0AE"
	          />
	          <path d="M152.534 142.057C152.28 143.405 151.783 144.724 151.134 145.828L148.874 142.34L152.534 142.057Z" fill="#69F0AE" />
	          <path d="M148.874 148.27C148.03 148.758 147.249 148.783 146.614 148.436L148.874 142.34V148.27Z" fill="#69F0AE" />
	          <path d="M145.214 146.287L148.874 142.34L146.614 148.436C145.965 148.084 145.468 147.342 145.214 146.287Z" fill="#69F0AE" />
	          <path
	            d="M152.534 138.394C152.656 138.902 152.724 139.478 152.724 140.118C152.724 140.758 152.656 141.412 152.534 142.057L148.874 142.34L152.534 138.394Z"
	            fill="#69F0AE"
	          />
	          <path d="M151.133 145.827C150.499 146.907 149.718 147.781 148.874 148.27V142.34L151.133 145.827Z" fill="#69F0AE" />
	          <path
	            d="M146.956 151.294L150.797 149.067C150.992 148.955 151.148 149.033 151.148 149.243C151.148 149.453 150.992 149.717 150.797 149.829L146.956 152.056C146.761 152.169 146.604 152.09 146.604 151.88C146.604 151.665 146.761 151.407 146.956 151.294Z"
	            fill="#455A64"
	          />
	          <path
	            d="M146.107 154.079L151.641 150.865C151.836 150.752 151.992 150.83 151.992 151.045C151.992 151.255 151.836 151.519 151.641 151.632L146.107 154.846C145.912 154.958 145.755 154.88 145.755 154.67C145.755 154.455 145.912 154.191 146.107 154.079Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M146.107 156.379L151.641 153.165C151.836 153.053 151.992 153.131 151.992 153.346C151.992 153.556 151.836 153.82 151.641 153.932L146.107 157.146C145.912 157.259 145.755 157.181 145.755 156.97C145.755 156.751 145.912 156.492 146.107 156.379Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M146.107 158.675L151.641 155.46C151.836 155.348 151.992 155.426 151.992 155.636C151.992 155.846 151.836 156.11 151.641 156.222L146.107 159.437C145.912 159.549 145.755 159.471 145.755 159.256C145.755 159.046 145.912 158.787 146.107 158.675Z"
	            fill="#E0E0E0"
	          />
	          <path d="M162.748 128.36C163.592 127.872 164.373 127.847 165.008 128.194L162.748 134.29V128.36Z" fill="#69F0AE" />
	          <path d="M160.488 130.803C161.123 129.723 161.904 128.849 162.748 128.36V134.29L160.488 130.803Z" fill="#69F0AE" />
	          <path d="M159.093 134.574C159.347 133.225 159.844 131.907 160.493 130.803L162.753 134.29L159.093 134.574Z" fill="#69F0AE" />
	          <path d="M165.008 128.189C165.657 128.541 166.154 129.284 166.408 130.344L162.748 134.29L165.008 128.189Z" fill="#69F0AE" />
	          <path
	            d="M159.093 138.237C158.971 137.729 158.902 137.152 158.902 136.512C158.902 135.873 158.971 135.218 159.093 134.573L162.753 134.29L159.093 138.237Z"
	            fill="#69F0AE"
	          />
	          <path d="M166.408 134.007C166.154 135.355 165.657 136.674 165.008 137.778L162.748 134.29L166.408 134.007Z" fill="#69F0AE" />
	          <path d="M162.748 140.22C161.904 140.708 161.123 140.733 160.488 140.386L162.748 134.29V140.22Z" fill="#69F0AE" />
	          <path d="M159.093 138.237L162.753 134.29L160.493 140.386C159.839 140.034 159.347 139.292 159.093 138.237Z" fill="#69F0AE" />
	          <path
	            opacity="0.3"
	            d="M160.488 130.803C159.839 131.907 159.342 133.225 159.088 134.574C158.966 135.223 158.897 135.873 158.897 136.513C158.897 137.153 158.966 137.729 159.088 138.237C159.342 139.292 159.839 140.034 160.488 140.391L162.748 134.295V128.365C161.904 128.849 161.128 129.723 160.488 130.803Z"
	            fill="black"
	          />
	          <path
	            d="M166.408 130.344C166.53 130.852 166.598 131.428 166.598 132.068C166.598 132.708 166.53 133.362 166.408 134.007L162.748 134.29L166.408 130.344Z"
	            fill="#69F0AE"
	          />
	          <path d="M165.008 137.778C164.373 138.857 163.592 139.731 162.748 140.22V134.29L165.008 137.778Z" fill="#69F0AE" />
	          <path
	            d="M160.83 143.274L164.67 141.046C164.866 140.934 165.022 141.012 165.022 141.227C165.022 141.437 164.866 141.701 164.67 141.813L160.83 144.041C160.635 144.153 160.479 144.075 160.479 143.86C160.479 143.65 160.635 143.386 160.83 143.274Z"
	            fill="#455A64"
	          />
	          <path
	            d="M159.986 146.063L165.52 142.849C165.715 142.737 165.871 142.815 165.871 143.03C165.871 143.245 165.715 143.504 165.52 143.616L159.986 146.83C159.79 146.942 159.634 146.864 159.634 146.649C159.634 146.434 159.79 146.175 159.986 146.063Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M159.986 148.358L165.52 145.144C165.715 145.032 165.871 145.11 165.871 145.325C165.871 145.54 165.715 145.798 165.52 145.911L159.986 149.125C159.79 149.237 159.634 149.159 159.634 148.944C159.634 148.734 159.79 148.47 159.986 148.358Z"
	            fill="#E0E0E0"
	          />
	          <path
	            d="M159.986 150.654L165.52 147.44C165.715 147.327 165.871 147.406 165.871 147.621C165.871 147.831 165.715 148.094 165.52 148.207L159.986 151.421C159.79 151.533 159.634 151.455 159.634 151.245C159.634 151.03 159.79 150.766 159.986 150.654Z"
	            fill="#E0E0E0"
	          />
	          <path d="M159.463 184.833L176.104 175.216L192.744 184.833L176.104 194.45L159.463 184.833Z" fill="black" />
	          <path d="M176.104 175.216V158.778L159.129 168.585L173.332 176.824L176.104 175.216Z" fill="#37474F" />
	          <path d="M176.104 158.778V175.216L178.875 176.824L193.078 168.585L176.104 158.778Z" fill="#263238" />
	          <path d="M159.129 168.585V184.638L176.104 194.45V178.425L159.129 168.585Z" fill="#2196F3" />
	          <g opacity="0.38">
	            <path opacity="0.38" d="M159.129 168.585V184.638L176.104 194.45V178.425L159.129 168.585Z" fill="black" />
	          </g>
	          <path d="M176.104 178.425V194.45L193.078 184.638V168.585L176.104 178.425Z" fill="#2196F3" />
	          <g opacity="0.23">
	            <path opacity="0.23" d="M176.104 178.425V194.45L193.078 184.638V168.585L176.104 178.425Z" fill="black" />
	          </g>
	          <path opacity="0.7" d="M176.104 178.426L176.438 193.837L188.768 187.133L176.104 194.451V178.426Z" fill="white" />
	          <path
	            d="M180.66 190.237C180.61 190.237 180.571 190.198 180.571 190.147V188.116C180.571 188.065 180.61 188.026 180.66 188.026C180.71 188.026 180.749 188.065 180.749 188.116V190.147C180.749 190.198 180.71 190.237 180.66 190.237Z"
	            fill="#F0F0F0"
	          />
	          <path
	            d="M180.398 188.819C180.387 188.819 180.376 188.819 180.364 188.813C180.32 188.791 180.297 188.741 180.32 188.696L180.643 187.948L181 188.367C181.034 188.406 181.028 188.462 180.989 188.495C180.95 188.529 180.894 188.523 180.861 188.484L180.688 188.289L180.482 188.769C180.465 188.802 180.431 188.819 180.398 188.819Z"
	            fill="#F0F0F0"
	          />
	          <path
	            d="M181.496 189.762C181.446 189.762 181.407 189.723 181.407 189.673V187.641C181.407 187.591 181.446 187.552 181.496 187.552C181.547 187.552 181.586 187.591 181.586 187.641V189.673C181.591 189.717 181.547 189.762 181.496 189.762Z"
	            fill="#F0F0F0"
	          />
	          <path
	            d="M181.234 188.345C181.223 188.345 181.212 188.345 181.201 188.339C181.156 188.317 181.134 188.266 181.156 188.222L181.48 187.479L181.837 187.893C181.87 187.932 181.864 187.987 181.825 188.021C181.786 188.054 181.731 188.049 181.697 188.01L181.524 187.814L181.318 188.294C181.301 188.322 181.268 188.345 181.234 188.345Z"
	            fill="#F0F0F0"
	          />
	          <path
	            d="M178.245 191.615C178.212 191.615 178.178 191.604 178.145 191.587C178.078 191.548 178.039 191.47 178.039 191.369V191.118C178.039 191.068 178.078 191.029 178.128 191.029C178.178 191.029 178.218 191.068 178.218 191.118V191.369C178.218 191.408 178.229 191.425 178.234 191.431C178.24 191.436 178.262 191.436 178.296 191.414C178.374 191.369 178.463 191.185 178.463 191.006V189.968C178.463 189.918 178.502 189.879 178.552 189.879C178.602 189.879 178.641 189.918 178.641 189.968V191.006C178.641 191.241 178.53 191.486 178.385 191.57C178.34 191.604 178.29 191.615 178.245 191.615Z"
	            fill="#F0F0F0"
	          />
	          <path
	            d="M177.292 190.778V190.621C177.292 189.885 177.81 188.98 178.451 188.612C178.78 188.422 179.093 188.394 179.327 188.534C179.567 188.673 179.701 188.958 179.701 189.332V189.382L177.292 190.778ZM178.992 188.629C178.859 188.629 178.702 188.673 178.541 188.768C178 189.081 177.548 189.812 177.481 190.46L179.517 189.282C179.505 188.997 179.405 188.791 179.238 188.69C179.165 188.651 179.082 188.629 178.992 188.629Z"
	            fill="#F0F0F0"
	          />
	          <path d="M176.104 158.779L159.129 168.586L176.104 178.427L193.078 168.586L176.104 158.779Z" fill="#2196F3" />
	          <path opacity="0.1" d="M176.104 158.779L159.129 168.586L176.104 178.427L193.078 168.586L176.104 158.779Z" fill="black" />
	          <path opacity="0.7" d="M159.129 168.586L176.104 177.818L193.078 168.586L176.104 178.426L159.129 168.586Z" fill="white" />
	          <path d="M166.172 164.517L183.163 174.335L185.773 172.822L168.787 163.004L166.172 164.517Z" fill="white" />
	          <path
	            d="M185.774 172.816V176.143L185.461 175.964L185.132 176.534L184.803 176.338L184.474 176.913L184.145 176.718L183.816 177.287L183.487 177.098L183.158 177.667V174.335L185.774 172.816Z"
	            fill="#2196F3"
	          />
	          <path
	            d="M185.774 172.816V176.143L185.461 175.964L185.132 176.534L184.803 176.338L184.474 176.913L184.145 176.718L183.816 177.287L183.487 177.098L183.158 177.667V174.335L185.774 172.816Z"
	            fill="#E3F2FD"
	          />
	          <path d="M151.307 194.827L161.457 188.961L171.608 194.827L161.457 200.694L151.307 194.827Z" fill="black" />
	          <path d="M161.457 188.961V178.934L151.103 184.916L159.767 189.941L161.457 188.961Z" fill="#37474F" />
	          <path d="M161.457 178.934V188.961L163.148 189.941L171.812 184.916L161.457 178.934Z" fill="#263238" />
	          <path d="M151.103 184.915V194.707L161.457 200.693V190.918L151.103 184.915Z" fill="#5E35B1" />
	          <g opacity="0.38">
	            <path opacity="0.38" d="M151.103 184.915V194.707L161.457 200.693V190.918L151.103 184.915Z" fill="black" />
	          </g>
	          <path d="M161.457 190.918V200.693L171.812 194.707V184.915L161.457 190.918Z" fill="#5E35B1" />
	          <g opacity="0.23">
	            <path opacity="0.23" d="M161.457 190.918V200.693L171.812 194.707V184.915L161.457 190.918Z" fill="black" />
	          </g>
	          <path opacity="0.7" d="M161.457 190.918L161.661 200.319L169.182 196.229L161.457 200.693V190.918Z" fill="white" />
	          <path
	            d="M164.236 198.122C164.205 198.122 164.182 198.098 164.182 198.067V196.828C164.182 196.797 164.205 196.773 164.236 196.773C164.267 196.773 164.29 196.797 164.29 196.828V198.067C164.29 198.098 164.267 198.122 164.236 198.122Z"
	            fill="#F0F0F0"
	          />
	          <path
	            d="M164.076 197.258C164.07 197.258 164.063 197.258 164.056 197.254C164.029 197.241 164.015 197.21 164.029 197.183L164.226 196.727L164.444 196.982C164.464 197.006 164.461 197.04 164.437 197.06C164.413 197.081 164.379 197.077 164.359 197.053L164.253 196.934L164.127 197.227C164.117 197.247 164.097 197.258 164.076 197.258Z"
	            fill="#F0F0F0"
	          />
	          <path
	            d="M164.746 197.834C164.715 197.834 164.691 197.81 164.691 197.779V196.54C164.691 196.509 164.715 196.485 164.746 196.485C164.776 196.485 164.8 196.509 164.8 196.54V197.779C164.804 197.806 164.776 197.834 164.746 197.834Z"
	            fill="#F0F0F0"
	          />
	          <path
	            d="M164.586 196.969C164.579 196.969 164.573 196.969 164.566 196.966C164.539 196.952 164.525 196.922 164.539 196.894L164.736 196.441L164.954 196.693C164.974 196.717 164.971 196.751 164.947 196.772C164.923 196.792 164.889 196.789 164.868 196.765L164.763 196.646L164.637 196.939C164.627 196.956 164.607 196.969 164.586 196.969Z"
	            fill="#F0F0F0"
	          />
	          <path
	            d="M162.764 198.964C162.743 198.964 162.723 198.957 162.702 198.947C162.662 198.923 162.638 198.876 162.638 198.814V198.661C162.638 198.631 162.662 198.607 162.692 198.607C162.723 198.607 162.747 198.631 162.747 198.661V198.814C162.747 198.838 162.753 198.848 162.757 198.852C162.76 198.855 162.774 198.855 162.794 198.842C162.842 198.814 162.896 198.702 162.896 198.593V197.96C162.896 197.929 162.92 197.905 162.951 197.905C162.981 197.905 163.005 197.929 163.005 197.96V198.593C163.005 198.736 162.937 198.886 162.849 198.937C162.821 198.957 162.791 198.964 162.764 198.964Z"
	            fill="#F0F0F0"
	          />
	          <path
	            d="M162.182 198.453V198.358C162.182 197.909 162.498 197.357 162.889 197.132C163.09 197.017 163.28 197 163.423 197.085C163.57 197.17 163.651 197.343 163.651 197.572V197.602L162.182 198.453ZM163.219 197.143C163.138 197.143 163.042 197.17 162.944 197.228C162.614 197.418 162.338 197.864 162.297 198.259L163.539 197.541C163.532 197.367 163.471 197.241 163.369 197.18C163.325 197.156 163.274 197.143 163.219 197.143Z"
	            fill="#F0F0F0"
	          />
	          <path d="M161.457 178.934L151.103 184.916L161.457 190.918L171.812 184.916L161.457 178.934Z" fill="#5E35B1" />
	          <path opacity="0.1" d="M161.457 178.934L151.103 184.916L161.457 190.918L171.812 184.916L161.457 178.934Z" fill="black" />
	          <path opacity="0.7" d="M151.103 184.916L161.457 190.547L171.812 184.916L161.457 190.919L151.103 184.916Z" fill="white" />
	          <path d="M155.399 182.433L165.764 188.422L167.356 187.5L156.994 181.511L155.399 182.433Z" fill="white" />
	          <path
	            d="M167.356 187.496V189.525L167.165 189.416L166.964 189.764L166.764 189.645L166.563 189.995L166.362 189.876L166.162 190.223L165.961 190.108L165.76 190.455V188.422L167.356 187.496Z"
	            fill="#5E35B1"
	          />
	          <path
	            d="M167.356 187.496V189.525L167.165 189.416L166.964 189.764L166.764 189.645L166.563 189.995L166.362 189.876L166.162 190.223L165.961 190.108L165.76 190.455V188.422L167.356 187.496Z"
	            fill="#E3F2FD"
	          />
	          <path
	            d="M207.308 241.352C207.308 241.352 206.835 243.828 206.68 245.571C206.524 247.309 206.524 248.417 206.887 249.681C207.308 250.893 207.568 252.792 206.466 253.37C205.728 253.739 204.73 254.005 202.999 253.583C201.211 253.162 200.369 252.948 198.69 253.214C197.006 253.479 195.114 253.635 193.435 252.844C192.437 252.423 191.07 251.367 191.226 249.837C191.382 248.36 194.012 248.677 196.169 248.573C198.326 248.469 201.113 247.782 201.269 247.095C201.424 246.409 201.32 243.984 201.269 242.298L207.308 241.352Z"
	            fill="#FFBEA7"
	          />
	          <path
	            d="M206.415 253.369C205.677 253.739 204.679 254.004 202.948 253.582C201.16 253.161 200.318 252.948 198.639 253.213C196.954 253.478 195.062 253.634 193.383 252.844C192.385 252.422 191.018 251.366 191.174 249.837C191.33 248.468 193.487 248.624 195.483 248.572C193.695 248.838 193.591 250.419 195.587 250.731C197.9 251.101 199.371 250.835 201.367 250.731C202.683 250.627 204.575 250.731 205.729 250.466C206.883 250.201 206.883 249.675 206.883 249.675C207.257 250.945 207.574 252.844 206.415 253.369Z"
	            fill="#375A64"
	          />
	          <path
	            d="M226.026 233.021C226.026 233.021 226.655 234.973 227.341 236.606C227.918 237.974 228.812 237.974 229.862 238.557C230.912 239.135 231.385 239.135 231.494 240.035C231.229 239.457 229.285 239.613 228.183 241.351C227.081 243.146 227.341 245.992 227.133 247.412C226.925 248.89 226.816 250.523 225.345 250.732C224.347 250.784 222.715 250.68 221.665 249.675C220.927 248.937 221.192 248.042 222.294 247.459C223.084 247.09 223.978 246.824 224.555 246.403C224.976 245.664 224.763 243.292 224.555 242.662C224.347 242.027 222.819 239.499 221.873 238.131L226.026 233.021Z"
	            fill="#FFBEA7"
	          />
	          <path
	            d="M226.973 244.722C227.342 241.876 228.075 240.664 229.13 240.029C230.18 239.394 231.339 239.452 231.443 240.029C231.495 240.294 231.547 240.664 231.178 241.559C230.809 242.454 230.44 243.088 230.128 244.566C229.759 246.043 230.18 247.729 229.811 248.416C229.546 248.889 229.13 249.207 227.55 249.997C225.709 250.892 224.971 250.892 223.921 250.736C227.18 250.679 226.655 247.568 226.973 244.722Z"
	            fill="#1A2E35"
	          />
	          <path
	            d="M228.126 241.299C227.024 243.094 227.284 245.94 227.076 247.36C226.868 248.838 226.759 250.471 225.288 250.68C223.869 250.945 222.606 250.523 221.4 249.785C220.506 249.259 220.823 247.938 221.769 247.412C222.559 246.939 223.084 246.939 224.503 246.413C224.347 247.256 225.241 247.308 225.766 246.465C226.395 245.466 226.031 242.777 226.135 240.612C226.187 238.505 227.82 237.662 228.818 237.871C229.187 238.079 229.608 238.24 229.971 238.448C231.021 239.026 231.339 239.135 231.443 240.03C231.229 239.452 229.285 239.608 228.126 241.299Z"
	            fill="#375A64"
	          />
	          <path
	            d="M226.603 234.708C225.974 232.548 224.446 227.169 223.765 225.062C222.663 221.529 221.452 220.213 219.825 218.683C219.825 218.683 220.454 207.773 220.506 200.864C220.506 198.757 221.244 196.015 221.187 194.641C220.922 188.58 218.349 188.05 217.138 183.622L202.313 185.677C202.313 185.677 199.371 191.686 199.106 204.865C199.002 211.509 199.475 216.727 199.683 220.312C199.839 222.58 199.891 224.214 200.156 228.324C200.364 231.752 201.206 244.244 201.206 244.244C201.206 244.244 202.729 244.77 204.148 244.822C205.146 244.822 206.357 244.77 206.778 244.504C206.778 244.504 207.62 241.445 208.41 235.857C208.883 232.325 209.039 229.848 209.039 228.053C209.039 226.737 208.514 224.469 208.249 223.308L209.881 212.71C209.881 212.71 210.146 213.923 211.248 219.193C211.773 221.67 211.929 222.356 214.035 226.097C216.821 231.159 222.128 238.958 222.128 238.958C222.133 238.136 224.763 234.812 226.603 234.708Z"
	            fill="#673AB7"
	          />
	          <path
	            d="M208.52 198.964C209.045 199.333 210.781 199.651 211.571 199.599C211.675 199.599 211.779 199.547 211.836 199.547C212.413 199.391 212.834 198.969 213.728 197.809C214.409 196.914 214.357 196.279 214.201 195.228C214.149 194.859 214.097 194.386 214.045 193.86L213.624 193.912C213.676 194.49 213.728 194.968 213.78 195.338C213.936 196.394 213.988 196.867 213.411 197.658C212.569 198.766 212.2 199.136 211.727 199.24C211.306 199.344 209.258 199.026 208.733 198.662C208.416 198.449 207.891 195.712 207.522 193.34L207.153 193.392C207.361 194.588 207.943 198.6 208.52 198.964Z"
	            fill="#4527A0"
	          />
	          <path
	            d="M202.527 202.497C201.736 208.454 201.684 213.99 201.898 220.207C202.163 227.163 202.578 239.129 202.792 244.774C202.948 244.774 203.057 244.826 203.213 244.826C203.005 239.239 202.532 227.168 202.319 220.155C202.002 210.931 202.319 203.288 204.58 193.533L204.211 193.429C203.53 196.488 203 199.282 202.636 202.024C200.588 200.915 200.375 197.227 201.482 193.169L201.113 193.064C199.896 197.383 200.265 201.285 202.527 202.497Z"
	            fill="#4527A0"
	          />
	          <path
	            d="M221.187 196.119C220.87 196.488 220.293 196.909 220.189 196.909C219.768 196.909 218.874 196.171 218.614 195.593C218.51 195.328 218.458 194.958 218.406 194.485C218.302 193.959 218.25 193.325 218.037 192.586L217.668 192.69C217.824 193.377 217.933 193.954 217.985 194.485C218.037 194.958 218.089 195.38 218.25 195.697C218.515 196.384 219.565 197.279 220.194 197.227C220.402 197.227 220.875 196.909 221.088 196.701C221.083 196.488 221.135 196.228 221.187 196.119Z"
	            fill="#4527A0"
	          />
	          <path
	            d="M214.773 220.213C214.144 217.205 213.089 207.034 213.037 201.603H213.458C213.51 207.034 214.56 217.101 215.194 220.103C215.667 222.424 221.135 232.122 223.656 236.549C223.604 236.653 223.5 236.757 223.391 236.867C220.87 232.496 215.355 222.689 214.773 220.213Z"
	            fill="#4527A0"
	          />
	          <path
	            d="M215.355 192.008C216.301 193.538 216.878 196.17 215.62 199.126L215.989 199.282C217.304 196.222 216.67 193.377 215.672 191.795L215.355 192.008Z"
	            fill="#4527A0"
	          />
	          <path
	            d="M211.254 219.207L210.781 212.777L212.829 202.548C215.407 201.492 216.353 199.489 216.244 197.174C215.667 201.076 211.514 201.653 211.514 201.653L209.882 212.777L211.254 219.207Z"
	            fill="#4527A0"
	          />
	          <path
	            d="M182.182 154.158L177.187 157.056C177.031 157.16 176.766 157.16 176.61 157.108C176.454 157.056 176.345 156.791 176.345 156.583V145.142C176.345 144.877 176.501 144.617 176.714 144.507L181.709 141.609C181.865 141.505 182.026 141.396 182.286 141.557C182.551 141.662 182.551 141.875 182.551 142.083V153.524C182.551 153.841 182.395 154.054 182.182 154.158Z"
	            fill="#2B454E"
	          />
	          <path
	            d="M182.499 153.842C182.447 153.998 182.291 154.107 182.182 154.159L177.187 157.057C177.031 157.161 176.818 157.27 176.61 157.109C176.402 157.005 176.345 156.792 176.345 156.584V145.143C176.345 144.987 176.397 144.877 176.449 144.773L177.078 145.143V156.636L182.229 153.686L182.499 153.842Z"
	            fill="#1A2E35"
	          />
	          <path
	            d="M182.234 141.978L177.238 144.876C177.082 144.928 176.973 145.142 176.973 145.298V156.686C176.973 156.9 177.129 157.004 177.342 156.9L182.234 154.054C182.389 154.002 182.499 153.736 182.499 153.58V142.14C182.499 141.978 182.343 141.874 182.234 141.978Z"
	            fill="#375A64"
	          />
	          <path
	            d="M181.974 142.509H181.922L180.659 143.248C180.659 143.3 180.607 143.352 180.607 143.404C180.607 143.456 180.555 143.508 180.503 143.56L179.032 144.403C178.98 144.403 178.928 144.403 178.928 144.351C178.928 144.299 178.876 144.247 178.824 144.299C178.772 144.351 178.72 144.351 178.72 144.351L177.457 145.089L177.405 145.141C177.249 145.246 177.197 145.407 177.197 145.563V156.265C177.197 156.421 177.301 156.53 177.462 156.421L181.984 153.783C182.14 153.679 182.249 153.466 182.249 153.31V142.717C182.234 142.509 182.078 142.4 181.974 142.509Z"
	            fill="#1A2E35"
	          />
	          <path
	            d="M180.659 143.248C180.659 143.3 180.607 143.352 180.607 143.404C180.607 143.456 180.555 143.508 180.503 143.56L179.032 144.403C178.98 144.403 178.928 144.403 178.928 144.351C178.928 144.299 178.876 144.247 178.824 144.299C178.772 144.351 178.72 144.351 178.72 144.351L177.457 145.09L177.405 145.142C177.249 145.246 177.197 145.407 177.197 145.564V156.104L181.615 153.524C181.771 153.42 181.88 153.206 181.88 153.05V142.562L180.659 143.248Z"
	            fill="white"
	          />
	          <path
	            d="M179.136 144.039C179.136 144.091 179.136 144.091 179.188 144.091L179.869 143.722C179.869 143.722 179.921 143.669 179.921 143.617C179.921 143.565 179.921 143.565 179.869 143.565L179.188 143.935C179.136 143.982 179.136 144.039 179.136 144.039Z"
	            fill="#1A2E35"
	          />
	          <path
	            d="M180.134 143.456C180.134 143.508 180.186 143.56 180.238 143.508C180.29 143.456 180.342 143.404 180.342 143.352C180.342 143.3 180.29 143.248 180.238 143.3C180.186 143.352 180.134 143.404 180.134 143.456Z"
	            fill="#1A2E35"
	          />
	          <path
	            d="M176.823 147.567C176.823 147.619 176.771 147.671 176.771 147.671L176.667 147.723C176.615 147.723 176.615 147.723 176.563 147.723C176.511 147.723 176.459 147.619 176.459 147.51V146.506C176.459 146.454 176.511 146.402 176.511 146.402L176.615 146.35C176.667 146.35 176.667 146.35 176.719 146.35C176.771 146.35 176.823 146.454 176.823 146.563V147.567Z"
	            fill="#375A64"
	          />
	          <path
	            d="M176.61 146.411C176.558 146.411 176.506 146.411 176.506 146.515V147.519C176.506 147.571 176.558 147.675 176.61 147.733C176.662 147.733 176.714 147.733 176.714 147.629V146.624C176.714 146.515 176.662 146.411 176.61 146.411Z"
	            fill="#2B454E"
	          />
	          <path
	            d="M176.823 149.309C176.823 149.361 176.771 149.413 176.771 149.413L176.667 149.465C176.615 149.465 176.615 149.465 176.563 149.465C176.511 149.465 176.459 149.361 176.459 149.252V148.248C176.459 148.196 176.511 148.144 176.511 148.144L176.615 148.092C176.667 148.092 176.667 148.092 176.719 148.092C176.771 148.092 176.823 148.196 176.823 148.305V149.309Z"
	            fill="#375A64"
	          />
	          <path
	            d="M176.61 148.097C176.558 148.097 176.506 148.097 176.506 148.201V149.257C176.506 149.309 176.558 149.413 176.61 149.47C176.662 149.47 176.714 149.47 176.714 149.366V148.362C176.714 148.253 176.662 148.149 176.61 148.097Z"
	            fill="#2B454E"
	          />
	          <path
	            opacity="0.2"
	            d="M177.556 150.308C177.348 150.204 177.083 150.043 177.348 149.887L180.082 148.357C180.238 148.253 180.872 148.253 181.028 148.357C181.236 148.461 181.236 148.623 181.08 148.727L178.19 150.36C178.029 150.47 177.717 150.47 177.556 150.308Z"
	            fill="#92B4D1"
	          />
	          <path
	            d="M177.925 150.101V146.672C177.925 146.407 178.081 146.146 178.242 146.037L180.872 144.508C181.028 144.404 181.189 144.508 181.189 144.773V148.202C181.189 148.467 181.033 148.727 180.872 148.836L178.242 150.366C178.029 150.47 177.873 150.361 177.925 150.101Z"
	            fill="#BDAAE8"
	          />
	          <path
	            d="M178.081 150.099V146.78C178.081 146.567 178.185 146.411 178.346 146.307L180.924 144.829C180.976 144.829 181.028 144.829 181.028 144.881V148.2C181.028 148.414 180.924 148.57 180.763 148.674L178.185 150.151C178.138 150.203 178.081 150.151 178.081 150.099Z"
	            fill="#673AB7"
	          />
	          <path
	            d="M180.291 146.003L178.357 147.167L178.474 148.549C178.48 148.634 178.543 148.663 178.617 148.619L180.098 147.727C180.125 147.71 180.152 147.686 180.174 147.655L180.171 147.694C180.159 147.861 180.049 148.048 179.915 148.129L179.85 148.168C179.827 148.173 179.804 148.182 179.78 148.197C179.756 148.212 179.733 148.23 179.711 148.252L179.015 148.671C178.993 148.676 178.97 148.685 178.946 148.7C178.921 148.714 178.898 148.733 178.877 148.755L178.729 148.843C178.698 148.862 178.672 148.909 178.672 148.947C178.672 148.985 178.698 149 178.729 148.981L178.74 148.974C178.724 149.022 178.714 149.071 178.715 149.117C178.716 149.271 178.819 149.332 178.947 149.255C179.076 149.178 179.179 148.992 179.178 148.838C179.178 148.792 179.169 148.754 179.152 148.726L179.576 148.471C179.56 148.519 179.55 148.568 179.551 148.614C179.552 148.768 179.655 148.829 179.783 148.752C179.912 148.676 180.015 148.489 180.014 148.335C180.014 148.286 180.003 148.247 179.985 148.218C180.146 148.085 180.271 147.85 180.286 147.638L180.417 145.782C180.422 145.708 180.471 145.625 180.531 145.589L180.77 145.444C180.802 145.425 180.827 145.379 180.827 145.341C180.827 145.303 180.801 145.288 180.77 145.307L180.531 145.451C180.411 145.523 180.314 145.689 180.303 145.838L180.291 146.003ZM179.279 147.971L179.276 146.864C179.276 146.813 179.31 146.75 179.354 146.724C179.396 146.699 179.431 146.719 179.431 146.771L179.434 147.877C179.434 147.929 179.4 147.992 179.356 148.017C179.314 148.043 179.279 148.022 179.279 147.971ZM178.944 148.173L178.941 147.066C178.941 147.015 178.975 146.952 179.018 146.926C179.061 146.901 179.096 146.921 179.096 146.973L179.099 148.079C179.099 148.131 179.064 148.194 179.021 148.219C178.979 148.245 178.944 148.224 178.944 148.173ZM178.608 148.375L178.606 147.268C178.606 147.217 178.64 147.154 178.683 147.128C178.725 147.103 178.76 147.123 178.76 147.175L178.763 148.282C178.763 148.333 178.729 148.396 178.686 148.421C178.644 148.447 178.608 148.426 178.608 148.375ZM179.614 147.769L179.611 146.663C179.611 146.612 179.646 146.549 179.689 146.523C179.731 146.497 179.766 146.518 179.766 146.57L179.769 147.675C179.769 147.727 179.735 147.79 179.692 147.815C179.649 147.841 179.614 147.821 179.614 147.769ZM179.95 147.567L179.947 146.461C179.947 146.41 179.981 146.347 180.024 146.321C180.066 146.295 180.102 146.316 180.102 146.368L180.105 147.473C180.105 147.525 180.071 147.588 180.028 147.613C179.985 147.639 179.95 147.619 179.95 147.567ZM179.781 148.371C179.829 148.342 179.868 148.365 179.868 148.423C179.868 148.48 179.83 148.55 179.782 148.579C179.733 148.608 179.695 148.585 179.695 148.527C179.695 148.47 179.733 148.4 179.781 148.371ZM178.946 148.874C178.994 148.845 179.033 148.868 179.033 148.926C179.033 148.983 178.994 149.053 178.947 149.082C178.899 149.111 178.86 149.087 178.86 149.03C178.86 148.973 178.898 148.903 178.946 148.874Z"
	            fill="white"
	          />
	          <path
	            d="M178.138 150.151C178.086 150.151 178.138 150.203 178.19 150.151L180.768 148.674C180.924 148.57 181.033 148.409 181.033 148.2V144.881C181.033 144.829 181.033 144.829 180.981 144.829V148.148C180.981 148.362 180.877 148.518 180.716 148.622L178.138 150.151C178.081 150.151 178.138 150.151 178.138 150.151Z"
	            fill="#001A46"
	          />
	          <path
	            d="M178.242 146.042L180.872 144.512C180.976 144.512 181.028 144.46 181.08 144.512L180.924 144.408C180.872 144.408 180.768 144.408 180.716 144.46L178.086 145.99L178.242 146.042Z"
	            fill="url(#paint6_linear_4527_60659)"
	          />
	          <path
	            d="M177.82 146.672V150.101C177.82 150.257 177.872 150.366 177.976 150.366C177.924 150.366 177.872 150.262 177.872 150.101V146.672C177.872 146.459 178.028 146.147 178.189 146.037L180.871 144.56C180.923 144.508 180.975 144.508 181.027 144.508C180.975 144.456 180.871 144.456 180.82 144.508L178.189 146.037C178.028 146.147 177.872 146.464 177.82 146.672Z"
	            fill="white"
	          />
	          <path
	            d="M219.664 169.866L220.662 173.133L216.613 175.189L218.084 179.668C218.084 179.668 221.764 178.56 225.548 176.926C227.233 176.187 227.123 175.027 226.916 173.815C226.495 171.339 224.706 165.433 223.656 161.953C222.555 158.264 221.078 157.525 218.401 156.891L219.664 169.866Z"
	            fill="#FFBEA7"
	          />
	          <path
	            d="M220.189 173.345C220.455 174.032 221.401 175.031 222.399 174.927C221.608 174.506 221.032 173.715 220.714 173.08L220.189 173.345Z"
	            fill="#FF9A79"
	          />
	          <path
	            d="M226.973 173.82C226.552 171.343 224.764 165.438 223.714 161.958C222.612 158.269 221.135 157.53 218.458 156.896L219.722 169.809L220.72 173.076L226.973 173.82Z"
	            fill="#BDAAE8"
	          />
	          <path
	            d="M204.892 144.986C205.1 146.095 205.734 146.516 206.836 147.094C206.836 147.094 211.254 152.837 212.616 154.476C212.512 152.26 218.609 141.875 218.292 141.298C216.031 137.396 210.199 137.978 208.042 138.925C206.253 139.716 205.573 140.403 205.255 141.142C204.886 141.828 204.834 142.775 205.307 143.41C204.996 143.93 204.892 144.669 204.892 144.986Z"
	            fill="#1A2E35"
	          />
	          <path
	            d="M205.469 149.939C205.469 149.939 204.523 149.304 204.367 149.096C204.211 148.883 205.942 146.458 205.942 146.458L205.469 149.939Z"
	            fill="#FF9A79"
	          />
	          <path
	            d="M217.455 143.087C219.399 144.773 218.718 148.462 216.665 151.152C214.929 153.42 211.514 154.684 209.991 155.002C208.78 155.267 206.467 154.95 206.051 154.476C205.474 153.841 204.58 150.944 205.734 147.624C205.999 146.833 205.63 145.991 205.734 145.408C206.207 143.192 207.153 142.458 208.203 142.037C209.31 141.558 214.721 140.824 217.455 143.087Z"
	            fill="#FFBEA7"
	          />
	          <path
	            d="M209.362 154.054L209.679 157.113C213.78 158.903 217.616 157.482 215.776 156.374L215.568 153.003L209.362 154.054Z"
	            fill="#FFBEA7"
	          />
	          <path
	            d="M209.518 155.475H215.667C215.719 156.265 216.244 156.479 217.455 156.635C217.455 156.635 216.878 158.794 213.515 159.377C210.152 159.902 203.738 158.903 203.738 158.903C205.526 158.216 207.314 158.06 208.468 157.743C209.674 157.426 209.57 156.265 209.518 155.475Z"
	            fill="#FFBEA7"
	          />
	          <path
	            d="M207.834 154.632C208.728 154.476 209.408 154.263 209.408 154.263L209.46 155.106C207.828 155.21 206.674 154.892 206.149 154.58C206.155 154.58 206.945 154.736 207.834 154.632Z"
	            fill="#FF9A79"
	          />
	          <path
	            d="M212.829 140.454C214.565 140.241 217.72 141.032 217.876 141.089C221.712 142.405 221.187 148.363 218.666 151.526C217.564 152.894 216.561 153.846 215.672 154.741C213.463 155.214 211.467 153.898 211.467 153.898C209.419 152.79 209.471 151.156 209.471 151.156C209.471 151.156 209.788 151.63 210.261 151.63C210.838 151.63 211.363 151.312 211.732 150.787C212.522 149.627 212.309 147.728 211.103 147.468C210.001 147.254 209.684 147.993 209.419 148.472C209.211 148.841 209.05 148.997 208.629 148.841C207.891 148.524 207.683 147.894 207.579 147.155C207.475 146.682 207.683 145.891 207.948 145.47C207.319 145.152 206.425 144.627 206.581 143.149C206.628 142.879 207.418 141.297 212.829 140.454Z"
	            fill="#1A2E35"
	          />
	          <path
	            d="M218.994 184.423C219.612 186.674 220.761 188.099 220.87 188.666C220.87 188.666 217.611 191.829 210.516 191.985C201.368 192.198 199.949 189.982 199.949 189.982C199.949 189.982 200.609 187.636 201.373 184.623C202.553 179.982 202.74 177.269 201.919 172.555C201.804 171.889 201.716 171.343 201.68 171.026C199.892 169.236 199.523 166.806 200.526 164.434C201.841 161.375 204.523 158.794 205.625 158.107L208.619 157.686C208.619 157.686 211.93 158.211 213.874 157.951C216.868 157.582 216.66 156.791 216.66 156.474C216.66 156.474 217.289 156.578 218.344 156.791C218.973 156.895 220.449 157.478 221.026 160.22C221.614 163.097 220.637 166.416 219.457 169.475C217.617 174.257 217.466 179.527 218.994 184.423Z"
	            fill="#FAFAFA"
	          />
	          <path
	            d="M198.218 159.746C201.633 158.742 203.473 158.269 205.63 158.165C205.63 158.165 206.42 159.273 206.368 161.01C206.316 162.436 205.947 165.23 203.634 166.229C203.634 166.229 203.161 166.333 199.429 167.02C197.012 167.493 196.066 167.706 191.964 168.445C189.651 168.815 189.282 168.497 188.128 167.55C184.552 164.704 181.506 161.697 180.716 161.068C180.399 160.75 180.035 160.594 179.666 160.329C179.245 160.064 178.876 159.751 178.507 159.486C177.826 158.961 177.088 158.378 176.511 157.696C175.986 157.062 175.352 156.219 175.513 155.376C175.565 154.902 175.565 154.689 175.409 154.268C175.305 153.95 175.201 153.425 175.305 153.108C175.357 153.003 175.409 152.842 175.409 152.738C175.513 152.369 175.305 151.999 175.201 151.63C175.097 151.209 175.045 151.052 175.201 150.626C175.305 150.36 175.305 150.1 175.253 149.783C175.201 149.518 174.936 148.675 175.409 148.675C175.674 148.675 176.038 148.94 176.199 149.096C176.516 149.362 176.828 149.731 177.041 150.1C177.249 150.522 177.41 150.943 177.618 151.365C178.091 152.312 178.829 153.212 179.666 153.893C179.822 153.997 180.087 154.211 180.243 154.049C180.295 153.997 180.347 153.893 180.347 153.784C180.347 153.571 180.295 153.414 180.295 153.206C180.243 152.993 180.243 152.785 180.243 152.572C180.191 152.15 180.295 151.568 180.612 151.255C180.825 150.99 181.189 150.834 181.35 151.255C181.506 151.625 181.454 152.046 181.615 152.416C181.771 152.837 182.036 153.206 182.192 153.576C182.457 154.211 182.665 154.84 182.769 155.475C182.873 156 182.821 156.635 183.19 157.108C183.611 157.686 190.447 161.905 190.447 161.905C190.447 161.905 194.22 160.906 198.218 159.746Z"
	            fill="#FFBEA7"
	          />
	          <path
	            d="M190.384 161.905C190.384 161.905 194.22 160.849 198.218 159.689C201.633 158.685 203.473 158.211 205.63 158.107C205.63 158.107 206.42 159.216 206.368 160.953C206.316 162.379 205.947 165.173 203.634 166.172C203.634 166.172 203.161 166.276 199.429 166.962C197.012 167.436 196.066 167.649 191.964 168.388C192.432 165.755 192.12 163.487 190.384 161.905Z"
	            fill="#BDAAE8"
	          />
	          <path
	            d="M220.054 143.623C222.494 143.623 224.472 141.643 224.472 139.201C224.472 136.758 222.494 134.778 220.054 134.778C217.614 134.778 215.636 136.758 215.636 139.201C215.636 141.643 217.614 143.623 220.054 143.623Z"
	            fill="#1A2E35"
	          />
	          <path
	            d="M215.116 136.859C215.116 136.859 214.69 137.9 216.155 139.981C217.621 142.062 214.128 141.407 214.128 141.407C214.128 141.407 213.556 138.42 215.116 136.859Z"
	            fill="#1A2E35"
	          />
	          <path
	            d="M216.156 135.299C216.156 135.299 216.156 138.42 216.675 138.941C216.94 139.206 215.974 140.278 215.974 140.278C215.974 140.278 215.116 137.38 216.156 135.299Z"
	            fill="#1A2E35"
	          />
	          <path
	            d="M221.354 145.704C221.354 145.704 221.109 143.758 218.614 143.248C216.119 142.738 219.118 140.818 219.118 140.818C219.118 140.818 221.421 143.498 221.354 145.704Z"
	            fill="#1A2E35"
	          />
	          <path
	            d="M221.354 144.664C221.354 144.664 220.834 143.103 218.614 142.208C216.255 141.256 219.119 139.778 219.119 139.778C219.119 139.778 221.873 142.583 221.354 144.664Z"
	            fill="#1A2E35"
	          />
	          <g clipPath="url(#clip1_4527_60659)">
	            <path
	              d="M211.253 103.61L228.012 113.312C228.308 113.481 228.544 113.729 228.705 114.018C228.859 114.292 228.945 114.603 228.945 114.93V131.801C228.945 133.051 227.532 134.117 226.133 133.317L219.122 129.159L218.972 129.403C218.965 129.414 218.957 129.418 218.946 129.425V129.429C218.943 129.433 218.935 129.436 218.928 129.44L218.924 129.444C218.65 129.624 218.17 131.76 218.061 131.816L218.065 131.808C218.016 131.823 217.956 131.801 217.938 131.745L216.577 127.759L209.375 123.637C208.797 123.307 208.438 122.688 208.438 122.02V105.126C208.438 103.779 210.417 103.129 211.253 103.61Z"
	              fill="#2196F3"
	            />
	            <path
	              opacity="0.2"
	              d="M218.973 129.403C218.965 129.414 218.958 129.418 218.946 129.425V129.429C218.943 129.433 218.935 129.437 218.928 129.44L218.924 129.444C218.823 129.587 218.17 131.76 218.062 131.816L218.065 131.809C218.088 131.801 218.11 131.79 218.125 131.767L218.444 128.84L218.598 128.866L219.119 129.163L218.973 129.403Z"
	              fill="white"
	            />
	            <path
	              d="M226.853 115.072C226.733 114.832 226.564 114.618 226.354 114.445C226.283 114.389 226.208 114.336 226.13 114.291L209.367 104.585C208.955 104.349 208.438 104.645 208.438 105.126C208.438 103.782 210.417 103.129 211.253 103.609L228.012 113.312C228.308 113.481 228.544 113.728 228.705 114.017L226.853 115.072Z"
	              fill="url(#paint7_linear_4527_60659)"
	            />
	            <path
	              d="M227.063 132.78V115.905C227.063 115.83 227.059 115.759 227.048 115.684C227.018 115.466 226.951 115.26 226.853 115.068L228.705 114.014C228.859 114.288 228.945 114.599 228.945 114.926V131.797C228.945 133.047 227.532 134.113 226.133 133.313C226.549 133.557 227.063 133.257 227.063 132.78Z"
	              fill="url(#paint8_linear_4527_60659)"
	            />
	            <path
	              d="M212.543 111.514L222.272 117.137L221.687 123.81C221.653 124.219 221.338 124.362 220.967 124.148L213.514 119.843C213.375 119.76 213.24 119.64 213.131 119.494L213.146 119.681C213.206 120.488 213.761 121.393 214.436 121.783L214.762 121.971C214.875 121.993 214.991 122.038 215.111 122.11C215.234 122.181 215.351 122.271 215.459 122.376L218.961 124.399C219.074 124.422 219.19 124.467 219.31 124.538C219.433 124.609 219.55 124.699 219.658 124.805L220.401 125.232C220.558 125.323 220.689 125.548 220.689 125.732C220.689 125.916 220.558 125.987 220.401 125.897L220.345 125.863C220.427 126.096 220.476 126.332 220.472 126.554C220.468 127.297 219.947 127.593 219.302 127.222C218.657 126.85 218.136 125.949 218.14 125.206C218.14 124.985 218.189 124.801 218.271 124.666L216.138 123.435C216.22 123.667 216.269 123.904 216.265 124.125C216.262 124.868 215.741 125.165 215.096 124.793C214.451 124.422 213.93 123.521 213.934 122.778C213.934 122.541 213.99 122.35 214.084 122.211C213.27 121.569 212.64 120.436 212.565 119.411L211.909 110.448C211.883 110.088 211.635 109.686 211.335 109.514L210.132 108.815C209.971 108.722 209.843 108.5 209.843 108.316C209.843 108.132 209.974 108.061 210.132 108.151L211.335 108.849C211.935 109.195 212.426 109.998 212.483 110.718L212.543 111.514ZM217.634 121.017L217.649 115.673C217.649 115.425 217.476 115.121 217.259 114.997C217.045 114.873 216.869 114.971 216.869 115.222L216.854 120.567C216.854 120.815 217.027 121.119 217.244 121.243C217.458 121.367 217.634 121.265 217.634 121.017ZM219.321 121.993L219.336 116.649C219.336 116.401 219.164 116.097 218.946 115.973C218.732 115.849 218.556 115.947 218.556 116.198L218.541 121.543C218.541 121.791 218.714 122.095 218.931 122.219C219.145 122.342 219.321 122.241 219.321 121.993ZM221.008 122.969L221.023 117.624C221.023 117.377 220.851 117.073 220.633 116.949C220.419 116.825 220.243 116.923 220.243 117.174L220.228 122.519C220.228 122.767 220.401 123.071 220.618 123.194C220.832 123.318 221.008 123.217 221.008 122.969ZM215.947 120.045L215.962 114.701C215.962 114.453 215.789 114.149 215.572 114.025C215.358 113.901 215.182 113.999 215.182 114.25L215.167 119.591C215.167 119.839 215.339 120.143 215.557 120.267C215.771 120.391 215.947 120.293 215.947 120.045ZM214.26 119.07L214.275 113.725C214.275 113.477 214.102 113.173 213.885 113.049C213.671 112.925 213.495 113.023 213.495 113.274L213.476 118.615C213.476 118.863 213.649 119.167 213.866 119.291C214.084 119.415 214.26 119.317 214.26 119.07ZM215.107 122.95C214.867 122.812 214.668 122.924 214.668 123.202C214.668 123.48 214.863 123.817 215.103 123.956C215.347 124.095 215.542 123.983 215.542 123.705C215.542 123.431 215.351 123.093 215.107 122.95ZM219.31 125.379C219.07 125.24 218.871 125.353 218.871 125.63C218.871 125.908 219.066 126.246 219.306 126.385C219.546 126.524 219.745 126.411 219.745 126.133C219.745 125.859 219.55 125.521 219.31 125.379Z"
	              fill="white"
	            />
	          </g>
	          <path
	            d="M230.565 113.547C230.75 113.655 230.935 113.84 231.075 114.083C231.356 114.568 231.356 115.092 231.069 115.252L226.865 117.652C226.725 117.735 226.54 117.703 226.355 117.601C226.17 117.493 225.985 117.308 225.845 117.065L223.785 113.489C223.504 113.004 223.504 112.48 223.791 112.321C223.932 112.238 224.117 112.27 224.301 112.372C224.486 112.48 224.671 112.666 224.812 112.908L226.368 115.603L230.061 113.496C230.195 113.419 230.38 113.445 230.565 113.547Z"
	            fill="white"
	          />
	          <path
	            d="M227.439 109.141C230.246 110.763 232.51 114.69 232.497 117.908C232.491 121.132 230.207 122.429 227.407 120.807C224.607 119.185 222.343 115.265 222.35 112.04C222.356 108.822 224.639 107.526 227.439 109.141ZM226.859 117.659L231.062 115.258C231.343 115.099 231.349 114.575 231.068 114.09C230.928 113.847 230.743 113.662 230.558 113.553C230.373 113.445 230.188 113.419 230.048 113.502L226.355 115.609L224.799 112.915C224.658 112.672 224.473 112.487 224.289 112.379C224.104 112.27 223.919 112.244 223.778 112.327C223.498 112.487 223.491 113.011 223.772 113.496L225.832 117.072C225.972 117.314 226.157 117.499 226.342 117.608C226.54 117.71 226.719 117.736 226.859 117.659Z"
	            fill="#D268CC"
	          />
	          <path
	            d="M227.439 109.141C230.246 110.763 232.51 114.69 232.497 117.908C232.491 121.132 230.207 122.429 227.407 120.807C224.607 119.185 222.343 115.265 222.35 112.04C222.356 108.822 224.639 107.526 227.439 109.141ZM226.859 117.659L231.062 115.258C231.343 115.099 231.349 114.575 231.068 114.09C230.928 113.847 230.743 113.662 230.558 113.553C230.373 113.445 230.188 113.419 230.048 113.502L226.355 115.609L224.799 112.915C224.658 112.672 224.473 112.487 224.289 112.379C224.104 112.27 223.919 112.244 223.778 112.327C223.498 112.487 223.491 113.011 223.772 113.496L225.832 117.072C225.972 117.314 226.157 117.499 226.342 117.608C226.54 117.71 226.719 117.736 226.859 117.659Z"
	            fill="#4AD3AF"
	          />
	          <path
	            opacity="0.4"
	            d="M161.404 277.965C161.404 281.353 159.576 284.507 156.634 286.186L125.044 304.218C123.792 304.932 122.387 305.292 120.981 305.292C119.576 305.292 118.17 304.932 116.913 304.218L99.3842 294.202C98.2244 293.54 97.5273 292.34 97.5273 291.003C97.5273 289.666 98.2186 288.466 99.3785 287.797L130.391 269.96C132.757 268.6 134.231 266.058 134.231 263.327V263.155C134.231 260.373 136.042 259.716 136.042 263.155V263.327C136.042 266.703 134.225 269.846 131.294 271.531L130.974 271.714L154.508 285.312L155.736 284.609C158.119 283.25 159.593 280.701 159.593 277.959C159.593 275.256 161.404 274.616 161.404 277.965ZM134.145 278.439L131.74 279.85L139.293 284.215L141.698 282.804L134.145 278.439ZM142.595 282.278L145.001 280.867L137.448 276.502L135.042 277.913L142.595 282.278ZM126.083 291.968L128.489 290.557L120.936 286.192L118.53 287.603L126.083 291.968ZM117.633 288.129L115.228 289.54L122.781 293.905L125.186 292.494L117.633 288.129ZM129.386 290.031L131.791 288.62L124.238 284.255L121.833 285.666L129.386 290.031ZM132.688 288.089L135.094 286.678L127.54 282.313L125.135 283.724L132.688 288.089ZM135.991 286.152L138.396 284.741L130.843 280.376L128.437 281.787L135.991 286.152ZM133.242 277.919L126.735 274.159L124.307 275.553L130.843 279.33L133.242 277.919ZM123.398 276.073L120.97 277.473L127.535 281.267L129.94 279.856L123.398 276.073ZM120.061 277.993L117.633 279.387L124.238 283.204L126.643 281.793L120.061 277.993ZM116.725 279.913L114.296 281.307L120.936 285.141L123.341 283.729L116.725 279.913ZM113.388 281.827L110.96 283.221L117.633 287.078L120.039 285.666L113.388 281.827ZM110.051 283.747L107.623 285.146L114.331 289.02L116.736 287.609L110.051 283.747ZM106.715 285.666L104.286 287.06L111.028 290.957L113.434 289.546L106.715 285.666ZM111.925 291.477L119.479 295.842L121.884 294.431L114.331 290.066L111.925 291.477ZM120.381 296.362L127.723 300.601L130.163 299.207L122.792 294.945L120.381 296.362ZM131.071 298.693L133.511 297.299L126.089 293.014L123.684 294.425L131.071 298.693ZM134.419 296.785L136.859 295.391L129.392 291.077L126.986 292.488L134.419 296.785ZM137.768 294.871L140.207 293.477L132.694 289.134L130.289 290.546L137.768 294.871ZM141.116 292.962L143.555 291.568L135.996 287.198L133.591 288.609L141.116 292.962ZM144.464 291.048L146.903 289.654L139.299 285.261L136.893 286.672L144.464 291.048ZM147.812 289.14L150.252 287.746L142.601 283.324L140.196 284.735L147.812 289.14ZM151.16 287.226L153.6 285.832L145.904 281.381L143.498 282.792L151.16 287.226ZM130.071 272.24L127.643 273.634L134.145 277.387L136.551 275.976L130.071 272.24ZM126.809 301.127L103.378 287.586L100.276 289.369C99.6813 289.706 99.3328 290.317 99.3328 291.003C99.3328 291.683 99.687 292.294 100.281 292.631L117.81 302.647C119.764 303.761 122.193 303.767 124.147 302.647L126.809 301.127Z"
	            fill="#90CAF9"
	          />
	          <g opacity="0.07">
	            <path
	              opacity="0.0909"
	              d="M144.544 263.384C143.401 263.327 142.344 263.555 141.487 264.001C141.401 263.995 139.019 265.412 138.962 265.446L104.143 286.523C103.018 287.175 102.435 288.203 102.498 289.317C102.515 289.631 102.589 289.94 102.704 290.237C102.989 291.031 103.795 291.871 104.709 292.402L123.067 303.001C123.295 303.132 123.604 303.287 123.855 303.39C124.741 303.755 125.746 303.961 126.769 303.967C127.929 303.972 128.991 303.721 129.826 303.241L166.952 280.77C168.066 280.124 168.666 279.107 168.615 277.993C168.592 277.536 168.455 277.09 168.238 276.668C167.906 276.028 167.203 275.359 166.438 274.913L148.206 264.389C147.229 263.829 145.778 263.446 144.544 263.384Z"
	              fill="#DFDFDF"
	            />
	            <path
	              opacity="0.1818"
	              d="M144.052 264C142.955 263.88 141.904 264.092 141.041 264.48C140.876 264.475 138.642 265.76 138.522 265.829L104.178 286.586C103.058 287.231 102.532 288.254 102.669 289.345C102.709 289.648 102.801 289.934 102.921 290.225C103.201 290.928 104.126 291.825 104.949 292.299L123.049 302.749C123.255 302.869 123.598 303.041 123.827 303.138C124.695 303.504 125.689 303.715 126.689 303.726C127.832 303.738 128.883 303.498 129.7 303.024L166.118 281.009C167.221 280.375 167.763 279.37 167.661 278.29C167.621 277.85 167.461 277.439 167.232 277.027C166.918 276.462 166.129 275.747 165.438 275.353L147.6 265.052C146.732 264.549 145.155 264.115 144.052 264Z"
	              fill="#DFDFDF"
	            />
	            <path
	              opacity="0.2727"
	              d="M143.555 264.617C142.498 264.439 141.453 264.622 140.59 264.965C140.339 264.954 138.253 266.119 138.076 266.222L104.206 286.665C103.092 287.305 102.624 288.322 102.829 289.385C102.887 289.67 103.001 289.939 103.126 290.219C103.395 290.836 104.446 291.784 105.178 292.207L123.021 302.503C123.204 302.611 123.581 302.806 123.781 302.891C124.632 303.257 125.609 303.474 126.598 303.491C127.723 303.508 128.763 303.28 129.569 302.817L165.284 281.26C166.375 280.631 166.866 279.643 166.712 278.592C166.649 278.175 166.466 277.786 166.238 277.392C165.946 276.895 165.067 276.146 164.455 275.792L147.012 265.719C146.229 265.274 144.532 264.777 143.555 264.617Z"
	              fill="#DFDFDF"
	            />
	            <path
	              opacity="0.3636"
	              d="M143.064 265.235C142.052 265.001 141.013 265.155 140.144 265.452C139.813 265.441 137.876 266.475 137.642 266.612L104.252 286.735C103.143 287.375 102.732 288.386 103.012 289.42C103.086 289.689 103.223 289.94 103.355 290.214C103.606 290.746 104.789 291.746 105.429 292.117L123.004 302.264C123.164 302.356 123.575 302.573 123.752 302.653C124.586 303.013 125.546 303.247 126.517 303.264C127.626 303.287 128.654 303.064 129.443 302.613L164.444 281.507C165.518 280.884 165.963 279.913 165.752 278.896C165.672 278.502 165.466 278.142 165.232 277.759C164.969 277.33 163.992 276.548 163.455 276.239L146.4 266.395C145.726 266.001 143.904 265.429 143.064 265.235Z"
	              fill="#DFDFDF"
	            />
	            <path
	              opacity="0.4545"
	              d="M142.567 265.852C141.607 265.56 140.567 265.686 139.687 265.937C139.27 265.92 137.487 266.834 137.19 267.006L104.275 286.815C103.172 287.449 102.812 288.454 103.166 289.46C103.258 289.717 103.418 289.946 103.555 290.208C103.789 290.66 105.103 291.705 105.652 292.025L122.964 302.018C123.101 302.098 123.546 302.338 123.695 302.401C124.518 302.761 125.46 303.001 126.415 303.03C127.5 303.058 128.523 302.847 129.3 302.401L163.598 281.758C164.661 281.147 165.061 280.187 164.792 279.204C164.689 278.833 164.466 278.496 164.221 278.13C163.986 277.77 162.912 276.947 162.455 276.685L145.795 267.063C145.223 266.72 143.275 266.069 142.567 265.852Z"
	              fill="#DFDFDF"
	            />
	            <path
	              opacity="0.5455"
	              d="M142.075 266.469C141.167 266.121 140.127 266.218 139.242 266.424C138.744 266.407 137.11 267.189 136.756 267.395L104.315 286.884C103.218 287.518 102.909 288.512 103.338 289.495C103.446 289.735 103.584 289.975 103.772 290.203C103.903 290.603 105.435 291.666 105.892 291.929L122.941 301.773C123.055 301.842 123.535 302.099 123.661 302.156C124.466 302.516 125.392 302.762 126.329 302.796C127.397 302.83 128.409 302.63 129.169 302.19L162.764 281.999C163.81 281.393 164.164 280.45 163.844 279.502C163.724 279.148 163.472 278.845 163.227 278.491C163.021 278.194 161.856 277.342 161.473 277.119L145.206 267.726C144.721 267.446 142.652 266.692 142.075 266.469Z"
	              fill="#DFDFDF"
	            />
	            <path
	              opacity="0.6364"
	              d="M141.578 267.086C140.721 266.68 139.681 266.749 138.79 266.903C138.207 266.88 136.722 267.543 136.311 267.783L104.343 286.957C103.252 287.586 102.995 288.58 103.504 289.529C103.624 289.757 103.778 289.986 103.984 290.191C104.092 290.511 105.76 291.62 106.126 291.831L122.912 301.521C123.004 301.573 123.518 301.858 123.621 301.904C124.409 302.264 125.318 302.515 126.243 302.555C127.295 302.601 128.294 302.401 129.043 301.973L161.936 282.244C162.97 281.65 163.278 280.718 162.895 279.798C162.758 279.467 162.541 279.141 162.233 278.85C162.107 278.593 160.793 277.736 160.484 277.559L144.607 268.394C144.218 268.171 142.024 267.297 141.578 267.086Z"
	              fill="#DFDFDF"
	            />
	            <path
	              opacity="0.7273"
	              d="M141.087 267.709C140.287 267.246 139.241 267.292 138.344 267.395C137.682 267.366 136.345 267.909 135.876 268.178L104.389 287.032C103.303 287.661 103.092 288.649 103.681 289.569C103.818 289.78 103.989 289.998 104.212 290.192C104.292 290.432 106.103 291.586 106.377 291.746L122.901 301.287C122.969 301.327 123.518 301.63 123.592 301.67C124.363 302.03 125.26 302.287 126.163 302.333C127.197 302.384 128.186 302.196 128.917 301.773L161.096 282.496C162.118 281.907 162.381 280.993 161.941 280.108C161.787 279.799 161.553 279.496 161.227 279.222C161.13 279.028 159.719 278.136 159.49 278.005L144.006 269.063C143.715 268.892 141.407 267.892 141.087 267.709Z"
	              fill="#DFDFDF"
	            />
	            <path
	              opacity="0.8182"
	              d="M140.59 268.327C139.761 267.972 138.796 267.824 137.887 267.881C137.139 267.852 135.956 268.264 135.425 268.572L104.412 287.113C103.332 287.735 103.166 288.724 103.84 289.609C103.995 289.809 104.177 290.009 104.417 290.187C104.469 290.347 106.423 291.546 106.606 291.655L122.872 301.042C122.918 301.071 123.501 301.396 123.552 301.419C124.312 301.779 125.186 302.048 126.077 302.093C127.089 302.151 128.071 301.973 128.791 301.556L160.267 282.736C161.272 282.153 161.495 281.251 160.993 280.405C160.821 280.114 160.57 279.834 160.233 279.582C160.17 279.451 158.656 278.531 158.501 278.44L143.412 269.727C143.212 269.618 140.841 268.327 140.59 268.327Z"
	              fill="#DFDFDF"
	            />
	            <path
	              opacity="0.9091"
	              d="M140.099 268.943C139.31 268.549 138.356 268.355 137.442 268.366C136.613 268.332 135.579 268.623 134.991 268.96L104.452 287.181C103.378 287.798 103.258 288.792 104.012 289.643C104.178 289.832 104.383 290.014 104.635 290.18C104.663 290.26 106.754 291.506 106.846 291.557L122.844 300.796C122.867 300.807 123.484 301.161 123.506 301.173C124.249 301.527 125.106 301.807 125.98 301.859C126.975 301.921 127.946 301.75 128.649 301.344L159.427 282.987C160.421 282.416 160.604 281.518 160.039 280.713C159.85 280.444 159.582 280.182 159.233 279.953C159.199 279.89 157.588 278.936 157.513 278.89L142.812 270.406C142.71 270.343 140.219 268.943 140.099 268.943Z"
	              fill="#DFDFDF"
	            />
	            <path
	              opacity="0.07"
	              d="M128.528 301.139L158.587 283.233C159.884 282.484 159.718 281.176 158.221 280.313L139.601 269.56C138.104 268.697 135.842 268.6 134.545 269.349L104.486 287.255C103.189 288.003 103.355 289.312 104.852 290.175L123.472 300.927C124.969 301.79 127.231 301.887 128.528 301.139Z"
	              fill="#DFDFDF"
	            />
	          </g>
	          <path d="M142.444 219.347L167.476 233.676L167.024 234.464L141.992 220.136L142.444 219.347Z" fill="#B0B7E5" />
	          <path
	            d="M98.2299 250.682L97.7728 249.899L140.076 225.229L165.009 239.438L164.558 240.226L140.081 226.274L98.2299 250.682Z"
	            fill="#B0B7E5"
	          />
	          <path d="M137.442 217.949H138.344V230.856H137.442V217.949Z" fill="url(#paint9_linear_4527_60659)" />
	          <path d="M97.5904 244.277H98.4932V260.892H97.5904V244.277Z" fill="url(#paint10_linear_4527_60659)" />
	          <path d="M100.921 242.106H101.824V258.887H100.921V242.106Z" fill="url(#paint11_linear_4527_60659)" />
	          <path d="M104.252 239.94H105.155V256.892H104.252V239.94Z" fill="url(#paint12_linear_4527_60659)" />
	          <path d="M107.584 237.771H108.486V254.888H107.584V237.771Z" fill="url(#paint13_linear_4527_60659)" />
	          <path d="M110.92 235.599H111.823V252.888H110.92V235.599Z" fill="url(#paint14_linear_4527_60659)" />
	          <path d="M114.251 233.427H115.154V250.881H114.251V233.427Z" fill="url(#paint15_linear_4527_60659)" />
	          <path d="M117.582 231.257H118.485V248.883H117.582V231.257Z" fill="url(#paint16_linear_4527_60659)" />
	          <path d="M120.913 229.091H121.816V246.883H120.913V229.091Z" fill="url(#paint17_linear_4527_60659)" />
	          <path d="M124.244 226.92H125.146V244.883H124.244V226.92Z" fill="url(#paint18_linear_4527_60659)" />
	          <path d="M127.575 224.749H128.478V242.878H127.575V224.749Z" fill="url(#paint19_linear_4527_60659)" />
	          <path d="M130.906 222.577H131.809V240.872H130.906V222.577Z" fill="url(#paint20_linear_4527_60659)" />
	          <path d="M134.237 220.412H135.14V238.878H134.237V220.412Z" fill="url(#paint21_linear_4527_60659)" />
	          <path
	            d="M127.312 270.012C127.312 270.829 127.592 271.412 128.055 271.692C128.066 271.697 129.506 272.531 129.517 272.537C129.997 272.806 129.689 272.2 130.414 271.777C131.877 270.932 133.06 268.892 133.06 267.218C133.06 266.389 133.826 266.384 133.357 266.104C133.346 266.098 131.814 265.252 131.803 265.241C131.329 264.984 130.677 265.029 129.957 265.447C128.495 266.292 127.312 268.338 127.312 270.012Z"
	            fill="url(#paint22_linear_4527_60659)"
	          />
	          <path
	            d="M128.843 270.88C128.843 272.554 130.026 273.228 131.488 272.388C132.951 271.542 134.134 269.503 134.134 267.829C134.134 266.155 132.951 265.48 131.488 266.32C130.026 267.16 128.843 269.206 128.843 270.88Z"
	            fill="url(#paint23_linear_4527_60659)"
	          />
	          <path
	            d="M130.254 270.064C130.254 270.847 130.809 271.161 131.489 270.767C132.168 270.373 132.723 269.424 132.723 268.641C132.723 267.859 132.168 267.544 131.489 267.939C130.803 268.333 130.254 269.287 130.254 270.064Z"
	            fill="url(#paint24_linear_4527_60659)"
	          />
	          <path
	            d="M131.357 266.258C132.054 265.852 132.694 265.801 133.168 266.035C132.728 265.909 132.18 266.007 131.585 266.344C130.123 267.189 128.94 269.229 128.94 270.903C128.94 271.777 129.26 272.377 129.774 272.634C129.129 272.451 128.711 271.812 128.711 270.817C128.717 269.143 129.9 267.098 131.357 266.258Z"
	            fill="url(#paint25_radial_4527_60659)"
	          />
	          <path
	            d="M100.453 285.621C100.453 286.438 100.733 287.021 101.196 287.301C101.207 287.307 102.647 288.141 102.658 288.146C103.138 288.415 102.83 287.809 103.555 287.387C105.018 286.541 106.201 284.501 106.201 282.827C106.201 281.999 106.966 281.993 106.498 281.713C106.486 281.707 104.955 280.862 104.944 280.85C104.469 280.593 103.818 280.639 103.098 281.056C101.635 281.902 100.453 283.947 100.453 285.621Z"
	            fill="url(#paint26_linear_4527_60659)"
	          />
	          <path
	            d="M101.984 286.489C101.984 288.163 103.166 288.837 104.629 287.997C106.092 287.152 107.274 285.112 107.274 283.438C107.274 281.764 106.092 281.09 104.629 281.93C103.166 282.775 101.984 284.815 101.984 286.489Z"
	            fill="url(#paint27_linear_4527_60659)"
	          />
	          <path
	            d="M103.395 285.678C103.395 286.461 103.949 286.775 104.629 286.381C105.309 285.987 105.863 285.038 105.863 284.256C105.863 283.473 105.309 283.159 104.629 283.553C103.944 283.941 103.395 284.896 103.395 285.678Z"
	            fill="url(#paint28_linear_4527_60659)"
	          />
	          <path
	            d="M104.497 281.867C105.194 281.462 105.834 281.41 106.309 281.645C105.869 281.519 105.32 281.616 104.726 281.953C103.263 282.799 102.081 284.838 102.081 286.512C102.081 287.387 102.401 287.987 102.915 288.244C102.269 288.061 101.852 287.421 101.852 286.427C101.858 284.753 103.04 282.707 104.497 281.867Z"
	            fill="url(#paint29_radial_4527_60659)"
	          />
	          <path d="M137.236 268.797L137.692 269.575L111.323 285.045L110.866 284.266L137.236 268.797Z" fill="#B0B7E5" />
	          <path d="M145.724 273.661L146.181 274.439L119.698 289.976L119.241 289.197L145.724 273.661Z" fill="#B0B7E5" />
	          <path
	            d="M154.319 279.462L128.957 264.807L129.414 264.024L154.776 278.68L154.319 279.462Z"
	            fill="url(#paint30_linear_4527_60659)"
	          />
	          <path
	            d="M151.04 281.416L125.678 266.755L126.129 265.973L151.491 280.628L151.04 281.416Z"
	            fill="url(#paint31_linear_4527_60659)"
	          />
	          <path
	            d="M147.755 283.365L122.393 268.704L122.844 267.921L148.206 282.576L147.755 283.365Z"
	            fill="url(#paint32_linear_4527_60659)"
	          />
	          <path
	            d="M144.469 285.313L119.107 270.652L119.564 269.869L144.926 284.524L144.469 285.313Z"
	            fill="url(#paint33_linear_4527_60659)"
	          />
	          <path d="M141.19 287.261L115.828 272.6L116.279 271.817L141.641 286.478L141.19 287.261Z" fill="url(#paint34_linear_4527_60659)" />
	          <path
	            d="M137.905 289.208L112.542 274.553L112.994 273.765L138.356 288.425L137.905 289.208Z"
	            fill="url(#paint35_linear_4527_60659)"
	          />
	          <path
	            d="M134.619 291.159L109.257 276.503L109.714 275.715L135.076 290.376L134.619 291.159Z"
	            fill="url(#paint36_linear_4527_60659)"
	          />
	          <path
	            d="M131.34 293.107L105.977 278.452L106.429 277.669L131.791 292.324L131.34 293.107Z"
	            fill="url(#paint37_linear_4527_60659)"
	          />
	          <path
	            d="M128.054 295.054L102.692 280.399L103.144 279.616L128.506 294.271L128.054 295.054Z"
	            fill="url(#paint38_linear_4527_60659)"
	          />
	          <path d="M138.55 240.284L137.693 239.993L146.034 215.539L146.886 215.83L138.55 240.284Z" fill="url(#paint39_linear_4527_60659)" />
	          <path
	            d="M141.384 241.913L140.527 241.622L148.863 217.162L149.72 217.453L141.384 241.913Z"
	            fill="url(#paint40_linear_4527_60659)"
	          />
	          <path
	            d="M144.218 243.535L143.361 243.244L151.697 218.784L152.554 219.076L144.218 243.535Z"
	            fill="url(#paint41_linear_4527_60659)"
	          />
	          <path
	            d="M147.046 245.157L146.189 244.866L154.531 220.406L155.388 220.698L147.046 245.157Z"
	            fill="url(#paint42_linear_4527_60659)"
	          />
	          <path d="M149.88 246.78L149.023 246.489L157.359 222.029L158.216 222.321L149.88 246.78Z" fill="url(#paint43_linear_4527_60659)" />
	          <path
	            d="M152.714 248.403L151.857 248.112L160.193 223.658L161.05 223.95L152.714 248.403Z"
	            fill="url(#paint44_linear_4527_60659)"
	          />
	          <path
	            d="M155.542 250.026L154.685 249.735L163.027 225.281L163.884 225.573L155.542 250.026Z"
	            fill="url(#paint45_linear_4527_60659)"
	          />
	          <path
	            d="M158.376 251.648L157.519 251.357L165.855 226.903L166.712 227.195L158.376 251.648Z"
	            fill="url(#paint46_linear_4527_60659)"
	          />
	          <path
	            d="M156.696 228.463L155.977 230.503L151.486 227.915L152.194 225.904L147.435 223.195L142.75 236.434L156.702 244.478L161.387 231.137L156.696 228.463Z"
	            fill="url(#paint47_linear_4527_60659)"
	          />
	          <path
	            d="M125.758 298.917C125.758 299.734 126.038 300.317 126.501 300.597C126.512 300.602 127.952 301.437 127.963 301.442C128.443 301.711 128.135 301.105 128.86 300.682C130.323 299.837 131.506 297.797 131.506 296.123C131.506 295.295 132.271 295.289 131.803 295.009C131.791 295.003 130.26 294.158 130.249 294.146C129.774 293.889 129.123 293.935 128.403 294.352C126.946 295.197 125.758 297.243 125.758 298.917Z"
	            fill="url(#paint48_linear_4527_60659)"
	          />
	          <path
	            d="M127.289 299.785C127.289 301.459 128.472 302.133 129.934 301.293C131.397 300.448 132.58 298.408 132.58 296.734C132.58 295.06 131.397 294.386 129.934 295.226C128.477 296.065 127.289 298.111 127.289 299.785Z"
	            fill="url(#paint49_linear_4527_60659)"
	          />
	          <path
	            d="M128.7 298.969C128.7 299.752 129.254 300.066 129.934 299.672C130.614 299.278 131.168 298.329 131.168 297.547C131.168 296.764 130.614 296.45 129.934 296.844C129.254 297.238 128.7 298.192 128.7 298.969Z"
	            fill="url(#paint50_linear_4527_60659)"
	          />
	          <path
	            d="M129.808 295.163C130.506 294.758 131.145 294.706 131.62 294.94C131.18 294.815 130.631 294.912 130.037 295.249C128.574 296.095 127.392 298.134 127.392 299.808C127.392 300.683 127.712 301.282 128.226 301.54C127.58 301.357 127.163 300.717 127.163 299.723C127.163 298.049 128.346 296.003 129.808 295.163Z"
	            fill="url(#paint51_radial_4527_60659)"
	          />
	          <path
	            d="M152.623 283.79C152.623 284.607 152.903 285.19 153.365 285.47C153.377 285.475 154.817 286.31 154.828 286.315C155.308 286.584 154.999 285.978 155.725 285.555C157.188 284.71 158.37 282.67 158.37 280.996C158.37 280.168 159.136 280.162 158.668 279.882C158.656 279.876 157.125 279.031 157.113 279.019C156.639 278.762 155.988 278.808 155.268 279.225C153.805 280.07 152.623 282.11 152.623 283.79Z"
	            fill="url(#paint52_linear_4527_60659)"
	          />
	          <path
	            d="M154.154 284.658C154.154 286.332 155.336 287.006 156.799 286.166C158.262 285.321 159.444 283.281 159.444 281.607C159.444 279.933 158.262 279.259 156.799 280.099C155.336 280.938 154.154 282.984 154.154 284.658Z"
	            fill="url(#paint53_linear_4527_60659)"
	          />
	          <path
	            d="M155.559 283.842C155.559 284.625 156.113 284.94 156.793 284.545C157.473 284.151 158.027 283.203 158.027 282.42C158.027 281.637 157.473 281.323 156.793 281.717C156.113 282.111 155.559 283.06 155.559 283.842Z"
	            fill="url(#paint54_linear_4527_60659)"
	          />
	          <path
	            d="M156.667 280.036C157.364 279.631 158.004 279.579 158.479 279.813C158.039 279.688 157.49 279.785 156.896 280.122C155.433 280.968 154.251 283.007 154.251 284.681C154.251 285.556 154.57 286.155 155.085 286.413C154.439 286.23 154.022 285.59 154.022 284.596C154.022 282.916 155.21 280.876 156.667 280.036Z"
	            fill="url(#paint55_radial_4527_60659)"
	          />
	          <path
	            d="M120.975 298.503C119.57 298.503 118.164 298.143 116.907 297.429L99.3783 287.413C98.2185 286.751 97.5215 285.551 97.5215 284.214C97.5215 282.877 98.2128 281.677 99.3726 281.009L130.391 263.171C132.757 261.811 134.231 259.269 134.231 256.538V256.366C134.231 253.584 132.717 251.018 130.283 249.67L123.541 245.939L124.415 244.356L131.157 248.087C134.168 249.756 136.036 252.927 136.036 256.366V256.538C136.036 259.914 134.219 263.057 131.288 264.742L100.27 282.58C99.6754 282.917 99.3269 283.528 99.3269 284.214C99.3269 284.894 99.6812 285.505 100.275 285.842L117.804 295.858C119.758 296.972 122.187 296.978 124.141 295.858L155.731 277.826C158.113 276.466 159.587 273.918 159.587 271.176C159.587 268.467 158.136 265.936 155.793 264.565L148.834 260.497L149.749 258.932L156.708 263C159.599 264.691 161.398 267.822 161.398 271.17C161.398 274.558 159.57 277.712 156.628 279.392L125.038 297.423C123.786 298.143 122.381 298.503 120.975 298.503Z"
	            fill="#B0B7E5"
	          />
	          <path
	            d="M149.772 259.143L156.565 263.114C159.399 264.771 161.159 267.839 161.159 271.119C161.159 274.273 159.542 277.215 156.902 278.912C156.765 279.004 156.491 279.164 156.348 279.249L124.889 297.207C123.735 297.864 122.444 298.218 121.136 298.252C121.038 298.252 120.947 298.258 120.85 298.252C119.639 298.241 118.433 297.955 117.336 297.407C117.205 297.344 116.953 297.207 116.828 297.133L99.4186 287.185C98.3159 286.557 97.6588 285.42 97.6588 284.151C97.6588 282.883 98.3102 281.746 99.4129 281.112L130.277 263.371C130.443 263.274 130.757 263.086 130.911 262.971C132.928 261.6 134.202 259.343 134.328 256.904C134.334 256.892 134.334 256.749 134.334 256.732C134.357 256.195 134.328 255.664 134.242 255.138C134.231 255.093 134.225 255.007 134.214 254.967C133.842 252.887 132.637 251.03 130.86 249.859C130.706 249.693 128.689 248.528 128.483 248.413L124.215 246.048L124.478 244.643L124.609 244.717L124.809 244.751L131.014 248.185C133.962 249.819 135.796 252.927 135.796 256.298V256.47C135.796 259.778 134.014 262.857 131.146 264.508L100.127 282.346C99.4757 282.723 99.0872 283.392 99.0872 284.146C99.0872 284.9 99.4757 285.568 100.133 285.94L117.662 295.956C118.753 296.578 119.987 296.864 121.221 296.813C122.187 296.767 123.147 296.51 124.015 296.047C124.078 296.018 124.632 295.71 124.689 295.676L155.634 278.015C155.788 277.924 156.091 277.741 156.239 277.644C158.302 276.267 159.599 273.976 159.707 271.496C159.73 270.982 159.702 270.468 159.627 269.959C159.302 267.834 158.102 265.914 156.319 264.703C156.188 264.56 154.52 263.554 154.348 263.457L149.4 260.566L149.657 259.355L149.772 259.143Z"
	            fill="#C4C9EC"
	          />
	          <path
	            d="M149.783 259.349L156.411 263.222C159.187 264.845 160.907 267.85 160.907 271.061C160.907 274.204 159.267 277.129 156.611 278.774C156.519 278.837 156.159 279.049 156.062 279.1L124.735 296.983C123.592 297.635 122.307 297.983 121.004 298.006C120.907 298.006 120.816 298.006 120.718 298.006C119.513 297.983 118.319 297.686 117.239 297.121C117.153 297.081 116.828 296.898 116.742 296.846L99.4527 286.968C98.4129 286.373 97.7901 285.299 97.7901 284.099C97.7901 282.9 98.4072 281.826 99.447 281.231L130.151 263.577C130.26 263.514 130.683 263.262 130.786 263.188C132.831 261.868 134.168 259.686 134.408 257.28C134.414 257.252 134.419 257.137 134.425 257.115C134.471 256.589 134.471 256.058 134.414 255.532C134.408 255.503 134.402 255.389 134.397 255.361C134.151 253.264 133.077 251.355 131.431 250.064C131.128 249.727 129.54 248.761 129.129 248.533L124.878 246.179L124.529 244.951L124.524 244.945L124.701 244.888L130.86 248.304C133.751 249.904 135.545 252.949 135.545 256.252V256.423C135.545 259.663 133.802 262.68 130.991 264.296L99.9727 282.134C99.2585 282.545 98.8357 283.277 98.8357 284.099C98.8357 284.922 99.2642 285.654 99.9784 286.065L117.507 296.081C118.593 296.703 119.827 297.001 121.061 296.966C122.033 296.938 122.998 296.698 123.872 296.258C123.992 296.206 124.444 295.961 124.558 295.892L155.514 278.22C155.617 278.163 156.022 277.923 156.119 277.855C158.216 276.523 159.576 274.284 159.799 271.827C159.845 271.318 159.845 270.804 159.793 270.296C159.576 268.147 158.49 266.176 156.805 264.851C156.536 264.571 155.222 263.737 154.879 263.537L149.932 260.646L149.657 259.577L149.783 259.349Z"
	            fill="#D8DBF2"
	          />
	          <path
	            d="M149.795 259.554L156.257 263.33C158.97 264.919 160.662 267.856 160.662 271.004C160.662 274.135 158.999 277.043 156.319 278.637C156.274 278.666 155.822 278.928 155.777 278.951L124.587 296.755C123.461 297.4 122.181 297.737 120.878 297.749C120.787 297.749 120.69 297.749 120.599 297.749C119.393 297.714 118.21 297.4 117.159 296.823C117.113 296.8 116.713 296.577 116.673 296.549L99.5043 286.739C98.5216 286.179 97.9388 285.168 97.9331 284.042C97.9331 282.911 98.5158 281.899 99.4928 281.339L130.043 263.776C130.1 263.742 130.626 263.439 130.677 263.399C132.751 262.136 134.145 260.017 134.511 257.657C134.522 257.617 134.528 257.531 134.534 257.491C134.608 256.971 134.631 256.446 134.602 255.92C134.597 255.903 134.597 255.76 134.591 255.749C134.465 253.635 133.528 251.675 132.008 250.264C131.551 249.761 130.397 248.99 129.78 248.647L125.546 246.304L124.587 245.253L124.444 245.173L124.598 245.024L130.711 248.418C133.54 249.984 135.294 252.96 135.294 256.194V256.366C135.294 259.537 133.585 262.491 130.837 264.073L99.8185 281.911C99.0472 282.356 98.5844 283.151 98.5844 284.042C98.5844 284.933 99.0472 285.727 99.8242 286.173L117.353 296.189C118.433 296.806 119.667 297.12 120.907 297.103C121.884 297.086 122.85 296.869 123.735 296.457C123.912 296.377 124.255 296.195 124.427 296.097L155.394 278.42C155.445 278.391 155.954 278.094 156.005 278.06C158.142 276.774 159.565 274.586 159.902 272.152C159.97 271.649 159.993 271.135 159.97 270.621C159.862 268.456 158.89 266.427 157.308 264.987C156.908 264.565 155.942 263.902 155.428 263.605L150.474 260.708L149.669 259.782L149.795 259.554Z"
	            fill="#EBEDF9"
	          />
	          <path
	            d="M120.752 297.509C119.455 297.509 118.181 297.172 117.067 296.538L99.538 286.517C98.6181 285.991 98.0696 285.043 98.0639 283.986C98.0639 282.929 98.6124 281.98 99.5266 281.449L130.545 263.611C133.151 262.114 134.767 259.315 134.767 256.309V256.138C134.767 253.075 133.105 250.253 130.425 248.767L124.357 245.408L124.489 245.168L130.562 248.528C133.328 250.059 135.047 252.973 135.047 256.138V256.309C135.047 259.412 133.379 262.303 130.688 263.845L99.6694 281.683C98.8352 282.163 98.3382 283.02 98.3382 283.986C98.3382 284.945 98.841 285.802 99.6751 286.282L117.204 296.298C118.278 296.915 119.507 297.235 120.758 297.235C122.003 297.235 123.232 296.91 124.306 296.298L155.896 278.266C158.518 276.769 160.141 273.97 160.141 270.953C160.141 267.971 158.541 265.182 155.97 263.68L149.674 260L149.811 259.766L156.102 263.44C158.758 264.994 160.41 267.868 160.41 270.947C160.41 274.061 158.73 276.958 156.027 278.501L124.437 296.532C123.318 297.172 122.043 297.509 120.752 297.509Z"
	            fill="white"
	          />
	          <path d="M124.428 244.36L149.751 258.938L148.848 260.507L123.524 245.93L124.428 244.36Z" fill="#B0B7E5" />
	          <path d="M135.364 238.122L160.726 252.78L160.274 253.562L134.912 238.904L135.364 238.122Z" fill="#B0B7E5" />
	          <path d="M132.086 240.019L157.448 254.678L156.996 255.459L131.634 240.801L132.086 240.019Z" fill="#B0B7E5" />
	          <path d="M128.8 241.92L154.162 256.578L153.71 257.36L128.348 242.702L128.8 241.92Z" fill="#B0B7E5" />
	          <path d="M125.519 243.822L150.881 258.48L150.43 259.262L125.068 244.604L125.519 243.822Z" fill="#B0B7E5" />
	          <path d="M122.242 245.721L147.604 260.379L147.152 261.16L121.79 246.502L122.242 245.721Z" fill="#B0B7E5" />
	          <path d="M118.961 247.622L144.323 262.28L143.871 263.062L118.509 248.403L118.961 247.622Z" fill="#B0B7E5" />
	          <path d="M115.674 249.523L141.036 264.182L140.584 264.963L115.222 250.305L115.674 249.523Z" fill="#B0B7E5" />
	          <path d="M112.397 251.423L137.759 266.081L137.308 266.863L111.946 252.204L112.397 251.423Z" fill="#B0B7E5" />
	          <path d="M109.116 253.324L134.478 267.982L134.026 268.764L108.664 254.106L109.116 253.324Z" fill="#B0B7E5" />
	          <path d="M105.838 255.223L131.2 269.881L130.748 270.662L105.386 256.004L105.838 255.223Z" fill="#B0B7E5" />
	          <path d="M102.552 257.123L127.914 271.781L127.462 272.563L102.1 257.904L102.552 257.123Z" fill="#B0B7E5" />
	          <path d="M99.2713 259.026L124.633 273.685L124.182 274.466L98.8196 259.808L99.2713 259.026Z" fill="#B0B7E5" />
	          <path
	            d="M117.359 274.57C117.205 274.57 117.05 274.53 116.913 274.45L99.3841 264.434C98.2243 263.771 97.5272 262.571 97.5272 261.234C97.5272 259.897 98.2186 258.697 99.3784 258.029L134.391 237.895L144.789 207.91C145.446 206.025 146.743 204.408 148.446 203.362L151.514 201.477C151.943 201.214 152.497 201.351 152.76 201.774C153.022 202.202 152.885 202.757 152.463 203.019L149.394 204.905C148.046 205.733 147.018 207.007 146.503 208.504L135.888 239.129L100.281 259.606C99.6869 259.943 99.3384 260.554 99.3384 261.24C99.3384 261.92 99.6927 262.531 100.287 262.868L117.816 272.884C118.25 273.13 118.399 273.684 118.153 274.118C117.976 274.41 117.673 274.57 117.359 274.57Z"
	            fill="#B0B7E5"
	          />
	          <path
	            d="M152.537 201.825C152.577 201.888 152.594 201.962 152.594 202.025C152.685 202.316 152.32 202.791 152.051 202.956L149.937 204.253C149.857 204.299 149.075 204.79 149.006 204.848C147.829 205.63 146.909 206.756 146.378 208.064C146.332 208.173 146.258 208.384 146.218 208.493L135.659 238.946L100.116 259.383C99.527 259.72 99.1614 260.303 99.11 260.966C99.0871 261.268 99.1328 261.56 99.2357 261.834C99.3556 262.16 99.5613 262.445 99.8356 262.662C99.8927 262.794 101.15 263.571 101.281 263.645L117.142 272.707C117.467 272.895 117.879 273.478 117.69 273.804C117.565 274.021 117.542 274.261 117.307 274.261C117.29 274.267 117.267 274.272 117.239 274.278C117.21 274.278 117.187 274.284 117.153 274.289C117.107 274.295 117.05 274.284 117.01 274.267C116.988 274.261 116.965 274.249 116.942 274.238L99.4128 264.222C98.3101 263.594 97.653 262.457 97.653 261.188C97.653 259.92 98.3044 258.783 99.4071 258.149L134.317 238.077L134.699 237.392L144.784 208.281C144.915 207.91 145.201 207.184 145.395 206.842C146.052 205.55 147.041 204.436 148.258 203.631C148.332 203.573 149.137 203.071 149.217 203.019L151.309 201.739C151.577 201.574 152.171 201.465 152.388 201.677C152.406 201.688 152.428 201.699 152.446 201.711C152.474 201.739 152.508 201.774 152.537 201.825Z"
	            fill="#C4C9EC"
	          />
	          <path
	            d="M152.32 201.864C152.36 201.927 152.365 202.007 152.343 202.059C152.405 202.253 151.828 202.773 151.651 202.887L149.554 204.173C149.4 204.27 148.777 204.664 148.64 204.778C147.503 205.595 146.618 206.732 146.109 208.046C146.081 208.115 145.978 208.395 145.955 208.469L135.459 238.751L99.9784 259.154C99.3956 259.491 99.0128 260.051 98.9099 260.691C98.8642 260.982 98.8757 261.273 98.9442 261.553C99.0242 261.89 99.1842 262.193 99.4127 262.445C99.5213 262.707 100.493 263.376 100.755 263.524L116.502 272.523C116.719 272.649 117.393 273.266 117.267 273.483C117.182 273.632 117.445 273.946 117.285 273.946C117.285 273.957 117.273 273.974 117.262 273.986C117.245 273.997 117.227 274.009 117.199 274.026C117.153 274.049 117.096 274.043 117.062 274.032C117.039 274.026 117.016 274.02 116.993 274.003L99.4641 263.987C98.4243 263.393 97.8015 262.319 97.8015 261.119C97.8015 259.919 98.4186 258.845 99.4584 258.251L134.237 238.254L134.728 237.659L144.784 208.652C144.869 208.401 145.229 207.435 145.361 207.206C145.955 205.892 146.898 204.744 148.075 203.904C148.217 203.784 148.857 203.378 149.017 203.281L151.097 202.007C151.28 201.899 152.005 201.619 152.154 201.761C152.177 201.761 152.194 201.767 152.217 201.779C152.24 201.79 152.285 201.813 152.32 201.864Z"
	            fill="#D8DBF2"
	          />
	          <path
	            d="M152.097 201.91C152.137 201.973 152.131 202.053 152.085 202.099C152.114 202.196 151.331 202.762 151.24 202.819L149.154 204.099C148.92 204.241 148.463 204.544 148.257 204.716C147.155 205.567 146.309 206.721 145.823 208.035C145.806 208.07 145.686 208.412 145.675 208.452L135.236 238.563L99.8182 258.931C99.2412 259.263 98.8412 259.8 98.6927 260.417C98.6241 260.697 98.607 260.988 98.6412 261.279C98.6812 261.628 98.7955 261.954 98.9783 262.234C99.144 262.628 99.8239 263.188 100.212 263.411L115.839 272.341C115.947 272.404 116.879 273.055 116.816 273.164C116.776 273.238 117.313 273.632 117.233 273.632C117.256 273.649 117.256 273.672 117.25 273.689C117.244 273.706 117.239 273.735 117.21 273.763C117.17 273.809 117.107 273.809 117.084 273.803C117.062 273.803 117.039 273.792 117.016 273.781L99.4868 263.765C98.5041 263.205 97.9213 262.194 97.9156 261.068C97.9156 259.937 98.4984 258.925 99.4754 258.366L134.162 238.431L134.768 237.928L144.784 209.024C144.829 208.898 145.263 207.687 145.326 207.572C145.863 206.23 146.749 205.059 147.892 204.179C148.109 204.002 148.577 203.687 148.817 203.539L150.891 202.265C150.983 202.207 151.851 201.762 151.92 201.83C151.943 201.825 151.965 201.825 151.988 201.83C152.011 201.836 152.063 201.853 152.097 201.91Z"
	            fill="#EBEDF9"
	          />
	          <path
	            d="M117.13 273.575C117.107 273.575 117.085 273.569 117.062 273.558L99.5385 263.542C98.6186 263.016 98.0701 262.068 98.0644 261.011C98.0644 259.954 98.6129 259.006 99.527 258.474L134.802 238.191L145.286 207.938C145.881 206.219 147.063 204.744 148.617 203.796L151.686 201.911C151.708 201.899 151.731 201.888 151.754 201.888C151.771 201.888 151.834 201.893 151.874 201.951C151.914 202.013 151.891 202.099 151.828 202.139L148.76 204.025C147.263 204.944 146.121 206.367 145.544 208.024L135.019 238.374L99.6584 258.703C98.8243 259.183 98.3272 260.04 98.3272 261.005C98.3272 261.965 98.83 262.822 99.6642 263.302L117.193 273.318C117.233 273.341 117.25 273.375 117.256 273.398C117.262 273.421 117.267 273.461 117.245 273.501C117.21 273.569 117.147 273.575 117.13 273.575Z"
	            fill="white"
	          />
	          <path
	            d="M99.1954 247.74C98.1327 247.129 97.4814 246.032 97.4528 244.809C97.4242 243.587 98.0184 242.455 99.0469 241.792L121.381 227.366L143.721 212.934L168.992 227.657C169.403 227.897 169.66 228.331 169.671 228.806C169.683 229.286 169.449 229.726 169.049 229.983L168.066 228.463C167.935 228.549 167.86 228.691 167.86 228.846C167.866 229 167.946 229.143 168.083 229.217L143.766 215.053L121.895 229.183L100.024 243.312C99.5268 243.632 99.2411 244.175 99.2583 244.764C99.2754 245.352 99.5896 245.878 100.098 246.175L99.1954 247.74Z"
	            fill="url(#paint56_radial_4527_60659)"
	          />
	          <path
	            opacity="0.75"
	            d="M143.732 213.431L139.081 224.275L134.487 234.925C134.527 234.948 134.373 235.091 134.402 235.119C134.253 235.433 134.15 235.908 134.093 236.439C134.082 236.565 134.07 236.69 134.065 236.816C134.042 237.273 134.07 237.69 134.139 238.004C134.116 238.022 134.025 238.159 134.002 238.176C133.773 237.936 133.145 236.856 133.139 236.513C133.071 236.479 133.036 236.479 133.048 236.485C133.059 236.49 133.116 236.49 133.202 236.456C133.293 236.153 132.653 235.405 132.928 235.228L132.253 221.755L132.242 221.761L131.888 221.989L131.859 222.007L131.791 234.233C131.545 234.393 132.116 235.079 132.122 235.376C132.128 235.673 132.996 236.347 133.248 236.49L133.505 237.524L133.476 237.547C133.442 237.57 133.345 237.707 133.316 237.736C132.785 237.427 131.762 236.473 131.745 235.862C131.728 235.251 131.328 234.279 131.842 233.948L137.796 223.692L143.732 213.431Z"
	            fill="url(#paint57_linear_4527_60659)"
	          />
	          <path
	            opacity="0.625"
	            d="M143.738 213.677L130.379 226.229L117.238 238.559C117.256 238.57 116.993 238.765 117.01 238.776C116.644 239.119 116.399 239.656 116.313 240.256C116.296 240.399 116.284 240.542 116.284 240.684C116.284 241.21 116.404 241.69 116.627 242.061C116.616 242.067 116.501 242.261 116.49 242.273C116.147 241.913 115.696 241.056 115.684 240.536C115.65 240.444 115.639 240.37 115.65 240.296C115.667 240.227 115.713 240.153 115.776 240.067C115.913 239.616 115.787 238.982 116.199 238.713L126.506 225.109L126.929 224.835L136.899 218.396L137.807 217.813L147.686 229.697C147.56 229.777 148.566 230.537 148.566 230.686C148.571 230.834 149.708 231.583 149.834 231.657L150.6 232.548L150.565 232.577C150.514 232.611 150.434 232.703 150.394 232.748C150.131 232.594 148.92 231.714 148.914 231.406C148.908 231.097 148.011 230.206 148.268 230.04L146.006 221.864L143.738 213.677Z"
	            fill="url(#paint58_linear_4527_60659)"
	          />
	          <path
	            opacity="0.5"
	            d="M98.9666 246.369C98.5038 245.889 98.2353 245.249 98.2181 244.563C98.1953 243.609 98.6581 242.729 99.458 242.209L121.604 227.908L143.738 213.607L167.694 227.56L167.649 227.588C167.58 227.634 167.517 227.685 167.46 227.737L143.749 213.922L121.683 228.177L99.6179 242.432C98.898 242.901 98.4809 243.689 98.4981 244.546C98.5152 245.14 98.7381 245.689 99.1151 246.112L98.9666 246.369Z"
	            fill="white"
	          />
	          <path d="M163.347 232.034H164.25V244.941H163.347V232.034Z" fill="url(#paint59_linear_4527_60659)" />
	          <path d="M142.896 235.865L157.346 244.137L156.897 244.92L142.447 236.649L142.896 235.865Z" fill="#B0B7E5" />
	          <path
	            d="M149.989 203.386C149.989 203.786 150.126 204.066 150.349 204.203C150.354 204.209 176.711 218.927 176.716 218.933C176.951 219.064 176.802 218.767 177.151 218.567C177.859 218.156 178.436 217.167 178.436 216.356C178.436 215.956 178.808 215.95 178.579 215.819C178.573 215.807 152.171 201.078 152.165 201.078C151.937 200.952 151.617 200.975 151.268 201.175C150.56 201.581 149.989 202.575 149.989 203.386Z"
	            fill="url(#paint60_linear_4527_60659)"
	          />
	          <path
	            d="M176.391 218.127C176.391 218.939 176.968 219.27 177.676 218.859C178.379 218.447 178.956 217.459 178.956 216.648C178.956 215.836 178.379 215.505 177.671 215.916C176.962 216.322 176.391 217.316 176.391 218.127Z"
	            fill="url(#paint61_linear_4527_60659)"
	          />
	          <path
	            d="M177.613 215.882C177.95 215.688 178.259 215.659 178.493 215.773C178.282 215.716 178.013 215.756 177.728 215.922C177.013 216.333 176.436 217.327 176.436 218.139C176.436 218.561 176.591 218.853 176.842 218.979C176.528 218.893 176.328 218.579 176.328 218.099C176.328 217.282 176.905 216.293 177.613 215.882Z"
	            fill="#EDE7F6"
	          />
	          <path
	            d="M174.391 219.869C174.077 219.869 173.774 219.704 173.602 219.412C173.351 218.978 173.505 218.424 173.934 218.178L177.225 216.287C177.659 216.036 178.213 216.19 178.459 216.618C178.71 217.053 178.556 217.607 178.128 217.853L174.837 219.744C174.699 219.835 174.54 219.869 174.391 219.869Z"
	            fill="#C7BCD6"
	          />
	          <path
	            opacity="0.5"
	            d="M155.656 204.152C155.268 204.826 159.782 208.174 165.735 211.642C171.694 215.099 176.842 217.362 177.231 216.693C177.619 216.019 173.105 212.671 167.152 209.203C161.193 205.74 156.045 203.478 155.656 204.152Z"
	            fill="url(#paint62_radial_4527_60659)"
	          />
	          <path
	            d="M124.558 210.134L127.375 209.312L127.917 207.826L130.671 243.301L124.329 237.879L124.558 210.134Z"
	            fill="url(#paint63_linear_4527_60659)"
	          />
	          <path
	            d="M150.897 255.962L128.866 244.193L127.9 207.826L149.463 220.276L150.897 255.962Z"
	            fill="url(#paint64_linear_4527_60659)"
	          />
	          <path d="M145.184 250.004L145.298 259.888L151.32 256.02L145.184 250.004Z" fill="url(#paint65_linear_4527_60659)" />
	          <path
	            d="M146.104 222.584L146.863 220.864L149.463 220.275L151.326 256.019L145.275 250.146L146.104 222.584Z"
	            fill="url(#paint66_linear_4527_60659)"
	          />
	          <path
	            d="M145.298 259.887L123.735 247.437L124.541 210.134L146.104 222.584L145.298 259.887Z"
	            fill="url(#paint67_linear_4527_60659)"
	          />
	          <path
	            d="M131.517 217.751C131.517 218.248 131.169 218.448 130.734 218.197C130.3 217.945 129.952 217.345 129.952 216.848C129.952 216.351 130.3 216.151 130.734 216.403C131.169 216.648 131.517 217.254 131.517 217.751Z"
	            fill="#D6C3C1"
	          />
	          <path
	            d="M139.339 222.189C139.339 222.686 138.99 222.886 138.556 222.635C138.122 222.384 137.773 221.784 137.773 221.287C137.773 220.79 138.122 220.59 138.556 220.841C138.99 221.092 139.339 221.698 139.339 222.189Z"
	            fill="#D6C3C1"
	          />
	          <path
	            d="M131.094 217.887C130.66 217.636 130.312 217.036 130.312 216.539C130.312 216.447 130.329 216.373 130.352 216.299C130.117 216.316 129.957 216.516 129.957 216.847C129.957 217.344 130.306 217.95 130.74 218.196C131.094 218.401 131.386 218.299 131.483 217.99C131.369 217.996 131.237 217.967 131.094 217.887Z"
	            fill="#D6C3C1"
	          />
	          <path
	            d="M138.916 222.327C138.482 222.075 138.133 221.475 138.133 220.978C138.133 220.887 138.151 220.813 138.173 220.738C137.939 220.755 137.779 220.955 137.779 221.287C137.779 221.784 138.128 222.389 138.562 222.635C138.916 222.841 139.208 222.738 139.305 222.429C139.19 222.441 139.059 222.412 138.916 222.327Z"
	            fill="#D6C3C1"
	          />
	          <path
	            d="M135.631 231.16C134.997 231.16 134.362 230.977 133.797 230.606C131.728 229.257 130.5 226.983 130.5 224.521V218.373C130.5 218.162 130.671 217.99 130.883 217.99C131.094 217.99 131.266 218.162 131.266 218.373V224.515C131.266 226.72 132.368 228.76 134.22 229.966C135.037 230.497 136.031 230.537 136.882 230.074C137.739 229.611 138.248 228.754 138.248 227.783V222.732C138.248 222.521 138.419 222.35 138.63 222.35C138.842 222.35 139.013 222.521 139.013 222.732V227.783C139.013 229.04 138.356 230.149 137.248 230.743C136.734 231.023 136.179 231.16 135.631 231.16Z"
	            fill="#5E35B1"
	          />
	          <path
	            d="M135.488 230.017C134.854 230.017 134.219 229.834 133.654 229.463C131.585 228.115 130.357 225.841 130.357 223.378V217.23C130.357 217.019 130.528 216.848 130.74 216.848C130.951 216.848 131.123 217.019 131.123 217.23V223.372C131.123 225.578 132.225 227.618 134.077 228.823C134.894 229.355 135.888 229.394 136.739 228.932C137.596 228.469 138.105 227.612 138.105 226.641V221.59C138.105 221.378 138.276 221.207 138.487 221.207C138.699 221.207 138.87 221.378 138.87 221.59V226.641C138.87 227.898 138.213 229.006 137.105 229.6C136.59 229.88 136.036 230.017 135.488 230.017Z"
	            fill="white"
	          />
	          <path
	            d="M115.153 224.955L118.747 223.709L120.095 222.063L121.844 249.214L114.942 244.603L115.153 224.955Z"
	            fill="url(#paint68_linear_4527_60659)"
	          />
	          <path
	            d="M142.047 260.892L121.821 249.214L120.078 222.063L140.299 233.742L142.047 260.892Z"
	            fill="url(#paint69_linear_4527_60659)"
	          />
	          <path d="M134.494 255.973L134.603 265.234L142.042 260.886L134.494 255.973Z" fill="url(#paint70_linear_4527_60659)" />
	          <path
	            d="M135.356 236.628L137.025 234.542L140.299 233.742L142.047 260.893L134.585 256.105L135.356 236.628Z"
	            fill="url(#paint71_linear_4527_60659)"
	          />
	          <path
	            d="M134.602 265.234L114.382 253.562L115.136 224.954L135.356 236.627L134.602 265.234Z"
	            fill="url(#paint72_linear_4527_60659)"
	          />
	          <path d="M134.659 259.653L114.582 248.061L114.553 249.226L134.773 260.899L134.659 259.653Z" fill="#F1F2F2" />
	          <path
	            d="M122.638 233.742C122.638 234.205 122.307 234.393 121.907 234.159C121.507 233.925 121.176 233.359 121.176 232.891C121.176 232.428 121.501 232.24 121.907 232.474C122.313 232.708 122.638 233.279 122.638 233.742Z"
	            fill="#2B9AD6"
	          />
	          <path
	            d="M129.974 237.913C129.974 238.376 129.643 238.564 129.243 238.33C128.837 238.096 128.511 237.53 128.511 237.062C128.511 236.599 128.837 236.41 129.243 236.645C129.643 236.879 129.974 237.445 129.974 237.913Z"
	            fill="#2B9AD6"
	          />
	          <path
	            d="M122.238 233.873C121.833 233.639 121.507 233.073 121.507 232.605C121.507 232.519 121.524 232.445 121.541 232.382C121.324 232.399 121.17 232.582 121.17 232.896C121.17 233.359 121.501 233.93 121.901 234.164C122.232 234.353 122.507 234.262 122.598 233.97C122.495 233.976 122.37 233.947 122.238 233.873Z"
	            fill="#2B9AD6"
	          />
	          <path
	            d="M129.574 238.038C129.168 237.804 128.843 237.238 128.843 236.77C128.843 236.684 128.86 236.61 128.877 236.547C128.66 236.564 128.506 236.747 128.506 237.061C128.506 237.524 128.837 238.095 129.237 238.33C129.568 238.518 129.843 238.427 129.934 238.135C129.831 238.141 129.706 238.118 129.574 238.038Z"
	            fill="#2B9AD6"
	          />
	          <path
	            d="M126.495 246.323C125.9 246.323 125.306 246.152 124.775 245.803C122.838 244.541 121.684 242.41 121.684 240.096V234.331C121.684 234.131 121.844 233.971 122.044 233.971C122.244 233.971 122.404 234.131 122.404 234.331V240.096C122.404 242.164 123.438 244.072 125.175 245.203C125.94 245.701 126.872 245.741 127.672 245.306C128.472 244.872 128.951 244.066 128.951 243.158V238.422C128.951 238.222 129.111 238.062 129.311 238.062C129.511 238.062 129.671 238.222 129.671 238.422V243.158C129.671 244.335 129.054 245.375 128.02 245.935C127.523 246.192 127.009 246.323 126.495 246.323Z"
	            fill="#1565C0"
	          />
	          <path
	            d="M126.363 245.249C125.769 245.249 125.175 245.078 124.644 244.729C122.707 243.467 121.553 241.336 121.553 239.022V233.262C121.553 233.062 121.713 232.902 121.913 232.902C122.112 232.902 122.272 233.062 122.272 233.262V239.027C122.272 241.096 123.307 243.004 125.044 244.135C125.809 244.632 126.74 244.672 127.54 244.238C128.34 243.804 128.82 242.998 128.82 242.09V237.353C128.82 237.153 128.98 236.993 129.18 236.993C129.38 236.993 129.54 237.153 129.54 237.353V242.09C129.54 243.267 128.923 244.307 127.889 244.867C127.392 245.124 126.878 245.249 126.363 245.249Z"
	            fill="white"
	          />
	          <path d="M164.395 240.56L164.852 241.339L122.152 266.39L121.695 265.611L164.395 240.56Z" fill="#B0B7E5" />
	          <path d="M121.37 258.401H122.272V275.016H121.37V258.401Z" fill="url(#paint73_linear_4527_60659)" />
	          <path d="M125.769 273.039H124.866V256.71L125.769 256.259V273.039Z" fill="url(#paint74_linear_4527_60659)" />
	          <path d="M128.363 254.11H129.266V271.062H128.363V254.11Z" fill="url(#paint75_linear_4527_60659)" />
	          <path d="M131.86 251.969H132.762V269.086H131.86V251.969Z" fill="url(#paint76_linear_4527_60659)" />
	          <path d="M135.362 249.819H136.265V267.108H135.362V249.819Z" fill="url(#paint77_linear_4527_60659)" />
	          <path d="M138.858 247.677H139.761V265.132H138.858V247.677Z" fill="url(#paint78_linear_4527_60659)" />
	          <path d="M142.356 245.534H143.258V263.16H142.356V245.534Z" fill="url(#paint79_linear_4527_60659)" />
	          <path d="M145.852 243.386H146.755V261.178H145.852V243.386Z" fill="url(#paint80_linear_4527_60659)" />
	          <path d="M149.349 241.244H150.251V259.207H149.349V241.244Z" fill="url(#paint81_linear_4527_60659)" />
	          <path d="M152.851 239.095H153.754V257.224H152.851V239.095Z" fill="url(#paint82_linear_4527_60659)" />
	          <path d="M156.348 236.953H157.25V255.248H156.348V236.953Z" fill="url(#paint83_linear_4527_60659)" />
	          <path d="M159.844 234.811H160.747V253.277H159.844V234.811Z" fill="url(#paint84_linear_4527_60659)" />
	          <path d="M99.127 247.283H100.03V263.589H99.127V247.283Z" fill="url(#paint85_linear_4527_60659)" />
	          <path d="M101.864 248.819H102.767V265.126H101.864V248.819Z" fill="url(#paint86_linear_4527_60659)" />
	          <path d="M104.601 250.352H105.503V266.658H104.601V250.352Z" fill="url(#paint87_linear_4527_60659)" />
	          <path d="M107.332 251.889H108.234V268.195H107.332V251.889Z" fill="url(#paint88_linear_4527_60659)" />
	          <path d="M110.068 253.425H110.971V269.731H110.068V253.425Z" fill="url(#paint89_linear_4527_60659)" />
	          <path d="M112.805 254.956H113.708V271.262H112.805V254.956Z" fill="url(#paint90_linear_4527_60659)" />
	          <path d="M115.536 256.492H116.439V272.799H115.536V256.492Z" fill="url(#paint91_linear_4527_60659)" />
	          <path d="M118.273 258.03H119.176V274.337H118.273V258.03Z" fill="url(#paint92_linear_4527_60659)" />
	          <path
	            d="M121.307 259.269C119.958 259.269 118.604 258.921 117.382 258.218L99.1955 247.745C98.1328 247.134 97.4815 246.037 97.4529 244.814C97.4244 243.591 99.247 244.18 99.2641 244.768C99.2812 245.357 99.5955 245.882 100.104 246.179L118.284 256.647C120.256 257.784 122.667 257.721 124.581 256.492L168.066 228.462C167.935 228.548 168.997 227.656 168.997 227.656C169.409 227.896 169.666 228.325 169.677 228.805C169.689 229.285 169.455 229.725 169.055 229.982L125.569 258.006C124.266 258.846 122.787 259.269 121.307 259.269Z"
	            fill="#B0B7E5"
	          />
	          <path
	            d="M121.295 259.035C119.975 259.035 118.656 258.692 117.467 258.006L99.2811 247.533C98.2755 246.956 97.6642 245.922 97.6299 244.762C97.6013 243.671 99.0411 244.134 99.0525 244.728C99.0697 245.385 99.4182 245.974 99.9896 246.299L118.176 256.772C119.913 257.772 122.015 257.806 123.752 256.881C124.078 256.881 157.01 235.769 157.285 235.587C157.187 235.649 168.209 228.382 168.209 228.382C168.534 228.576 168.74 228.907 168.763 229.279C168.769 229.639 168.609 229.976 168.306 230.17L125.443 257.801C124.181 258.618 122.741 259.035 121.295 259.035Z"
	            fill="#C0C6E8"
	          />
	          <path
	            d="M121.278 258.802C119.987 258.802 118.696 258.464 117.548 257.802L99.3615 247.323C98.4187 246.78 97.836 245.803 97.8074 244.712C97.7846 243.758 98.8358 244.095 98.8473 244.684C98.8644 245.409 99.2529 246.055 99.8814 246.415L118.067 256.893C119.576 257.762 121.37 257.887 122.918 257.27C123.57 257.27 145.949 243.067 146.504 242.712C146.441 242.752 167.426 229.114 167.426 229.114C167.661 229.263 167.821 229.503 167.861 229.76C167.866 230 167.769 230.234 167.569 230.366L125.324 257.602C124.101 258.39 122.701 258.802 121.278 258.802Z"
	            fill="#D1D4EC"
	          />
	          <path
	            d="M121.267 258.567C120.004 258.567 118.747 258.235 117.633 257.59L99.4467 247.111C98.5611 246.603 98.0183 245.683 97.9898 244.666C97.9669 243.843 98.6297 244.054 98.6468 244.649C98.664 245.443 99.0868 246.151 99.7724 246.545L117.958 257.024C119.233 257.755 120.718 257.978 122.089 257.67C123.072 257.67 134.899 250.379 135.727 249.848C135.693 249.871 166.643 229.851 166.643 229.851C166.792 229.953 166.9 230.096 166.958 230.245C166.958 230.365 166.935 230.496 166.838 230.559L125.215 257.401C124.021 258.167 122.655 258.567 121.267 258.567Z"
	            fill="#E1E3EF"
	          />
	          <path
	            d="M121.249 258.327C120.015 258.327 118.787 257.995 117.707 257.378L99.521 246.9C98.6925 246.425 98.184 245.568 98.1612 244.614C98.144 243.923 98.4183 244.014 98.4354 244.609C98.4583 245.466 98.9154 246.237 99.6581 246.665L117.844 257.144C118.884 257.744 120.061 258.058 121.249 258.058C122.558 258.058 123.832 257.681 124.94 256.967L165.855 230.576C165.912 230.628 165.98 230.679 166.049 230.719L166.095 230.748L125.089 257.195C123.935 257.938 122.609 258.327 121.249 258.327Z"
	            fill="#F1F2F2"
	          />
	          <path
	            d="M120.975 275.529C119.57 275.529 118.164 275.17 116.907 274.455L99.3784 264.44C98.9442 264.194 98.7956 263.64 99.0413 263.205C99.287 262.771 99.8412 262.623 100.275 262.868L117.804 272.884C119.758 273.998 122.187 274.004 124.141 272.884L159.759 252.555L170.066 222.851C170.751 220.88 172.128 219.217 173.934 218.177L177.225 216.286C177.659 216.035 178.213 216.189 178.459 216.618C178.71 217.052 178.556 217.606 178.128 217.852L174.837 219.743C173.403 220.566 172.317 221.88 171.774 223.439L166.506 238.609L161.244 253.79L125.038 274.455C123.786 275.17 122.381 275.529 120.975 275.529Z"
	            fill="#B0B7E5"
	          />
	          <path
	            d="M178.299 216.663C178.339 216.732 178.35 216.8 178.35 216.863C178.43 217.155 178.059 217.617 177.785 217.777L175.442 219.126C175.368 219.172 174.597 219.617 174.528 219.669C173.242 220.469 172.248 221.663 171.694 223.074C171.66 223.16 171.603 223.32 171.574 223.4L166.346 238.46L161.09 253.595L124.946 274.227C123.792 274.884 122.501 275.238 121.192 275.272C121.095 275.272 121.004 275.278 120.907 275.272C119.695 275.261 118.49 274.975 117.393 274.427C117.261 274.364 117.01 274.227 116.884 274.153L99.4753 264.205C99.4068 264.165 99.3668 264.108 99.3268 264.057C99.1439 263.805 99.0468 263.468 99.2411 263.217C99.2525 263.2 99.2696 263.188 99.2868 263.177C99.4867 262.886 100.161 262.954 100.469 263.131L117.713 272.987C118.81 273.61 120.05 273.901 121.289 273.838C122.318 273.793 123.335 273.507 124.243 272.987L159.73 252.733L160.118 252.036L165.381 236.878L170.117 223.228C170.249 222.845 170.546 222.114 170.74 221.765C171.437 220.406 172.488 219.257 173.797 218.446C173.871 218.389 174.694 217.909 174.774 217.863L177.065 216.549C177.339 216.389 177.933 216.298 178.145 216.515C178.162 216.526 178.179 216.538 178.196 216.549C178.23 216.578 178.27 216.612 178.299 216.663Z"
	            fill="#C4C9EC"
	          />
	          <path
	            d="M178.128 216.703C178.168 216.772 178.168 216.846 178.145 216.897C178.196 217.092 177.613 217.595 177.431 217.697L175.105 219.034C174.951 219.12 174.345 219.486 174.208 219.594C172.963 220.428 172.003 221.628 171.471 223.039C171.448 223.097 171.374 223.302 171.357 223.359L166.169 238.312L160.924 253.412L124.843 274.01C123.701 274.661 122.415 275.009 121.113 275.032C121.015 275.032 120.924 275.032 120.827 275.032C119.621 275.009 118.427 274.712 117.347 274.147C117.262 274.107 116.936 273.924 116.85 273.872L99.5612 263.994C99.4927 263.954 99.4527 263.891 99.447 263.834C99.3213 263.662 99.3156 263.434 99.4298 263.251C99.447 263.24 99.4641 263.234 99.4812 263.228C99.6126 263.034 100.441 263.297 100.647 263.417L117.604 273.107C118.69 273.73 119.93 274.027 121.17 273.987C122.272 273.952 123.358 273.655 124.324 273.107L159.707 252.91L160.21 252.31L165.449 237.209L170.169 223.605C170.254 223.354 170.626 222.365 170.757 222.137C171.386 220.754 172.391 219.566 173.66 218.714C173.808 218.6 174.46 218.206 174.625 218.114L176.911 216.8C177.093 216.697 177.83 216.44 177.973 216.583C177.99 216.583 178.013 216.589 178.03 216.6C178.053 216.623 178.099 216.646 178.128 216.703Z"
	            fill="#D8DBF2"
	          />
	          <path
	            d="M177.962 216.744C178.002 216.807 177.99 216.887 177.945 216.932C177.973 217.029 177.179 217.566 177.088 217.624L174.779 218.949C174.551 219.081 174.1 219.361 173.894 219.521C172.688 220.389 171.768 221.6 171.254 223.006C171.243 223.034 171.151 223.291 171.146 223.32L165.992 238.164L160.759 253.23L124.741 273.787C123.615 274.433 122.335 274.77 121.032 274.782C120.941 274.782 120.844 274.782 120.753 274.782C119.547 274.747 118.364 274.433 117.313 273.856C117.267 273.833 116.867 273.61 116.827 273.582L99.6583 263.772C99.5954 263.732 99.5611 263.663 99.5783 263.6C99.5326 263.48 99.5611 263.366 99.6297 263.275C99.6525 263.269 99.6697 263.269 99.6868 263.275C99.7554 263.177 100.732 263.634 100.835 263.692L117.513 273.222C118.593 273.839 119.827 274.153 121.072 274.13C122.244 274.113 123.404 273.805 124.421 273.222L159.673 253.099L160.29 252.59L165.512 237.547L170.214 223.994C170.26 223.868 170.7 222.634 170.763 222.52C171.328 221.109 172.283 219.886 173.511 218.995C173.734 218.823 174.214 218.521 174.459 218.378L176.733 217.069C176.825 217.018 177.705 216.595 177.779 216.664C177.802 216.658 177.819 216.658 177.842 216.664C177.876 216.664 177.928 216.681 177.962 216.744Z"
	            fill="#EBEDF9"
	          />
	          <path
	            d="M120.975 274.536C119.678 274.536 118.404 274.198 117.29 273.564L99.7612 263.548C99.6984 263.508 99.6755 263.428 99.7098 263.366C99.7441 263.303 99.8069 263.297 99.8298 263.297C99.8526 263.297 99.8755 263.303 99.8984 263.314L117.427 273.33C118.502 273.947 119.73 274.267 120.981 274.267C122.227 274.267 123.455 273.941 124.529 273.33L160.387 252.853L165.592 237.866L170.791 222.88C171.414 221.08 172.666 219.572 174.317 218.623L177.608 216.732C177.631 216.721 177.653 216.715 177.676 216.715C177.693 216.715 177.756 216.721 177.796 216.783C177.836 216.846 177.813 216.926 177.745 216.966L174.454 218.857C172.86 219.772 171.649 221.234 171.049 222.971L165.832 238.003L160.616 253.036L124.661 273.558C123.547 274.198 122.272 274.536 120.975 274.536Z"
	            fill="white"
	          />
	          <path
	            d="M121.307 259.721C120.227 259.721 119.153 259.504 118.147 259.093C117.604 258.87 117.376 258.224 117.667 257.71L118.073 257.007C118.313 256.59 118.821 256.436 119.267 256.613C119.918 256.87 120.61 257.001 121.307 257.001C122.112 257.001 122.901 256.824 123.632 256.493C124.061 256.293 124.575 256.47 124.826 256.864L125.249 257.527C125.569 258.018 125.375 258.675 124.844 258.927C123.741 259.447 122.535 259.721 121.307 259.721Z"
	            fill="url(#paint93_linear_4527_60659)"
	          />
	          <path
	            d="M121.273 258.361C120.307 258.361 119.359 258.173 118.462 257.801C118.439 257.79 118.427 257.778 118.416 257.756C118.41 257.733 118.416 257.716 118.422 257.71L118.827 257.007H118.907C119.667 257.304 120.467 257.458 121.278 257.458C122.215 257.458 123.124 257.258 123.981 256.864C123.992 256.864 124.021 256.876 124.038 256.904L124.449 257.561C124.455 257.567 124.461 257.584 124.455 257.607C124.449 257.63 124.438 257.641 124.415 257.653C123.427 258.127 122.364 258.361 121.273 258.361Z"
	            fill="url(#paint94_radial_4527_60659)"
	          />
	          <path
	            d="M124.844 258.435C123.741 258.955 122.535 259.229 121.307 259.229C120.227 259.229 119.153 259.012 118.147 258.601C117.85 258.481 117.65 258.224 117.576 257.944C117.45 258.401 117.685 258.904 118.147 259.092C119.147 259.504 120.221 259.721 121.307 259.721C122.535 259.721 123.735 259.446 124.844 258.926C125.278 258.721 125.484 258.247 125.369 257.807C125.295 258.075 125.118 258.309 124.844 258.435Z"
	            fill="#1E88E5"
	          />
	          <path
	            d="M99.4242 247.346C99.1671 247.786 98.5557 247.894 98.1901 247.54C97.4588 246.832 97.0245 245.866 97.0017 244.815C96.9731 243.763 97.3559 242.775 98.053 242.032C98.4015 241.661 99.0185 241.735 99.2928 242.164L99.9327 243.152C100.116 243.432 100.081 243.781 99.9041 244.06C99.7784 244.26 99.7099 244.5 99.7156 244.746C99.7213 244.992 99.8013 245.226 99.9384 245.42C100.133 245.689 100.178 246.037 100.013 246.323L99.4242 247.346Z"
	            fill="url(#paint95_linear_4527_60659)"
	          />
	          <path
	            d="M99.1324 246.672C98.5554 246.221 98.1668 245.575 98.0354 244.838C97.904 244.101 98.0354 243.364 98.4125 242.735L99.0582 243.461C98.8925 243.861 98.8525 244.272 98.9267 244.678C99.001 245.089 99.1953 245.472 99.481 245.769L99.1324 246.672Z"
	            fill="url(#paint96_radial_4527_60659)"
	          />
	          <path
	            d="M98.493 247.129C97.7616 246.42 97.3274 245.455 97.3045 244.403C97.2817 243.621 97.4931 242.866 97.8873 242.227C97.2988 242.946 96.9732 243.855 97.0017 244.815C97.0303 245.866 97.4588 246.832 98.1902 247.54C98.5558 247.894 99.1672 247.786 99.4243 247.346L99.5386 247.146C99.2415 247.397 98.7901 247.414 98.493 247.129Z"
	            fill="#1084E9"
	          />
	          <path
	            d="M111.952 254.825C111.678 255.494 113.232 256.773 115.426 257.676C117.62 258.579 119.625 258.767 119.899 258.093C120.174 257.425 118.619 256.145 116.425 255.242C114.231 254.345 112.232 254.157 111.952 254.825Z"
	            fill="url(#paint97_radial_4527_60659)"
	          />
	          <path
	            d="M44.136 246.321C40.4628 242.487 38.2788 233.724 41.9023 230.687H60.1689C63.7428 233.724 61.6084 242.487 57.9352 246.321C57.8856 246.37 57.8856 246.37 57.8359 246.42C57.7863 246.47 57.7366 246.52 57.687 246.57C57.5877 246.669 57.4885 246.769 57.3396 246.868C57.2899 246.868 57.2899 246.918 57.2403 246.918C57.141 246.968 57.0417 247.067 56.9424 247.117C56.7935 247.217 56.6446 247.316 56.4461 247.416C53.4182 249.208 48.5041 249.208 45.4762 247.416C45.3273 247.316 45.1784 247.217 44.9798 247.117C44.8806 247.067 44.7813 246.968 44.7317 246.918C44.682 246.868 44.682 246.868 44.6324 246.818C44.5331 246.719 44.4338 246.619 44.3345 246.52C44.2849 246.47 44.2353 246.42 44.1856 246.37C44.1856 246.42 44.136 246.37 44.136 246.321Z"
	            fill="#2B454E"
	          />
	          <path
	            d="M58.5807 229.491C62.7502 231.931 62.7502 235.914 58.5807 238.354C54.4111 240.793 47.6605 240.793 43.4909 238.354C39.3214 235.914 39.3214 231.931 43.4909 229.491C47.6605 227.051 54.4111 227.051 58.5807 229.491Z"
	            fill="#375A64"
	          />
	          <path
	            d="M56.5453 230.636C59.6228 232.429 59.6228 235.317 56.5453 237.109C53.4678 238.902 48.504 238.902 45.4761 237.109C42.3986 235.317 42.3986 232.429 45.4761 230.636C48.5536 228.844 53.5174 228.844 56.5453 230.636Z"
	            fill="#1A2E35"
	          />
	          <path
	            d="M45.4762 233.722C48.5537 231.93 53.5175 231.93 56.5453 233.722C57.3892 234.22 57.9848 234.818 58.3819 235.415C57.9848 236.013 57.3892 236.61 56.5453 237.108C53.4678 238.9 48.5041 238.9 45.4762 237.108C44.6324 236.61 44.0367 236.013 43.6396 235.415C44.0367 234.818 44.6324 234.22 45.4762 233.722Z"
	            fill="#FAFAFA"
	          />
	          <path
	            d="M49.8947 212.81C50.0436 213.955 50.7385 215.449 51.8306 215.997C52.9226 216.544 54.0146 216.295 54.511 215.897C55.0073 215.499 53.5182 215.648 52.6247 215.001C51.7313 214.354 51.632 213.955 52.5751 214.453C53.4686 214.951 55.057 215.549 55.9008 215.449C56.7447 215.349 57.4396 214.304 57.3403 214.105C57.1914 213.856 56.4468 214.403 55.1563 214.354C53.8657 214.304 52.8233 213.706 52.4758 213.159C52.1284 212.611 52.3766 212.711 53.5182 213.258C54.7095 213.806 56.8439 214.254 57.6381 213.607C58.4323 212.96 58.482 211.964 58.3331 211.765C58.1841 211.565 57.241 212.462 55.6526 212.412C54.0642 212.362 52.7737 211.665 52.9226 211.067C53.0715 210.47 53.6175 210.719 54.8584 210.918C56.0994 211.117 58.482 211.167 59.0776 210.719C59.7229 210.271 59.8222 208.827 59.5243 208.727C59.2762 208.578 58.2338 209.524 56.5957 209.673C54.9577 209.773 54.2131 209.325 54.8088 209.076C55.4044 208.827 58.6309 208.827 59.0776 208.429C59.5243 208.03 59.6236 205.441 59.6236 205.441C59.6236 205.441 57.7374 204.645 57.241 204.694C56.7447 204.744 55.2059 206.387 54.8584 207.134C54.511 207.881 54.2628 207.134 54.4613 206.537C54.6599 205.939 55.7023 204.495 56.3972 204.196C55.5037 203.798 54.4613 203.499 54.0146 204.196C53.5679 204.894 53.0715 206.835 53.0218 207.881C52.9722 208.927 52.2277 209.922 52.1284 208.578C52.0291 207.234 52.5751 204.694 53.3197 204.047C52.4758 204.097 50.2918 204.943 50.3414 206.437C50.3911 207.931 50.8874 209.375 50.8378 209.823C50.7882 210.321 50.2918 209.873 49.8947 208.827C49.5472 207.781 49.1998 206.387 49.7458 205.64C48.9019 205.939 48.0581 206.288 48.4552 207.931C48.902 209.574 49.7458 210.072 49.6465 210.37C49.5472 210.669 48.5049 209.624 48.207 208.678C47.661 209.524 47.661 210.37 48.1078 211.217C48.5545 211.964 49.1501 212.511 49.8947 212.81Z"
	            fill="#6AEFCF"
	          />
	          <path
	            opacity="0.25"
	            d="M49.8947 212.81C50.0436 213.955 50.7385 215.449 51.8306 215.997C52.9226 216.544 54.0146 216.295 54.511 215.897C55.0073 215.499 53.5182 215.648 52.6247 215.001C51.7313 214.354 51.632 213.955 52.5751 214.453C53.4686 214.951 55.057 215.549 55.9008 215.449C56.7447 215.349 57.4396 214.304 57.3403 214.105C57.1914 213.856 56.4468 214.403 55.1563 214.354C53.8657 214.304 52.8233 213.706 52.4758 213.159C52.1284 212.611 52.3766 212.711 53.5182 213.258C54.7095 213.806 56.8439 214.254 57.6381 213.607C58.4323 212.96 58.482 211.964 58.3331 211.765C58.1841 211.565 57.241 212.462 55.6526 212.412C54.0642 212.362 52.7737 211.665 52.9226 211.067C53.0715 210.47 53.6175 210.719 54.8584 210.918C56.0994 211.117 58.482 211.167 59.0776 210.719C59.7229 210.271 59.8222 208.827 59.5243 208.727C59.2762 208.578 58.2338 209.524 56.5957 209.673C54.9577 209.773 54.2131 209.325 54.8088 209.076C55.4044 208.827 58.6309 208.827 59.0776 208.429C59.5243 208.03 59.6236 205.441 59.6236 205.441C59.6236 205.441 57.7374 204.645 57.241 204.694C56.7447 204.744 55.2059 206.387 54.8584 207.134C54.511 207.881 54.2628 207.134 54.4613 206.537C54.6599 205.939 55.7023 204.495 56.3972 204.196C55.5037 203.798 54.4613 203.499 54.0146 204.196C53.5679 204.894 53.0715 206.835 53.0218 207.881C52.9722 208.927 52.2277 209.922 52.1284 208.578C52.0291 207.234 52.5751 204.694 53.3197 204.047C52.4758 204.097 50.2918 204.943 50.3414 206.437C50.3911 207.931 50.8874 209.375 50.8378 209.823C50.7882 210.321 50.2918 209.873 49.8947 208.827C49.5472 207.781 49.1998 206.387 49.7458 205.64C48.9019 205.939 48.0581 206.288 48.4552 207.931C48.902 209.574 49.7458 210.072 49.6465 210.37C49.5472 210.669 48.5049 209.624 48.207 208.678C47.661 209.524 47.661 210.37 48.1078 211.217C48.5545 211.964 49.1501 212.511 49.8947 212.81Z"
	            fill="black"
	          />
	          <path
	            d="M46.1714 217.19C47.1641 217.19 48.1569 217.688 48.9015 218.286C49.9438 219.132 50.738 220.277 51.2344 221.522C51.8301 222.966 52.1279 224.559 52.3761 226.103C52.5746 227.696 52.7235 229.339 52.6243 230.982C52.5746 232.824 52.3264 234.667 51.5819 236.36C51.5322 236.509 51.3833 236.409 51.433 236.31C51.7804 234.866 52.0783 233.372 52.1775 231.878C52.2768 230.385 52.2272 228.841 52.0783 227.348C51.7804 224.609 51.3337 221.522 49.4475 219.381C48.6036 218.286 47.5116 217.639 46.1714 217.19Z"
	            fill="#1A2E35"
	          />
	          <path
	            d="M46.7676 222.17C48.7531 223.564 49.9444 225.855 50.5897 228.145C50.9371 229.489 51.1357 230.933 51.1357 232.327C51.1853 233.771 51.1357 235.165 50.8379 236.56C50.8379 236.659 50.5897 236.659 50.6393 236.51C50.8378 235.066 50.9371 233.821 50.8379 232.377C50.7386 231.033 50.6393 229.639 50.2918 228.344C49.6962 226.004 48.5049 223.863 46.7676 222.22C46.7676 222.22 46.7676 222.12 46.7676 222.17Z"
	            fill="#1A2E35"
	          />
	          <path
	            d="M48.9508 226.602C48.9508 226.552 49.0004 226.602 49.0004 226.651C49.0004 228.245 49.0501 229.838 49.2486 231.431C49.3479 232.178 49.4472 232.975 49.5961 233.722C49.745 234.518 49.9932 235.265 50.0925 236.062C50.0925 236.161 49.9932 236.311 49.9435 236.211C49.3479 234.767 49.1493 233.124 48.9508 231.581C48.8019 229.888 48.7522 228.245 48.9508 226.602Z"
	            fill="#1A2E35"
	          />
	          <path
	            d="M51.6813 210.022C50.3908 211.366 49.4476 213.009 48.8024 214.752C48.5045 215.548 48.2563 216.395 48.1074 217.241C47.9585 218.088 47.76 219.034 47.8592 219.83C47.8592 219.93 48.0082 220.079 48.0578 219.88C48.1571 219.432 48.1074 218.984 48.1571 218.586C48.2067 218.137 48.2563 217.739 48.3556 217.291C48.5542 216.395 48.8024 215.499 49.1002 214.652C49.7455 213.009 50.639 211.466 51.6813 210.072C51.6813 210.072 51.6813 209.972 51.6813 210.022Z"
	            fill="#1A2E35"
	          />
	          <path
	            d="M48.7528 218.386C49.2988 220.228 47.4126 222.817 44.6329 222.718C45.7249 221.722 46.8666 220.029 46.2213 219.631C45.6257 219.232 46.0228 221.124 44.1862 222.369C44.1862 222.369 43.2927 222.568 42.3992 221.423C44.3351 220.626 45.576 218.386 44.9307 218.585C44.6825 218.685 44.8315 219.282 43.6402 219.83C42.4985 220.378 40.6619 220.676 39.4706 219.083C40.4137 219.133 41.7539 219.083 42.6971 218.336C43.392 217.788 43.6402 217.44 42.2503 217.888C40.8605 218.386 40.4137 218.585 39.2721 218.286C38.1304 217.988 37.3859 216.544 37.3859 216.544C37.3859 216.544 39.2224 217.141 39.8181 216.643C40.3641 216.145 38.1801 216.593 36.9888 215.747C35.7975 214.901 35.1025 213.905 35.1025 213.905C35.1025 213.905 36.0456 212.56 36.5917 212.262C37.3859 213.208 38.3786 214.552 38.6268 214.353C38.875 214.204 38.6268 213.307 37.3362 212.262C37.3362 212.262 37.7333 211.465 38.7261 211.614C38.7261 211.614 39.4706 211.913 40.1159 214.104C40.2648 214.552 40.7116 215.05 40.1159 213.258C39.6692 211.764 39.0735 211.216 39.0735 211.216C39.0735 211.216 40.4634 210.619 41.5058 212.013C43.2431 214.303 43.0942 215.249 43.4416 215.15C43.5905 215.15 43.4912 214.602 42.9452 213.307C42.3992 212.013 41.8036 211.366 41.8036 211.366C41.8036 211.366 42.9452 210.519 44.2358 211.863C45.5264 213.208 45.9235 215.498 46.0228 215.548C46.2709 215.697 46.2213 213.955 45.8242 212.909C45.4767 211.963 45.2286 211.515 45.2286 211.515C45.2286 211.515 46.7673 211.266 47.5615 212.909C48.3061 214.552 47.7104 216.593 48.0579 216.544C48.4053 216.544 48.5046 213.108 48.5046 213.108C48.5046 213.108 51.1354 216.793 48.7528 218.386Z"
	            fill="#6AEFCF"
	          />
	          <path
	            opacity="0.2"
	            d="M48.7528 218.386C49.2988 220.228 47.4126 222.817 44.6329 222.718C45.7249 221.722 46.8666 220.029 46.2213 219.631C45.6257 219.232 46.0228 221.124 44.1862 222.369C44.1862 222.369 43.2927 222.568 42.3992 221.423C44.3351 220.626 45.576 218.386 44.9307 218.585C44.6825 218.685 44.8315 219.282 43.6402 219.83C42.4985 220.378 40.6619 220.676 39.4706 219.083C40.4137 219.133 41.7539 219.083 42.6971 218.336C43.392 217.788 43.6402 217.44 42.2503 217.888C40.8605 218.386 40.4137 218.585 39.2721 218.286C38.1304 217.988 37.3859 216.544 37.3859 216.544C37.3859 216.544 39.2224 217.141 39.8181 216.643C40.3641 216.145 38.1801 216.593 36.9888 215.747C35.7975 214.901 35.1025 213.905 35.1025 213.905C35.1025 213.905 36.0456 212.56 36.5917 212.262C37.3859 213.208 38.3786 214.552 38.6268 214.353C38.875 214.204 38.6268 213.307 37.3362 212.262C37.3362 212.262 37.7333 211.465 38.7261 211.614C38.7261 211.614 39.4706 211.913 40.1159 214.104C40.2648 214.552 40.7116 215.05 40.1159 213.258C39.6692 211.764 39.0735 211.216 39.0735 211.216C39.0735 211.216 40.4634 210.619 41.5058 212.013C43.2431 214.303 43.0942 215.249 43.4416 215.15C43.5905 215.15 43.4912 214.602 42.9452 213.307C42.3992 212.013 41.8036 211.366 41.8036 211.366C41.8036 211.366 42.9452 210.519 44.2358 211.863C45.5264 213.208 45.9235 215.498 46.0228 215.548C46.2709 215.697 46.2213 213.955 45.8242 212.909C45.4767 211.963 45.2286 211.515 45.2286 211.515C45.2286 211.515 46.7673 211.266 47.5615 212.909C48.3061 214.552 47.7104 216.593 48.0579 216.544C48.4053 216.544 48.5046 213.108 48.5046 213.108C48.5046 213.108 51.1354 216.793 48.7528 218.386Z"
	            fill="black"
	          />
	          <path
	            d="M52.8231 222.968C53.4187 221.972 55.7517 221.076 58.9781 222.072C59.9708 222.37 61.2614 223.068 62.1052 223.864C59.9708 223.267 57.0919 222.719 56.6948 223.416C56.2977 224.163 57.5386 224.014 58.6306 223.964C61.0629 223.814 62.4527 224.213 62.4527 224.213C62.4527 224.213 63.9418 225.209 64.5871 226.852C62.552 225.308 59.8219 224.81 58.581 225.059C57.3401 225.258 57.2408 225.756 58.2335 225.756C59.2263 225.756 61.1621 225.657 65.3813 228.096C65.3813 228.096 66.1259 228.993 65.8777 230.984C65.282 229.988 64.1404 229.291 63.1973 228.744C62.2045 228.196 61.1621 227.648 60.0701 227.349C59.8716 227.3 59.4745 227.2 59.3256 227.349C59.127 227.549 59.3256 227.798 59.4745 227.947C59.7723 228.196 60.219 228.395 60.6161 228.495C61.1621 228.644 61.6585 228.893 62.1549 229.142C62.9987 229.49 63.8425 229.889 64.6367 230.387C65.0338 230.685 65.6295 232.179 65.1331 233.474C64.0907 232.926 62.1549 230.785 60.4672 230.436C58.7795 230.088 60.6161 231.034 61.8074 231.93C62.8498 232.727 64.6864 234.37 64.6864 234.37C64.6864 234.37 63.6936 236.511 62.9987 237.556C61.2614 237.357 59.5737 236.461 59.5737 236.461C59.5737 236.461 59.5241 232.926 58.7795 232.328C58.0846 231.781 58.2832 233.225 58.6306 234.619C58.9781 235.963 59.0774 236.461 59.0774 236.461C59.0774 236.461 55.5531 236.013 54.5604 234.469C54.7589 233.772 55.4042 232.03 55.8013 230.835C56.1984 229.59 56.8437 228.644 56.5459 228.295C56.248 227.997 55.5531 228.843 54.9575 229.988C54.1136 231.582 53.7165 233.673 53.7165 233.673C53.7165 233.673 51.5325 232.478 50.9368 231.532C50.639 229.241 52.4756 227.349 52.8231 227.051C53.1705 226.802 53.0216 225.507 51.3836 226.652C49.5966 227.847 49.6959 229.69 49.6959 229.69C49.6959 229.69 48.0579 228.993 47.8097 227.3C47.2637 224.611 49.001 222.47 52.8231 222.968Z"
	            fill="#6AEFCF"
	          />
	          <path
	            opacity="0.25"
	            d="M52.8231 222.968C53.4187 221.972 55.7517 221.076 58.9781 222.072C59.9708 222.37 61.2614 223.068 62.1052 223.864C59.9708 223.267 57.0919 222.719 56.6948 223.416C56.2977 224.163 57.5386 224.014 58.6306 223.964C61.0629 223.814 62.4527 224.213 62.4527 224.213C62.4527 224.213 63.9418 225.209 64.5871 226.852C62.552 225.308 59.8219 224.81 58.581 225.059C57.3401 225.258 57.2408 225.756 58.2335 225.756C59.2263 225.756 61.1621 225.657 65.3813 228.096C65.3813 228.096 66.1259 228.993 65.8777 230.984C65.282 229.988 64.1404 229.291 63.1973 228.744C62.2045 228.196 61.1621 227.648 60.0701 227.349C59.8716 227.3 59.4745 227.2 59.3256 227.349C59.127 227.549 59.3256 227.798 59.4745 227.947C59.7723 228.196 60.219 228.395 60.6161 228.495C61.1621 228.644 61.6585 228.893 62.1549 229.142C62.9987 229.49 63.8425 229.889 64.6367 230.387C65.0338 230.685 65.6295 232.179 65.1331 233.474C64.0907 232.926 62.1549 230.785 60.4672 230.436C58.7795 230.088 60.6161 231.034 61.8074 231.93C62.8498 232.727 64.6864 234.37 64.6864 234.37C64.6864 234.37 63.6936 236.511 62.9987 237.556C61.2614 237.357 59.5737 236.461 59.5737 236.461C59.5737 236.461 59.5241 232.926 58.7795 232.328C58.0846 231.781 58.2832 233.225 58.6306 234.619C58.9781 235.963 59.0774 236.461 59.0774 236.461C59.0774 236.461 55.5531 236.013 54.5604 234.469C54.7589 233.772 55.4042 232.03 55.8013 230.835C56.1984 229.59 56.8437 228.644 56.5459 228.295C56.248 227.997 55.5531 228.843 54.9575 229.988C54.1136 231.582 53.7165 233.673 53.7165 233.673C53.7165 233.673 51.5325 232.478 50.9368 231.532C50.639 229.241 52.4756 227.349 52.8231 227.051C53.1705 226.802 53.0216 225.507 51.3836 226.652C49.5966 227.847 49.6959 229.69 49.6959 229.69C49.6959 229.69 48.0579 228.993 47.8097 227.3C47.2637 224.611 49.001 222.47 52.8231 222.968Z"
	            fill="black"
	          />
	          <path
	            d="M45.7247 220.178C47.2635 219.88 49.4972 220.178 50.6885 221.423C51.8798 222.668 51.979 224.211 51.6812 225.008C51.3834 225.805 50.9367 223.813 49.6957 222.917C48.4548 222.021 47.9088 222.12 48.9512 223.066C49.9935 224.012 51.3834 225.855 51.6316 227C51.8798 228.145 50.7877 229.489 50.4403 229.439C50.0928 229.34 50.4403 228.145 49.8446 226.452C49.249 224.759 48.0577 223.664 47.1642 223.465C46.2707 223.216 46.5189 223.514 47.7102 224.809C48.9512 226.103 50.3906 228.742 49.8446 230.037C49.3483 231.331 48.0577 231.829 47.7102 231.68C47.3628 231.58 48.157 229.937 47.4124 227.896C46.6678 225.855 45.2284 224.411 44.4838 224.909C43.7392 225.406 44.3349 225.954 45.0794 227.498C45.824 229.041 46.916 232.128 46.5686 233.124C46.2707 234.12 44.4342 234.866 44.1363 234.568C43.8385 234.269 44.6327 232.526 44.1363 230.385C43.64 228.195 42.6968 227.398 42.6472 228.294C42.5976 229.19 43.9378 233.423 43.5903 234.12C43.2429 234.867 39.9171 236.061 39.9171 236.061C39.9171 236.061 38.0806 233.92 37.9813 233.273C37.882 232.626 39.3215 229.937 40.1653 229.141C41.0092 228.344 39.9171 228.344 39.2719 228.842C38.6266 229.39 37.1374 231.331 37.0382 232.327C36.1447 231.331 35.3009 230.087 36.0454 229.24C36.79 228.394 39.0733 226.9 40.4135 226.402C41.7537 225.855 42.6968 224.51 40.9099 224.909C39.1229 225.307 36.0454 227.099 35.5491 228.394C35.3009 227.249 35.3505 224.361 37.336 223.763C39.2719 223.166 41.3566 223.265 42.0019 223.016C42.5976 222.768 41.5552 222.668 40.0661 222.668C38.5769 222.618 36.5914 222.817 35.8469 223.813C35.8469 222.568 35.9462 221.324 38.2791 221.224C40.5624 221.124 41.7041 221.473 42.0516 221.174C42.399 220.925 40.8106 219.681 38.0806 220.228C38.5769 219.083 41.6048 218.535 42.8954 218.735C44.1363 218.934 44.9802 219.382 45.7247 220.178Z"
	            fill="#6AEFCF"
	          />
	          <path
	            d="M52.9229 216.197C52.8733 214.554 54.7099 213.209 55.9012 213.209C54.9581 213.956 54.4617 215.201 54.9084 214.653C55.9012 213.558 56.5961 212.96 58.1349 212.612C59.6736 212.263 60.6664 213.409 60.6664 213.409C60.6664 213.409 59.0283 213.558 57.5392 214.305C57.0925 214.554 55.9012 215.301 57.4399 214.604C59.8722 213.508 61.1627 214.006 61.1627 214.006C61.1627 214.006 62.354 214.454 62.8008 215.4C60.9146 214.604 58.7801 215.301 57.9363 215.55C57.1421 215.798 56.5961 216.496 57.9363 216.047C59.2269 215.599 61.9569 215.45 63.1979 216.396C64.4388 217.342 64.7863 219.583 64.7863 219.583C64.7863 219.583 60.2196 216.894 59.3262 217.84C59.5744 218.437 63.4461 219.134 64.4388 220.031C65.4316 220.927 65.3323 223.715 65.3323 223.715C65.3323 223.715 62.4533 224.761 61.5102 224.611C60.5671 224.462 59.5247 221.275 58.9291 220.977C58.3334 220.678 58.3334 223.466 59.6736 225.308C59.6736 225.308 58.383 226.105 57.6385 225.109C56.8939 224.113 56.4472 221.624 56.5961 220.28C56.7947 218.985 55.8515 219.632 55.7026 220.628C55.5041 221.624 55.5537 223.665 56.2486 224.761C56.2486 224.761 54.3128 224.711 53.5186 224.014C52.7244 223.317 53.2208 220.379 53.7668 219.433C54.2631 218.537 53.4193 218.338 52.8733 219.284C52.3769 220.18 51.8805 222.52 52.1287 223.466C50.59 222.271 49.6469 220.28 50.4411 218.238C51.2849 216.047 52.9229 216.197 52.9229 216.197Z"
	            fill="#6AEFCF"
	          />
	        </g>
	        <defs>
	          <linearGradient id="paint0_linear_4527_60659" x1="84.2299" y1="181.516" x2="132.346" y2="181.516" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#CDD2F3" />
	            <stop offset="0.1919" stopColor="#E5E9FF" />
	            <stop offset="0.2361" stopColor="#EFF2FF" />
	            <stop offset="0.2828" stopColor="white" />
	            <stop offset="0.3201" stopColor="#EBEDF9" />
	            <stop offset="0.3957" stopColor="#B9BFE8" />
	            <stop offset="0.4091" stopColor="#AFB6E5" />
	            <stop offset="0.9091" stopColor="#AFB6E5" />
	            <stop offset="0.9503" stopColor="#BAC0EA" />
	            <stop offset="1" stopColor="#CDD2F3" />
	          </linearGradient>
	          <linearGradient id="paint1_linear_4527_60659" x1="125.956" y1="167.2" x2="63.1101" y2="229.987" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint2_linear_4527_60659" x1="106.256" y1="198.263" x2="132.342" y2="198.263" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#CDD2F3" />
	            <stop offset="0.1919" stopColor="#E5E9FF" />
	            <stop offset="0.2361" stopColor="#EFF2FF" />
	            <stop offset="0.2828" stopColor="white" />
	            <stop offset="0.3201" stopColor="#EBEDF9" />
	            <stop offset="0.3957" stopColor="#B9BFE8" />
	            <stop offset="0.4091" stopColor="#AFB6E5" />
	            <stop offset="0.9091" stopColor="#AFB6E5" />
	            <stop offset="0.9503" stopColor="#BAC0EA" />
	            <stop offset="1" stopColor="#CDD2F3" />
	          </linearGradient>
	          <linearGradient id="paint3_linear_4527_60659" x1="8.50187" y1="151.102" x2="153.687" y2="56.3037" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#CDD2F3" />
	            <stop offset="0.1919" stopColor="#E5E9FF" />
	            <stop offset="0.2361" stopColor="#EFF2FF" />
	            <stop offset="0.2828" stopColor="white" />
	            <stop offset="0.3201" stopColor="#EBEDF9" />
	            <stop offset="0.3957" stopColor="#B9BFE8" />
	            <stop offset="0.4091" stopColor="#AFB6E5" />
	            <stop offset="0.9091" stopColor="#AFB6E5" />
	            <stop offset="0.9503" stopColor="#BAC0EA" />
	            <stop offset="1" stopColor="#CDD2F3" />
	          </linearGradient>
	          <linearGradient id="paint4_linear_4527_60659" x1="39.9113" y1="129.122" x2="160.816" y2="129.122" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint5_linear_4527_60659" x1="104.638" y1="210.05" x2="91.5285" y2="60.5844" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#CED3F4" />
	            <stop offset="0.0127" stopColor="#D3D8F7" />
	            <stop offset="0.0563" stopColor="#E1E5FD" />
	            <stop offset="0.096" stopColor="#E5E9FF" />
	            <stop offset="0.253" stopColor="#EAEDFF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint6_linear_4527_60659" x1="179.348" y1="145.482" x2="177.88" y2="146.946" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint7_linear_4527_60659" x1="187.569" y1="91.8584" x2="212.897" y2="103.452" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#2196F3" />
	            <stop offset="1" stopColor="#90CAF9" />
	          </linearGradient>
	          <linearGradient id="paint8_linear_4527_60659" x1="228.949" y1="111.835" x2="228.949" y2="133.149" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#2196F3" />
	            <stop offset="1" stopColor="#90CAF9" />
	          </linearGradient>
	          <linearGradient id="paint9_linear_4527_60659" x1="137.436" y1="224.402" x2="138.341" y2="224.402" gradientUnits="userSpaceOnUse">
	            <stop offset="0.0253" stopColor="#C7BCD6" />
	            <stop offset="0.297" stopColor="#E2E2E6" />
	            <stop offset="0.3333" stopColor="#E6E7E8" />
	            <stop offset="0.4267" stopColor="#DCDAE2" />
	            <stop offset="0.5911" stopColor="#D0C9DB" />
	            <stop offset="0.7722" stopColor="#C9BFD7" />
	            <stop offset="1" stopColor="#C7BCD6" />
	          </linearGradient>
	          <linearGradient id="paint10_linear_4527_60659" x1="97.5885" y1="252.585" x2="98.4938" y2="252.585" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint11_linear_4527_60659" x1="100.92" y1="250.5" x2="101.825" y2="250.5" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint12_linear_4527_60659" x1="104.252" y1="248.413" x2="105.157" y2="248.413" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint13_linear_4527_60659" x1="107.584" y1="246.329" x2="108.489" y2="246.329" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint14_linear_4527_60659" x1="110.915" y1="244.242" x2="111.82" y2="244.242" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint15_linear_4527_60659" x1="114.246" y1="242.156" x2="115.151" y2="242.156" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint16_linear_4527_60659" x1="117.578" y1="240.071" x2="118.483" y2="240.071" gradientUnits="userSpaceOnUse">
	            <stop offset="0.0253" stopColor="#C7BCD6" />
	            <stop offset="0.297" stopColor="#E2E2E6" />
	            <stop offset="0.3333" stopColor="#E6E7E8" />
	            <stop offset="0.4267" stopColor="#DCDAE2" />
	            <stop offset="0.5911" stopColor="#D0C9DB" />
	            <stop offset="0.7722" stopColor="#C9BFD7" />
	            <stop offset="1" stopColor="#C7BCD6" />
	          </linearGradient>
	          <linearGradient id="paint17_linear_4527_60659" x1="120.909" y1="237.985" x2="121.815" y2="237.985" gradientUnits="userSpaceOnUse">
	            <stop offset="0.0253" stopColor="#C7BCD6" />
	            <stop offset="0.297" stopColor="#E2E2E6" />
	            <stop offset="0.3333" stopColor="#E6E7E8" />
	            <stop offset="0.4267" stopColor="#DCDAE2" />
	            <stop offset="0.5911" stopColor="#D0C9DB" />
	            <stop offset="0.7722" stopColor="#C9BFD7" />
	            <stop offset="1" stopColor="#C7BCD6" />
	          </linearGradient>
	          <linearGradient id="paint18_linear_4527_60659" x1="124.241" y1="235.9" x2="125.146" y2="235.9" gradientUnits="userSpaceOnUse">
	            <stop offset="0.0253" stopColor="#C7BCD6" />
	            <stop offset="0.297" stopColor="#E2E2E6" />
	            <stop offset="0.3333" stopColor="#E6E7E8" />
	            <stop offset="0.4267" stopColor="#DCDAE2" />
	            <stop offset="0.5911" stopColor="#D0C9DB" />
	            <stop offset="0.7722" stopColor="#C9BFD7" />
	            <stop offset="1" stopColor="#C7BCD6" />
	          </linearGradient>
	          <linearGradient id="paint19_linear_4527_60659" x1="127.572" y1="233.814" x2="128.478" y2="233.814" gradientUnits="userSpaceOnUse">
	            <stop offset="0.0253" stopColor="#C7BCD6" />
	            <stop offset="0.297" stopColor="#E2E2E6" />
	            <stop offset="0.3333" stopColor="#E6E7E8" />
	            <stop offset="0.4267" stopColor="#DCDAE2" />
	            <stop offset="0.5911" stopColor="#D0C9DB" />
	            <stop offset="0.7722" stopColor="#C9BFD7" />
	            <stop offset="1" stopColor="#C7BCD6" />
	          </linearGradient>
	          <linearGradient id="paint20_linear_4527_60659" x1="130.904" y1="231.728" x2="131.809" y2="231.728" gradientUnits="userSpaceOnUse">
	            <stop offset="0.0253" stopColor="#C7BCD6" />
	            <stop offset="0.297" stopColor="#E2E2E6" />
	            <stop offset="0.3333" stopColor="#E6E7E8" />
	            <stop offset="0.4267" stopColor="#DCDAE2" />
	            <stop offset="0.5911" stopColor="#D0C9DB" />
	            <stop offset="0.7722" stopColor="#C9BFD7" />
	            <stop offset="1" stopColor="#C7BCD6" />
	          </linearGradient>
	          <linearGradient id="paint21_linear_4527_60659" x1="134.236" y1="229.642" x2="135.141" y2="229.642" gradientUnits="userSpaceOnUse">
	            <stop offset="0.0253" stopColor="#C7BCD6" />
	            <stop offset="0.297" stopColor="#E2E2E6" />
	            <stop offset="0.3333" stopColor="#E6E7E8" />
	            <stop offset="0.4267" stopColor="#DCDAE2" />
	            <stop offset="0.5911" stopColor="#D0C9DB" />
	            <stop offset="0.7722" stopColor="#C9BFD7" />
	            <stop offset="1" stopColor="#C7BCD6" />
	          </linearGradient>
	          <linearGradient id="paint22_linear_4527_60659" x1="128.302" y1="271.878" x2="132.095" y2="265.308" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#1E1F21" />
	            <stop offset="0.0762" stopColor="#2C2E30" />
	            <stop offset="0.2233" stopColor="#515359" />
	            <stop offset="0.2677" stopColor="#5D6066" />
	            <stop offset="0.6061" stopColor="#37383C" />
	          </linearGradient>
	          <linearGradient id="paint23_linear_4527_60659" x1="134.13" y1="269.353" x2="128.843" y2="269.353" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#484B4F" />
	            <stop offset="1" stopColor="#1E1F21" />
	          </linearGradient>
	          <linearGradient id="paint24_linear_4527_60659" x1="132.72" y1="269.354" x2="130.254" y2="269.354" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#D4D1D8" />
	            <stop offset="0.8549" stopColor="#A5A6B9" />
	            <stop offset="1" stopColor="#9D9EB3" />
	          </linearGradient>
	          <radialGradient
	            id="paint25_radial_4527_60659"
	            cx="0"
	            cy="0"
	            r="1"
	            gradientUnits="userSpaceOnUse"
	            gradientTransform="translate(130.942 269.264) rotate(180) scale(2.856)"
	          >
	            <stop stopColor="white" />
	            <stop offset="1" />
	          </radialGradient>
	          <linearGradient id="paint26_linear_4527_60659" x1="101.442" y1="287.489" x2="105.235" y2="280.919" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#1E1F21" />
	            <stop offset="0.0762" stopColor="#2C2E30" />
	            <stop offset="0.2233" stopColor="#515359" />
	            <stop offset="0.2677" stopColor="#5D6066" />
	            <stop offset="0.6061" stopColor="#37383C" />
	          </linearGradient>
	          <linearGradient id="paint27_linear_4527_60659" x1="107.27" y1="284.963" x2="101.983" y2="284.963" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#484B4F" />
	            <stop offset="1" stopColor="#1E1F21" />
	          </linearGradient>
	          <linearGradient id="paint28_linear_4527_60659" x1="105.859" y1="284.964" x2="103.393" y2="284.964" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#D4D1D8" />
	            <stop offset="0.8549" stopColor="#A5A6B9" />
	            <stop offset="1" stopColor="#9D9EB3" />
	          </linearGradient>
	          <radialGradient
	            id="paint29_radial_4527_60659"
	            cx="0"
	            cy="0"
	            r="1"
	            gradientUnits="userSpaceOnUse"
	            gradientTransform="translate(104.082 284.875) rotate(180) scale(2.85602)"
	          >
	            <stop stopColor="white" />
	            <stop offset="1" />
	          </radialGradient>
	          <linearGradient id="paint30_linear_4527_60659" x1="142.086" y1="271.364" x2="141.676" y2="272.073" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint31_linear_4527_60659" x1="138.813" y1="273.295" x2="138.354" y2="274.09" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint32_linear_4527_60659" x1="135.53" y1="275.244" x2="135.071" y2="276.039" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint33_linear_4527_60659" x1="132.246" y1="277.193" x2="131.787" y2="277.988" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint34_linear_4527_60659" x1="128.963" y1="279.142" x2="128.504" y2="279.937" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint35_linear_4527_60659" x1="125.679" y1="281.09" x2="125.22" y2="281.885" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint36_linear_4527_60659" x1="122.396" y1="283.041" x2="121.937" y2="283.836" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint37_linear_4527_60659" x1="119.112" y1="284.99" x2="118.654" y2="285.785" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint38_linear_4527_60659" x1="115.829" y1="286.938" x2="115.37" y2="287.733" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint39_linear_4527_60659" x1="141.836" y1="227.756" x2="142.742" y2="228.067" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint40_linear_4527_60659" x1="144.658" y1="229.376" x2="145.589" y2="229.697" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint41_linear_4527_60659" x1="147.491" y1="230.999" x2="148.421" y2="231.319" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint42_linear_4527_60659" x1="150.323" y1="232.622" x2="151.253" y2="232.942" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint43_linear_4527_60659" x1="153.155" y1="234.246" x2="154.085" y2="234.566" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint44_linear_4527_60659" x1="155.987" y1="235.87" x2="156.917" y2="236.19" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint45_linear_4527_60659" x1="158.819" y1="237.494" x2="159.749" y2="237.814" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint46_linear_4527_60659" x1="161.651" y1="239.116" x2="162.581" y2="239.437" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint47_linear_4527_60659" x1="145.394" y1="218.568" x2="157.955" y2="247.197" gradientUnits="userSpaceOnUse">
	            <stop offset="0.0354" stopColor="#1874AB" />
	            <stop offset="0.2684" stopColor="#1C7ABA" />
	            <stop offset="0.7178" stopColor="#278BE3" />
	            <stop offset="1" stopColor="#2E97FF" />
	          </linearGradient>
	          <linearGradient id="paint48_linear_4527_60659" x1="126.75" y1="300.784" x2="130.543" y2="294.215" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#1E1F21" />
	            <stop offset="0.0762" stopColor="#2C2E30" />
	            <stop offset="0.2233" stopColor="#515359" />
	            <stop offset="0.2677" stopColor="#5D6066" />
	            <stop offset="0.6061" stopColor="#37383C" />
	          </linearGradient>
	          <linearGradient id="paint49_linear_4527_60659" x1="132.579" y1="298.259" x2="127.291" y2="298.259" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#484B4F" />
	            <stop offset="1" stopColor="#1E1F21" />
	          </linearGradient>
	          <linearGradient id="paint50_linear_4527_60659" x1="131.168" y1="298.26" x2="128.702" y2="298.26" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#D4D1D8" />
	            <stop offset="0.8549" stopColor="#A5A6B9" />
	            <stop offset="1" stopColor="#9D9EB3" />
	          </linearGradient>
	          <radialGradient
	            id="paint51_radial_4527_60659"
	            cx="0"
	            cy="0"
	            r="1"
	            gradientUnits="userSpaceOnUse"
	            gradientTransform="translate(129.391 298.17) rotate(180) scale(2.856)"
	          >
	            <stop stopColor="white" />
	            <stop offset="1" />
	          </radialGradient>
	          <linearGradient id="paint52_linear_4527_60659" x1="153.61" y1="285.656" x2="157.403" y2="279.086" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#1E1F21" />
	            <stop offset="0.0762" stopColor="#2C2E30" />
	            <stop offset="0.2233" stopColor="#515359" />
	            <stop offset="0.2677" stopColor="#5D6066" />
	            <stop offset="0.6061" stopColor="#37383C" />
	          </linearGradient>
	          <linearGradient id="paint53_linear_4527_60659" x1="159.438" y1="283.13" x2="154.151" y2="283.13" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#484B4F" />
	            <stop offset="1" stopColor="#1E1F21" />
	          </linearGradient>
	          <linearGradient id="paint54_linear_4527_60659" x1="158.028" y1="283.132" x2="155.562" y2="283.132" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#D4D1D8" />
	            <stop offset="0.8549" stopColor="#A5A6B9" />
	            <stop offset="1" stopColor="#9D9EB3" />
	          </linearGradient>
	          <radialGradient
	            id="paint55_radial_4527_60659"
	            cx="0"
	            cy="0"
	            r="1"
	            gradientUnits="userSpaceOnUse"
	            gradientTransform="translate(156.25 283.042) rotate(180) scale(2.85602)"
	          >
	            <stop stopColor="white" />
	            <stop offset="1" />
	          </radialGradient>
	          <radialGradient
	            id="paint56_radial_4527_60659"
	            cx="0"
	            cy="0"
	            r="1"
	            gradientUnits="userSpaceOnUse"
	            gradientTransform="translate(129.247 230.359) rotate(-0.024861) scale(52.6075)"
	          >
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </radialGradient>
	          <linearGradient id="paint57_linear_4527_60659" x1="132.684" y1="225.803" x2="145.779" y2="225.803" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#D7DBF2" />
	            <stop offset="0.1449" stopColor="#DBDEF3" />
	            <stop offset="0.3485" stopColor="#E3E6F8" />
	            <stop offset="0.5808" stopColor="#F2F4FF" />
	            <stop offset="0.8551" stopColor="#FAFBFF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint58_linear_4527_60659" x1="118.775" y1="227.976" x2="156.5" y2="227.976" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#EBEDF9" />
	            <stop offset="0.1449" stopColor="#EDEEF9" />
	            <stop offset="0.3485" stopColor="#F1F3FC" />
	            <stop offset="0.5808" stopColor="#F9FAFF" />
	            <stop offset="0.8551" stopColor="#FDFDFF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint59_linear_4527_60659" x1="163.347" y1="238.487" x2="164.252" y2="238.487" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint60_linear_4527_60659" x1="163.189" y1="211.64" x2="165.248" y2="208.074" gradientUnits="userSpaceOnUse">
	            <stop offset="0.1111" stopColor="#1E88E5" />
	            <stop offset="0.458333" stopColor="#72B5E8" />
	            <stop offset="0.6414" stopColor="#2196F3" />
	            <stop offset="0.9343" stopColor="#1E88E5" />
	          </linearGradient>
	          <linearGradient id="paint61_linear_4527_60659" x1="176.799" y1="217.486" x2="187.964" y2="216.203" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <radialGradient
	            id="paint62_radial_4527_60659"
	            cx="0"
	            cy="0"
	            r="1"
	            gradientUnits="userSpaceOnUse"
	            gradientTransform="translate(166.444 210.42) rotate(-149.835) scale(12.4781 1.40843)"
	          >
	            <stop stopColor="white" />
	            <stop offset="1" stopColor="white" stopOpacity="0" />
	          </radialGradient>
	          <linearGradient id="paint63_linear_4527_60659" x1="120.346" y1="220.986" x2="145.964" y2="234.091" gradientUnits="userSpaceOnUse">
	            <stop offset="0.0354" stopColor="#8628BD" />
	            <stop offset="0.3204" stopColor="#8B2FCC" />
	            <stop offset="0.8706" stopColor="#9941F5" />
	            <stop offset="1" stopColor="#9D46FF" />
	          </linearGradient>
	          <linearGradient id="paint64_linear_4527_60659" x1="136.588" y1="236.09" x2="161.658" y2="198.634" gradientUnits="userSpaceOnUse">
	            <stop offset="0.0354" stopColor="#8628BD" />
	            <stop offset="0.3204" stopColor="#8B2FCC" />
	            <stop offset="0.8706" stopColor="#9941F5" />
	            <stop offset="1" stopColor="#9D46FF" />
	          </linearGradient>
	          <linearGradient id="paint65_linear_4527_60659" x1="146.657" y1="253.364" x2="155.297" y2="264.087" gradientUnits="userSpaceOnUse">
	            <stop offset="0.0354" stopColor="#4527A0" />
	            <stop offset="0.3204" stopColor="#5E35B1" />
	            <stop offset="0.8706" stopColor="#673AB7" />
	            <stop offset="1" stopColor="#B39DDB" />
	          </linearGradient>
	          <linearGradient id="paint66_linear_4527_60659" x1="141.615" y1="233.658" x2="166.534" y2="246.406" gradientUnits="userSpaceOnUse">
	            <stop offset="0.0354" stopColor="#4527A0" />
	            <stop offset="0.3204" stopColor="#673AB7" />
	            <stop offset="0.8706" stopColor="#673AB7" />
	            <stop offset="1" stopColor="#B39DDB" />
	          </linearGradient>
	          <linearGradient id="paint67_linear_4527_60659" x1="175.394" y1="218.12" x2="116.771" y2="242.583" gradientUnits="userSpaceOnUse">
	            <stop offset="0.0354" stopColor="#8628BD" />
	            <stop offset="0.3204" stopColor="#8B2FCC" />
	            <stop offset="0.8706" stopColor="#9941F5" />
	            <stop offset="1" stopColor="#9D46FF" />
	          </linearGradient>
	          <linearGradient id="paint68_linear_4527_60659" x1="112.904" y1="231.515" x2="134.106" y2="242.361" gradientUnits="userSpaceOnUse">
	            <stop offset="0.0354" stopColor="#1874AB" />
	            <stop offset="0.2684" stopColor="#1C7ABA" />
	            <stop offset="0.7178" stopColor="#278BE3" />
	            <stop offset="1" stopColor="#2E97FF" />
	          </linearGradient>
	          <linearGradient id="paint69_linear_4527_60659" x1="128.887" y1="244.726" x2="147.402" y2="217.063" gradientUnits="userSpaceOnUse">
	            <stop offset="0.0354" stopColor="#1874AB" />
	            <stop offset="0.2684" stopColor="#1C7ABA" />
	            <stop offset="0.7178" stopColor="#278BE3" />
	            <stop offset="1" stopColor="#2E97FF" />
	          </linearGradient>
	          <linearGradient id="paint70_linear_4527_60659" x1="130.018" y1="255.614" x2="138.679" y2="263.382" gradientUnits="userSpaceOnUse">
	            <stop offset="0.0354" stopColor="#1874AB" />
	            <stop offset="0.2684" stopColor="#1C7ABA" />
	            <stop offset="0.7178" stopColor="#278BE3" />
	            <stop offset="1" stopColor="#2E97FF" />
	          </linearGradient>
	          <linearGradient id="paint71_linear_4527_60659" x1="133.106" y1="243.189" x2="154.308" y2="254.035" gradientUnits="userSpaceOnUse">
	            <stop offset="0.0354" stopColor="#1874AB" />
	            <stop offset="0.2684" stopColor="#1C7ABA" />
	            <stop offset="0.7178" stopColor="#278BE3" />
	            <stop offset="1" stopColor="#2E97FF" />
	          </linearGradient>
	          <linearGradient id="paint72_linear_4527_60659" x1="159.54" y1="230.626" x2="109.325" y2="251.58" gradientUnits="userSpaceOnUse">
	            <stop offset="0.0354" stopColor="#1874AB" />
	            <stop offset="0.2684" stopColor="#1C7ABA" />
	            <stop offset="0.7178" stopColor="#278BE3" />
	            <stop offset="1" stopColor="#2E97FF" />
	          </linearGradient>
	          <linearGradient id="paint73_linear_4527_60659" x1="121.366" y1="266.708" x2="122.271" y2="266.708" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint74_linear_4527_60659" x1="124.864" y1="264.647" x2="125.769" y2="264.647" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint75_linear_4527_60659" x1="128.361" y1="262.586" x2="129.267" y2="262.586" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint76_linear_4527_60659" x1="131.859" y1="260.527" x2="132.764" y2="260.527" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint77_linear_4527_60659" x1="135.357" y1="258.465" x2="136.262" y2="258.465" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint78_linear_4527_60659" x1="138.855" y1="256.404" x2="139.76" y2="256.404" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint79_linear_4527_60659" x1="142.353" y1="254.344" x2="143.258" y2="254.344" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint80_linear_4527_60659" x1="145.851" y1="252.283" x2="146.756" y2="252.283" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint81_linear_4527_60659" x1="149.348" y1="250.224" x2="150.254" y2="250.224" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint82_linear_4527_60659" x1="152.847" y1="248.162" x2="153.752" y2="248.162" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint83_linear_4527_60659" x1="156.344" y1="246.102" x2="157.25" y2="246.102" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint84_linear_4527_60659" x1="159.842" y1="244.042" x2="160.747" y2="244.042" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint85_linear_4527_60659" x1="99.1256" y1="255.435" x2="100.031" y2="255.435" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint86_linear_4527_60659" x1="101.86" y1="256.97" x2="102.766" y2="256.97" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint87_linear_4527_60659" x1="104.596" y1="258.506" x2="105.501" y2="258.506" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint88_linear_4527_60659" x1="107.331" y1="260.041" x2="108.236" y2="260.041" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint89_linear_4527_60659" x1="110.066" y1="261.576" x2="110.971" y2="261.576" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint90_linear_4527_60659" x1="112.801" y1="263.111" x2="113.706" y2="263.111" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint91_linear_4527_60659" x1="115.536" y1="264.645" x2="116.441" y2="264.645" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint92_linear_4527_60659" x1="118.271" y1="266.182" x2="119.176" y2="266.182" gradientUnits="userSpaceOnUse">
	            <stop stopColor="#AFB6E5" />
	            <stop offset="0.1449" stopColor="#B6BCE8" />
	            <stop offset="0.3485" stopColor="#C8CDF1" />
	            <stop offset="0.5808" stopColor="#E5E9FF" />
	            <stop offset="0.8551" stopColor="#F5F6FF" />
	            <stop offset="1" stopColor="white" />
	          </linearGradient>
	          <linearGradient id="paint93_linear_4527_60659" x1="122.148" y1="255.629" x2="122.99" y2="261.885" gradientUnits="userSpaceOnUse">
	            <stop offset="0.1111" stopColor="#1E88E5" />
	            <stop offset="0.5893" stopColor="#D6DAF1" />
	            <stop offset="0.6414" stopColor="#2196F3" />
	            <stop offset="0.9343" stopColor="#1E88E5" />
	          </linearGradient>
	          <radialGradient
	            id="paint94_radial_4527_60659"
	            cx="0"
	            cy="0"
	            r="1"
	            gradientUnits="userSpaceOnUse"
	            gradientTransform="translate(120.945 256.832) rotate(86.1858) scale(1.80888)"
	          >
	            <stop stopColor="white" />
	            <stop offset="0.744363" stopColor="white" stopOpacity="0" />
	          </radialGradient>
	          <linearGradient id="paint95_linear_4527_60659" x1="95.1951" y1="244.679" x2="100.111" y2="244.776" gradientUnits="userSpaceOnUse">
	            <stop offset="0.1111" stopColor="#1E88E5" />
	            <stop offset="0.441468" stopColor="#D1EBFF" />
	            <stop offset="0.9343" stopColor="#1E88E5" />
	          </linearGradient>
	          <radialGradient
	            id="paint96_radial_4527_60659"
	            cx="0"
	            cy="0"
	            r="1"
	            gradientUnits="userSpaceOnUse"
	            gradientTransform="translate(101.662 244.262) rotate(-8.88191) scale(1.40764)"
	          >
	            <stop stopColor="#B0B7E5" />
	            <stop offset="0.0354" stopColor="#A1A7D1" stopOpacity="0.9646" />
	            <stop offset="0.1301" stopColor="#7B80A0" stopOpacity="0.8699" />
	            <stop offset="0.2301" stopColor="#5A5E75" stopOpacity="0.7699" />
	            <stop offset="0.3336" stopColor="#3E4151" stopOpacity="0.6664" />
	            <stop offset="0.4417" stopColor="#282934" stopOpacity="0.5583" />
	            <stop offset="0.5558" stopColor="#16171D" stopOpacity="0.4442" />
	            <stop offset="0.6786" stopColor="#0A0A0D" stopOpacity="0.3214" />
	            <stop offset="0.8163" stopColor="#020203" stopOpacity="0.1837" />
	            <stop offset="1" stopOpacity="0" />
	          </radialGradient>
	          <radialGradient
	            id="paint97_radial_4527_60659"
	            cx="0"
	            cy="0"
	            r="1"
	            gradientUnits="userSpaceOnUse"
	            gradientTransform="translate(114.511 255.838) rotate(-158.429) scale(2.74964 0.840967)"
	          >
	            <stop stopColor="white" stopOpacity="0.68" />
	            <stop offset="1" stopColor="white" stopOpacity="0" />
	          </radialGradient>
	          <clipPath id="clip0_4527_60659">
	            <rect width="266.384" height="352" fill="white" />
	          </clipPath>
	          <clipPath id="clip1_4527_60659">
	            <rect width="20.5114" height="30.1428" fill="white" transform="translate(208.438 103.452)" />
	          </clipPath>
	        </defs>
	      </svg>
	    </Box>
	  );
	};
	
	export default MegaMenuBanner;

```

src/layout/MainLayout/Header/MegaMenuSection/index.tsx```tsx
	import { useEffect, useRef, useState } from 'react';
	import Link from 'next/link';
	
	// material-ui
	import { styled, useTheme } from '@mui/material/styles';
	import {
	  Avatar,
	  ClickAwayListener,
	  Grid,
	  List,
	  ListItemButton,
	  ListItemIcon,
	  ListSubheader,
	  ListItemText,
	  Paper,
	  Popper,
	  Typography,
	  useMediaQuery
	} from '@mui/material';
	
	// project imports
	import Banner from './Banner';
	import MainCard from 'ui-component/cards/MainCard';
	import Transitions from 'ui-component/extended/Transitions';
	import { drawerWidth, gridSpacing } from 'store/constant';
	
	// assets
	import FiberManualRecordIcon from '@mui/icons-material/FiberManualRecord';
	import { IconAccessPoint } from '@tabler/icons-react';
	
	const HeaderAvatarStyle = styled(Avatar)(({ theme }) => ({
	  ...theme.typography.commonAvatar,
	  ...theme.typography.mediumAvatar,
	  background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.secondary.light,
	  color: theme.palette.mode === 'dark' ? theme.palette.secondary.main : theme.palette.secondary.dark,
	  '&:hover': {
	    background: theme.palette.mode === 'dark' ? theme.palette.secondary.main : theme.palette.secondary.dark,
	    color: theme.palette.mode === 'dark' ? theme.palette.secondary.light : theme.palette.secondary.light
	  }
	}));
	
	// ==============================|| SEARCH INPUT - MEGA MENu||============================== //
	
	const MegaMenuSection = () => {
	  const theme = useTheme();
	  const matchDownMd = useMediaQuery(theme.breakpoints.down('md'));
	
	  const [open, setOpen] = useState(false);
	  const anchorRef = useRef<any>(null);
	
	  const handleToggle = () => {
	    setOpen((prevOpen) => !prevOpen);
	  };
	  const handleClose = (event: React.MouseEvent<HTMLDivElement> | MouseEvent | TouchEvent) => {
	    if (anchorRef.current && anchorRef.current.contains(event.target)) {
	      return;
	    }
	
	    setOpen(false);
	  };
	
	  useEffect(() => {
	    if (matchDownMd && open) setOpen(false);
	    // eslint-disable-next-line
	  }, [matchDownMd]);
	
	  return (
	    <>
	      <HeaderAvatarStyle
	        variant="rounded"
	        ref={anchorRef}
	        aria-controls={open ? 'menu-list-grow' : undefined}
	        aria-haspopup="true"
	        onClick={handleToggle}
	        sx={{ display: { xs: 'none', md: 'flex' } }}
	      >
	        <IconAccessPoint stroke={1.5} size="20px" />
	      </HeaderAvatarStyle>
	      <Popper
	        placement="bottom-end"
	        open={open}
	        anchorEl={anchorRef.current}
	        role={undefined}
	        transition
	        disablePortal
	        modifiers={[
	          {
	            name: 'offset',
	            options: {
	              offset: [150, 20]
	            }
	          }
	        ]}
	      >
	        {({ TransitionProps }) => (
	          <ClickAwayListener onClickAway={handleClose}>
	            <Transitions in={open} {...TransitionProps}>
	              <Paper
	                sx={{
	                  width: {
	                    md: `calc(100vw - 100px)`,
	                    lg: `calc(100vw - ${drawerWidth + 100}px)`,
	                    xl: `calc(100vw - ${drawerWidth + 140}px)`
	                  },
	                  maxWidth: { xl: 900, md: 764 }
	                }}
	              >
	                {open && (
	                  <MainCard
	                    border={false}
	                    elevation={16}
	                    content={false}
	                    boxShadow
	                    shadow={theme.shadows[16]}
	                    sx={{ overflow: { p: 1, xs: 'visible', md: 'hidden' } }}
	                  >
	                    <Grid container spacing={gridSpacing}>
	                      <Grid item md={4}>
	                        <Banner />
	                      </Grid>
	                      <Grid item md={8}>
	                        <Grid
	                          container
	                          spacing={gridSpacing}
	                          sx={{
	                            pt: 3,
	                            '& .MuiListItemButton-root:hover': {
	                              background: 'transparent',
	                              '& .MuiTypography-root': {
	                                color: 'secondary.main'
	                              }
	                            },
	                            '& .MuiListItemIcon-root': {
	                              minWidth: 16
	                            }
	                          }}
	                        >
	                          <Grid item xs={4}>
	                            <List
	                              component="nav"
	                              aria-labelledby="nested-list-user"
	                              subheader={
	                                <ListSubheader id="nested-list-user">
	                                  <Typography variant="subtitle1"> User Quick</Typography>
	                                </ListSubheader>
	                              }
	                            >
	                              <ListItemButton disableRipple component={Link} href="#">
	                                <ListItemIcon>
	                                  <FiberManualRecordIcon sx={{ fontSize: '0.5rem' }} />
	                                </ListItemIcon>
	                                <ListItemText primary="Social Profile" />
	                              </ListItemButton>
	                              <ListItemButton component={Link} href="#">
	                                <ListItemIcon>
	                                  <FiberManualRecordIcon sx={{ fontSize: '0.5rem' }} />
	                                </ListItemIcon>
	                                <ListItemText primary="Account Profile" />
	                              </ListItemButton>
	                              <ListItemButton component={Link} href="#">
	                                <ListItemIcon>
	                                  <FiberManualRecordIcon sx={{ fontSize: '0.5rem' }} />
	                                </ListItemIcon>
	                                <ListItemText primary="User Cards" />
	                              </ListItemButton>
	                              <ListItemButton component={Link} href="#">
	                                <ListItemIcon>
	                                  <FiberManualRecordIcon sx={{ fontSize: '0.5rem' }} />
	                                </ListItemIcon>
	                                <ListItemText primary="User List" />
	                              </ListItemButton>
	                              <ListItemButton component={Link} href="#">
	                                <ListItemIcon>
	                                  <FiberManualRecordIcon sx={{ fontSize: '0.5rem' }} />
	                                </ListItemIcon>
	                                <ListItemText primary="Contact" />
	                              </ListItemButton>
	                            </List>
	                          </Grid>
	                          <Grid item xs={4}>
	                            <List
	                              component="nav"
	                              aria-labelledby="nested-list-application"
	                              subheader={
	                                <ListSubheader id="nested-list-application">
	                                  <Typography variant="subtitle1"> Applications </Typography>
	                                </ListSubheader>
	                              }
	                            >
	                              <ListItemButton component={Link} href="#">
	                                <ListItemIcon>
	                                  <FiberManualRecordIcon sx={{ fontSize: '0.5rem' }} />
	                                </ListItemIcon>
	                                <ListItemText primary="Chat" />
	                              </ListItemButton>
	                              <ListItemButton component={Link} href="#">
	                                <ListItemIcon>
	                                  <FiberManualRecordIcon sx={{ fontSize: '0.5rem' }} />
	                                </ListItemIcon>
	                                <ListItemText primary="Kanban" />
	                              </ListItemButton>
	                              <ListItemButton component={Link} href="#">
	                                <ListItemIcon>
	                                  <FiberManualRecordIcon sx={{ fontSize: '0.5rem' }} />
	                                </ListItemIcon>
	                                <ListItemText primary="Mail" />
	                              </ListItemButton>
	                              <ListItemButton component={Link} href="#">
	                                <ListItemIcon>
	                                  <FiberManualRecordIcon sx={{ fontSize: '0.5rem' }} />
	                                </ListItemIcon>
	                                <ListItemText primary="Calendar" />
	                              </ListItemButton>
	                              <ListItemButton component={Link} href="#">
	                                <ListItemIcon>
	                                  <FiberManualRecordIcon sx={{ fontSize: '0.5rem' }} />
	                                </ListItemIcon>
	                                <ListItemText primary="E-Commerce" />
	                              </ListItemButton>
	                            </List>
	                          </Grid>
	                          <Grid item xs={4}>
	                            <List
	                              component="nav"
	                              aria-labelledby="nested-list-primitives"
	                              subheader={
	                                <ListSubheader component="div" id="nested-list-primitives">
	                                  <Typography variant="subtitle1"> Primitives</Typography>
	                                </ListSubheader>
	                              }
	                            >
	                              <ListItemButton component={Link} href="#">
	                                <ListItemIcon>
	                                  <FiberManualRecordIcon sx={{ fontSize: '0.5rem' }} />
	                                </ListItemIcon>
	                                <ListItemText primary="Colors" />
	                              </ListItemButton>
	                              <ListItemButton component={Link} href="#">
	                                <ListItemIcon>
	                                  <FiberManualRecordIcon sx={{ fontSize: '0.5rem' }} />
	                                </ListItemIcon>
	                                <ListItemText primary="Typography" />
	                              </ListItemButton>
	                              <ListItemButton component={Link} href="#">
	                                <ListItemIcon>
	                                  <FiberManualRecordIcon sx={{ fontSize: '0.5rem' }} />
	                                </ListItemIcon>
	                                <ListItemText primary="Shadows" />
	                              </ListItemButton>
	                              <ListItemButton component={Link} target={'_blank'} href="https://tabler-icons.io/">
	                                <ListItemIcon>
	                                  <FiberManualRecordIcon sx={{ fontSize: '0.5rem' }} />
	                                </ListItemIcon>
	                                <ListItemText primary="Icons" />
	                              </ListItemButton>
	                              <ListItemButton component={Link} href="#">
	                                <ListItemIcon>
	                                  <FiberManualRecordIcon sx={{ fontSize: '0.5rem' }} />
	                                </ListItemIcon>
	                                <ListItemText primary="Elements" />
	                              </ListItemButton>
	                            </List>
	                          </Grid>
	                        </Grid>
	                      </Grid>
	                    </Grid>
	                  </MainCard>
	                )}
	              </Paper>
	            </Transitions>
	          </ClickAwayListener>
	        )}
	      </Popper>
	    </>
	  );
	};
	
	export default MegaMenuSection;

```

src/layout/MainLayout/Header/NotificationSection/NotificationList.tsx```tsx
	// material-ui
	import { useTheme, styled } from '@mui/material/styles';
	import {
	  Avatar,
	  Button,
	  Card,
	  CardContent,
	  Chip,
	  Divider,
	  Grid,
	  List,
	  ListItem,
	  ListItemAvatar,
	  ListItemSecondaryAction,
	  ListItemText,
	  Stack,
	  Typography
	} from '@mui/material';
	
	// assets
	import { IconBrandTelegram, IconBuildingStore, IconMailbox, IconPhoto } from '@tabler/icons-react';
	const User1 = '/assets/images/users/user-round.svg';
	
	// styles
	const ListItemWrapper = styled('div')(({ theme }) => ({
	  cursor: 'pointer',
	  padding: 16,
	  '&:hover': {
	    background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light
	  },
	  '& .MuiListItem-root': {
	    padding: 0
	  }
	}));
	
	// ==============================|| NOTIFICATION LIST ITEM ||============================== //
	
	const NotificationList = () => {
	  const theme = useTheme();
	
	  const chipSX = {
	    height: 24,
	    padding: '0 6px'
	  };
	  const chipErrorSX = {
	    ...chipSX,
	    color: theme.palette.orange.dark,
	    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.orange.light,
	    marginRight: '5px'
	  };
	
	  const chipWarningSX = {
	    ...chipSX,
	    color: theme.palette.warning.dark,
	    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.warning.light
	  };
	
	  const chipSuccessSX = {
	    ...chipSX,
	    color: theme.palette.success.dark,
	    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.success.light,
	    height: 28
	  };
	
	  return (
	    <List
	      sx={{
	        width: '100%',
	        maxWidth: 330,
	        py: 0,
	        borderRadius: '10px',
	        [theme.breakpoints.down('md')]: {
	          maxWidth: 300
	        },
	        '& .MuiListItemSecondaryAction-root': {
	          top: 22
	        },
	        '& .MuiDivider-root': {
	          my: 0
	        },
	        '& .list-container': {
	          pl: 7
	        }
	      }}
	    >
	      <ListItemWrapper>
	        <ListItem alignItems="center">
	          <ListItemAvatar>
	            <Avatar alt="John Doe" src={User1} />
	          </ListItemAvatar>
	          <ListItemText primary="John Doe" />
	          <ListItemSecondaryAction>
	            <Grid container justifyContent="flex-end">
	              <Grid item xs={12}>
	                <Typography variant="caption" display="block" gutterBottom>
	                  2 min ago
	                </Typography>
	              </Grid>
	            </Grid>
	          </ListItemSecondaryAction>
	        </ListItem>
	        <Grid container direction="column" className="list-container">
	          <Grid item xs={12} sx={{ pb: 2 }}>
	            <Typography variant="subtitle2">It is a long established fact that a reader will be distracted</Typography>
	          </Grid>
	          <Grid item xs={12}>
	            <Grid container>
	              <Grid item>
	                <Chip label="Unread" sx={chipErrorSX} />
	              </Grid>
	              <Grid item>
	                <Chip label="New" sx={chipWarningSX} />
	              </Grid>
	            </Grid>
	          </Grid>
	        </Grid>
	      </ListItemWrapper>
	      <Divider />
	      <ListItemWrapper>
	        <ListItem alignItems="center">
	          <ListItemAvatar>
	            <Avatar
	              sx={{
	                color: theme.palette.success.dark,
	                backgroundColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.success.light,
	                border: theme.palette.mode === 'dark' ? '1px solid' : 'none',
	                borderColor: theme.palette.success.main
	              }}
	            >
	              <IconBuildingStore stroke={1.5} size="20px" />
	            </Avatar>
	          </ListItemAvatar>
	          <ListItemText primary={<Typography variant="subtitle1">Store Verification Done</Typography>} />
	          <ListItemSecondaryAction>
	            <Grid container justifyContent="flex-end">
	              <Grid item xs={12}>
	                <Typography variant="caption" display="block" gutterBottom>
	                  2 min ago
	                </Typography>
	              </Grid>
	            </Grid>
	          </ListItemSecondaryAction>
	        </ListItem>
	        <Grid container direction="column" className="list-container">
	          <Grid item xs={12} sx={{ pb: 2 }}>
	            <Typography variant="subtitle2">We have successfully received your request.</Typography>
	          </Grid>
	          <Grid item xs={12}>
	            <Grid container>
	              <Grid item>
	                <Chip label="Unread" sx={chipErrorSX} />
	              </Grid>
	            </Grid>
	          </Grid>
	        </Grid>
	      </ListItemWrapper>
	      <Divider />
	      <ListItemWrapper>
	        <ListItem alignItems="center">
	          <ListItemAvatar>
	            <Avatar
	              sx={{
	                color: theme.palette.primary.dark,
	                backgroundColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light,
	                border: theme.palette.mode === 'dark' ? '1px solid' : 'none',
	                borderColor: theme.palette.primary.main
	              }}
	            >
	              <IconMailbox stroke={1.5} size="20px" />
	            </Avatar>
	          </ListItemAvatar>
	          <ListItemText primary={<Typography variant="subtitle1">Check Your Mail.</Typography>} />
	          <ListItemSecondaryAction>
	            <Grid container justifyContent="flex-end">
	              <Grid item>
	                <Typography variant="caption" display="block" gutterBottom>
	                  2 min ago
	                </Typography>
	              </Grid>
	            </Grid>
	          </ListItemSecondaryAction>
	        </ListItem>
	        <Grid container direction="column" className="list-container">
	          <Grid item xs={12} sx={{ pb: 2 }}>
	            <Typography variant="subtitle2">All done! Now check your inbox as you&apos;re in for a sweet treat!</Typography>
	          </Grid>
	          <Grid item xs={12}>
	            <Grid container>
	              <Grid item>
	                <Button variant="contained" disableElevation endIcon={<IconBrandTelegram stroke={1.5} size="20px" />}>
	                  Mail
	                </Button>
	              </Grid>
	            </Grid>
	          </Grid>
	        </Grid>
	      </ListItemWrapper>
	      <Divider />
	      <ListItemWrapper>
	        <ListItem alignItems="center">
	          <ListItemAvatar>
	            <Avatar alt="John Doe" src={User1} />
	          </ListItemAvatar>
	          <ListItemText primary={<Typography variant="subtitle1">John Doe</Typography>} />
	          <ListItemSecondaryAction>
	            <Grid container justifyContent="flex-end">
	              <Grid item xs={12}>
	                <Typography variant="caption" display="block" gutterBottom>
	                  2 min ago
	                </Typography>
	              </Grid>
	            </Grid>
	          </ListItemSecondaryAction>
	        </ListItem>
	        <Grid container direction="column" className="list-container">
	          <Grid item xs={12} sx={{ pb: 2 }}>
	            <Typography component="span" variant="subtitle2">
	              Uploaded two file on &nbsp;
	              <Typography component="span" variant="h6">
	                21 Jan 2020
	              </Typography>
	            </Typography>
	          </Grid>
	          <Grid item xs={12}>
	            <Grid container>
	              <Grid item xs={12}>
	                <Card
	                  sx={{
	                    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.secondary.light
	                  }}
	                >
	                  <CardContent>
	                    <Grid container direction="column">
	                      <Grid item xs={12}>
	                        <Stack direction="row" spacing={2}>
	                          <IconPhoto stroke={1.5} size="20px" />
	                          <Typography variant="subtitle1">demo.jpg</Typography>
	                        </Stack>
	                      </Grid>
	                    </Grid>
	                  </CardContent>
	                </Card>
	              </Grid>
	            </Grid>
	          </Grid>
	        </Grid>
	      </ListItemWrapper>
	      <Divider />
	      <ListItemWrapper>
	        <ListItem alignItems="center">
	          <ListItemAvatar>
	            <Avatar alt="John Doe" src={User1} />
	          </ListItemAvatar>
	          <ListItemText primary={<Typography variant="subtitle1">John Doe</Typography>} />
	          <ListItemSecondaryAction>
	            <Grid container justifyContent="flex-end">
	              <Grid item xs={12}>
	                <Typography variant="caption" display="block" gutterBottom>
	                  2 min ago
	                </Typography>
	              </Grid>
	            </Grid>
	          </ListItemSecondaryAction>
	        </ListItem>
	        <Grid container direction="column" className="list-container">
	          <Grid item xs={12} sx={{ pb: 2 }}>
	            <Typography variant="subtitle2">It is a long established fact that a reader will be distracted</Typography>
	          </Grid>
	          <Grid item xs={12}>
	            <Grid container>
	              <Grid item>
	                <Chip label="Confirmation of Account." sx={chipSuccessSX} />
	              </Grid>
	            </Grid>
	          </Grid>
	        </Grid>
	      </ListItemWrapper>
	    </List>
	  );
	};
	
	export default NotificationList;

```

src/layout/MainLayout/Header/NotificationSection/index.tsx```tsx
	import { useEffect, useRef, useState } from 'react';
	import Link from 'next/link';
	
	// material-ui
	import { useTheme } from '@mui/material/styles';
	import {
	  Avatar,
	  Box,
	  Button,
	  CardActions,
	  Chip,
	  ClickAwayListener,
	  Divider,
	  Grid,
	  Paper,
	  Popper,
	  Stack,
	  TextField,
	  Typography,
	  useMediaQuery
	} from '@mui/material';
	
	// third-party
	import PerfectScrollbar from 'react-perfect-scrollbar';
	
	// project imports
	import MainCard from 'ui-component/cards/MainCard';
	import Transitions from 'ui-component/extended/Transitions';
	import NotificationList from './NotificationList';
	
	// assets
	import { IconBell } from '@tabler/icons-react';
	
	// notification status options
	const status = [
	  {
	    value: 'all',
	    label: 'All Notification'
	  },
	  {
	    value: 'new',
	    label: 'New'
	  },
	  {
	    value: 'unread',
	    label: 'Unread'
	  },
	  {
	    value: 'other',
	    label: 'Other'
	  }
	];
	
	// ==============================|| NOTIFICATION ||============================== //
	
	const NotificationSection = () => {
	  const theme = useTheme();
	  const matchesXs = useMediaQuery(theme.breakpoints.down('md'));
	
	  const [open, setOpen] = useState(false);
	  const [value, setValue] = useState('');
	  /**
	   * anchorRef is used on different componets and specifying one type leads to other components throwing an error
	   * */
	  const anchorRef = useRef<any>(null);
	
	  const handleToggle = () => {
	    setOpen((prevOpen) => !prevOpen);
	  };
	
	  const handleClose = (event: React.MouseEvent<HTMLDivElement> | MouseEvent | TouchEvent) => {
	    if (anchorRef.current && anchorRef.current.contains(event.target)) {
	      return;
	    }
	    setOpen(false);
	  };
	
	  const prevOpen = useRef(open);
	  useEffect(() => {
	    if (prevOpen.current === true && open === false) {
	      anchorRef.current.focus();
	    }
	    prevOpen.current = open;
	  }, [open]);
	
	  const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement> | undefined) => {
	    if (event?.target.value) setValue(event?.target.value);
	  };
	
	  return (
	    <>
	      <Box
	        sx={{
	          ml: 2,
	          [theme.breakpoints.down('lg')]: {
	            mr: 2
	          }
	        }}
	      >
	        <Avatar
	          variant="rounded"
	          sx={{
	            ...theme.typography.commonAvatar,
	            ...theme.typography.mediumAvatar,
	            transition: 'all .2s ease-in-out',
	            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.secondary.light,
	            color: theme.palette.mode === 'dark' ? theme.palette.warning.dark : theme.palette.secondary.dark,
	            '&[aria-controls="menu-list-grow"],&:hover': {
	              background: theme.palette.mode === 'dark' ? theme.palette.warning.dark : theme.palette.secondary.dark,
	              color: theme.palette.mode === 'dark' ? theme.palette.grey[800] : theme.palette.secondary.light
	            }
	          }}
	          ref={anchorRef}
	          aria-controls={open ? 'menu-list-grow' : undefined}
	          aria-haspopup="true"
	          onClick={handleToggle}
	          color="inherit"
	        >
	          <IconBell stroke={1.5} size="20px" />
	        </Avatar>
	      </Box>
	
	      <Popper
	        placement={matchesXs ? 'bottom' : 'bottom-end'}
	        open={open}
	        anchorEl={anchorRef.current}
	        role={undefined}
	        transition
	        disablePortal
	        modifiers={[
	          {
	            name: 'offset',
	            options: {
	              offset: [matchesXs ? 5 : 0, 20]
	            }
	          }
	        ]}
	      >
	        {({ TransitionProps }) => (
	          <ClickAwayListener onClickAway={handleClose}>
	            <Transitions position={matchesXs ? 'top' : 'top-right'} in={open} {...TransitionProps}>
	              <Paper>
	                {open && (
	                  <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>
	                    <Grid container direction="column" spacing={2}>
	                      <Grid item xs={12}>
	                        <Grid container alignItems="center" justifyContent="space-between" sx={{ pt: 2, px: 2 }}>
	                          <Grid item>
	                            <Stack direction="row" spacing={2}>
	                              <Typography variant="subtitle1">All Notification</Typography>
	                              <Chip
	                                size="small"
	                                label="01"
	                                sx={{
	                                  color: theme.palette.background.default,
	                                  bgcolor: theme.palette.warning.dark
	                                }}
	                              />
	                            </Stack>
	                          </Grid>
	                          <Grid item>
	                            <Typography component={Link} href="#" variant="subtitle2" color="primary">
	                              Mark as all read
	                            </Typography>
	                          </Grid>
	                        </Grid>
	                      </Grid>
	                      <Grid item xs={12}>
	                        <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 205px)', overflowX: 'hidden' }}>
	                          <Grid container direction="column" spacing={2}>
	                            <Grid item xs={12}>
	                              <Box sx={{ px: 2, pt: 0.25 }}>
	                                <TextField
	                                  id="outlined-select-currency-native"
	                                  select
	                                  fullWidth
	                                  value={value}
	                                  onChange={handleChange}
	                                  SelectProps={{
	                                    native: true
	                                  }}
	                                >
	                                  {status.map((option) => (
	                                    <option key={option.value} value={option.value}>
	                                      {option.label}
	                                    </option>
	                                  ))}
	                                </TextField>
	                              </Box>
	                            </Grid>
	                            <Grid item xs={12} p={0}>
	                              <Divider sx={{ my: 0 }} />
	                            </Grid>
	                          </Grid>
	                          <NotificationList />
	                        </PerfectScrollbar>
	                      </Grid>
	                    </Grid>
	                    <Divider />
	                    <CardActions sx={{ p: 1.25, justifyContent: 'center' }}>
	                      <Button size="small" disableElevation>
	                        View All
	                      </Button>
	                    </CardActions>
	                  </MainCard>
	                )}
	              </Paper>
	            </Transitions>
	          </ClickAwayListener>
	        )}
	      </Popper>
	    </>
	  );
	};
	
	export default NotificationSection;

```

src/layout/MainLayout/Header/FullScreenSection/index.tsx```tsx
	import { useCallback, useState } from 'react';
	
	// material-ui
	import { useTheme } from '@mui/material/styles';
	import { Avatar, Box, Tooltip } from '@mui/material';
	
	// assets
	import { IconArrowsMaximize, IconArrowsMinimize } from '@tabler/icons-react';
	
	// ==============================|| HEADER CONTENT - FULLSCREEN ||============================== //
	
	const FullScreen = () => {
	  const theme = useTheme();
	
	  const [open, setOpen] = useState(false);
	  const handleToggle = useCallback(() => {
	    setOpen((prevOpen) => !prevOpen);
	    if (document && !document.fullscreenElement) {
	      document.documentElement.requestFullscreen();
	    } else if (document.exitFullscreen) {
	      document.exitFullscreen();
	    }
	  }, []);
	
	  return (
	    <Box
	      sx={{
	        ml: 2,
	        mr: 2
	      }}
	    >
	      <Tooltip title={open ? 'Exit Fullscreen' : 'Fullscreen'}>
	        <Avatar
	          variant="rounded"
	          sx={{
	            ...theme.typography.commonAvatar,
	            ...theme.typography.mediumAvatar,
	            border: '1px solid',
	            borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light,
	            background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light,
	            color: theme.palette.primary.dark,
	            transition: 'all .2s ease-in-out',
	            '&[aria-controls="menu-list-grow"],&:hover': {
	              borderColor: theme.palette.primary.main,
	              background: theme.palette.primary.main,
	              color: theme.palette.primary.light
	            }
	          }}
	          aria-controls={open ? 'menu-list-grow' : undefined}
	          aria-haspopup="true"
	          onClick={handleToggle}
	          color="inherit"
	        >
	          {open ? <IconArrowsMinimize /> : <IconArrowsMaximize />}
	        </Avatar>
	      </Tooltip>
	    </Box>
	  );
	};
	
	export default FullScreen;

```

src/layout/MainLayout/Header/MobileSection/index.tsx```tsx
	import { useEffect, useRef, useState } from 'react';
	
	// material-ui
	import { useTheme } from '@mui/material/styles';
	import { AppBar, Box, IconButton, ClickAwayListener, Grid, Paper, Popper, Toolbar, useMediaQuery } from '@mui/material';
	
	// project imports
	import LocalizationSection from '../LocalizationSection';
	import Transitions from 'ui-component/extended/Transitions';
	
	// assets
	import { IconDotsVertical } from '@tabler/icons-react';
	
	// ==============================|| MOBILE HEADER ||============================== //
	
	const MobileSection = () => {
	  const theme = useTheme();
	  const matchMobile = useMediaQuery(theme.breakpoints.down('md'));
	
	  const [open, setOpen] = useState(false);
	  /**
	   * anchorRef is used on different componets and specifying one type leads to other components throwing an error
	   * */
	  const anchorRef = useRef<any>(null);
	
	  const handleToggle = () => {
	    setOpen((prevOpen) => !prevOpen);
	  };
	
	  const handleClose = (event: MouseEvent | TouchEvent) => {
	    if (anchorRef.current && anchorRef.current.contains(event.target)) {
	      return;
	    }
	
	    setOpen(false);
	  };
	
	  const prevOpen = useRef(open);
	  useEffect(() => {
	    if (prevOpen.current === true && open === false) {
	      anchorRef.current.focus();
	    }
	
	    prevOpen.current = open;
	  }, [open]);
	
	  return (
	    <>
	      <Box component="span" ref={anchorRef} sx={{ mt: 1, ml: 1 }}>
	        <IconButton
	          sx={{ color: theme.palette.mode === 'dark' ? 'primary.main' : 'inherit', ml: 0.5, cursor: 'pointer' }}
	          onClick={handleToggle}
	        >
	          <IconDotsVertical
	            stroke={1.5}
	            aria-controls={open ? 'menu-list-grow' : undefined}
	            aria-haspopup="true"
	            style={{ fontSize: '1.5rem' }}
	          />
	        </IconButton>
	      </Box>
	
	      <Popper
	        placement="bottom-end"
	        open={open}
	        anchorEl={anchorRef.current}
	        role={undefined}
	        transition
	        disablePortal
	        style={{ width: '100%', zIndex: 1 }}
	        modifiers={[
	          {
	            name: 'offset',
	            options: {
	              offset: [0, matchMobile ? 30 : 10]
	            }
	          }
	        ]}
	      >
	        {({ TransitionProps }) => (
	          <ClickAwayListener onClickAway={handleClose}>
	            <Transitions type="zoom" in={open} {...TransitionProps} sx={{ transformOrigin: 'top right' }}>
	              <Paper>
	                {open && (
	                  <AppBar
	                    color="inherit"
	                    sx={{
	                      [theme.breakpoints.down('md')]: {
	                        background: theme.palette.mode === 'dark' ? theme.palette.dark[800] : '#fff'
	                      }
	                    }}
	                  >
	                    <Toolbar sx={{ pt: 2.75, pb: 2.75 }}>
	                      <Grid container justifyContent={matchMobile ? 'space-between' : 'flex-end'} alignItems="center">
	                        <LocalizationSection />
	                      </Grid>
	                    </Toolbar>
	                  </AppBar>
	                )}
	              </Paper>
	            </Transitions>
	          </ClickAwayListener>
	        )}
	      </Popper>
	    </>
	  );
	};
	
	export default MobileSection;

```

src/layout/MainLayout/Header/ProfileSection/index.tsx```tsx
	import { useEffect, useRef, useState } from 'react';
	
	// material-ui
	import { useTheme } from '@mui/material/styles';
	import {
	  Box,
	  ClickAwayListener,
	  Divider,
	  List,
	  ListItemButton,
	  ListItemIcon,
	  ListItemText,
	  Paper,
	  Popper,
	  Stack,
	  Typography
	} from '@mui/material';
	
	// third-party
	import { FormattedMessage } from 'react-intl';
	import PerfectScrollbar from 'react-perfect-scrollbar';
	
	// project imports
	import MainCard from 'ui-component/cards/MainCard';
	import Transitions from 'ui-component/extended/Transitions';
	import Link from 'components/ui-component/Link';
	import { signOut } from '@/utils/auth';
	
	// assets
	import { IconLogout, IconUser } from '@tabler/icons-react';
	import useConfig from 'hooks/useConfig';
	import routes from '@/routes';
	
	// store
	import { useDispatch } from '@/store';
	import { accountActions, useAccountSelector } from '@/store/slices/account';
	import { openSnackbar } from '@/store/slices/snackbar';
	
	import UserInfo from './components/UserInfo';
	
	// ==============================|| PROFILE MENU ||============================== //
	
	const ProfileSection = () => {
	  const dispatch = useDispatch();
	  const { user } = useAccountSelector();
	  const theme = useTheme();
	  const { borderRadius } = useConfig();
	  // const navigate = useNavigate();
	
	  const [open, setOpen] = useState(false);
	  /**
	   * anchorRef is used on different components and specifying one type leads to other components throwing an error
	   * */
	  const anchorRef = useRef<any>(null);
	  const handleLogout = async () => {
	    try {
	      await signOut({
	        callbackUrl: routes.login.getUrl(),
	        onSuccess: () => {
	          dispatch(accountActions.logout());
	        },
	        onError: (errorMessage) => {
	          dispatch(
	            openSnackbar({
	              open: true,
	              message: errorMessage,
	              variant: 'alert',
	              alert: {
	                color: 'error'
	              }
	            })
	          );
	        }
	      });
	    } catch (err) {
	      console.error(err);
	    }
	  };
	
	  const handleClose = (event: React.MouseEvent<HTMLDivElement> | MouseEvent | TouchEvent) => {
	    if (anchorRef.current && anchorRef.current.contains(event.target)) {
	      return;
	    }
	
	    setOpen(false);
	  };
	
	  const handleToggle = () => {
	    setOpen((prevOpen) => !prevOpen);
	  };
	
	  const prevOpen = useRef(open);
	  useEffect(() => {
	    if (prevOpen.current === true && open === false) {
	      anchorRef.current.focus();
	    }
	
	    prevOpen.current = open;
	  }, [open]);
	
	  return (
	    <>
	      <UserInfo onClick={handleToggle} ref={anchorRef} />
	      <Popper
	        placement="bottom-end"
	        open={open}
	        anchorEl={anchorRef.current}
	        role={undefined}
	        transition
	        disablePortal
	        modifiers={[
	          {
	            name: 'offset',
	            options: {
	              offset: [0, 14]
	            }
	          }
	        ]}
	      >
	        {({ TransitionProps }) => (
	          <ClickAwayListener onClickAway={handleClose}>
	            <Transitions in={open} {...TransitionProps}>
	              <Paper>
	                {open && (
	                  <MainCard border={false} elevation={16} content={false} boxShadow shadow={theme.shadows[16]}>
	                    <Box sx={{ p: 2, pb: 0 }}>
	                      <Stack>
	                        <Stack direction="row" spacing={0.5} alignItems="center">
	                          <Typography variant="h4">Good Morning,</Typography>
	                          <Typography component="span" variant="h4" sx={{ fontWeight: 400 }}>
	                            {user?.name}
	                          </Typography>
	                        </Stack>
	                        <Typography variant="subtitle2">Project Admin</Typography>
	                      </Stack>
	                      <Divider />
	                    </Box>
	                    <PerfectScrollbar style={{ height: '100%', maxHeight: 'calc(100vh - 250px)', overflowX: 'hidden' }}>
	                      <Box sx={{ p: 2, pt: 0 }}>
	                        <Divider />
	                        <List
	                          component="nav"
	                          sx={{
	                            width: '100%',
	                            maxWidth: 350,
	                            minWidth: 300,
	                            backgroundColor: theme.palette.background.paper,
	                            borderRadius: '10px',
	                            [theme.breakpoints.down('md')]: {
	                              minWidth: '100%'
	                            },
	                            '& .MuiListItemButton-root': {
	                              mt: 0.5
	                            }
	                          }}
	                        >
	                          <ListItemButton sx={{ borderRadius: `${borderRadius}px` }}>
	                            <Link href={routes.myAccount.getUrl()} display="flex" alignItems="center">
	                              <ListItemIcon>
	                                <IconUser stroke={1.5} size="20px" />
	                              </ListItemIcon>
	                              <ListItemText primary={<Typography variant="body2">My Account</Typography>} />
	                            </Link>
	                          </ListItemButton>
	
	                          <ListItemButton sx={{ borderRadius: `${borderRadius}px` }} onClick={handleLogout}>
	                            <ListItemIcon>
	                              <IconLogout stroke={1.5} size="20px" />
	                            </ListItemIcon>
	                            <ListItemText
	                              primary={
	                                <Typography variant="body2">
	                                  <FormattedMessage id="logout" />
	                                </Typography>
	                              }
	                            />
	                          </ListItemButton>
	                        </List>
	                      </Box>
	                    </PerfectScrollbar>
	                  </MainCard>
	                )}
	              </Paper>
	            </Transitions>
	          </ClickAwayListener>
	        )}
	      </Popper>
	    </>
	  );
	};
	
	export default ProfileSection;

```

src/layout/MainLayout/Header/ProfileSection/components/UserInfo/index.tsx```tsx
	import { forwardRef } from 'react';
	import { Box, Icon } from '@mui/material';
	import MoreVertIcon from '@mui/icons-material/MoreVert';
	
	// projects import
	import Avatar from '@/components/ui-component/extended/Avatar';
	import { AVATAR_DEFAULT_URL } from '@/constant';
	
	// store
	import { useAccountSelector } from '@/store/slices/account';
	
	import styles from './styles.module.scss';
	
	export interface IUserInfoProps {
	  onClick: () => void;
	}
	const UserInfo = forwardRef((props: IUserInfoProps, ref) => {
	  const { onClick } = props;
	  const { user } = useAccountSelector();
	
	  return (
	    <Box onClick={onClick} ref={ref} className={styles.wrapper}>
	      <Avatar src={user?.avatar || AVATAR_DEFAULT_URL} alt="user images" />
	      <Box className={styles.username}>{user?.name || user?.email}</Box>
	      <Icon className={styles.icon} fontSize="medium">
	        <MoreVertIcon />
	      </Icon>
	    </Box>
	  );
	});
	
	export default UserInfo;

```

src/layout/MainLayout/Header/ProfileSection/components/UserInfo/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.wrapper {
	  display: flex;
	  align-items: center;
	  cursor: pointer;
	}
	
	.username {
	  color: #fff;
	  white-space: nowrap;
	  text-overflow: ellipsis;
	  overflow: hidden;
	  max-width: 150px;
	  margin-left: 10px;
	  font-size: 12px;
	}
	
	.icon {
	  display: flex;
	  color: #fff;
	}

```

src/layout/MainLayout/Header/SearchSection/index.tsx```tsx
	import { useState } from 'react';
	
	// material-ui
	import { useTheme, styled } from '@mui/material/styles';
	import { Avatar, Box, Card, Grid, InputAdornment, OutlinedInput, Popper } from '@mui/material';
	
	// third-party
	import PopupState, { bindPopper, bindToggle } from 'material-ui-popup-state';
	
	// project imports
	import Transitions from 'ui-component/extended/Transitions';
	
	// assets
	import { IconAdjustmentsHorizontal, IconSearch, IconX } from '@tabler/icons-react';
	import { shouldForwardProp } from '@mui/system';
	
	// styles
	const PopperStyle = styled(Popper, { shouldForwardProp })(({ theme }) => ({
	  zIndex: 1100,
	  width: '99%',
	  top: '-55px !important',
	  padding: '0 12px',
	  [theme.breakpoints.down('sm')]: {
	    padding: '0 10px'
	  }
	}));
	
	const OutlineInputStyle = styled(OutlinedInput, { shouldForwardProp })(({ theme }) => ({
	  width: 434,
	  marginLeft: 16,
	  paddingLeft: 16,
	  paddingRight: 16,
	  '& input': {
	    background: 'transparent !important',
	    paddingLeft: '4px !important'
	  },
	  [theme.breakpoints.down('lg')]: {
	    width: 250
	  },
	  [theme.breakpoints.down('md')]: {
	    width: '100%',
	    marginLeft: 4,
	    background: theme.palette.mode === 'dark' ? theme.palette.dark[800] : '#fff'
	  }
	}));
	
	const HeaderAvatarStyle = styled(Avatar, { shouldForwardProp })(({ theme }) => ({
	  ...theme.typography.commonAvatar,
	  ...theme.typography.mediumAvatar,
	  background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.secondary.light,
	  color: theme.palette.mode === 'dark' ? theme.palette.secondary.main : theme.palette.secondary.dark,
	  '&:hover': {
	    background: theme.palette.mode === 'dark' ? theme.palette.secondary.main : theme.palette.secondary.dark,
	    color: theme.palette.mode === 'dark' ? theme.palette.secondary.light : theme.palette.secondary.light
	  }
	}));
	
	interface Props {
	  value: string;
	  setValue: (value: string) => void;
	  popupState: any;
	}
	
	// ==============================|| SEARCH INPUT - MOBILE||============================== //
	
	const MobileSearch = ({ value, setValue, popupState }: Props) => {
	  const theme = useTheme();
	
	  return (
	    <OutlineInputStyle
	      id="input-search-header"
	      value={value}
	      onChange={(e) => setValue(e.target.value)}
	      placeholder="Search"
	      startAdornment={
	        <InputAdornment position="start">
	          <IconSearch stroke={1.5} size="16px" color={theme.palette.grey[500]} />
	        </InputAdornment>
	      }
	      endAdornment={
	        <InputAdornment position="end">
	          <HeaderAvatarStyle variant="rounded">
	            <IconAdjustmentsHorizontal stroke={1.5} size="20px" />
	          </HeaderAvatarStyle>
	          <Box sx={{ ml: 2 }}>
	            <Avatar
	              variant="rounded"
	              sx={{
	                ...theme.typography.commonAvatar,
	                ...theme.typography.mediumAvatar,
	                background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.orange.light,
	                color: theme.palette.orange.dark,
	                '&:hover': {
	                  background: theme.palette.orange.dark,
	                  color: theme.palette.orange.light
	                }
	              }}
	              {...bindToggle(popupState)}
	            >
	              <IconX stroke={1.5} size="20px" />
	            </Avatar>
	          </Box>
	        </InputAdornment>
	      }
	      aria-describedby="search-helper-text"
	      inputProps={{ 'aria-label': 'weight' }}
	    />
	  );
	};
	
	// ==============================|| SEARCH INPUT ||============================== //
	
	const SearchSection = () => {
	  const theme = useTheme();
	  const [value, setValue] = useState('');
	
	  return (
	    <>
	      <Box sx={{ display: { xs: 'block', md: 'none' } }}>
	        <PopupState variant="popper" popupId="demo-popup-popper">
	          {(popupState) => (
	            <>
	              <Box sx={{ ml: 2 }}>
	                <HeaderAvatarStyle variant="rounded" {...bindToggle(popupState)}>
	                  <IconSearch stroke={1.5} size="19px" />
	                </HeaderAvatarStyle>
	              </Box>
	              <PopperStyle {...bindPopper(popupState)} transition>
	                {({ TransitionProps }) => (
	                  <>
	                    <Transitions type="zoom" {...TransitionProps} sx={{ transformOrigin: 'center left' }}>
	                      <Card
	                        sx={{
	                          background: theme.palette.mode === 'dark' ? theme.palette.dark[900] : '#fff',
	                          [theme.breakpoints.down('sm')]: {
	                            border: 0,
	                            boxShadow: 'none'
	                          }
	                        }}
	                      >
	                        <Box sx={{ p: 2 }}>
	                          <Grid container alignItems="center" justifyContent="space-between">
	                            <Grid item xs>
	                              <MobileSearch value={value} setValue={setValue} popupState={popupState} />
	                            </Grid>
	                          </Grid>
	                        </Box>
	                      </Card>
	                    </Transitions>
	                  </>
	                )}
	              </PopperStyle>
	            </>
	          )}
	        </PopupState>
	      </Box>
	      <Box sx={{ display: { xs: 'none', md: 'block' } }}>
	        <OutlineInputStyle
	          id="input-search-header"
	          value={value}
	          onChange={(e) => setValue(e.target.value)}
	          placeholder="Search"
	          startAdornment={
	            <InputAdornment position="start">
	              <IconSearch stroke={1.5} size="16px" color={theme.palette.grey[500]} />
	            </InputAdornment>
	          }
	          endAdornment={
	            <InputAdornment position="end">
	              <HeaderAvatarStyle variant="rounded">
	                <IconAdjustmentsHorizontal stroke={1.5} size="20px" />
	              </HeaderAvatarStyle>
	            </InputAdornment>
	          }
	          aria-describedby="search-helper-text"
	          inputProps={{ 'aria-label': 'weight' }}
	        />
	      </Box>
	    </>
	  );
	};
	
	export default SearchSection;

```

src/layout/MainLayout/Sidebar/MiniDrawerStyled.tsx```tsx
	// material-ui
	import { styled, Theme, CSSObject } from '@mui/material/styles';
	import Drawer from '@mui/material/Drawer';
	
	// project import
	import { drawerWidth } from 'store/constant';
	
	const openedMixin = (theme: Theme): CSSObject => ({
	  width: drawerWidth,
	  borderRight: 'none',
	  zIndex: 1099,
	  background: theme.palette.background.default,
	  overflowX: 'hidden',
	  boxShadow: theme.palette.mode === 'dark' ? theme.customShadows.z1 : 'none',
	  transition: theme.transitions.create('width', {
	    easing: theme.transitions.easing.sharp,
	    duration: theme.transitions.duration.enteringScreen + 200
	  })
	});
	
	const closedMixin = (theme: Theme): CSSObject => ({
	  borderRight: 'none',
	  zIndex: 1099,
	  background: theme.palette.background.default,
	  overflowX: 'hidden',
	  width: 72,
	  transition: theme.transitions.create('width', {
	    easing: theme.transitions.easing.sharp,
	    duration: theme.transitions.duration.leavingScreen + 200
	  })
	});
	
	// ==============================|| DRAWER - MINI STYLED ||============================== //
	
	const MiniDrawerStyled = styled(Drawer, { shouldForwardProp: (prop) => prop !== 'open' })(({ theme, open }) => ({
	  width: drawerWidth,
	  borderRight: '0px',
	  flexShrink: 0,
	  whiteSpace: 'nowrap',
	  boxSizing: 'border-box',
	  ...(open && {
	    ...openedMixin(theme),
	    '& .MuiDrawer-paper': openedMixin(theme)
	  }),
	  ...(!open && {
	    ...closedMixin(theme),
	    '& .MuiDrawer-paper': closedMixin(theme)
	  })
	}));
	
	export default MiniDrawerStyled;

```

src/layout/MainLayout/Sidebar/index.tsx```tsx
	import { memo, useMemo } from 'react';
	
	// material-ui
	import { useTheme } from '@mui/material/styles';
	import { Box, Drawer, Stack, useMediaQuery } from '@mui/material';
	
	// third-party
	import PerfectScrollbar from 'react-perfect-scrollbar';
	
	// project imports
	import MenuList from '../MenuList';
	import LogoSection from '../LogoSection';
	import MiniDrawerStyled from './MiniDrawerStyled';
	import Chip from 'ui-component/extended/Chip';
	
	import useConfig from 'hooks/useConfig';
	import { LAYOUT_CONST } from 'constant';
	import { drawerWidth } from 'store/constant';
	
	import { useDispatch, useSelector } from 'store';
	import { openDrawer } from 'store/slices/menu';
	
	// ==============================|| SIDEBAR DRAWER ||============================== //
	
	const Sidebar = () => {
	  const theme = useTheme();
	  const matchUpMd = useMediaQuery(theme.breakpoints.up('md'));
	  const matchDownMd = useMediaQuery(theme.breakpoints.down('md'));
	
	  const dispatch = useDispatch();
	  const { drawerOpen } = useSelector((state) => state.menu);
	
	  const { layout, drawerType } = useConfig();
	
	  const logo = useMemo(
	    () => (
	      <Box sx={{ display: 'flex', p: 2 }}>
	        <LogoSection />
	      </Box>
	    ),
	    []
	  );
	
	  const drawerContent = (
	    <>
	      <MenuList />
	      {layout === LAYOUT_CONST.VERTICAL_LAYOUT && drawerOpen && (
	        <Stack direction="row" justifyContent="center" sx={{ mb: 2 }}>
	          <Chip label={process.env.REACT_APP_VERSION} disabled chipcolor="secondary" size="small" sx={{ cursor: 'pointer' }} />
	        </Stack>
	      )}
	    </>
	  );
	
	  const drawerSX = {
	    paddingLeft: drawerOpen ? '16px' : 0,
	    paddingRight: drawerOpen ? '16px' : 0,
	    marginTop: drawerOpen ? 0 : '20px'
	  };
	
	  const drawer = useMemo(
	    () => (
	      <>
	        {matchDownMd ? (
	          <Box sx={drawerSX}>{drawerContent}</Box>
	        ) : (
	          <PerfectScrollbar
	            component="div"
	            style={{
	              height: !matchUpMd ? 'calc(100vh - 56px)' : 'calc(100vh - 88px)',
	              ...drawerSX
	            }}
	          >
	            {drawerContent}
	          </PerfectScrollbar>
	        )}
	      </>
	    ),
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	    [matchUpMd, drawerOpen, drawerType]
	  );
	
	  return (
	    <Box component="nav" sx={{ flexShrink: { md: 0 }, width: matchUpMd ? drawerWidth : 'auto' }} aria-label="mailbox folders">
	      {matchDownMd || (drawerType === LAYOUT_CONST.MINI_DRAWER && drawerOpen) ? (
	        <Drawer
	          variant={matchUpMd ? 'persistent' : 'temporary'}
	          anchor="left"
	          open={drawerOpen}
	          onClose={() => dispatch(openDrawer(!drawerOpen))}
	          sx={{
	            '& .MuiDrawer-paper': {
	              mt: matchDownMd ? 0 : 11,
	              zIndex: 1099,
	              width: drawerWidth,
	              background: theme.palette.background.default,
	              color: theme.palette.text.primary,
	              borderRight: 'none'
	            }
	          }}
	          ModalProps={{ keepMounted: true }}
	          color="inherit"
	        >
	          {matchDownMd && logo}
	          {drawer}
	        </Drawer>
	      ) : (
	        <MiniDrawerStyled variant="permanent" open={drawerOpen}>
	          {logo}
	          {drawer}
	        </MiniDrawerStyled>
	      )}
	    </Box>
	  );
	};
	
	export default memo(Sidebar);

```

src/layout/MainLayout/LogoSection/index.tsx```tsx
	import NextLink from 'next/link';
	
	// project imports
	import { DASHBOARD_PATH } from 'config';
	import Logo from 'ui-component/Logo';
	
	// ==============================|| MAIN LOGO ||============================== //
	
	const LogoSection = () => (
	  <NextLink href={DASHBOARD_PATH} aria-label="theme logo">
	    <Logo />
	  </NextLink>
	);
	
	export default LogoSection;

```

src/views/mails/forgot-password-email-template.tsx```tsx
	import { Html } from '@react-email/html';
	import { Text } from '@react-email/text';
	import { Section } from '@react-email/section';
	import { Container } from '@react-email/container';
	
	interface ForgotPasswordEmailTemplateProps {
	  code: string;
	  linkVerification: string;
	}
	
	export default function ForgotPasswordEmailTemplate(props: ForgotPasswordEmailTemplateProps) {
	  return (
	    <Html>
	      <Section style={main}>
	        <Container style={container}>
	          <Text style={paragraph}>We received a request to reset your password.</Text>
	          <Text style={paragraph}>This is your code:</Text>
	          <Text style={paragraph}>{props.code}</Text>
	          <Text style={paragraph}>To reset your password, click the link below and enter the code above:</Text>
	          <Text style={paragraph}>{props.linkVerification}</Text>
	        </Container>
	      </Section>
	    </Html>
	  );
	}
	
	// Styles for the email template
	const main = {
	  backgroundColor: '#ffffff'
	};
	
	const container = {
	  margin: '0 auto',
	  padding: '20px 0 48px',
	  width: '580px'
	};
	
	const paragraph = {
	  fontSize: '18px',
	  lineHeight: '1.4',
	  color: '#484848'
	};

```

src/views/mails/confirm-email-template.tsx```tsx
	import { Html } from '@react-email/html';
	import { Text } from '@react-email/text';
	import { Section } from '@react-email/section';
	import { Container } from '@react-email/container';
	
	interface ConfirmEmailTemplateProps {
	  name: string;
	  link: string;
	}
	
	export default function ConfirmEmailTemplate(props: ConfirmEmailTemplateProps) {
	  return (
	    <Html>
	      <Section style={main}>
	        <Container style={container}>
	          <Text style={heading}>Hi {props.name}!</Text>
	          <Text style={paragraph}>Welcome to our app!</Text>
	          <Text style={paragraph}>Please click the link below to confirm your email address and complete your registration.</Text>
	          <Text style={paragraph}>
	            <a href={props.link}>{props.link}</a>
	          </Text>
	        </Container>
	      </Section>
	    </Html>
	  );
	}
	
	// Styles for the email template
	const main = {
	  backgroundColor: '#ffffff'
	};
	
	const container = {
	  margin: '0 auto',
	  padding: '20px 0 48px',
	  width: '580px'
	};
	
	const heading = {
	  fontSize: '32px',
	  lineHeight: '1.3',
	  fontWeight: '700',
	  color: '#484848'
	};
	
	const paragraph = {
	  fontSize: '18px',
	  lineHeight: '1.4',
	  color: '#484848'
	};

```

src/views/maintenance/under-construction.tsx```tsx
	'use client';
	
	import Link from 'next/link';
	
	// material-ui
	import { useTheme, styled } from '@mui/material/styles';
	import { Button, Card, CardContent, CardMedia, Grid, Typography } from '@mui/material';
	
	// project imports
	import { DASHBOARD_PATH } from 'config';
	import AnimateButton from 'ui-component/extended/AnimateButton';
	import { gridSpacing } from 'store/constant';
	
	// assets
	import HomeTwoToneIcon from '@mui/icons-material/HomeTwoTone';
	
	const image = '/assets/images/maintenance/img-build.svg';
	const imageBackground = '/assets/images/maintenance/img-bg-grid.svg';
	const imageDarkBackground = '/assets/images/maintenance/img-bg-grid-dark.svg';
	const imageParts = '/assets/images/maintenance/img-bg-parts.svg';
	
	// styles
	const CardMediaWrapper = styled('div')({
	  maxWidth: 720,
	  margin: '0 auto',
	  position: 'relative'
	});
	
	const PageContentWrapper = styled('div')({
	  maxWidth: 350,
	  margin: '0 auto',
	  textAlign: 'center'
	});
	
	const ConstructionCard = styled(Card)({
	  minHeight: '100vh',
	  display: 'flex',
	  alignItems: 'center',
	  justifyContent: 'center'
	});
	
	const CardMediaBuild = styled('img')({
	  position: 'absolute',
	  top: 0,
	  left: 0,
	  width: '100%',
	  animation: '5s bounce ease-in-out infinite'
	});
	
	const CardMediaParts = styled('img')({
	  position: 'absolute',
	  top: 0,
	  left: 0,
	  width: '100%',
	  animation: '10s blink ease-in-out infinite'
	});
	
	// ========================|| UNDER CONSTRUCTION PAGE ||======================== //
	
	const UnderConstruction = () => {
	  const theme = useTheme();
	
	  return (
	    <ConstructionCard>
	      <CardContent>
	        <Grid container justifyContent="center" spacing={gridSpacing}>
	          <Grid item xs={12}>
	            <CardMediaWrapper>
	              <CardMedia
	                component="img"
	                image={theme.palette.mode === 'dark' ? imageDarkBackground : imageBackground}
	                title="Slider 3 image"
	              />
	              <CardMediaParts src={imageParts} title="Slider 1 image" />
	              <CardMediaBuild src={image} title="Slider 2 image" />
	            </CardMediaWrapper>
	          </Grid>
	          <Grid item xs={12}>
	            <PageContentWrapper>
	              <Grid container spacing={gridSpacing}>
	                <Grid item xs={12}>
	                  <Typography variant="h1" component="div">
	                    Under Construction
	                  </Typography>
	                </Grid>
	                <Grid item xs={12}>
	                  <Typography variant="body2">This site is on under construction!! Please check after some time</Typography>
	                </Grid>
	                <Grid item xs={12}>
	                  <AnimateButton>
	                    <Button variant="contained" size="large" component={Link} href={DASHBOARD_PATH}>
	                      <HomeTwoToneIcon sx={{ fontSize: '1.3rem', mr: 0.75 }} /> Home
	                    </Button>
	                  </AnimateButton>
	                </Grid>
	              </Grid>
	            </PageContentWrapper>
	          </Grid>
	        </Grid>
	      </CardContent>
	    </ConstructionCard>
	  );
	};
	
	export default UnderConstruction;

```

src/views/maintenance/404-notfound.tsx```tsx
	'use client';
	
	import Link from 'next/link';
	
	// material-ui
	import { useTheme, styled } from '@mui/material/styles';
	import { Button, Card, CardContent, CardMedia, Grid, Typography } from '@mui/material';
	
	// project imports
	import { DASHBOARD_PATH } from 'config';
	import AnimateButton from 'ui-component/extended/AnimateButton';
	import { gridSpacing } from 'store/constant';
	
	// assets
	import HomeTwoToneIcon from '@mui/icons-material/HomeTwoTone';
	
	const imageBackground = '/assets/images/maintenance/img-error-bg.svg';
	const imageDarkBackground = '/assets/images/maintenance/img-error-bg-dark.svg';
	const imageBlue = '/assets/images/maintenance/img-error-blue.svg';
	const imageText = '/assets/images/maintenance/img-error-text.svg';
	const imagePurple = '/assets/images/maintenance/img-error-purple.svg';
	
	// styles
	const CardMediaWrapper = styled('div')({
	  maxWidth: 720,
	  margin: '0 auto',
	  position: 'relative'
	});
	
	const ErrorWrapper = styled('div')({
	  maxWidth: 350,
	  margin: '0 auto',
	  textAlign: 'center'
	});
	
	const ErrorCard = styled(Card)({
	  minHeight: '100vh',
	  display: 'flex',
	  alignItems: 'center',
	  justifyContent: 'center'
	});
	
	const CardMediaBlock = styled('img')({
	  position: 'absolute',
	  top: 0,
	  left: 0,
	  width: '100%',
	  animation: '3s bounce ease-in-out infinite'
	});
	
	const CardMediaBlue = styled('img')({
	  position: 'absolute',
	  top: 0,
	  left: 0,
	  width: '100%',
	  animation: '15s wings ease-in-out infinite'
	});
	
	const CardMediaPurple = styled('img')({
	  position: 'absolute',
	  top: 0,
	  left: 0,
	  width: '100%',
	  animation: '12s wings ease-in-out infinite'
	});
	
	// ==============================|| ERROR PAGE ||============================== //
	
	const Error = () => {
	  const theme = useTheme();
	
	  return (
	    <ErrorCard>
	      <CardContent>
	        <Grid container justifyContent="center" spacing={gridSpacing}>
	          <Grid item xs={12}>
	            <CardMediaWrapper>
	              <CardMedia
	                component="img"
	                image={theme.palette.mode === 'dark' ? imageDarkBackground : imageBackground}
	                title="Slider5 image"
	              />
	              <CardMediaBlock src={imageText} title="Slider 1 image" />
	              <CardMediaBlue src={imageBlue} title="Slider 2 image" />
	              <CardMediaPurple src={imagePurple} title="Slider 3 image" />
	            </CardMediaWrapper>
	          </Grid>
	          <Grid item xs={12}>
	            <ErrorWrapper>
	              <Grid container spacing={gridSpacing}>
	                <Grid item xs={12}>
	                  <Typography variant="h1" component="div">
	                    Something is wrong
	                  </Typography>
	                </Grid>
	                <Grid item xs={12}>
	                  <Typography variant="body2">The page you are looking was moved, removed, renamed, or might never exist! </Typography>
	                </Grid>
	                <Grid item xs={12}>
	                  <AnimateButton>
	                    <Button variant="contained" size="large" component={Link} href={DASHBOARD_PATH}>
	                      <HomeTwoToneIcon sx={{ fontSize: '1.3rem', mr: 0.75 }} /> Home
	                    </Button>
	                  </AnimateButton>
	                </Grid>
	              </Grid>
	            </ErrorWrapper>
	          </Grid>
	        </Grid>
	      </CardContent>
	    </ErrorCard>
	  );
	};
	
	export default Error;

```

src/views/maintenance/coming-soon1.tsx```tsx
	'use client';
	
	import Image from 'next/image';
	
	// material-ui
	import { useTheme, styled } from '@mui/material/styles';
	import { Avatar, ButtonBase, Box, Card, CardContent, CardMedia, Grid, Link, Typography } from '@mui/material';
	
	// third-party
	import Lightbox from 'react-18-image-lightbox';
	
	// project imports
	import useConfig from 'hooks/useConfig';
	import Slider from 'components/maintenance/ComingSoon/ComingSoon1/Slider';
	import MailerSubscriber from 'components/maintenance/ComingSoon/ComingSoon1/MailerSubscriber';
	import { gridSpacing } from 'store/constant';
	
	// assets
	import { IconBrandDribbble } from '@tabler/icons-react';
	
	import FiberManualRecordTwoToneIcon from '@mui/icons-material/FiberManualRecordTwoTone';
	import FacebookIcon from '@mui/icons-material/Facebook';
	import TwitterIcon from '@mui/icons-material/Twitter';
	import GitHubIcon from '@mui/icons-material/GitHub';
	import BookIcon from '@mui/icons-material/Book';
	import React from 'react';
	
	const logo = '/assets/images/j2c-logo.svg';
	const logoDark = '/assets/images/logo-dark.svg';
	const companyLogo = '/assets/images/maintenance/img-ct-logo.png';
	const imageBackground = '/assets/images/maintenance/img-soon-bg.svg';
	const imageGrid = '/assets/images/maintenance/img-soon-bg-grid.svg';
	const imageDarkGrid = '/assets/images/maintenance/img-soon-bg-grid-dark.svg';
	const imageSoon2 = '/assets/images/maintenance/img-soon-2.svg';
	const imageSoon3 = '/assets/images/maintenance/img-soon-3.svg';
	const imageSoon4 = '/assets/images/maintenance/img-soon-4.svg';
	const imageSoon5 = '/assets/images/maintenance/img-soon-5.svg';
	const imageSoon6 = '/assets/images/maintenance/img-soon-6.svg';
	const imageSoon7 = '/assets/images/maintenance/img-soon-7.svg';
	const imageSoon8 = '/assets/images/maintenance/img-soon-8.svg';
	const imageSlider1 = '/assets/images/maintenance/img-slider-layout1.png';
	const imageSlider2 = '/assets/images/maintenance/img-slider-layout2.png';
	const imageSlider3 = '/assets/images/maintenance/img-slider-layout3.png';
	
	// styles
	const CardMediaWrapper = styled('div')(({ theme }) => ({
	  maxWidth: 720,
	  margin: '0 auto',
	  position: 'relative',
	  [theme.breakpoints.down('xl')]: {
	    marginTop: 30
	  },
	  [theme.breakpoints.down('md')]: {
	    maxWidth: 450
	  },
	  [theme.breakpoints.down('lg')]: {
	    display: 'none'
	  }
	}));
	
	const PageContentWrapper = styled('div')(({ theme }) => ({
	  maxWidth: 550,
	  margin: '0 0 0 auto',
	  [theme.breakpoints.down('lg')]: {
	    margin: '0 auto'
	  },
	  [theme.breakpoints.up(1400)]: {
	    maxWidth: 600
	  }
	}));
	
	const ComingSoonCard = styled(Card)(({ theme }) => ({
	  minHeight: '100vh',
	  display: 'flex',
	  alignItems: 'center',
	  justifyContent: 'space-between',
	  [theme.breakpoints.down('lg')]: {
	    display: 'block'
	  },
	  [theme.breakpoints.up(1200)]: {
	    overflow: 'hidden',
	    maxHeight: '100vh'
	  },
	  [theme.breakpoints.up(1400)]: {
	    alignItems: 'center'
	  }
	}));
	
	const SliderWrapper = styled('div')(({ theme }) => ({
	  borderRadius: '8px',
	  width: 'calc(100% - 40px)',
	  marginLeft: 40,
	  height: 'calc(100% - 40px)',
	  position: 'absolute',
	  left: 0,
	  background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light
	}));
	
	const CardMediaGrid = styled('img')({
	  position: 'absolute',
	  top: 0,
	  left: 0,
	  width: '100%',
	  zIndex: 3
	});
	
	const CardMediaWidget = styled('img')({
	  position: 'absolute',
	  top: 0,
	  left: 0,
	  width: '100%',
	  animation: '5s wings ease-in-out infinite',
	  zIndex: 5,
	  '&:nth-of-type(3)': {
	    animationDelay: '2s'
	  },
	  '&:nth-of-type(4)': {
	    animationDelay: '1s'
	  },
	  '&:nth-of-type(5)': {
	    animationDelay: '3s'
	  },
	  '&:nth-of-type(9)': {
	    animationDelay: '5s'
	  },
	  '&:nth-of-type(10)': {
	    animationDelay: '6s'
	  },
	  '&:nth-of-type(7)': {
	    animation: '3s blink ease-in-out infinite',
	    animationDelay: '1s'
	  },
	  '&:nth-of-type(6)': {
	    animation: '3s blink ease-in-out infinite',
	    animationDelay: '2s'
	  }
	});
	
	// ===========================|| COMING SOON 1 ||=========================== //
	
	const ComingSoon1 = () => {
	  const theme = useTheme();
	
	  const { rtlLayout } = useConfig();
	  const [photoIndex, setPhotoIndex] = React.useState(0);
	
	  const [open, setOpen] = React.useState(false);
	  const handleClickOpen = (slideIndex: number) => {
	    setOpen(true);
	    setPhotoIndex(slideIndex);
	  };
	
	  const images = [imageSlider1, imageSlider2, imageSlider3];
	
	  return (
	    <ComingSoonCard>
	      <CardContent sx={{ p: 0 }}>
	        <CardContent sx={{ position: 'relative' }}>
	          <CardMedia
	            component="img"
	            image={imageBackground}
	            title="Slider5 image"
	            sx={{
	              position: 'absolute',
	              bottom: -40,
	              left: 50,
	              width: 400,
	              transform: 'rotate(145deg)'
	            }}
	          />
	          {theme.palette.mode === 'light' && (
	            <div style={{ position: rtlLayout ? 'relative' : 'initial', top: rtlLayout ? 30 : 'initial' }}>
	              <Image
	                src={logo}
	                alt="Berry"
	                width="100"
	                height={35}
	                style={{
	                  maxWidth: '100%',
	                  height: 'auto'
	                }}
	              />
	            </div>
	          )}
	          {theme.palette.mode === 'dark' && (
	            <div style={{ position: rtlLayout ? 'relative' : 'initial', top: rtlLayout ? 30 : 'initial' }}>
	              <Image
	                src={logoDark}
	                alt="Berry"
	                width="100"
	                height={35}
	                style={{
	                  maxWidth: '100%',
	                  height: 'auto'
	                }}
	              />
	            </div>
	          )}
	        </CardContent>
	        <Grid container spacing={gridSpacing}>
	          <Grid item xs={12}>
	            <CardMediaWrapper>
	              <CardMedia component="img" image={imageBackground} title="Slider5 image" sx={{ position: 'relative', zIndex: 1 }} />
	              <CardMediaGrid src={theme.palette.mode === 'dark' ? imageDarkGrid : imageGrid} title="Slider5 image" />
	              <CardMediaWidget src={imageSoon2} title="Slider5 image" />
	              <CardMediaWidget src={imageSoon3} title="Slider5 image" />
	              <CardMediaWidget src={imageSoon4} title="Slider5 image" />
	              <CardMediaWidget src={imageSoon5} title="Slider5 image" />
	              <CardMediaWidget src={imageSoon6} title="Slider5 image" />
	              <CardMediaWidget src={imageSoon7} title="Slider5 image" />
	              <CardMediaWidget src={imageSoon8} title="Slider5 image" />
	            </CardMediaWrapper>
	          </Grid>
	        </Grid>
	      </CardContent>
	      <CardContent sx={{ padding: { xs: 3, xl: 10 }, margin: '0 auto' }}>
	        <Grid container spacing={gridSpacing}>
	          <Grid item xs={12}>
	            <PageContentWrapper>
	              <Grid container spacing={gridSpacing}>
	                <Grid item xs={12}>
	                  <Typography variant="h2" component="div" color="primary">
	                    Coming Soon
	                  </Typography>
	                </Grid>
	                <Grid item xs={12}>
	                  <Grid container spacing={2}>
	                    <Grid item xs={12}>
	                      <Typography variant="h1" component="div">
	                        Berry - The React Admin Template
	                      </Typography>
	                    </Grid>
	                    <Grid item xs={12}>
	                      <Typography sx={{ fontSize: '1.125rem' }}>
	                        Presenting Material-UI based React Dashboard Template to build performance centric websites and applications.
	                      </Typography>
	                    </Grid>
	                  </Grid>
	                </Grid>
	                <Grid item xs={12}>
	                  <Grid container spacing={gridSpacing}>
	                    <Grid item>
	                      <Typography variant="h5" component="div" color="secondary" sx={{ display: 'flex', alignItems: 'center' }}>
	                        <FiberManualRecordTwoToneIcon sx={{ mr: 0.625, fontSize: '1rem' }} />
	                        Flexible & Fast
	                      </Typography>
	                    </Grid>
	                    <Grid item>
	                      <Typography variant="h5" component="div" color="secondary" sx={{ display: 'flex', alignItems: 'center' }}>
	                        <FiberManualRecordTwoToneIcon sx={{ mr: 0.625, fontSize: '1rem' }} />
	                        Material UI
	                      </Typography>
	                    </Grid>
	                    <Grid item>
	                      <Typography variant="h5" component="div" color="secondary" sx={{ display: 'flex', alignItems: 'center' }}>
	                        <FiberManualRecordTwoToneIcon sx={{ mr: 0.625, fontSize: '1rem' }} />
	                        Javascript / Typescript
	                      </Typography>
	                    </Grid>
	                  </Grid>
	                </Grid>
	                <Grid item xs={12}>
	                  <MailerSubscriber />
	                </Grid>
	                <Grid item xs={12}>
	                  <Grid container alignItems="center" justifyContent="space-between" spacing={gridSpacing}>
	                    <Grid item xs={12} sm={6} sx={{ position: 'relative' }}>
	                      <SliderWrapper />
	                      <Box
	                        sx={{
	                          width: 'calc(100% - 20px)',
	                          mt: 2.5,
	                          boxShadow: '0px 45px 45px rgba(30, 136, 229, 0.2)',
	                          borderRadius: '8px',
	                          overflow: 'hidden'
	                        }}
	                      >
	                        <Slider handleClickOpen={handleClickOpen} />
	                      </Box>
	                      {open && (
	                        <Lightbox
	                          mainSrc={images[photoIndex]}
	                          nextSrc={images[(photoIndex + 1) % images.length]}
	                          prevSrc={images[(photoIndex + images.length - 1) % images.length]}
	                          onCloseRequest={() => setOpen(false)}
	                          onMovePrevRequest={() => setPhotoIndex((photoIndex + images.length - 1) % images.length)}
	                          onMoveNextRequest={() => setPhotoIndex((photoIndex + 1) % images.length)}
	                        />
	                      )}
	                    </Grid>
	                    <Grid item xs={12} sm={6} sx={{ position: 'relative' }}>
	                      <Grid container justifyContent="space-between" spacing={gridSpacing}>
	                        <Grid item xs={12}>
	                          <Grid container justifyContent="flex-end" spacing={1}>
	                            <Grid item>
	                              <ButtonBase component={Link} href="https://links.codedthemes.com/HTIBc" aria-label="blog" target="_blank">
	                                <Avatar
	                                  sx={{
	                                    ...theme.typography.commonAvatar,
	                                    ...theme.typography.mediumAvatar,
	                                    bgcolor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.secondary.light,
	                                    color: theme.palette.mode === 'dark' ? theme.palette.secondary.main : theme.palette.secondary.dark
	                                  }}
	                                >
	                                  <BookIcon />
	                                </Avatar>
	                              </ButtonBase>
	                            </Grid>
	                            <Grid item>
	                              <ButtonBase component={Link} href="https://www.facebook.com/codedthemes" target="_blank">
	                                <Avatar
	                                  sx={{
	                                    ...theme.typography.commonAvatar,
	                                    ...theme.typography.mediumAvatar,
	                                    bgcolor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.light,
	                                    color: theme.palette.mode === 'dark' ? theme.palette.primary.main : theme.palette.primary.dark
	                                  }}
	                                >
	                                  <FacebookIcon />
	                                </Avatar>
	                              </ButtonBase>
	                            </Grid>
	                            <Grid item>
	                              <ButtonBase component={Link} href="https://twitter.com/codedthemes" target="_blank">
	                                <Avatar
	                                  sx={{
	                                    ...theme.typography.commonAvatar,
	                                    ...theme.typography.mediumAvatar,
	                                    bgcolor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.warning.light,
	                                    color: theme.palette.mode === 'dark' ? theme.palette.warning.dark : theme.palette.warning.dark
	                                  }}
	                                >
	                                  <TwitterIcon />
	                                </Avatar>
	                              </ButtonBase>
	                            </Grid>
	                            <Grid item>
	                              <ButtonBase component={Link} href="https://github.com/codedthemes" target="_blank">
	                                <Avatar
	                                  sx={{
	                                    ...theme.typography.commonAvatar,
	                                    ...theme.typography.mediumAvatar,
	                                    bgcolor: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.grey[200],
	                                    color: theme.palette.mode === 'dark' ? theme.palette.dark.light : theme.palette.grey[800]
	                                  }}
	                                >
	                                  <GitHubIcon />
	                                </Avatar>
	                              </ButtonBase>
	                            </Grid>
	                            <Grid item>
	                              <ButtonBase component={Link} href="https://dribbble.com/codedthemes" target="_blank">
	                                <Avatar
	                                  sx={{
	                                    ...theme.typography.commonAvatar,
	                                    ...theme.typography.mediumAvatar,
	                                    bgcolor: theme.palette.mode === 'dark' ? theme.palette.dark.main : 'grey.100',
	                                    color: theme.palette.mode === 'dark' ? 'grey.600' : 'grey.500'
	                                  }}
	                                >
	                                  <IconBrandDribbble />
	                                </Avatar>
	                              </ButtonBase>
	                            </Grid>
	                          </Grid>
	                        </Grid>
	                        <Grid item xs={12}>
	                          <Grid container alignItems="center" justifyContent="flex-end" spacing={1}>
	                            <Grid item>
	                              <Typography variant="body1" align="right" component="div">
	                                Project By
	                              </Typography>
	                            </Grid>
	                            <Grid item>
	                              <Image
	                                src={companyLogo}
	                                alt="Berry"
	                                width={128}
	                                height={27}
	                                style={{
	                                  maxWidth: '100%',
	                                  height: 'auto'
	                                }}
	                              />
	                            </Grid>
	                          </Grid>
	                        </Grid>
	                      </Grid>
	                    </Grid>
	                  </Grid>
	                </Grid>
	              </Grid>
	            </PageContentWrapper>
	          </Grid>
	        </Grid>
	      </CardContent>
	    </ComingSoonCard>
	  );
	};
	
	export default ComingSoon1;

```

src/views/maintenance/coming-soon2.tsx```tsx
	'use client';
	
	// material-ui
	import { useTheme, styled } from '@mui/material/styles';
	import { Button, Card, CardContent, CardMedia, Grid, TextField, Typography } from '@mui/material';
	
	// third party
	import { useTimer } from 'react-timer-hook';
	
	// project imports
	import AnimateButton from 'ui-component/extended/AnimateButton';
	import { gridSpacing } from 'store/constant';
	
	// assets
	const imageGrid = '/assets/images/maintenance/img-soon-grid.svg';
	const imageDarkGrid = '/assets/images/maintenance/img-soon-grid-dark.svg';
	const imageBlock = '/assets/images/maintenance/img-soon-block.svg';
	const imageBlueBlock = '/assets/images/maintenance/img-soon-blue-block.svg';
	const imagePurpleBlock = '/assets/images/maintenance/img-soon-purple-block.svg';
	
	import NotificationsActiveTwoToneIcon from '@mui/icons-material/NotificationsActiveTwoTone';
	
	// styles
	const CardMediaWrapper = styled('div')({
	  maxWidth: 720,
	  margin: '0 auto',
	  position: 'relative'
	});
	
	const PageContentWrapper = styled('div')({
	  maxWidth: 450,
	  margin: '0 auto',
	  textAlign: 'center'
	});
	
	const TimerWrapper = styled('div')({
	  maxWidth: 450,
	  margin: '0 auto'
	});
	
	const ComingSoonCard = styled(Card)({
	  minHeight: '100vh',
	  display: 'flex',
	  alignItems: 'center',
	  justifyContent: 'center'
	});
	
	const TimeBlock = styled('div')(({ theme }) => ({
	  background: theme.palette.mode === 'dark' ? theme.palette.dark.main : theme.palette.secondary.light,
	  color: theme.palette.mode === 'dark' ? theme.palette.dark.light : theme.palette.secondary.main,
	  borderRadius: '12px',
	  padding: '24px 0',
	  textAlign: 'center',
	  fontWeight: 700,
	  fontSize: '3rem'
	}));
	
	const CardMediaBlock = styled('img')({
	  position: 'absolute',
	  top: 0,
	  left: 0,
	  width: '100%',
	  animation: '8s blink ease-in-out infinite'
	});
	
	const CardMediaBlue = styled('img')({
	  position: 'absolute',
	  top: 0,
	  left: 0,
	  width: '100%',
	  animation: '15s wings ease-in-out infinite'
	});
	
	const CardMediaPurple = styled('img')({
	  position: 'absolute',
	  top: 0,
	  left: 0,
	  width: '100%',
	  animation: '12s wings ease-in-out infinite'
	});
	
	// ===========================|| COMING SOON 2 ||=========================== //
	
	const ComingSoon2 = () => {
	  const theme = useTheme();
	  const time = new Date();
	  time.setSeconds(time.getSeconds() + 3600 * 24 * 2 - 3600 * 15.5);
	
	  const { seconds, minutes, hours, days } = useTimer({ expiryTimestamp: time });
	
	  return (
	    <ComingSoonCard>
	      <CardContent>
	        <Grid container justifyContent="center" spacing={gridSpacing}>
	          <Grid item xs={12}>
	            <PageContentWrapper>
	              <Grid container spacing={gridSpacing}>
	                <Grid item xs={12}>
	                  <Typography variant="h1">Coming Soon</Typography>
	                </Grid>
	                <Grid item xs={12}>
	                  <Typography variant="body1">Something new is on it&apos;s way</Typography>
	                </Grid>
	              </Grid>
	            </PageContentWrapper>
	          </Grid>
	          <Grid item xs={12}>
	            <CardMediaWrapper>
	              <CardMedia component="img" image={theme.palette.mode === 'dark' ? imageDarkGrid : imageGrid} title="Slider5 image" />
	              <CardMediaBlock src={imageBlock} title="Slider 1 image" />
	              <CardMediaBlue src={imageBlueBlock} title="Slider 2 image" />
	              <CardMediaPurple src={imagePurpleBlock} title="Slider 3 image" />
	            </CardMediaWrapper>
	          </Grid>
	          <Grid item xs={12}>
	            <TimerWrapper>
	              <Grid container spacing={gridSpacing}>
	                <Grid item xs={3}>
	                  <TimeBlock>{days}</TimeBlock>
	                </Grid>
	                <Grid item xs={3}>
	                  <TimeBlock>{hours}</TimeBlock>
	                </Grid>
	                <Grid item xs={3}>
	                  <TimeBlock>{minutes}</TimeBlock>
	                </Grid>
	                <Grid item xs={3}>
	                  <TimeBlock>{seconds}</TimeBlock>
	                </Grid>
	              </Grid>
	            </TimerWrapper>
	          </Grid>
	          <Grid item xs={12}>
	            <PageContentWrapper>
	              <Grid container spacing={gridSpacing} alignItems="center">
	                <Grid item xs zeroMinWidth>
	                  <TextField fullWidth label="Email Address" />
	                </Grid>
	                <Grid item>
	                  <AnimateButton>
	                    <Button variant="contained" size="large">
	                      <NotificationsActiveTwoToneIcon sx={{ fontSize: '1.3rem', mr: 0.75 }} /> Notify Me
	                    </Button>
	                  </AnimateButton>
	                </Grid>
	              </Grid>
	            </PageContentWrapper>
	          </Grid>
	        </Grid>
	      </CardContent>
	    </ComingSoonCard>
	  );
	};
	
	export default ComingSoon2;

```

src/views/maintenance/500.tsx```tsx
	'use client';
	
	import Link from 'next/link';
	
	// material-ui
	import { useTheme, styled } from '@mui/material/styles';
	import { Button, Card, CardContent, CardMedia, Grid, Typography } from '@mui/material';
	
	// project imports
	import { DASHBOARD_PATH } from 'config';
	import AnimateButton from 'ui-component/extended/AnimateButton';
	import { gridSpacing } from 'store/constant';
	
	// assets
	import HomeTwoToneIcon from '@mui/icons-material/HomeTwoTone';
	
	const imageBackground = '/assets/images/maintenance/img-error-bg.svg';
	const imageDarkBackground = '/assets/images/maintenance/img-error-bg-dark.svg';
	const imageBlue = '/assets/images/maintenance/img-error-blue.svg';
	const imageText = '/assets/images/maintenance/img-error-text.svg';
	const imagePurple = '/assets/images/maintenance/img-error-purple.svg';
	
	// styles
	const CardMediaWrapper = styled('div')({
	  maxWidth: 720,
	  margin: '0 auto',
	  position: 'relative'
	});
	
	const ErrorWrapper = styled('div')({
	  maxWidth: 350,
	  margin: '0 auto',
	  textAlign: 'center'
	});
	
	const ErrorCard = styled(Card)({
	  minHeight: '100vh',
	  display: 'flex',
	  alignItems: 'center',
	  justifyContent: 'center'
	});
	
	const CardMediaBlock = styled('img')({
	  position: 'absolute',
	  top: 0,
	  left: 0,
	  width: '100%',
	  animation: '3s bounce ease-in-out infinite'
	});
	
	const CardMediaBlue = styled('img')({
	  position: 'absolute',
	  top: 0,
	  left: 0,
	  width: '100%',
	  animation: '15s wings ease-in-out infinite'
	});
	
	const CardMediaPurple = styled('img')({
	  position: 'absolute',
	  top: 0,
	  left: 0,
	  width: '100%',
	  animation: '12s wings ease-in-out infinite'
	});
	
	// ==============================|| ERROR PAGE ||============================== //
	
	const Error = () => {
	  const theme = useTheme();
	
	  return (
	    <ErrorCard>
	      <CardContent>
	        <Grid container justifyContent="center" spacing={gridSpacing}>
	          <Grid item xs={12}>
	            <CardMediaWrapper>
	              <CardMedia
	                component="img"
	                image={theme.palette.mode === 'dark' ? imageDarkBackground : imageBackground}
	                title="Slider5 image"
	              />
	              <CardMediaBlock src={imageText} title="Slider 1 image" />
	              <CardMediaBlue src={imageBlue} title="Slider 2 image" />
	              <CardMediaPurple src={imagePurple} title="Slider 3 image" />
	            </CardMediaWrapper>
	          </Grid>
	          <Grid item xs={12}>
	            <ErrorWrapper>
	              <Grid container spacing={gridSpacing}>
	                <Grid item xs={12}>
	                  <Typography variant="h1" component="div">
	                    Something is wrong
	                  </Typography>
	                </Grid>
	                <Grid item xs={12}>
	                  <Typography variant="body2">The page you are looking was moved, removed, renamed, or might never exist! </Typography>
	                </Grid>
	                <Grid item xs={12}>
	                  <AnimateButton>
	                    <Button variant="contained" size="large" component={Link} href={DASHBOARD_PATH}>
	                      <HomeTwoToneIcon sx={{ fontSize: '1.3rem', mr: 0.75 }} /> Home
	                    </Button>
	                  </AnimateButton>
	                </Grid>
	              </Grid>
	            </ErrorWrapper>
	          </Grid>
	        </Grid>
	      </CardContent>
	    </ErrorCard>
	  );
	};
	
	export default Error;

```

src/views/react-swagger/index.tsx```tsx
	'use client';
	// @ts-ignore
	import SwaggerUI from 'swagger-ui-react';
	import 'swagger-ui-react/swagger-ui.css';
	
	type Props = {
	  specs: Record<string, any>;
	};
	
	export default function ReactSwagger({ specs }: Props) {
	  return <SwaggerUI spec={specs} />;
	}

```

src/views/projects/index.tsx```tsx
	'use client';
	import Projects from '@/components/projects/List';
	
	const ProjectsPage = () => {
	  return <Projects />;
	};
	
	export default ProjectsPage;

```

src/views/authentication/register.tsx```tsx
	'use client';
	
	import RegisterForm from 'components/authentication/auth-forms/RegisterForm';
	
	// ================================|| AUTH3 - REGISTER ||================================ //
	
	const Register = () => {
	  return <RegisterForm />;
	};
	
	export default Register;

```

src/views/authentication/verifyEmail.tsx```tsx
	'use client';
	
	import VerifyEmailForm from '@/components/authentication/auth-forms/VerifyEmailForm';
	// ================================|| AUTH3 - LOGIN ||================================ //
	
	const VerifyEmail = () => {
	  return <VerifyEmailForm />;
	};
	
	export default VerifyEmail;

```

src/views/authentication/resetPassword.tsx```tsx
	'use client';
	
	import ResetPasswordForm from '@/components/authentication/auth-forms/ResetPasswordForm';
	// ================================|| AUTH3 - LOGIN ||================================ //
	
	export interface IResetPassword {
	  error?: boolean;
	}
	
	const ResetPassword = (props: IResetPassword) => {
	  const { error = false } = props;
	  return <ResetPasswordForm error={error} />;
	};
	
	export default ResetPassword;

```

src/views/authentication/forgotPassword.tsx```tsx
	'use client';
	
	import ForgotPasswordForm from '@/components/authentication/auth-forms/ForgotPasswordForm';
	// ================================|| AUTH3 - LOGIN ||================================ //
	
	const ForgotPassword = () => {
	  return <ForgotPasswordForm />;
	};
	
	export default ForgotPassword;

```

src/views/authentication/login.tsx```tsx
	'use client';
	
	import LoginForm from 'components/authentication/auth-forms/LoginForm';
	
	// ================================|| AUTH3 - LOGIN ||================================ //
	
	const Login = () => {
	  return <LoginForm />;
	};
	
	export default Login;

```

src/views/account/profile.tsx```tsx
	'use client';
	import { Profile } from '@/components/account';
	
	const ProfilePage = () => {
	  return <Profile />;
	};
	
	export default ProfilePage;

```

src/views/user/index.tsx```tsx
	'use client';
	import User from '@/components/user';
	
	const UserPage = () => {
	  return <User />;
	};
	
	export default UserPage;

```

src/views/contractor/index.tsx```tsx
	'use client';
	import Contractor from '@/components/contractor';
	
	const ContractorPage = () => {
	  return <Contractor />;
	};
	
	export default ContractorPage;

```

src/views/builder/index.tsx```tsx
	'use client';
	import Builder from '@/components/builder';
	
	const BuilderPage = () => {
	  return <Builder />;
	};
	
	export default BuilderPage;

```

src/styles/navbar.module.scss```scss
	@import "variables.module";
	
	.container {
	    display: flex;
	}
	
	.toolbar {
	    align-self: center;
	    width: 1200px;
	}
```

src/styles/theme.ts```ts
	// @ts-nocheck
	/**
	 * @license
	 * Copyright 2024 J2C
	 */
	
	import { createTheme } from '@mui/material/styles';
	
	import {
	  errorColor,
	  fontColor,
	  fontDefault,
	  fontTitle,
	  primaryColor,
	  secondaryColor,
	  successColor,
	  tertiaryColor
	} from '@/styles/_variables.module.scss';
	
	export const theme = createTheme({
	  palette: {
	    primary: {
	      main: primaryColor
	    },
	    secondary: {
	      main: secondaryColor
	    },
	    tertiary: {
	      main: tertiaryColor
	    },
	    success: {
	      main: successColor
	    },
	    error: {
	      main: errorColor
	    },
	    danger: {
	      main: dangerColor
	    }
	  },
	  components: {
	    // Override checkbox checked color
	    MuiCheckbox: {
	      styleOverrides: {
	        root: {
	          // color: '#1a73e8',
	          '&.Mui-checked': {
	            color: '#1a73e8'
	          }
	        }
	      }
	    },
	    MuiButton: {
	      styleOverrides: {
	        textSecondary: {
	          color: fontColor
	        }
	      }
	    },
	    MuiIconButton: {
	      styleOverrides: {
	        root: {
	          height: '2em',
	          width: '2em'
	        }
	      }
	    },
	    MuiInputBase: {
	      styleOverrides: {
	        input: {
	          fontFamily: fontDefault
	        }
	      }
	    },
	    MuiInputLabel: {
	      styleOverrides: {
	        root: {
	          fontFamily: fontDefault
	        }
	      }
	    },
	    MuiToolbar: {
	      styleOverrides: {
	        root: {
	          '@media (min-width: 600px)': {
	            padding: 0
	          }
	        }
	      }
	    },
	    MuiTypography: {
	      styleOverrides: {
	        root: {
	          fontFamily: fontDefault
	        },
	        h1: {
	          color: fontColor,
	          fontSize: '84px',
	          fontWeight: '400'
	        },
	        h2: {
	          fontSize: '40px',
	          fontWeight: '100',
	          opacity: '60%'
	        },
	        h3: {
	          fontFamily: fontTitle,
	          fontSize: '24px'
	        },
	        h4: {
	          color: fontColor,
	          fontFamily: fontTitle,
	          fontSize: '24px',
	          fontWeight: '600'
	        },
	        h5: {
	          color: fontColor,
	          fontWeight: '200'
	        },
	        h6: {
	          color: fontColor,
	          fontWeight: '200',
	          fontSize: '14px'
	        }
	      }
	    }
	  }
	});

```

src/styles/landing.module.scss```scss
	@import "variables.module";
	
	.container {
	  font-size: 84px;
	  margin-top: 2em;
	}
	
	.buttons {
	  display: flex;
	  margin-top: 0.5em;
	}
	
	.login-button {
	  background-color: $primary;
	}
```

src/styles/firebaseui-styling.global.scss```scss
	.firebaseui-container {
	  min-width: 20em;
	}

```

src/styles/_variables.module.scss```scss
	@import '../scss/cm.module';
	/* Colors */
	$primary: #fafafa;
	$secondary: #1a73e8;
	$darkSecondary: #1b3a57;
	$success: #00bfa5;
	$error: #ff5252;
	$danger: #f20202;
	$dropShadow: $darkSecondary;
	$dropShadowOpacity: 20%;
	
	/* Fonts */
	$font-type: 'Google Sans', 'Roboto', sans-serif;
	$font-title: 'Google Sans Mono', 'Courier New', serif;
	$font-color: $darkSecondary;
	
	:export {
	  primaryColor: $primary;
	  secondaryColor: $secondary;
	  tertiaryColor: $darkSecondary;
	  successColor: $success;
	  errorColor: $error;
	  dangerColor: $danger;
	  fontColor: $font-color;
	  fontTitle: $font-title;
	  fontDefault: $font-type;
	}

```

src/styles/dataPage.module.scss```scss
	@import "variables.module";
	
	.addButton {
	  stroke: $secondary;
	  stroke-width: 2;
	}
	
	.title {
	  padding: 1em 1em 0;
	}
```

src/styles/dataRow.module.scss```scss
	.contentRow {
	    align-items: center;
	    gap: 2em;
	}
	
	.actions {
	    align-items: center;
	}
```

src/styles/global.scss```scss
	@import "variables.module";
	
	body {
	  font-family: $font-type;
	  background-color: $primary;
	  color: $font-color;
	  margin: 0 auto;
	}

```

src/styles/globals.css```css
	html,
	body {
	  padding: 0;
	  margin: 0;
	  font-family:
	    -apple-system,
	    BlinkMacSystemFont,
	    Segoe UI,
	    Roboto,
	    Oxygen,
	    Ubuntu,
	    Cantarell,
	    Fira Sans,
	    Droid Sans,
	    Helvetica Neue,
	    sans-serif;
	}
	
	a {
	  color: inherit;
	  text-decoration: none;
	}
	
	* {
	  box-sizing: border-box;
	}

```

src/styles/dataDialog.module.scss```scss
	.title {
	    padding-left: 0.6em;
	}
	
	.content{
	    width: 600px;
	}
	
	.dialog {
	    min-width: 24em;
	    padding: 2em;
	}
	
	.dataImage {
	    align-items: center;
	}
```

src/styles/Home.module.css```css
	.container {
	  padding: 0 2rem;
	}
	
	.main {
	  min-height: 100vh;
	  padding: 4rem 0;
	  flex: 1;
	  display: flex;
	  flex-direction: column;
	  justify-content: center;
	  align-items: center;
	}
	
	.footer {
	  display: flex;
	  flex: 1;
	  padding: 2rem 0;
	  border-top: 1px solid #eaeaea;
	  justify-content: center;
	  align-items: center;
	}
	
	.footer a {
	  display: flex;
	  justify-content: center;
	  align-items: center;
	  flex-grow: 1;
	}
	
	.title a {
	  color: #0070f3;
	  text-decoration: none;
	}
	
	.title a:hover,
	.title a:focus,
	.title a:active {
	  text-decoration: underline;
	}
	
	.title {
	  margin: 0;
	  line-height: 1.15;
	  font-size: 4rem;
	}
	
	.title,
	.description {
	  text-align: center;
	}
	
	.description {
	  margin: 4rem 0;
	  line-height: 1.5;
	  font-size: 1.5rem;
	}
	
	.code {
	  background: #fafafa;
	  border-radius: 5px;
	  padding: 0.75rem;
	  font-size: 1.1rem;
	  font-family:
	    Menlo,
	    Monaco,
	    Lucida Console,
	    Liberation Mono,
	    DejaVu Sans Mono,
	    Bitstream Vera Sans Mono,
	    Courier New,
	    monospace;
	}
	
	.grid {
	  display: flex;
	  align-items: center;
	  justify-content: center;
	  flex-wrap: wrap;
	  max-width: 800px;
	}
	
	.card {
	  margin: 16px;
	  padding: 24px;
	  text-align: left;
	  color: inherit;
	  text-decoration: none;
	  border: 1px solid #eaeaea;
	  border-radius: 10px;
	  transition:
	    color 0.15s ease,
	    border-color 0.15s ease;
	  max-width: 300px;
	}
	
	.card:hover,
	.card:focus,
	.card:active {
	  color: #0070f3;
	  border-color: #0070f3;
	}
	
	.card h2 {
	  margin: 0 0 16px 0;
	  font-size: 1.5rem;
	}
	
	.card p {
	  margin: 0;
	  font-size: 1.25rem;
	  line-height: 1.5;
	}
	
	.logo {
	  height: 1em;
	  margin-left: 0.5rem;
	}
	
	@media (max-width: 600px) {
	  .grid {
	    width: 100%;
	    flex-direction: column;
	  }
	}

```

src/constant/layout.ts```ts
	import { ReactElement } from 'react';
	
	export const LAYOUT_CONST = {
	  VERTICAL_LAYOUT: 'vertical',
	  HORIZONTAL_LAYOUT: 'horizontal',
	  DEFAULT_DRAWER: 'default',
	  MINI_DRAWER: 'mini-drawer'
	};
	
	export const LAYOUT: any = {
	  main: 'main',
	  noauth: 'noauth',
	  minimal: 'minimal'
	};
	export interface Props {
	  children: ReactElement;
	  variant?: 'main' | 'minimal' | 'noauth';
	}
	
	// DEFAULT ASSETS
	export const LOGO = {
	  url: '/assets/images/j2c-logo-2.svg',
	  alt: 'J2C',
	  width: 72,
	  height: 32
	};
	
	export const LOGO_LIGHT = {
	  url: '/assets/images/j2c-logo-light.svg',
	  alt: 'J2C',
	  width: 72,
	  height: 32
	};
	
	export const AVATAR_DEFAULT_URL = '/assets/images/users/user-round.svg';
	
	// AUTH STATUS
	export const AUTH_STATUS = {
	  AUTHENTICATED: 'authenticated',
	  UNAUTHENTICATED: ''
	};
	
	// DATETIME
	export const DATE_FORMAT = 'dd-MM-yyyy'; // DATE SUBMIT FOR BE
	export const DATE_FORMAT_DEFAULT = 'MM/dd/yyyy'; // DATE SUBMIT
	export const DATE_FULL_FORMAT = 'dd MMMM, yyyy h:mm a';
	export const VISIABLE_DATE_FORMAT = 'dd/MM/yyyy';
	export default LAYOUT;

```

src/constant/currency.ts```ts
	export const CURRENCY = 'USD';
	export const CURRENCY_SYMBOL = '$';

```

src/constant/builder.ts```ts
	export const BUILDER_CATEGORIES = [
	  'Residential',
	  'Commercial',
	  'Sustainable Building',
	  'High-Rise',
	  'Construction',
	  'Infrastructure',
	  'Project Management'
	];
	
	export const BUILDER_STATUS_ACTIVE = 'Active';
	export const BUILDER_STATUS_INACTIVE = 'Inactive';
	export const BUILDER_STATUS_ARCHIVED = 'Archived';
	
	export const BUILDER_STATUS = [BUILDER_STATUS_ACTIVE, BUILDER_STATUS_ARCHIVED, BUILDER_STATUS_INACTIVE];

```

src/constant/contractor.ts```ts
	export const CONTRACTOR_SERVICES = [
	  'Remodeling, Roofing',
	  'Electrical, Lighting, Solar',
	  'Landscaping, Irrigation',
	  'Plumbing, Drain Cleaning',
	  'Flooring, Custom Bathrooms',
	  'Roof Repair, Replacement',
	  'Energy Audits, Insulation, Solar',
	  'Interior/Exterior Painting',
	  'Ventilation, Air Conditioning',
	  'Driveways, Patios'
	];
	
	export const CONTRACTOR_STATUS_ACTIVE = 'Active';
	export const CONTRACTOR_STATUS_INACTIVE = 'Inactive';
	export const CONTRACTOR_STATUS_ARCHIVED = 'Archived';
	
	export const CONTRACTOR_STATUS = [CONTRACTOR_STATUS_ACTIVE, CONTRACTOR_STATUS_ARCHIVED, CONTRACTOR_STATUS_INACTIVE];

```

src/constant/upload.ts```ts
	// DEFINE FILE ALLOW UPLOAD
	export const MAX_FILE_SIZE = 10;
	export const IMAGE_TYPES = ['image/png', 'image/jpeg'];

```

src/constant/user.ts```ts
	export const USER_STATUS_ACTIVE = 'Active';
	export const USER_STATUS_DEACTIVED = 'Deactivated';
	
	export const USER_STATUS = [USER_STATUS_ACTIVE, USER_STATUS_DEACTIVED];

```

src/constant/project.ts```ts
	export const PROJECT_ROLE = ['Builder/Admin', 'Builder/Project Manager', 'Builder/Site Supervisor', 'Builder/Account Payable'];
	export const PROJECT_CATEGORY = ['A', 'B', 'C', 'D', 'E', 'F'];

```

src/constant/index.ts```ts
	import LAYOUT from './layout';
	
	export * from './layout';
	export * from './builder';
	export { MAX_FILE_SIZE, IMAGE_TYPES } from './upload';
	export { CURRENCY, CURRENCY_SYMBOL } from './currency';
	
	export default LAYOUT;

```

src/scss/_theme3.module.scss```scss
	// paper & background
	$paper: #ffffff;
	
	// primary
	$primaryLight: #e3ebeb;
	$primaryMain: #16595a;
	$primaryDark: #135152;
	$primary200: #8bacad;
	$primary800: #0c3e3f;
	
	// secondary
	$secondaryLight: #f8f0e5;
	$secondaryMain: #c77e23;
	$secondaryDark: #c1761f;
	$secondary200: #e3bf91;
	$secondary800: #b36115;
	
	// success Colors
	$successLight: #b9f6ca;
	$success200: #69f0ae;
	$successMain: #00e676;
	$successDark: #00c853;
	
	// error
	$errorLight: #ef9a9a;
	$errorMain: #f44336;
	$errorDark: #c62828;
	
	// orange
	$orangeLight: #fbe9e7;
	$orangeMain: #ffab91;
	$orangeDark: #d84315;
	
	// warning
	$warningLight: #fff8e1;
	$warningMain: #ffe57f;
	$warningDark: #ffc107;
	
	// grey
	$grey50: #f8fafc;
	$grey100: #eef2f6;
	$grey200: #e3e8ef;
	$grey300: #cdd5df;
	$grey500: #697586;
	$grey600: #4b5565;
	$grey700: #364152;
	$grey900: #121926;
	
	// ==============================|| DARK THEME VARIANTS ||============================== //
	
	// paper & background
	$darkBackground: #010606; // level 3
	$darkPaper: #010f17; // level 4
	
	// dark 800 & 900
	$darkLevel1: #02131d; // level 1
	$darkLevel2: #010f17; // level 2
	
	// primary dark
	$darkPrimaryLight: #eceff1;
	$darkPrimaryMain: #1f7778;
	$darkPrimaryDark: #1b6f70;
	$darkPrimary200: #8fbbbc;
	$darkPrimary800: #125a5b;
	
	// secondary dark
	$darkSecondaryLight: #f8f0e5;
	$darkSecondaryMain: #c77e23;
	$darkSecondaryDark: #c1761f;
	$darkSecondary200: #e3bf91;
	$darkSecondary800: #b36115;
	
	// text variants
	$darkTextTitle: #ffffff;
	$darkTextPrimary: #ffffff;
	$darkTextSecondary: #8492c4;
	
	// ==============================|| JAVASCRIPT ||============================== //
	
	:export {
	  // paper & background
	  paper: $paper;
	
	  // primary
	  primaryLight: $primaryLight;
	  primary200: $primary200;
	  primaryMain: $primaryMain;
	  primaryDark: $primaryDark;
	  primary800: $primary800;
	
	  // secondary
	  secondaryLight: $secondaryLight;
	  secondary200: $secondary200;
	  secondaryMain: $secondaryMain;
	  secondaryDark: $secondaryDark;
	  secondary800: $secondary800;
	
	  // success
	  successLight: $successLight;
	  success200: $success200;
	  successMain: $successMain;
	  successDark: $successDark;
	
	  // error
	  errorLight: $errorLight;
	  errorMain: $errorMain;
	  errorDark: $errorDark;
	
	  // orange
	  orangeLight: $orangeLight;
	  orangeMain: $orangeMain;
	  orangeDark: $orangeDark;
	
	  // warning
	  warningLight: $warningLight;
	  warningMain: $warningMain;
	  warningDark: $warningDark;
	
	  // grey
	  grey50: $grey50;
	  grey100: $grey100;
	  grey200: $grey200;
	  grey300: $grey300;
	  grey500: $grey500;
	  grey600: $grey600;
	  grey700: $grey700;
	  grey900: $grey900;
	
	  // ==============================|| DARK THEME VARIANTS ||============================== //
	
	  // paper & background
	  darkPaper: $darkPaper;
	  darkBackground: $darkBackground;
	
	  // dark 800 & 900
	  darkLevel1: $darkLevel1;
	  darkLevel2: $darkLevel2;
	
	  // text variants
	  darkTextTitle: $darkTextTitle;
	  darkTextPrimary: $darkTextPrimary;
	  darkTextSecondary: $darkTextSecondary;
	
	  // primary dark
	  darkPrimaryLight: $darkPrimaryLight;
	  darkPrimaryMain: $darkPrimaryMain;
	  darkPrimaryDark: $darkPrimaryDark;
	  darkPrimary200: $darkPrimary200;
	  darkPrimary800: $darkPrimary800;
	
	  // secondary dark
	  darkSecondaryLight: $darkSecondaryLight;
	  darkSecondaryMain: $darkSecondaryMain;
	  darkSecondaryDark: $darkSecondaryDark;
	  darkSecondary200: $darkSecondary200;
	  darkSecondary800: $darkSecondary800;
	}

```

src/scss/style.scss```scss
	// color variants
	@import '_cm.module.scss';
	
	// ==============================|| LIGHT BOX ||============================== //
	.slick-arrow:before {
	  color: $grey500;
	}
	
	// ==============================|| PERFECT SCROLLBAR ||============================== //
	
	.scrollbar-container {
	  .ps__rail-y {
	    &:hover > .ps__thumb-y,
	    &:focus > .ps__thumb-y,
	    &.ps--clicking .ps__thumb-y {
	      background-color: $grey500;
	      width: 5px;
	    }
	  }
	  .ps__thumb-y {
	    background-color: $grey500;
	    border-radius: 6px;
	    width: 5px;
	    right: 0;
	  }
	}
	
	// ==============================|| ANIMATION KEYFRAMES ||============================== //
	
	.project-info {
	  .slick-current {
	    opacity: 1 !important;
	    .MuiTypography-root {
	      color: $primaryMain;
	    }
	  }
	}

```

src/scss/_cm.module.scss```scss
	// paper & background
	$paper: #ffffff;
	
	// primary
	$primaryLight: #e8edf2;
	$primaryLightHover: #dde4ec;
	$primaryLightActive: #b9c8d8;
	$primaryNormal: #1c4e80;
	$primaryNormalHover: #194673;
	$primaryNormalActive: #163e66;
	$primaryDark: #153b60;
	$primaryDarkHover: #153b60;
	$primaryDarkActive: #112f4d;
	$primaryDarker: #0a1b2d;
	$primaryMain: #2196f3;
	$primary200: #90caf9;
	$primary800: #1565c0;
	
	// secondary
	$secondaryLight: #e0f2f1;
	$secondaryLightHover: #d9eff9;
	$secondaryLightActive: #b0ddf2;
	$secondaryNormal: #0091d5;
	$secondaryNormalHover: #0083c0;
	$secondaryNormalActive: #0074aa;
	$secondaryDark: #006da0;
	$secondaryDarkHover: #005780;
	$secondaryDarkActive: #004160;
	$secondaryDarker: #00334b;
	$secondaryMain: #673ab7;
	$secondary200: #b39ddb;
	$secondary800: #4527a0;
	
	// highlight
	$highlightLight: #fdf0ed;
	$highlightHover: #fce9e3;
	$highlightActive: #f8d1c6;
	$highlightNormal: #ea6a47;
	$highlightNormalHover: #d35f40;
	$highlightNormalActive: #bb5539;
	$highlightNormalDark: #b05035;
	$highlightNormalDarkHover: #8c402b;
	$highlightNormalDarkActive: #693020;
	$highlightNormalDarker: #522519;
	
	// border
	$border: #eeeeee;
	
	// success Colors
	$successLight: #b9f6ca;
	$success200: #69f0ae;
	$successMain: #00e676;
	$successDark: #00c853;
	
	// error
	$errorLight: #ef9a9a;
	$errorMain: #f44336;
	$errorDark: #c62828;
	
	// orange
	$orangeLight: #fbe9e7;
	$orangeMain: #ffab91;
	$orangeDark: #d84315;
	
	// warning
	$warningLight: #fff8e1;
	$warningMain: #ffe57f;
	$warningDark: #ffc107;
	
	// danger
	$dangerLight: #F65555;
	$dangerMain: #f20202;
	$dangerDark: #dc0202;
	
	// grey
	$grey50: #f8fafc;
	$grey100: #eef2f6;
	$grey200: #e3e8ef;
	$grey300: #cdd5df;
	$grey500: #697586;
	$grey600: #4b5565;
	$grey700: #59666d;
	$grey900: #121926;
	
	// ==============================|| DARK THEME VARIANTS ||============================== //
	
	// paper & background
	$darkBackground: #1a223f; // level 3
	$darkPaper: #111936; // level 4
	
	// dark 800 & 900
	$darkLevel1: #29314f; // level 1
	$darkLevel2: #212946; // level 2
	
	// primary dark
	$darkPrimaryLight: #e3f2fd;
	$darkPrimaryMain: #2196f3;
	$darkPrimaryDark: #1e88e5;
	$darkPrimary200: #90caf9;
	$darkPrimary800: #1565c0;
	
	// secondary dark
	$darkSecondaryLight: #d1c4e9;
	$darkSecondaryMain: #7c4dff;
	$darkSecondaryDark: #651fff;
	$darkSecondary200: #b39ddb;
	$darkSecondary800: #6200ea;
	
	// text variants
	$darkTextTitle: #d7dcec;
	$darkTextPrimary: #bdc8f0;
	$darkTextSecondary: #8492c4;
	
	// ==============================|| JAVASCRIPT ||============================== //
	
	:export {
	  // paper & background
	  paper: $paper;
	
	  // primary
	  primaryLight: $primaryLight;
	  primary200: $primary200;
	  primaryMain: $primaryMain;
	  primaryDark: $primaryDark;
	  primary800: $primary800;
	
	  // secondary
	  secondaryLight: $secondaryLight;
	  secondary200: $secondary200;
	  secondaryMain: $secondaryMain;
	  secondaryDark: $secondaryDark;
	  secondary800: $secondary800;
	
	  // success
	  successLight: $successLight;
	  success200: $success200;
	  successMain: $successMain;
	  successDark: $successDark;
	
	  // error
	  errorLight: $errorLight;
	  errorMain: $errorMain;
	  errorDark: $errorDark;
	
	  // error
	  dangerLight: $dangerLight;
	  dangerMain: $dangerMain;
	  dangerDark: $dangerDark;
	
	  // orange
	  orangeLight: $orangeLight;
	  orangeMain: $orangeMain;
	  orangeDark: $orangeDark;
	
	  // warning
	  warningLight: $warningLight;
	  warningMain: $warningMain;
	  warningDark: $warningDark;
	
	  // grey
	  grey50: $grey50;
	  grey100: $grey100;
	  grey200: $grey200;
	  grey300: $grey300;
	  grey500: $grey500;
	  grey600: $grey600;
	  grey700: $grey700;
	  grey900: $grey900;
	
	  // ==============================|| DARK THEME VARIANTS ||============================== //
	
	  // paper & background
	  darkPaper: $darkPaper;
	  darkBackground: $darkBackground;
	
	  // dark 800 & 900
	  darkLevel1: $darkLevel1;
	  darkLevel2: $darkLevel2;
	
	  // text variants
	  darkTextTitle: $darkTextTitle;
	  darkTextPrimary: $darkTextPrimary;
	  darkTextSecondary: $darkTextSecondary;
	
	  // primary dark
	  darkPrimaryLight: $darkPrimaryLight;
	  darkPrimaryMain: $darkPrimaryMain;
	  darkPrimaryDark: $darkPrimaryDark;
	  darkPrimary200: $darkPrimary200;
	  darkPrimary800: $darkPrimary800;
	
	  // secondary dark
	  darkSecondaryLight: $darkSecondaryLight;
	  darkSecondaryMain: $darkSecondaryMain;
	  darkSecondaryDark: $darkSecondaryDark;
	  darkSecondary200: $darkSecondary200;
	  darkSecondary800: $darkSecondary800;
	}

```

src/scss/_themes-vars.module.scss```scss
	// paper & background
	$paper: #ffffff;
	
	// primary
	$primaryLight: #e3f2fd;
	$primaryMain: #2196f3;
	$primaryDark: #1e88e5;
	$primary200: #90caf9;
	$primary800: #1565c0;
	
	// secondary
	$secondaryLight: #ede7f6;
	$secondaryMain: #673ab7;
	$secondaryDark: #5e35b1;
	$secondary200: #b39ddb;
	$secondary800: #4527a0;
	
	// success Colors
	$successLight: #b9f6ca;
	$success200: #69f0ae;
	$successMain: #00e676;
	$successDark: #00c853;
	
	// error
	$errorLight: #ef9a9a;
	$errorMain: #f44336;
	$errorDark: #c62828;
	
	// orange
	$orangeLight: #fbe9e7;
	$orangeMain: #ffab91;
	$orangeDark: #d84315;
	
	// warning
	$warningLight: #fff8e1;
	$warningMain: #ffe57f;
	$warningDark: #ffc107;
	
	// grey
	$grey50: #f8fafc;
	$grey100: #eef2f6;
	$grey200: #e3e8ef;
	$grey300: #cdd5df;
	$grey500: #697586;
	$grey600: #4b5565;
	$grey700: #364152;
	$grey900: #121926;
	
	// ==============================|| DARK THEME VARIANTS ||============================== //
	
	// paper & background
	$darkBackground: #1a223f; // level 3
	$darkPaper: #111936; // level 4
	
	// dark 800 & 900
	$darkLevel1: #29314f; // level 1
	$darkLevel2: #212946; // level 2
	
	// primary dark
	$darkPrimaryLight: #e3f2fd;
	$darkPrimaryMain: #2196f3;
	$darkPrimaryDark: #1e88e5;
	$darkPrimary200: #90caf9;
	$darkPrimary800: #1565c0;
	
	// secondary dark
	$darkSecondaryLight: #d1c4e9;
	$darkSecondaryMain: #7c4dff;
	$darkSecondaryDark: #651fff;
	$darkSecondary200: #b39ddb;
	$darkSecondary800: #6200ea;
	
	// text variants
	$darkTextTitle: #d7dcec;
	$darkTextPrimary: #bdc8f0;
	$darkTextSecondary: #8492c4;
	
	// ==============================|| JAVASCRIPT ||============================== //
	
	:export {
	  // paper & background
	  paper: $paper;
	
	  // primary
	  primaryLight: $primaryLight;
	  primary200: $primary200;
	  primaryMain: $primaryMain;
	  primaryDark: $primaryDark;
	  primary800: $primary800;
	
	  // secondary
	  secondaryLight: $secondaryLight;
	  secondary200: $secondary200;
	  secondaryMain: $secondaryMain;
	  secondaryDark: $secondaryDark;
	  secondary800: $secondary800;
	
	  // success
	  successLight: $successLight;
	  success200: $success200;
	  successMain: $successMain;
	  successDark: $successDark;
	
	  // error
	  errorLight: $errorLight;
	  errorMain: $errorMain;
	  errorDark: $errorDark;
	
	  // orange
	  orangeLight: $orangeLight;
	  orangeMain: $orangeMain;
	  orangeDark: $orangeDark;
	
	  // warning
	  warningLight: $warningLight;
	  warningMain: $warningMain;
	  warningDark: $warningDark;
	
	  // grey
	  grey50: $grey50;
	  grey100: $grey100;
	  grey200: $grey200;
	  grey300: $grey300;
	  grey500: $grey500;
	  grey600: $grey600;
	  grey700: $grey700;
	  grey900: $grey900;
	
	  // ==============================|| DARK THEME VARIANTS ||============================== //
	
	  // paper & background
	  darkPaper: $darkPaper;
	  darkBackground: $darkBackground;
	
	  // dark 800 & 900
	  darkLevel1: $darkLevel1;
	  darkLevel2: $darkLevel2;
	
	  // text variants
	  darkTextTitle: $darkTextTitle;
	  darkTextPrimary: $darkTextPrimary;
	  darkTextSecondary: $darkTextSecondary;
	
	  // primary dark
	  darkPrimaryLight: $darkPrimaryLight;
	  darkPrimaryMain: $darkPrimaryMain;
	  darkPrimaryDark: $darkPrimaryDark;
	  darkPrimary200: $darkPrimary200;
	  darkPrimary800: $darkPrimary800;
	
	  // secondary dark
	  darkSecondaryLight: $darkSecondaryLight;
	  darkSecondaryMain: $darkSecondaryMain;
	  darkSecondaryDark: $darkSecondaryDark;
	  darkSecondary200: $darkSecondary200;
	  darkSecondary800: $darkSecondary800;
	}

```

src/scss/_theme6.module.scss```scss
	// paper & background
	$paper: #ffffff;
	
	// primary
	$primaryLight: #e8eaf6;
	$primaryMain: #3f51b5;
	$primaryDark: #3949ab;
	$primary200: #9fa8da;
	$primary800: #283593;
	
	// secondary
	$secondaryLight: #e8eaf6;
	$secondaryMain: #3f51b5;
	$secondaryDark: #3949ab;
	$secondary200: #9fa8da;
	$secondary800: #283593;
	
	// success Colors
	$successLight: #b9f6ca;
	$success200: #69f0ae;
	$successMain: #00e676;
	$successDark: #00c853;
	
	// error
	$errorLight: #ef9a9a;
	$errorMain: #f44336;
	$errorDark: #c62828;
	
	// orange
	$orangeLight: #fbe9e7;
	$orangeMain: #ffab91;
	$orangeDark: #d84315;
	
	// warning
	$warningLight: #fff8e1;
	$warningMain: #ffe57f;
	$warningDark: #ffc107;
	
	// grey
	$grey50: #f8fafc;
	$grey100: #eef2f6;
	$grey200: #e3e8ef;
	$grey300: #cdd5df;
	$grey500: #697586;
	$grey600: #4b5565;
	$grey700: #364152;
	$grey900: #121926;
	
	// ==============================|| DARK THEME VARIANTS ||============================== //
	
	// paper & background
	$darkBackground: #1a223f; // level 3
	$darkPaper: #111936; // level 4
	
	// dark 800 & 900
	$darkLevel1: #29314f; // level 1
	$darkLevel2: #212946; // level 2
	
	// primary dark
	$darkPrimaryLight: #eeedfd;
	$darkPrimaryMain: #7267ef;
	$darkPrimaryDark: #6a5fed;
	$darkPrimary200: #b9b3f7;
	$darkPrimary800: #554ae8;
	
	// secondary dark
	$darkSecondaryLight: #eeedfd;
	$darkSecondaryMain: #7267ef;
	$darkSecondaryDark: #6a5fed;
	$darkSecondary200: #b9b3f7;
	$darkSecondary800: #554ae8;
	
	// text variants
	$darkTextTitle: #d7dcec;
	$darkTextPrimary: #bdc8f0;
	$darkTextSecondary: #8492c4;
	
	// ==============================|| JAVASCRIPT ||============================== //
	
	:export {
	  // paper & background
	  paper: $paper;
	
	  // primary
	  primaryLight: $primaryLight;
	  primary200: $primary200;
	  primaryMain: $primaryMain;
	  primaryDark: $primaryDark;
	  primary800: $primary800;
	
	  // secondary
	  secondaryLight: $secondaryLight;
	  secondary200: $secondary200;
	  secondaryMain: $secondaryMain;
	  secondaryDark: $secondaryDark;
	  secondary800: $secondary800;
	
	  // success
	  successLight: $successLight;
	  success200: $success200;
	  successMain: $successMain;
	  successDark: $successDark;
	
	  // error
	  errorLight: $errorLight;
	  errorMain: $errorMain;
	  errorDark: $errorDark;
	
	  // orange
	  orangeLight: $orangeLight;
	  orangeMain: $orangeMain;
	  orangeDark: $orangeDark;
	
	  // warning
	  warningLight: $warningLight;
	  warningMain: $warningMain;
	  warningDark: $warningDark;
	
	  // grey
	  grey50: $grey50;
	  grey100: $grey100;
	  grey200: $grey200;
	  grey300: $grey300;
	  grey500: $grey500;
	  grey600: $grey600;
	  grey700: $grey700;
	  grey900: $grey900;
	
	  // ==============================|| DARK THEME VARIANTS ||============================== //
	
	  // paper & background
	  darkPaper: $darkPaper;
	  darkBackground: $darkBackground;
	
	  // dark 800 & 900
	  darkLevel1: $darkLevel1;
	  darkLevel2: $darkLevel2;
	
	  // text variants
	  darkTextTitle: $darkTextTitle;
	  darkTextPrimary: $darkTextPrimary;
	  darkTextSecondary: $darkTextSecondary;
	
	  // primary dark
	  darkPrimaryLight: $darkPrimaryLight;
	  darkPrimaryMain: $darkPrimaryMain;
	  darkPrimaryDark: $darkPrimaryDark;
	  darkPrimary200: $darkPrimary200;
	  darkPrimary800: $darkPrimary800;
	
	  // secondary dark
	  darkSecondaryLight: $darkSecondaryLight;
	  darkSecondaryMain: $darkSecondaryMain;
	  darkSecondaryDark: $darkSecondaryDark;
	  darkSecondary200: $darkSecondary200;
	  darkSecondary800: $darkSecondary800;
	}

```

src/scss/_theme1.module.scss```scss
	// paper & background
	$paper: #ffffff;
	
	// primary
	$primaryLight: #eceff1;
	$primaryMain: #607d8b;
	$primaryDark: #546e7a;
	$primary200: #b0bec5;
	$primary800: #455a64;
	
	// secondary
	$secondaryLight: #e0f2f1;
	$secondaryMain: #009688;
	$secondaryDark: #00897b;
	$secondary200: #80cbc4;
	$secondary800: #00695c;
	
	// success Colors
	$successLight: #edf7ed;
	$success200: #b6e0b3;
	$successMain: #6cc067;
	$successDark: #64ba5f;
	
	// error
	$errorLight: #e48784;
	$errorMain: #d9534f;
	$errorDark: #d54c48;
	
	// orange
	$orangeLight: #fbe9e7;
	$orangeMain: #ffab91;
	$orangeDark: #d84315;
	
	// warning
	$warningLight: #fdf5ea;
	$warningMain: #f0ad4e;
	$warningDark: #ec9c3d;
	
	// grey
	$grey50: #f8fafc;
	$grey100: #eef2f6;
	$grey200: #e3e8ef;
	$grey300: #cdd5df;
	$grey500: #697586;
	$grey600: #4b5565;
	$grey700: #364152;
	$grey900: #121926;
	
	// ==============================|| DARK THEME VARIANTS ||============================== //
	
	// paper & background
	$darkBackground: #0e1b23; // level 3
	$darkPaper: #060d12; // level 4
	
	// dark 800 & 900
	$darkLevel1: #0b161d; // level 1
	$darkLevel2: #14252f; // level 2
	
	// primary dark
	$darkPrimaryLight: #eceff1;
	$darkPrimaryMain: #78919c;
	$darkPrimaryDark: #587583;
	$darkPrimary200: #b0bec5;
	$darkPrimary800: #44606e;
	
	// secondary dark
	$darkSecondaryLight: #e0f2f1;
	$darkSecondaryMain: #009688;
	$darkSecondaryDark: #00897b;
	$darkSecondary200: #80cbc4;
	$darkSecondary800: #00695c;
	
	// text variants
	$darkTextTitle: #e4e8f7;
	$darkTextPrimary: #d5d9e9;
	$darkTextSecondary: #d8ddf0;
	
	// ==============================|| JAVASCRIPT ||============================== //
	
	:export {
	  // paper & background
	  paper: $paper;
	
	  // primary
	  primaryLight: $primaryLight;
	  primary200: $primary200;
	  primaryMain: $primaryMain;
	  primaryDark: $primaryDark;
	  primary800: $primary800;
	
	  // secondary
	  secondaryLight: $secondaryLight;
	  secondary200: $secondary200;
	  secondaryMain: $secondaryMain;
	  secondaryDark: $secondaryDark;
	  secondary800: $secondary800;
	
	  // success
	  successLight: $successLight;
	  success200: $success200;
	  successMain: $successMain;
	  successDark: $successDark;
	
	  // error
	  errorLight: $errorLight;
	  errorMain: $errorMain;
	  errorDark: $errorDark;
	
	  // orange
	  orangeLight: $orangeLight;
	  orangeMain: $orangeMain;
	  orangeDark: $orangeDark;
	
	  // warning
	  warningLight: $warningLight;
	  warningMain: $warningMain;
	  warningDark: $warningDark;
	
	  // grey
	  grey50: $grey50;
	  grey100: $grey100;
	  grey200: $grey200;
	  grey300: $grey300;
	  grey500: $grey500;
	  grey600: $grey600;
	  grey700: $grey700;
	  grey900: $grey900;
	
	  // ==============================|| DARK THEME VARIANTS ||============================== //
	
	  // paper & background
	  darkPaper: $darkPaper;
	  darkBackground: $darkBackground;
	
	  // dark 800 & 900
	  darkLevel1: $darkLevel1;
	  darkLevel2: $darkLevel2;
	
	  // text variants
	  darkTextTitle: $darkTextTitle;
	  darkTextPrimary: $darkTextPrimary;
	  darkTextSecondary: $darkTextSecondary;
	
	  // primary dark
	  darkPrimaryLight: $darkPrimaryLight;
	  darkPrimaryMain: $darkPrimaryMain;
	  darkPrimaryDark: $darkPrimaryDark;
	  darkPrimary200: $darkPrimary200;
	  darkPrimary800: $darkPrimary800;
	
	  // secondary dark
	  darkSecondaryLight: $darkSecondaryLight;
	  darkSecondaryMain: $darkSecondaryMain;
	  darkSecondaryDark: $darkSecondaryDark;
	  darkSecondary200: $darkSecondary200;
	  darkSecondary800: $darkSecondary800;
	}

```

src/scss/_theme2.module.scss```scss
	// paper & background
	$paper: #ffffff;
	
	// primary
	$primaryLight: #e4e7ec;
	$primaryMain: #203461;
	$primaryDark: #1c2f59;
	$primary200: #909ab0;
	$primary800: #132145;
	
	// secondary
	$secondaryLight: #fde8ef;
	$secondaryMain: #ec407a;
	$secondaryDark: #ea3a72;
	$secondary200: #f6a0bd;
	$secondary800: #e42a5d;
	
	// success Colors
	$successLight: #e3f8e8;
	$success200: #8be09f;
	$successMain: #17c13e;
	$successDark: #14bb38;
	
	// error
	$errorLight: #e48784;
	$errorMain: #d9534f;
	$errorDark: #d54c48;
	
	// orange
	$orangeLight: #fbe9e7;
	$orangeMain: #ffab91;
	$orangeDark: #d84315;
	
	// warning
	$warningLight: #fdf5ea;
	$warningMain: #f0ad4e;
	$warningDark: #ec9c3d;
	
	// grey
	$grey50: #f8fafc;
	$grey100: #eef2f6;
	$grey200: #e3e8ef;
	$grey300: #cdd5df;
	$grey500: #697586;
	$grey600: #4b5565;
	$grey700: #364152;
	$grey900: #121926;
	
	// ==============================|| DARK THEME VARIANTS ||============================== //
	
	// paper & background
	$darkBackground: #0a0f23; // level 3
	$darkPaper: #030614; // level 4
	
	// dark 800 & 900
	$darkLevel1: #070e13; // level 1
	$darkLevel2: #12172f; // level 2
	
	// primary dark
	$darkPrimaryLight: #ecedf1;
	$darkPrimaryMain: #606d88;
	$darkPrimaryDark: #586580;
	$darkPrimary200: #b0b6c4;
	$darkPrimary800: #44506b;
	
	// secondary dark
	$darkSecondaryLight: #fde8ef;
	$darkSecondaryMain: #ec407a;
	$darkSecondaryDark: #ea3a72;
	$darkSecondary200: #f6a0bd;
	$darkSecondary800: #e42a5d;
	
	// text variants
	$darkTextTitle: #e4e8f7;
	$darkTextPrimary: #d5d9e9;
	$darkTextSecondary: #d8ddf0;
	
	// ==============================|| JAVASCRIPT ||============================== //
	
	:export {
	  // paper & background
	  paper: $paper;
	
	  // primary
	  primaryLight: $primaryLight;
	  primary200: $primary200;
	  primaryMain: $primaryMain;
	  primaryDark: $primaryDark;
	  primary800: $primary800;
	
	  // secondary
	  secondaryLight: $secondaryLight;
	  secondary200: $secondary200;
	  secondaryMain: $secondaryMain;
	  secondaryDark: $secondaryDark;
	  secondary800: $secondary800;
	
	  // success
	  successLight: $successLight;
	  success200: $success200;
	  successMain: $successMain;
	  successDark: $successDark;
	
	  // error
	  errorLight: $errorLight;
	  errorMain: $errorMain;
	  errorDark: $errorDark;
	
	  // orange
	  orangeLight: $orangeLight;
	  orangeMain: $orangeMain;
	  orangeDark: $orangeDark;
	
	  // warning
	  warningLight: $warningLight;
	  warningMain: $warningMain;
	  warningDark: $warningDark;
	
	  // grey
	  grey50: $grey50;
	  grey100: $grey100;
	  grey200: $grey200;
	  grey300: $grey300;
	  grey500: $grey500;
	  grey600: $grey600;
	  grey700: $grey700;
	  grey900: $grey900;
	
	  // ==============================|| DARK THEME VARIANTS ||============================== //
	
	  // paper & background
	  darkPaper: $darkPaper;
	  darkBackground: $darkBackground;
	
	  // dark 800 & 900
	  darkLevel1: $darkLevel1;
	  darkLevel2: $darkLevel2;
	
	  // text variants
	  darkTextTitle: $darkTextTitle;
	  darkTextPrimary: $darkTextPrimary;
	  darkTextSecondary: $darkTextSecondary;
	
	  // primary dark
	  darkPrimaryLight: $darkPrimaryLight;
	  darkPrimaryMain: $darkPrimaryMain;
	  darkPrimaryDark: $darkPrimaryDark;
	  darkPrimary200: $darkPrimary200;
	  darkPrimary800: $darkPrimary800;
	
	  // secondary dark
	  darkSecondaryLight: $darkSecondaryLight;
	  darkSecondaryMain: $darkSecondaryMain;
	  darkSecondaryDark: $darkSecondaryDark;
	  darkSecondary200: $darkSecondary200;
	  darkSecondary800: $darkSecondary800;
	}

```

src/scss/_theme5.module.scss```scss
	// paper & background
	$paper: #ffffff;
	
	// primary
	$primaryLight: #e2e5e8;
	$primaryMain: #0a2342;
	$primaryDark: #091f3c;
	$primary200: #8591a1;
	$primary800: #05152b;
	
	// secondary
	$secondaryLight: #e6f4f1;
	$secondaryMain: #2ca58d;
	$secondaryDark: #279d85;
	$secondary200: #96d2c6;
	$secondary800: #1b8a70;
	
	// success Colors
	$successLight: #b9f6ca;
	$success200: #69f0ae;
	$successMain: #00e676;
	$successDark: #00c853;
	
	// error
	$errorLight: #ef9a9a;
	$errorMain: #f44336;
	$errorDark: #c62828;
	
	// orange
	$orangeLight: #fbe9e7;
	$orangeMain: #ffab91;
	$orangeDark: #d84315;
	
	// warning
	$warningLight: #fff8e1;
	$warningMain: #ffe57f;
	$warningDark: #ffc107;
	
	// grey
	$grey50: #f8fafc;
	$grey100: #eef2f6;
	$grey200: #e3e8ef;
	$grey300: #cdd5df;
	$grey500: #697586;
	$grey600: #4b5565;
	$grey700: #364152;
	$grey900: #121926;
	
	// ==============================|| DARK THEME VARIANTS ||============================== //
	
	// paper & background
	$darkBackground: #051327; // level 3
	$darkPaper: #030c1d; // level 4
	
	// dark 800 & 900
	$darkLevel1: #071a33; // level 1
	$darkLevel2: #091f3c; // level 2
	
	// primary dark
	$darkPrimaryLight: #e2e5e8;
	$darkPrimaryMain: #54657b;
	$darkPrimaryDark: #2f445e;
	$darkPrimary200: #8591a1;
	$darkPrimary800: #05152b;
	
	// secondary dark
	$darkSecondaryLight: #e6f4f1;
	$darkSecondaryMain: #2ca58d;
	$darkSecondaryDark: #279d85;
	$darkSecondary200: #96d2c6;
	$darkSecondary800: #1b8a70;
	
	// text variants
	$darkTextTitle: #d7dcec;
	$darkTextPrimary: #bdc8f0;
	$darkTextSecondary: #8492c4;
	
	// ==============================|| JAVASCRIPT ||============================== //
	
	:export {
	  // paper & background
	  paper: $paper;
	
	  // primary
	  primaryLight: $primaryLight;
	  primary200: $primary200;
	  primaryMain: $primaryMain;
	  primaryDark: $primaryDark;
	  primary800: $primary800;
	
	  // secondary
	  secondaryLight: $secondaryLight;
	  secondary200: $secondary200;
	  secondaryMain: $secondaryMain;
	  secondaryDark: $secondaryDark;
	  secondary800: $secondary800;
	
	  // success
	  successLight: $successLight;
	  success200: $success200;
	  successMain: $successMain;
	  successDark: $successDark;
	
	  // error
	  errorLight: $errorLight;
	  errorMain: $errorMain;
	  errorDark: $errorDark;
	
	  // orange
	  orangeLight: $orangeLight;
	  orangeMain: $orangeMain;
	  orangeDark: $orangeDark;
	
	  // warning
	  warningLight: $warningLight;
	  warningMain: $warningMain;
	  warningDark: $warningDark;
	
	  // grey
	  grey50: $grey50;
	  grey100: $grey100;
	  grey200: $grey200;
	  grey300: $grey300;
	  grey500: $grey500;
	  grey600: $grey600;
	  grey700: $grey700;
	  grey900: $grey900;
	
	  // ==============================|| DARK THEME VARIANTS ||============================== //
	
	  // paper & background
	  darkPaper: $darkPaper;
	  darkBackground: $darkBackground;
	
	  // dark 800 & 900
	  darkLevel1: $darkLevel1;
	  darkLevel2: $darkLevel2;
	
	  // text variants
	  darkTextTitle: $darkTextTitle;
	  darkTextPrimary: $darkTextPrimary;
	  darkTextSecondary: $darkTextSecondary;
	
	  // primary dark
	  darkPrimaryLight: $darkPrimaryLight;
	  darkPrimaryMain: $darkPrimaryMain;
	  darkPrimaryDark: $darkPrimaryDark;
	  darkPrimary200: $darkPrimary200;
	  darkPrimary800: $darkPrimary800;
	
	  // secondary dark
	  darkSecondaryLight: $darkSecondaryLight;
	  darkSecondaryMain: $darkSecondaryMain;
	  darkSecondaryDark: $darkSecondaryDark;
	  darkSecondary200: $darkSecondary200;
	  darkSecondary800: $darkSecondary800;
	}

```

src/scss/_theme4.module.scss```scss
	// paper & background
	$paper: #ffffff;
	
	// primary
	$primaryLight: #e3e8e8;
	$primaryMain: #173e43;
	$primaryDark: #14383d;
	$primary200: #8b9fa1;
	$primary800: #0d282c;
	
	// secondary
	$secondaryLight: #e8f6f5;
	$secondaryMain: #3fb0ac;
	$secondaryDark: #39a9a5;
	$secondary200: #9fd8d6;
	$secondary800: #299792;
	
	// success Colors
	$successLight: #b9f6ca;
	$success200: #69f0ae;
	$successMain: #00e676;
	$successDark: #00c853;
	
	// error
	$errorLight: #ef9a9a;
	$errorMain: #f44336;
	$errorDark: #c62828;
	
	// orange
	$orangeLight: #fbe9e7;
	$orangeMain: #ffab91;
	$orangeDark: #d84315;
	
	// warning
	$warningLight: #fff8e1;
	$warningMain: #ffe57f;
	$warningDark: #ffc107;
	
	// grey
	$grey50: #f8fafc;
	$grey100: #eef2f6;
	$grey200: #e3e8ef;
	$grey300: #cdd5df;
	$grey500: #697586;
	$grey600: #4b5565;
	$grey700: #364152;
	$grey900: #121926;
	
	// ==============================|| DARK THEME VARIANTS ||============================== //
	
	// paper & background
	$darkBackground: #030708; // level 3
	$darkPaper: #051114; // level 4
	
	// dark 800 & 900
	$darkLevel1: #02131d; // level 1
	$darkLevel2: #051114; // level 2
	
	// primary dark
	$darkPrimaryLight: #e3e8e8;
	$darkPrimaryMain: #3a5b5f;
	$darkPrimaryDark: #14383d;
	$darkPrimary200: #8b9fa1;
	$darkPrimary800: #0d282c;
	
	// secondary dark
	$darkSecondaryLight: #e8f6f5;
	$darkSecondaryMain: #3fb0ac;
	$darkSecondaryDark: #39a9a5;
	$darkSecondary200: #9fd8d6;
	$darkSecondary800: #299792;
	
	// text variants
	$darkTextTitle: #ffffff;
	$darkTextPrimary: #ffffff;
	$darkTextSecondary: #ccd2eb;
	
	// ==============================|| JAVASCRIPT ||============================== //
	
	:export {
	  // paper & background
	  paper: $paper;
	
	  // primary
	  primaryLight: $primaryLight;
	  primary200: $primary200;
	  primaryMain: $primaryMain;
	  primaryDark: $primaryDark;
	  primary800: $primary800;
	
	  // secondary
	  secondaryLight: $secondaryLight;
	  secondary200: $secondary200;
	  secondaryMain: $secondaryMain;
	  secondaryDark: $secondaryDark;
	  secondary800: $secondary800;
	
	  // success
	  successLight: $successLight;
	  success200: $success200;
	  successMain: $successMain;
	  successDark: $successDark;
	
	  // error
	  errorLight: $errorLight;
	  errorMain: $errorMain;
	  errorDark: $errorDark;
	
	  // orange
	  orangeLight: $orangeLight;
	  orangeMain: $orangeMain;
	  orangeDark: $orangeDark;
	
	  // warning
	  warningLight: $warningLight;
	  warningMain: $warningMain;
	  warningDark: $warningDark;
	
	  // grey
	  grey50: $grey50;
	  grey100: $grey100;
	  grey200: $grey200;
	  grey300: $grey300;
	  grey500: $grey500;
	  grey600: $grey600;
	  grey700: $grey700;
	  grey900: $grey900;
	
	  // ==============================|| DARK THEME VARIANTS ||============================== //
	
	  // paper & background
	  darkPaper: $darkPaper;
	  darkBackground: $darkBackground;
	
	  // dark 800 & 900
	  darkLevel1: $darkLevel1;
	  darkLevel2: $darkLevel2;
	
	  // text variants
	  darkTextTitle: $darkTextTitle;
	  darkTextPrimary: $darkTextPrimary;
	  darkTextSecondary: $darkTextSecondary;
	
	  // primary dark
	  darkPrimaryLight: $darkPrimaryLight;
	  darkPrimaryMain: $darkPrimaryMain;
	  darkPrimaryDark: $darkPrimaryDark;
	  darkPrimary200: $darkPrimary200;
	  darkPrimary800: $darkPrimary800;
	
	  // secondary dark
	  darkSecondaryLight: $darkSecondaryLight;
	  darkSecondaryMain: $darkSecondaryMain;
	  darkSecondaryDark: $darkSecondaryDark;
	  darkSecondary200: $darkSecondary200;
	  darkSecondary800: $darkSecondary800;
	}

```

src/store/actions.ts```ts
	// action - account reducer
	export const LOGIN = 'LOGIN';
	export const LOGOUT = 'LOGOUT';
	export const REGISTER = 'REGISTER';
	export const FIREBASE_STATE_CHANGED = 'FIREBASE_STATE_CHANGED';

```

src/store/ProviderWrapper.tsx```tsx
	'use client';
	
	import { ReactNode, useEffect, useState } from 'react';
	import { get } from 'lodash';
	
	// third-party
	import { Provider } from 'react-redux';
	import { PersistGate } from 'redux-persist/integration/react';
	import { useSession } from 'next-auth/react';
	import { format, isValid } from 'date-fns';
	
	// project-import
	import Loader from 'ui-component/Loader';
	import Locales from 'ui-component/Locales';
	import Snackbar from 'ui-component/extended/Snackbar';
	
	import ThemeCustomization from 'themes';
	import { persister, store, dispatch } from 'store';
	import { ConfigProvider } from 'contexts/ConfigContext';
	import NavigationScroll from 'layout/NavigationScroll';
	import { AUTH_STATUS, DATE_FORMAT } from '@/constant';
	import { getProfile } from 'utils/services/auth';
	import DateCustom from '@/utils/datetime/date.custom';
	
	// store
	import { accountActions } from 'store/slices/account';
	
	export default function ProviderWrapper({ children }: { children: ReactNode }) {
	  const [loading, setLoading] = useState<boolean>(false);
	  const session = useSession();
	  const status = get(session, 'status', '');
	
	  useEffect(() => {
	    if (status === AUTH_STATUS.AUTHENTICATED) {
	      (async () => {
	        setLoading(true);
	        const profile = await getProfile();
	        const birthday = profile?.birthDate ? new DateCustom(profile.birthDate) : null;
	        dispatch(
	          accountActions.login({
	            name: profile?.name || '',
	            email: profile?.email || '',
	            avatar: profile?.imageUrl || '',
	            id: profile?.id,
	            birthdayText: isValid(birthday) && birthday ? format(birthday, DATE_FORMAT) : '',
	            company: profile.company,
	            location: profile.country,
	            phone: profile.phoneNumber,
	            provider: get(session, 'data.user.provider')
	          })
	        );
	        setLoading(false);
	      })();
	    } else {
	      dispatch(accountActions.logout());
	      setLoading(false);
	    }
	
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [status]);
	
	  if (loading) return <Loader />;
	
	  return (
	    <Provider store={store}>
	      <PersistGate loading={null} persistor={persister}>
	        <ConfigProvider>
	          <ThemeCustomization>
	            <Locales>
	              <NavigationScroll>
	                <>
	                  <Snackbar />
	                  {children}
	                </>
	              </NavigationScroll>
	            </Locales>
	          </ThemeCustomization>
	        </ConfigProvider>
	      </PersistGate>
	    </Provider>
	  );
	}

```

src/store/constant.ts```ts
	// theme constant
	export const gridSpacing = 3;
	export const drawerWidth = 260;
	export const appDrawerWidth = 320;

```

src/store/reducer.ts```ts
	// third-party
	import { combineReducers } from 'redux';
	import { persistReducer } from 'redux-persist';
	import storage from 'redux-persist/lib/storage';
	
	// project imports
	import snackbarReducer from './slices/snackbar';
	import menuReducer from './slices/menu';
	import accountReducer from './slices/account';
	
	// ==============================|| COMBINE REDUCER ||============================== //
	
	const reducer = combineReducers({
	  snackbar: snackbarReducer,
	  menu: persistReducer(
	    {
	      key: 'menu',
	      storage,
	      keyPrefix: 'berry-'
	    },
	    menuReducer
	  ),
	  account: accountReducer
	});
	
	export default reducer;

```

src/store/index.ts```ts
	// third-party
	import { configureStore } from '@reduxjs/toolkit';
	import { useDispatch as useAppDispatch, useSelector as useAppSelector, TypedUseSelectorHook } from 'react-redux';
	
	import { persistStore } from 'redux-persist';
	
	// project imports
	import rootReducer from './reducer';
	
	// ==============================|| REDUX - MAIN STORE ||============================== //
	
	const store = configureStore({
	  reducer: rootReducer,
	  middleware: (getDefaultMiddleware) => getDefaultMiddleware({ serializableCheck: false, immutableCheck: false })
	});
	
	const persister = persistStore(store);
	
	export type RootState = ReturnType<typeof rootReducer>;
	
	export type AppDispatch = typeof store.dispatch;
	
	const { dispatch } = store;
	
	const useDispatch = () => useAppDispatch<AppDispatch>();
	const useSelector: TypedUseSelectorHook<RootState> = useAppSelector;
	
	export { store, persister, dispatch, useSelector, useDispatch };

```

src/store/slices/account.ts```ts
	// third-party
	import { createSlice, PayloadAction } from '@reduxjs/toolkit';
	
	// types
	import { InitialLoginContextProps } from 'types';
	import { UserProfile } from 'types/user-profile';
	
	// store
	import { useSelector, RootState } from '../index';
	
	// initial state
	const initialState: InitialLoginContextProps = {
	  isLoggedIn: false,
	  isInitialized: false,
	  user: null
	};
	
	// ==============================|| SLICE - MENU ||============================== //
	
	const account = createSlice({
	  name: 'account',
	  initialState,
	  reducers: {
	    register(state, action: PayloadAction<Partial<UserProfile>>) {
	      state.user = action.payload;
	    },
	
	    login(state, action: PayloadAction<Partial<UserProfile>>) {
	      state.user = action.payload;
	      state.isLoggedIn = true;
	      state.isInitialized = true;
	    },
	
	    logout(state) {
	      state.user = null;
	      state.isLoggedIn = false;
	      state.isInitialized = true;
	    },
	
	    updateUser(state, action: PayloadAction<Partial<UserProfile>>) {
	      const currentUserInfo = state.user || {};
	      state.user = {
	        ...currentUserInfo,
	        ...action.payload
	      };
	    }
	  }
	});
	
	export default account.reducer;
	export const accountActions = account.actions;
	export const accountSelector = (state: RootState) => state.account || {};
	export const useAccountSelector = () => {
	  const data = useSelector(accountSelector);
	  return data;
	};

```

src/store/slices/snackbar.ts```ts
	import { createSlice } from '@reduxjs/toolkit';
	
	// types
	import { SnackbarProps } from 'types/snackbar';
	
	const initialState: SnackbarProps = {
	  action: false,
	  open: false,
	  message: 'Note archived',
	  anchorOrigin: {
	    vertical: 'bottom',
	    horizontal: 'right'
	  },
	  variant: 'default',
	  alert: {
	    color: 'primary',
	    variant: 'filled',
	    severity: 'success'
	  },
	  transition: 'Fade',
	  close: true,
	  maxStack: 3,
	  dense: false,
	  iconVariant: 'hide',
	  actionButton: false
	};
	
	// ==============================|| SLICE - SNACKBAR ||============================== //
	
	const snackbar = createSlice({
	  name: 'snackbar',
	  initialState,
	  reducers: {
	    openSnackbar(state, action) {
	      const { open, message, anchorOrigin, variant, alert, transition, close, actionButton } = action.payload;
	
	      state.action = !state.action;
	      state.open = open || initialState.open;
	      state.message = message || initialState.message;
	      state.anchorOrigin = anchorOrigin || initialState.anchorOrigin;
	      state.variant = variant || initialState.variant;
	      state.alert = {
	        color: alert?.color || initialState.alert.color,
	        variant: alert?.variant || initialState.alert.variant,
	        severity: alert?.severity || initialState.alert.severity
	      };
	      state.transition = transition || initialState.transition;
	      state.close = close === false ? close : initialState.close;
	      state.actionButton = actionButton || initialState.actionButton;
	    },
	
	    closeSnackbar(state) {
	      state.open = false;
	    },
	
	    handlerDense(state, action) {
	      const { dense } = action.payload;
	      state.dense = dense;
	    },
	
	    handlerIncrease(state, action) {
	      const { maxStack } = action.payload;
	      state.maxStack = maxStack;
	    },
	
	    handlerIconVariants(state, action) {
	      const { iconVariant } = action.payload;
	      state.iconVariant = iconVariant;
	    }
	  }
	});
	
	export default snackbar.reducer;
	
	export const { closeSnackbar, openSnackbar, handlerDense, handlerIconVariants, handlerIncrease } = snackbar.actions;

```

src/store/slices/menu.ts```ts
	// third-party
	import { createSlice } from '@reduxjs/toolkit';
	
	// project imports
	import { dispatch } from '../index';
	import axios from 'utils/axios';
	
	// types
	import { MenuProps } from 'types/menu';
	
	// initial state
	const initialState: MenuProps = {
	  selectedItem: ['dashboard'],
	  selectedID: null,
	  drawerOpen: false,
	  error: null,
	  menu: {}
	};
	
	// ==============================|| SLICE - MENU ||============================== //
	
	const menu = createSlice({
	  name: 'menu',
	  initialState,
	  reducers: {
	    activeItem(state, action) {
	      state.selectedItem = action.payload;
	    },
	
	    activeID(state, action) {
	      state.selectedID = action.payload;
	    },
	
	    openDrawer(state, action) {
	      state.drawerOpen = action.payload;
	    },
	
	    // has error
	    hasError(state, action) {
	      state.error = action.payload;
	    },
	
	    // get dashboard menu
	    getMenuSuccess(state, action) {
	      state.menu = action.payload;
	    }
	  }
	});
	
	export default menu.reducer;
	
	export const { activeItem, openDrawer, activeID } = menu.actions;
	
	export function getMenu() {
	  return async () => {
	    try {
	      const response = await axios.get('/menu/widget');
	      dispatch(menu.actions.getMenuSuccess(response.data.widget));
	    } catch (error) {
	      dispatch(menu.actions.hasError(error));
	    }
	  };
	}

```

src/app/not-found.tsx```tsx
	import Error404 from 'views/maintenance/404-notfound';
	
	// ==============================|| PAGE ||============================== //
	
	export default function notfound() {
	  return <Error404 />;
	}

```

src/app/globals.css```css
	/* third-party */
	@import '~react-perfect-scrollbar/dist/css/styles.css';
	@import '~slick-carousel/slick/slick.css';
	@import '~slick-carousel/slick/slick-theme.css';
	
	@import '~react-18-image-lightbox/style.css';
	
	/* ==============================|| LIGHT BOX ||============================== */
	
	.fullscreen .react-images__blanket {
	  z-index: 1200;
	}
	
	/* ==============================|| PERFECT SCROLLBAR ||============================== */
	
	.scrollbar-container.ps,
	.scrollbar-container > .ps {
	  &.ps--active-y > .ps__rail-y {
	    width: 5px;
	    background-color: transparent !important;
	    z-index: 999;
	    &:hover,
	    &.ps--clicking {
	      width: 5px;
	      background-color: transparent;
	    }
	  }
	  &.ps--scrolling-y > .ps__rail-y,
	  &.ps--scrolling-x > .ps__rail-x {
	    opacity: 0.4;
	    background-color: transparent;
	  }
	}
	
	/* ==============================|| ANIMATION KEYFRAMES ||============================== */
	
	@keyframes wings {
	  50% {
	    transform: translateY(-40px);
	  }
	  100% {
	    transform: translateY(0px);
	  }
	}
	
	@keyframes blink {
	  50% {
	    opacity: 0;
	  }
	  100% {
	    opacity: 1;
	  }
	}
	
	@keyframes bounce {
	  0%,
	  20%,
	  53%,
	  to {
	    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
	    transform: translateZ(0);
	  }
	  40%,
	  43% {
	    animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
	    transform: translate3d(0, -5px, 0);
	  }
	  70% {
	    animation-timing-function: cubic-bezier(0.755, 0.05, 0.855, 0.06);
	    transform: translate3d(0, -7px, 0);
	  }
	  80% {
	    transition-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);
	    transform: translateZ(0);
	  }
	  90% {
	    transform: translate3d(0, -2px, 0);
	  }
	}
	
	@keyframes slideY {
	  0%,
	  50%,
	  100% {
	    transform: translateY(0px);
	  }
	  25% {
	    transform: translateY(-10px);
	  }
	  75% {
	    transform: translateY(10px);
	  }
	}
	
	@keyframes slideX {
	  0%,
	  50%,
	  100% {
	    transform: translateX(0px);
	  }
	  25% {
	    transform: translateX(-10px);
	  }
	  75% {
	    transform: translateX(10px);
	  }
	}
	
	/* ==============================|| ANIMATION KEYFRAMES ||============================== */
	
	.preBuildDashBoard-slider {
	  overflow: hidden;
	  .slider {
	    .slide {
	      opacity: 0.5;
	      display: flex;
	      justify-content: center;
	      .custom-slider {
	        gap: 40px;
	      }
	      &.selected {
	        opacity: 1;
	        .custom-slider {
	          display: flex;
	          flex-direction: column;
	        }
	      }
	      &:not(.selected) {
	        transform: scale(0.7);
	        transform-origin: top;
	      }
	    }
	  }
	}
	
	.project-info {
	  .project-slider {
	    .slick-list {
	      padding: 0 !important;
	    }
	  }
	  .slick-slide {
	    opacity: 0.05;
	  }
	  .slick-active {
	    opacity: 0.2;
	  }
	}
	
	.ril__inner {
	  direction: ltr;
	}
	
	.ReactModal__Overlay {
	  z-index: 99999 !important;
	}

```

src/app/layout.tsx```tsx
	import type { Metadata } from 'next';
	import { getServerSession } from 'next-auth';
	import { authOptions } from '@/auth';
	
	import './globals.css';
	
	// PROJECT IMPORTS
	import ProviderWrapper from 'store/ProviderWrapper';
	import SessionContext from '@/contexts/SessionContext';
	
	export const metadata: Metadata = {
	  title: 'J2C Construction Management',
	  description: 'J2C Construction Management'
	};
	
	// ==============================|| ROOT LAYOUT ||============================== //
	
	export default async function RootLayout({ children }: { children: React.ReactNode }) {
	  const session = await getServerSession(authOptions);
	  return (
	    <html lang="en">
	      <body>
	        <SessionContext session={session}>
	          <ProviderWrapper>{children}</ProviderWrapper>
	        </SessionContext>
	      </body>
	    </html>
	  );
	}

```

src/app/global-error.tsx```tsx
	'use client';
	
	// project import
	import Error500 from 'views/maintenance/500';
	
	// ==============================|| ERROR 500 - MAIN ||============================== //
	
	// todo: testing of this page is pending. Need to figure out how to test this. Waiting to see
	// if this comes automatically when some error appears
	
	export default function GlobalError({ error, reset }: { error: Error & { digest?: string }; reset: () => void }) {
	  return (
	    <html>
	      <body>
	        <Error500 />
	      </body>
	    </html>
	  );
	}

```

src/app/page.tsx```tsx
	// project import
	import GuestGuard from 'utils/route-guard/GuestGuard';
	import Login from 'views/authentication/login';
	import { getServerSession } from 'next-auth';
	import SessionContext from '@/contexts/SessionContext';
	import { authOptions } from '@/auth';
	
	// ==============================|| HOME PAGE ||============================== //
	
	export default async function HomePage() {
	  const session = await getServerSession(authOptions);
	
	  return (
	    <SessionContext session={session}>
	      <GuestGuard>
	        <Login />
	      </GuestGuard>
	    </SessionContext>
	  );
	}

```

src/app/loading.tsx```tsx
	'use client';
	
	import Loader from '../components/ui-component/Loader';
	
	// ==============================|| LOADING ||============================== //
	
	export default function Loading() {
	  return <Loader />;
	}

```

src/app/auth/confirm-email/page.tsx```tsx
	import AuthService from '@/backend/services/auth.service';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import { redirect } from 'next/navigation';
	import routes from '@/routes';
	
	export default async function ActiveUserPage({ searchParams }: { searchParams: { email: string; token: string } }) {
	  if (!searchParams || !searchParams.email || !searchParams.token) {
	    return <>Missing parameter</>;
	  }
	
	  const conn = await MongoConnect();
	
	  const authService = new AuthService(conn);
	
	  try {
	    await authService.activeUser(searchParams.email, searchParams.token);
	  } catch (err) {
	    return (
	      <>
	        <div>Something went wrong, please try again</div>
	      </>
	    );
	  }
	
	  return redirect(routes.login.getUrl());
	}

```

src/app/(minimal)/layout.tsx```tsx
	// PROJECT IMPORTS
	import MinimalLayout from 'layout/MinimalLayout';
	
	// ================================|| SIMPLE LAYOUT ||================================ //
	
	export default function Layout({ children }: { children: React.ReactNode }) {
	  return <MinimalLayout>{children}</MinimalLayout>;
	}

```

src/app/(minimal)/login/page.tsx```tsx
	import { getServerSession } from 'next-auth';
	import { redirect } from 'next/navigation';
	import routes from 'routes';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import AuthService from '@/backend/services/auth.service';
	import Login from '@/views/authentication/login';
	
	// ==============================|| PAGE ||============================== //
	
	export default async function LoginPage() {
	  const session = await getServerSession();
	
	  let url = routes.login.getUrl();
	
	  if (session) {
	    const conn = await MongoConnect();
	
	    const authService = new AuthService(conn);
	
	    url = routes.dashboard.getUrl();
	    try {
	      // Fallback from Google provider then create or get user
	      const user = await authService.getOrCreateNewUser(
	        session?.user?.email as string,
	        session?.user?.name as string,
	        session?.user?.image as string
	      );
	
	      // If user has no password, redirect to profile page to set password
	      if (user && !user.get('password')) {
	        url = routes.profile.getUrl();
	      }
	    } catch (err) {
	      console.log(err);
	
	      url = routes.err500.getUrl();
	    } finally {
	      redirect(url);
	    }
	  }
	
	  return <Login />;
	}

```

src/app/(minimal)/forgot-password/page.tsx```tsx
	import ForgotPasswordView from '@/views/authentication/forgotPassword';
	
	export default async function ForgotPassword() {
	  return <ForgotPasswordView />;
	}

```

src/app/(minimal)/verify-email/page.tsx```tsx
	import VerifyEmailView from '@/views/authentication/verifyEmail';
	
	export default async function VerifyEmail() {
	  return <VerifyEmailView />;
	}

```

src/app/(minimal)/pages/maintenance/under-construction/page.tsx```tsx
	// PROJECT IMPORTS
	import UnderConstruction from 'views/maintenance/under-construction';
	
	// ==============================|| UNDER CONSTRUCTION ||============================== //
	
	function UnderConstructionPage() {
	  return <UnderConstruction />;
	}
	
	export default UnderConstructionPage;

```

src/app/(minimal)/pages/maintenance/404/page.tsx```tsx
	// PROJECT IMPORTS
	import Error from 'views/maintenance/404-notfound';
	
	// ==============================|| ERROR 404 ||============================== //
	
	function Error404Page() {
	  return <Error />;
	}
	
	export default Error404Page;

```

src/app/(minimal)/pages/maintenance/500/page.tsx```tsx
	// PROJECT IMPORTS
	import Error from 'views/maintenance/500';
	
	// ==============================|| ERROR 500 ||============================== //
	
	function Error500() {
	  return <Error />;
	}
	
	export default Error500;

```

src/app/(minimal)/pages/maintenance/coming-soon/coming-soon2/page.tsx```tsx
	// PROJECT IMPORTS
	import ComingSoon2 from 'views/maintenance/coming-soon2';
	
	// ==============================|| COMING SOON ||============================== //
	
	function ComingSoon() {
	  return <ComingSoon2 />;
	}
	
	export default ComingSoon;

```

src/app/(minimal)/pages/maintenance/coming-soon/coming-soon1/page.tsx```tsx
	// PROJECT IMPORTS
	import ComingSoon1 from 'views/maintenance/coming-soon1';
	
	// ==============================|| COMING SOON ||============================== //
	
	function ComingSoon() {
	  return <ComingSoon1 />;
	}
	
	export default ComingSoon;

```

src/app/(minimal)/reset-password/page.tsx```tsx
	import ResetPasswordView from '@/views/authentication/resetPassword';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import AuthService from '@/backend/services/auth.service';
	
	type ResetPasswordProps = {
	  searchParams?: { [key: string]: string | string[] | undefined };
	};
	
	export default async function ResetPassword(props: ResetPasswordProps) {
	  const conn = await MongoConnect();
	
	  try {
	    const authService = new AuthService(conn);
	    await authService.verifyEmail((props.searchParams?.email as string) || '', (props.searchParams?.token as string) || '');
	  } catch (error: any) {
	    return <ResetPasswordView error />;
	  }
	
	  return <ResetPasswordView />;
	}

```

src/app/(minimal)/register/page.tsx```tsx
	import Register from 'views/authentication/register';
	import { getServerSession } from 'next-auth';
	import routes from '@/routes';
	import { redirect } from 'next/navigation';
	
	// ==============================|| PAGE ||============================== //
	
	export default async function RegisterPage() {
	  const session = await getServerSession();
	
	  if (session) {
	    return redirect(routes.dashboard.getUrl());
	  }
	
	  return <Register />;
	}

```

src/app/(dashboard)/layout.tsx```tsx
	// PROJECT IMPORTS
	import DashboardLayout from 'layout/MainLayout';
	import AuthGuard from 'utils/route-guard/AuthGuard';
	import SessionContext from '@/contexts/SessionContext';
	import { getServerSession } from 'next-auth';
	import { authOptions } from '@/auth';
	// ==============================|| DASHBOARD LAYOUT ||============================== //
	
	export default async function Layout({ children }: { children: React.ReactNode }) {
	  const session = await getServerSession(authOptions);
	
	  return (
	    <SessionContext session={session}>
	      <AuthGuard>
	        <DashboardLayout>{children}</DashboardLayout>
	      </AuthGuard>
	    </SessionContext>
	  );
	}

```

src/app/(dashboard)/my-account/page.tsx```tsx
	import Profile from '@/views/account/profile';
	
	// ==============================|| PAGE ||============================== //
	
	export default function MyAccount() {
	  return <Profile />;
	}

```

src/app/(dashboard)/api-docs/page.tsx```tsx
	import ReactSwagger from '@/views/react-swagger';
	import { getApiSpecs } from '../../../../lib/swagger';
	
	export default async function ReactSwaggerPage() {
	  const specs = await getApiSpecs();
	
	  return <ReactSwagger specs={specs} />;
	}

```

src/app/(dashboard)/projects/page.tsx```tsx
	import ProjectsView from '@/views/projects';
	
	// ==============================|| PAGE ||============================== //
	
	export default function Projects() {
	  return <ProjectsView />;
	}

```

src/app/(dashboard)/projects/[id]/page.tsx```tsx
	import React from 'react';
	import ProjectDetail from '@/components/projects/Detail';
	
	export default async function ProjectDetailPage() {
	  return <ProjectDetail />;
	}

```

src/app/(dashboard)/user/page.tsx```tsx
	import React from 'react';
	import User from '@/views/user';
	
	export default async function UserPage() {
	  return <User />;
	}

```

src/app/(dashboard)/user/[id]/page.tsx```tsx
	import React from 'react';
	import UserDetail from '@/components/user/detail';
	
	export default async function UserDetailPage() {
	  return <UserDetail />;
	}

```

src/app/(dashboard)/contractor/page.tsx```tsx
	import React from 'react';
	import Contractor from '@/views/contractor';
	
	export default async function ContractorPage() {
	  return <Contractor />;
	}

```

src/app/(dashboard)/builder/page.tsx```tsx
	import React from 'react';
	import Builder from '@/views/builder';
	
	export default async function BuilderPage() {
	  return <Builder />;
	}

```

src/app/api/listing.ts```ts
	import { NextRequest } from 'next/server';
	import { PAGINATE_OFFSET, PAGINATE_PAGE_SIZE } from '@/utils/constant';
	
	export const handleListRequest = (
	  limit: string | number,
	  page: string | number,
	  sort: string,
	  field: string | null,
	  fields: string | null
	): { limit: number; page: number; order: { [key: string]: 'asc' | 'desc' } } => {
	  let order: { [key: string]: 'asc' | 'desc' } = {};
	  if (sort !== 'asc' && sort !== 'desc') {
	    sort = 'asc';
	  }
	
	  if (typeof limit === 'string') {
	    limit = parseInt(limit, 10);
	  }
	
	  if (typeof page === 'string') {
	    page = parseInt(page, 10);
	  }
	
	  if (isNaN(limit) || isNaN(page)) {
	    throw new Error('Invalid limit or page');
	  }
	
	  if (page < 1) {
	    throw new Error('Invalid page');
	  }
	
	  if (field) {
	    order[field] = sort as 'asc' | 'desc';
	  }
	
	  if (fields) {
	    fields.split(',').forEach((field) => {
	      order[field] = sort as 'asc' | 'desc';
	    });
	  }
	
	  return {
	    limit,
	    page,
	    order
	  };
	};
	
	export const getListingQuery = (request: NextRequest): { limit: number; page: number; order: { [key: string]: 'asc' | 'desc' } } => {
	  let limit = (request.nextUrl.searchParams.get('limit') as string) || PAGINATE_PAGE_SIZE;
	  let page = (request.nextUrl.searchParams.get('page') as string) || PAGINATE_OFFSET;
	  let sort = request.nextUrl.searchParams.get('sort') || 'asc';
	  let field = request.nextUrl.searchParams.get('field');
	  let fields = request.nextUrl.searchParams.get('fields');
	
	  return handleListRequest(limit, page, sort, field, fields);
	};

```

src/app/api/protected/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	
	export async function GET(request: NextRequest) {
	  return NextResponse.json({ message: 'Hello, world!' });
	}

```

src/app/api/auth/[...nextauth]/route.ts```ts
	import NextAuth from 'next-auth/next';
	import { authOptions } from '@/auth';
	import { AuthOptions } from 'next-auth';
	
	const handler = NextAuth(authOptions as unknown as AuthOptions);
	
	export { handler as GET, handler as POST };

```

src/app/api/auth/token/[email]/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import { encode } from 'next-auth/jwt';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import UserRepository from '@/backend/repositories/mongodb/user.repository';
	
	export async function GET(request: NextRequest, { params }: { params: { email: string } }) {
	  const { email } = params;
	
	  const conn = await MongoConnect();
	
	  try {
	    const userRepo = new UserRepository(conn);
	    const user = await userRepo.findOne({ email });
	
	    if (!user) {
	      return NextResponse.json({ message: 'Email not found' }, { status: 404 });
	    }
	
	    const token = await encode({
	      token: {
	        email: email
	      },
	      secret: (process.env.NEXTAUTH_SECRET as string) || '',
	      maxAge: 60 * 60 * 4 // 4 hours
	    });
	
	    return NextResponse.json({ token }, { status: 200, statusText: 'OK' });
	  } catch (error) {
	    return NextResponse.json({ errors: ['Unauthorized'] }, { status: 401 });
	  }
	}

```

src/app/api/auth/reset-password/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import UserRepository from '@/backend/repositories/mongodb/user.repository';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import UserService from '@/backend/services/user.service';
	import ResetPasswordValidator from '@/backend/validator/reset-password.validator';
	
	export type RequestType = {
	  email: string;
	  password: string;
	  confirmPassword: string;
	  token: string;
	};
	
	export async function POST(request: NextRequest) {
	  const { email, password, confirmPassword, token } = await request.json();
	
	  const validator = new ResetPasswordValidator({ email, password, confirmPassword, token });
	  validator.validate();
	
	  if (validator.getErrors().length > 0) {
	    return NextResponse.json({ success: false, errors: validator.getErrors() }, { status: 400 });
	  }
	
	  try {
	    const conn = await MongoConnect();
	    const userRepository = new UserRepository(conn);
	    const userServices = new UserService(userRepository);
	    await userServices.changePassword(email, password, token);
	  } catch (err: any) {
	    return NextResponse.json({ success: false, errors: [err.message] }, { status: 500 });
	  }
	
	  return NextResponse.json({ success: true }, { status: 200 });
	}

```

src/app/api/auth/code/verify/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import AuthService from '@/backend/services/auth.service';
	
	type RequestType = {
	  email: string;
	  code: string;
	};
	
	export async function POST(request: NextRequest) {
	  const data: RequestType = await request.json();
	
	  let linkResetPassword = '';
	  try {
	    const conn = await MongoConnect();
	    const authService = new AuthService(conn);
	
	    const userDto = await authService.verifyCode(data.email, data.code);
	
	    linkResetPassword = await authService.generatePasswordResetToken(userDto._id.valueOf() as string);
	  } catch (error: any) {
	    return NextResponse.json({ success: false, errors: [error.message] }, { status: 500 });
	  }
	
	  return NextResponse.json({ success: data?.code?.length === 4, linkResetPassword }, { status: 200 });
	}

```

src/app/api/auth/code/send/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import ForgotPasswordValidator from '@/backend/validator/forgot-password.validator';
	import AuthService from '@/backend/services/auth.service';
	
	export type RequestType = {
	  email: string;
	};
	
	export async function POST(request: NextRequest) {
	  const { email }: RequestType = await request.json();
	
	  const conn = await MongoConnect();
	
	  try {
	    const validator = new ForgotPasswordValidator({ email }, conn);
	
	    await validator.validate();
	
	    if (validator.getErrors().length > 0) {
	      return NextResponse.json({ success: false, errors: validator.getErrors() }, { status: 400 });
	    }
	
	    const authService = new AuthService(conn);
	    await authService.forgotPassword(email);
	  } catch (err: any) {
	    return NextResponse.json({ success: false, errors: [err.message] }, { status: 500 });
	  }
	
	  return NextResponse.json({ success: true }, { status: 200 });
	}

```

src/app/api/auth/register/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import RegisterValidator from '@/backend/validator/register.validator';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import AuthService from '@/backend/services/auth.service';
	import { UserStatus } from '@/utils/enums';
	
	export async function POST(request: NextRequest) {
	  const data: { email: string; password: string; name: string } = await request.json();
	
	  const conn = await MongoConnect();
	  const authService = new AuthService(conn);
	
	  const requestData = {
	    email: data.email,
	    password: data.password,
	    name: data.name
	  };
	
	  const requestValidator = new RegisterValidator(requestData, conn);
	
	  try {
	    await requestValidator.validate();
	
	    if (requestValidator.getErrors().length > 0) {
	      return NextResponse.json({ errors: requestValidator.getErrors() }, { status: 400 });
	    }
	
	    const user = await authService.createNewUser(data.email, data.name, false, UserStatus.INACTIVE, data.password, null);
	
	    await authService.sendEmailConfirmation(user.get('_id').valueOf(), user.get('email'), user.get('name'));
	  } catch (error: any) {
	    return NextResponse.json({ errors: [error.message] }, { status: 400 });
	  }
	
	  return NextResponse.json({ message: 'success' }, { status: 200 });
	}

```

src/app/api/invoice/upsert/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import InvoiceRepository from '@/backend/repositories/mongodb/invoice.repository';
	import InvoiceService from '@/backend/services/invoice.service';
	import RoleRepository from '@/backend/repositories/mongodb/role.repository';
	import ContractorRepository from '@/backend/repositories/mongodb/contractor.repository';
	import BudgetService from '@/backend/services/budget.service';
	import BudgetRepository from '@/backend/repositories/mongodb/budget.repository';
	import ProjectService from '@/backend/services/project.service';
	import ProjectRepository from '@/backend/repositories/mongodb/project.repository';
	
	export async function POST(request: NextRequest) {
	  const conn = await MongoConnect();
	  const budgetRepository = new BudgetRepository(conn);
	  const contractorRepository = new ContractorRepository(conn);
	  const invoiceRepository = new InvoiceRepository(conn);
	  const projectRepository = new ProjectRepository(conn);
	  const roleRepository = new RoleRepository(conn);
	  const invoiceService = new InvoiceService(invoiceRepository, roleRepository, contractorRepository);
	  const budgetService = new BudgetService(budgetRepository);
	  const projectService = new ProjectService(projectRepository, roleRepository);
	  const data = await request.json();
	
	  try {
	    await invoiceService.upsertInvoice(data.isEdit, data);
	
	    await budgetService.updateBudgetTotalClaim(data.budgetId, null, 0);
	
	    const project = await projectService.getProject(data.projectId);
	
	    if (project) {
	      const sumTotal =
	        project.currentClaimNumber === null || project.currentClaimNumber.length > 0
	          ? await invoiceService.sumInvoiceTotals(data.budgetId, project.currentClaimNumber)
	          : 0;
	
	      await budgetService.updateBudgetTotalClaim(data.budgetId, project.currentClaimNumber, sumTotal);
	    }
	  } catch (error) {
	    return NextResponse.json({ message: 'Error upsert invoice' }, { status: 500 });
	  }
	
	  return NextResponse.json({ message: 'Upsert invoice successfully' }, { status: 200 });
	}

```

src/app/api/projects/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import UserService from '@/backend/services/user.service';
	import UserRepository from '@/backend/repositories/mongodb/user.repository';
	import MongoConnection from '@/backend/connection/mongo.connection';
	import RoleRepository from '@/backend/repositories/mongodb/role.repository';
	import ProjectRepository from '@/backend/repositories/mongodb/project.repository';
	import BuilderService from '@/backend/services/builder.service';
	import ProjectService from '@/backend/services/project.service';
	import { Project as ProjectType } from '@/utils/dtos/project.dto';
	import { getCsvCompanyFieldValue } from '@/utils/helper';
	import { CSV_COMPANY_ENUM, ROLE_TARGET_TYPE_ENUM } from '@/utils/common';
	import RoleService from '@/backend/services/role.service';
	import ContractorRepository from '@/backend/repositories/mongodb/contractor.repository';
	
	type RequestType = {
	  userId: string;
	  selectedCsvBuilder: string;
	};
	
	export async function POST(request: NextRequest) {
	  const postData: RequestType = await request.json();
	
	  if (!postData.userId) {
	    return NextResponse.json({}, { status: 500 });
	  }
	
	  const conn = await MongoConnection();
	  const roleRepository = new RoleRepository(conn);
	  const userRepository = new UserRepository(conn);
	  const projectRepository = new ProjectRepository(conn);
	  const contractorRepository = new ContractorRepository(conn);
	
	  const builderService = new BuilderService(conn);
	  const userService = new UserService(userRepository);
	  const projectService = new ProjectService(projectRepository, roleRepository);
	  const roleService = new RoleService(roleRepository, contractorRepository);
	
	  const data: any = await builderService.getInitBuildersByUser(postData.userId);
	
	  const builderResult = await builderService.getCsvBuildersByUser(data, postData.selectedCsvBuilder);
	
	  if (builderResult.builderId) {
	    await userService.upsertUserSelectedCompanyId(postData.userId, builderResult.builderId, false);
	  }
	
	  const projects: ProjectType[] = await projectService.getBuilderProjects(
	    postData.userId,
	    Number(builderResult.highestRole),
	    getCsvCompanyFieldValue(builderResult.csvBuilder, CSV_COMPANY_ENUM.companyId)
	  );
	
	  const roles = await roleService.getRolesByTargetId(builderResult.builderId || '', ROLE_TARGET_TYPE_ENUM.builderEmail);
	
	  return NextResponse.json({ projects, roles }, { status: 200 });
	}

```

src/app/api/projects/upsert/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import { ROLE_TARGET_TYPE_ENUM } from '@/utils/common';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import ProjectService from '@/backend/services/project.service';
	import ProjectRepository from '@/backend/repositories/mongodb/project.repository';
	import RoleRepository from '@/backend/repositories/mongodb/role.repository';
	import ProjectDto, { Project as ProjectType } from '@/utils/dtos/project.dto';
	import { ObjectId } from 'bson';
	import RoleService from '@/backend/services/role.service';
	import ContractorRepository from '@/backend/repositories/mongodb/contractor.repository';
	import BudgetService from '@/backend/services/budget.service';
	import BudgetRepository from '@/backend/repositories/mongodb/budget.repository';
	
	type RequestType = {
	  isEdit: boolean;
	  file: any;
	  id: string;
	  builderId: string | null | undefined;
	  creatorEmail: string;
	  creatorId: string;
	  date: any;
	  projectName: any;
	  address: any;
	  currentClaimNumber: string | undefined;
	  category: string | undefined;
	  completionStatus: string | undefined;
	  currency: string | undefined;
	};
	export async function POST(request: NextRequest) {
	  const data: RequestType = await request.json();
	  const conn = await MongoConnect();
	  const budgetRepository = new BudgetRepository(conn);
	  const contractorRepository = new ContractorRepository(conn);
	  const projectRepository = new ProjectRepository(conn);
	  const roleRepository = new RoleRepository(conn);
	  const projectService = new ProjectService(projectRepository, roleRepository);
	  const roleService = new RoleService(roleRepository, contractorRepository);
	  const budgetService = new BudgetService(budgetRepository);
	
	  let currentProjectId: string | object = data.isEdit ? data.id : new ObjectId();
	  let isCurrentClaimNumberUpdated = true;
	
	  let imageBucket = '';
	
	  if (data.file) {
	    // Store image into Storage (use await for addDoc instead of .then so 'file' could be passed along)
	    imageBucket = data.file;
	  }
	
	  if (data.isEdit) {
	    if (data.currentClaimNumber === undefined) {
	      data.currentClaimNumber = '';
	    }
	    if (data.category === undefined) {
	      data.category = '';
	    }
	    if (data.completionStatus === undefined) {
	      data.completionStatus = '';
	    }
	    if (data.currency === undefined) {
	      data.currency = '';
	    }
	
	    const previousProject: ProjectType | null = await projectService.getProject(data.id);
	
	    if (!previousProject) {
	      return NextResponse.json({ message: 'Project not found' }, { status: 404 });
	    }
	
	    isCurrentClaimNumberUpdated = data.currentClaimNumber !== previousProject.currentClaimNumber;
	
	    if (!imageBucket) {
	      imageBucket = previousProject.imageUrl || '';
	    }
	
	    const updateProject = new ProjectDto();
	    updateProject.setData({
	      ...previousProject,
	      creatorEmail: data.creatorEmail,
	      creatorId: data.creatorId,
	      date: data.date,
	      projectName: data.projectName,
	      address: data.address,
	      currentClaimNumber: data.currentClaimNumber,
	      category: data.category,
	      completionStatus: data.completionStatus,
	      currency: data.currency,
	      dateModify: new Date(),
	      imageBucket
	    });
	    await projectService.upsertProject(true, updateProject);
	  } else {
	    const newProject = new ProjectDto();
	    newProject.setData({
	      _id: currentProjectId,
	      builderId: data.builderId ? data.builderId : ' ',
	      creatorEmail: data.creatorEmail,
	      creatorId: data.creatorId,
	      date: data.date,
	      projectName: data.projectName,
	      address: data.address,
	      items: ' ',
	      currentClaimNumber: data.currentClaimNumber ? data.currentClaimNumber : ' ',
	      category: data.category ? data.category : ' ',
	      completionStatus: data.completionStatus ? data.completionStatus : ' ',
	      currency: data.currency ? data.currency : ' ',
	      budgetSeperatorTab: true,
	      budgetSeperatorComma: false,
	      budgetSeperatorSemiColon: true,
	      dateCreate: new Date(),
	      dateModify: new Date(),
	      imageBucket,
	      startDate: null
	    });
	    await projectService.upsertProject(false, newProject);
	
	    // Add builderId project role
	    await roleService.updateRoles(
	      currentProjectId as string,
	      ROLE_TARGET_TYPE_ENUM.projectBuilder,
	      data.creatorId,
	      data.creatorEmail,
	      data.builderId,
	      [data.builderId ? data.builderId : ' ']
	    );
	  }
	
	  if (isCurrentClaimNumberUpdated) {
	    await budgetService.updateBudgetCurrentClaims(currentProjectId as string, Number(data.currentClaimNumber) || 0);
	  }
	
	  return NextResponse.json({ message: 'Upsert project successfully' }, { status: 200 });
	}

```

src/app/api/projects/update-project-contractors/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import ProjectRepository from '@/backend/repositories/mongodb/project.repository';
	import RoleRepository from '@/backend/repositories/mongodb/role.repository';
	import RoleService from '@/backend/services/role.service';
	import ContractorRepository from '@/backend/repositories/mongodb/contractor.repository';
	import { ROLE_TARGET_TYPE_ENUM } from '@/utils/common';
	
	export async function POST(request: NextRequest) {
	  const conn = await MongoConnect();
	
	  const contractorRepository = new ContractorRepository(conn);
	  const projectRepository = new ProjectRepository(conn);
	  const roleRepository = new RoleRepository(conn);
	  const roleService = new RoleService(roleRepository, contractorRepository);
	
	  try {
	    const data = await request.json();
	
	    if (data.roleProjectContractors === undefined) {
	      data.roleProjectContractors = '';
	    }
	
	    await projectRepository.update(data.projectId, {
	      roleProjectContractors: data.roleProjectContractors,
	      dateModify: new Date()
	    });
	
	    await roleService.updateRoles(
	      data.projectId,
	      ROLE_TARGET_TYPE_ENUM.projectContractor,
	      data.creatorId,
	      data.creatorEmail,
	      data.builderId,
	      [data.roleProjectContractors]
	    );
	  } catch (error) {
	    return NextResponse.json({ message: 'Error upsert project' }, { status: 500 });
	  }
	
	  return NextResponse.json({ message: '' }, { status: 200 });
	}

```

src/app/api/projects/update-project-roles/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import ProjectRepository from '@/backend/repositories/mongodb/project.repository';
	import RoleRepository from '@/backend/repositories/mongodb/role.repository';
	import ProjectService from '@/backend/services/project.service';
	import ContractorRepository from '@/backend/repositories/mongodb/contractor.repository';
	import RoleService from '@/backend/services/role.service';
	import { ROLE_TARGET_TYPE_ENUM } from '@/utils/common';
	
	type RequestType = {
	  projectId: string;
	  creatorId: string;
	  creatorEmail: string;
	  parentId: string;
	  roles: any;
	};
	
	export async function PUT(request: NextRequest) {
	  const conn = await MongoConnect();
	  const contractorRepository = new ContractorRepository(conn);
	  const projectRepository = new ProjectRepository(conn);
	  const roleRepository = new RoleRepository(conn);
	  const projectService = new ProjectService(projectRepository, roleRepository);
	  const roleService = new RoleService(roleRepository, contractorRepository);
	
	  const data: RequestType = await request.json();
	
	  try {
	    const roleData = await projectService.updateProjectRoles(data.projectId, data.roles);
	
	    await roleService.updateRoles(
	      data.projectId,
	      ROLE_TARGET_TYPE_ENUM.projectEmail,
	      data.creatorId,
	      data.creatorEmail,
	      data.parentId,
	      roleData
	    );
	  } catch (error) {
	    return NextResponse.json({ message: 'Error updating project role' }, { status: 500 });
	  }
	
	  return NextResponse.json({ message: 'Update project role successfully' }, { status: 200 });
	}

```

src/app/api/projects/import-project-budget/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import ProjectRepository from '@/backend/repositories/mongodb/project.repository';
	import ProjectService from '@/backend/services/project.service';
	import RoleRepository from '@/backend/repositories/mongodb/role.repository';
	import ProjectDto from '@/utils/dtos/project.dto';
	import BudgetService from '@/backend/services/budget.service';
	import BudgetRepository from '@/backend/repositories/mongodb/budget.repository';
	
	type RequestType = {
	  id: string;
	  creatorId: string;
	  creatorEmail: string;
	  items: string;
	  amount: number;
	  budgetSeperatorTab: boolean;
	  budgetSeperatorComma: boolean;
	  budgetSeperatorSemiColon: boolean;
	  budgetIndexMax: number;
	};
	export async function POST(request: NextRequest) {
	  const conn = await MongoConnect();
	
	  const budgetRepository = new BudgetRepository(conn);
	  const projectRepository = new ProjectRepository(conn);
	  const roleRepository = new RoleRepository(conn);
	  const projectService = new ProjectService(projectRepository, roleRepository);
	  const budgetService = new BudgetService(budgetRepository);
	
	  const data: RequestType = await request.json();
	
	  if (!data.items) {
	    data.items = ' ';
	  }
	  if (!data.amount) {
	    data.amount = 0;
	  }
	
	  if (!data.budgetSeperatorTab) {
	    data.budgetSeperatorTab = true;
	  }
	
	  if (!data.budgetSeperatorComma) {
	    data.budgetSeperatorComma = true;
	  }
	
	  if (!data.budgetSeperatorSemiColon) {
	    data.budgetSeperatorSemiColon = true;
	  }
	
	  const project = await projectService.getProject(data.id);
	
	  if (!project) {
	    return NextResponse.json({ message: 'Project not found' }, { status: 500 });
	  }
	
	  const projectDto = new ProjectDto();
	  projectDto.setData({
	    ...project,
	    items: data.items,
	    amount: data.amount,
	    budgetSeperatorTab: data.budgetSeperatorTab,
	    budgetSeperatorComma: data.budgetSeperatorComma,
	    budgetSeperatorSemiColon: data.budgetSeperatorSemiColon,
	    dateModify: new Date()
	  });
	
	  try {
	    await projectService.upsertProject(true, projectDto);
	
	    await budgetService.importBudgets(data.id, data.creatorId, data.creatorEmail, data.items, data.budgetIndexMax, [
	      data.budgetSeperatorTab,
	      data.budgetSeperatorComma,
	      data.budgetSeperatorSemiColon
	    ]);
	  } catch (err) {
	    return NextResponse.json({ message: 'Import product budget error' }, { status: 500 });
	  }
	
	  return NextResponse.json({ message: 'Import product budget successfully' }, { status: 200 });
	}

```

src/app/api/projects/add-budget/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import BudgetRepository from '@/backend/repositories/mongodb/budget.repository';
	import BudgetService from '@/backend/services/budget.service';
	import BudgetDto from '@/utils/dtos/budget.dto';
	import { ObjectId } from 'bson';
	
	type RequestType = {
	  creatorId: string;
	  projectId: string;
	  creatorEmail: string;
	  budgetAdditionalFields: Array<string>;
	  budgetCategory: string;
	  budgetCode: string;
	  budgetCurrentBudget: number;
	  budgetCurrentClaim: number;
	  budgetDescription?: string;
	  budgetIndex: number;
	  budgetOriginalBudget: number;
	  budgetRevision: number;
	  budgetTotalClaim: number;
	  budgetTotalClaimBeforeHoldback: number;
	  budgetTotalClaimPercentage: number;
	  budgetTotalHoldback: number;
	};
	
	export async function POST(request: NextRequest) {
	  const conn = await MongoConnect();
	
	  const budgetRepository = new BudgetRepository(conn);
	  const budgetService = new BudgetService(budgetRepository);
	
	  const data: RequestType = await request.json();
	  const budgetDto = new BudgetDto();
	  budgetDto.setData({
	    _id: new ObjectId(),
	    creatorId: data.creatorId,
	    projectId: data.projectId,
	    creatorEmail: data.creatorEmail,
	    budgetAdditionalFields: data.budgetAdditionalFields,
	    budgetCategory: data.budgetCategory,
	    budgetCode: data.budgetCode,
	    budgetCurrentBudget: data.budgetCurrentBudget,
	    budgetCurrentClaim: data.budgetCurrentClaim,
	    budgetDescription: data.budgetDescription,
	    budgetIndex: data.budgetIndex,
	    budgetOriginalBudget: data.budgetOriginalBudget,
	    budgetRevision: data.budgetRevision,
	    budgetTotalClaim: data.budgetTotalClaim,
	    budgetTotalClaimBeforeHoldback: data.budgetTotalClaimBeforeHoldback,
	    budgetTotalClaimPercentage: data.budgetTotalClaimPercentage,
	    budgetTotalHoldback: data.budgetTotalHoldback,
	    dateCreate: new Date(),
	    dateModify: new Date()
	  });
	
	  try {
	    await budgetService.addProjectBudget(budgetDto);
	  } catch (err) {
	    return NextResponse.json({ message: 'Error' }, { status: 500 });
	  }
	
	  return NextResponse.json({ message: '' }, { status: 200 });
	}

```

src/app/api/profile/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import { headers } from 'next/headers';
	import { decode, JWT } from 'next-auth/jwt';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import UserService from '@/backend/services/user.service';
	import UserRepository from '@/backend/repositories/mongodb/user.repository';
	import UserDto from '@/utils/dtos/user.dto';
	import ResponseStruct from '@/backend/structs/response.struct';
	
	export async function GET(request: NextRequest) {
	  const token = headers().get('authorization')?.split(' ')[1];
	  const data: JWT | null = await decode({
	    token: token as string,
	    secret: (process.env.NEXTAUTH_SECRET as string) || ''
	  });
	  const responseStruct = new ResponseStruct(true);
	
	  if (!data) {
	    responseStruct.setStatus(401);
	    responseStruct.pushError('Unauthorized');
	
	    return NextResponse.json(responseStruct.getResponse(), { status: 401 });
	  }
	
	  try {
	    const conn = await MongoConnect();
	    const userService = new UserService(new UserRepository(conn));
	    const user: UserDto = await userService.getProfile(data.id as string);
	
	    responseStruct.setStatus(200);
	    responseStruct.setData({ data: user.toObject() });
	
	    return NextResponse.json(responseStruct.getResponse(), { status: 200 });
	  } catch (error: any) {
	    responseStruct.pushError(error.message);
	    responseStruct.setStatus(500);
	
	    return NextResponse.json(responseStruct.getResponse(), { status: 500 });
	  }
	}

```

src/app/api/profile/change-password/[id]/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import UserService from '@/backend/services/user.service';
	import UserRepository from '@/backend/repositories/mongodb/user.repository';
	import ChangePasswordValidator from '@/backend/validator/change-password.validator';
	import ResponseStruct from '@/backend/structs/response.struct';
	
	export async function PUT(request: NextRequest, { params }: { params: { id: string } }) {
	  const { id } = params;
	
	  // Update the user's password
	  const data = await request.json();
	  const conn = await MongoConnect();
	  const userService = new UserService(new UserRepository(conn));
	
	  const validator = new ChangePasswordValidator({ ...data, id }, conn);
	  const responseStruct = new ResponseStruct(true);
	
	  try {
	    await validator.validate();
	
	    if (validator.getErrors().length > 0) {
	      responseStruct.setStatus(400);
	      responseStruct.setErrors(validator.getErrors());
	
	      return NextResponse.json(responseStruct.getResponse(), { status: 400 });
	    }
	
	    await userService.updateProfile(id, {
	      password: data.newPassword
	    });
	    responseStruct.setStatus(200);
	  } catch (error: any) {
	    responseStruct.pushError(error.message);
	    responseStruct.setStatus(500);
	
	    return NextResponse.json(responseStruct.getResponse(), { status: 500 });
	  }
	
	  return NextResponse.json(responseStruct.getResponse(), { status: 200 });
	}

```

src/app/api/profile/update/[id]/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import ProfileValidator from '@/backend/validator/profile.validator';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import UserService from '@/backend/services/user.service';
	import UserRepository from '@/backend/repositories/mongodb/user.repository';
	import ResponseStruct from '@/backend/structs/response.struct';
	
	export async function PUT(request: NextRequest, { params }: { params: { id: string } }) {
	  const { id } = params;
	
	  // Update the user's profile
	  const data = await request.json();
	  const conn = await MongoConnect();
	  const userService = new UserService(new UserRepository(conn));
	
	  const validator = new ProfileValidator({ ...data, id }, conn);
	  const responseStruct = new ResponseStruct(true);
	
	  try {
	    await validator.validate();
	
	    if (validator.getErrors().length > 0) {
	      responseStruct.setStatus(400);
	      responseStruct.setErrors(validator.getErrors());
	
	      return NextResponse.json(responseStruct.getResponse(), { status: 400 });
	    }
	
	    // Remove the password from the data
	    if (data.password) {
	      delete data.password;
	    }
	
	    await userService.updateProfile(id, {
	      email: data.email,
	      name: data.name,
	      phoneNumber: data.phoneNumber,
	      company: data.company,
	      country: data.country,
	      birthDate: data.birthDate,
	      imageUrl: data.image
	    });
	    responseStruct.setStatus(200);
	  } catch (error: any) {
	    responseStruct.pushError(error.message);
	    responseStruct.setStatus(500);
	
	    return NextResponse.json(responseStruct.getResponse(), { status: 500 });
	  }
	
	  return NextResponse.json(responseStruct.getResponse(), { status: 200 });
	}

```

src/app/api/file/upload/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import { S3Client, PutObjectCommand } from '@aws-sdk/client-s3';
	import UploadValidator from '@/backend/validator/upload.validator';
	
	const Bucket = (process.env.AWS_S3_BUCKET_NAME as string) || '';
	
	const initS3 = () => {
	  return new S3Client({
	    region: (process.env.AWS_S3_REGION as string) || '',
	    credentials: {
	      accessKeyId: (process.env.AWS_S3_ACCESS_KEY_ID as string) || '',
	      secretAccessKey: (process.env.AWS_S3_SECRET_ACCESS_KEY as string) || ''
	    }
	  });
	};
	
	export async function POST(request: NextRequest) {
	  const formData = await request.formData();
	  const file = formData.get('file') as unknown as File;
	  const folderName = formData.get('folderName') as string;
	  const fileData = (await file.arrayBuffer()) as Buffer;
	
	  try {
	    const validator = new UploadValidator({ file, folderName });
	    await validator.validate();
	
	    if (validator.getErrors().length > 0) {
	      return NextResponse.json({ errors: validator.getErrors() }, { status: 400 });
	    }
	
	    const keyName = new Date().toISOString().replace(/[-:.]/g, '');
	    const buffer = Buffer.from(fileData);
	    const extension = file.name.split('.').pop();
	
	    const params = {
	      Bucket,
	      Key: `${folderName}/${keyName}.${extension}`,
	      Body: buffer,
	      ContentType: file.type
	    };
	    const s3 = initS3();
	
	    console.log('Uploading file to S3');
	    await s3.send(new PutObjectCommand(params));
	
	    return NextResponse.json(
	      {
	        message: 'File uploaded successfully',
	        url: `${process.env.AWS_CLOUDFRONT_URL}/${folderName}/${keyName}.${extension}`
	      },
	      { status: 201 }
	    );
	  } catch (error: any) {
	    return NextResponse.json({ errors: [error.message] }, { status: 500 });
	  }
	}

```

src/app/api/project/create/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	
	type RequestType = {
	  projectName: string;
	  startDate: string;
	  address: string;
	  imageUrl: string;
	  currentClaim: number;
	};
	export async function POST(request: NextRequest) {
	  const data: RequestType = await request.json();
	
	  return NextResponse.json(data, { status: 200 });
	}

```

src/app/api/project/list/route.ts```ts
	import { NextResponse } from 'next/server';
	
	export async function GET() {
	  const projects = [
	    {
	      _id: 'P001',
	      projectName: "Stargazer's Nook",
	      startDate: '2024-02-01T14:42:43.530+00:00',
	      address: 'Joshua Tree, CA 92252',
	      amount: 18000,
	      currentClaimNumber: 90000,
	      imageUrl: ''
	    },
	    {
	      _id: 'P002',
	      projectName: 'Sunlit Sanctuary',
	      startDate: '2024-01-10T14:42:43.530+00:00',
	      address: '123 Main St, Anytown, CA 90210',
	      amount: 500000,
	      currentClaimNumber: 250000,
	      imageUrl: ''
	    },
	    {
	      _id: 'P003',
	      projectName: 'The Zen Garden',
	      startDate: '2024-01-15T14:42:43.530+00:00',
	      address: 'Zenbrook, CA 90210',
	      amount: 250000,
	      currentClaimNumber: 125000,
	      imageUrl: ''
	    },
	    {
	      _id: 'P004',
	      projectName: "Writer's Retreat",
	      startDate: '2024-01-28T14:42:43.530+00:00',
	      address: 'Carmel-by-the-Sea, CA 93923',
	      amount: 320000,
	      currentClaimNumber: 160000,
	      imageUrl: ''
	    },
	    {
	      _id: 'P005',
	      projectName: 'The Music Room',
	      startDate: '2024-01-20T14:42:43.530+00:00',
	      address: 'New Orleans, LA 70113',
	      amount: 220000,
	      currentClaimNumber: 65000,
	      imageUrl: ''
	    },
	    {
	      _id: 'P006',
	      projectName: 'The Game Room',
	      startDate: '2024-01-10T14:42:43.530+00:00',
	      address: '123 Main St, Anytown, CA 90210',
	      amount: 500000,
	      currentClaimNumber: 250000,
	      imageUrl: ''
	    },
	    {
	      _id: 'P007',
	      projectName: "Writer's Retreat",
	      startDate: '2024-01-28T14:42:43.530+00:00',
	      address: 'Carmel-by-the-Sea, CA 93923',
	      amount: 320000,
	      currentClaimNumber: 160000,
	      imageUrl: ''
	    },
	    {
	      _id: 'P008',
	      projectName: 'Hilltop Hideaway',
	      startDate: '2024-01-10T14:42:43.530+00:00',
	      address: 'Palm Springs, CA 92262',
	      amount: 500000,
	      currentClaimNumber: 160000,
	      imageUrl: ''
	    },
	    {
	      _id: 'P009',
	      projectName: 'Project Listing',
	      startDate: '2024-01-10T14:42:43.530+00:00',
	      address: 'Palm Springs, CA 92262',
	      amount: 500000,
	      currentClaimNumber: 160000,
	      imageUrl: ''
	    },
	    {
	      _id: 'P010',
	      projectName: 'The Music Room',
	      startDate: '2024-01-20T14:42:43.530+00:00',
	      address: 'Palm Springs, CA 92262',
	      amount: 500000,
	      currentClaimNumber: 160000,
	      imageUrl: ''
	    },
	    {
	      _id: 'P011',
	      projectName: 'The Game Room',
	      startDate: '2024-01-20T14:42:43.530+00:00',
	      address: 'Palm Springs, CA 92262',
	      amount: 500000,
	      currentClaimNumber: 160000,
	      imageUrl: ''
	    }
	  ];
	
	  return NextResponse.json({ projects, totalItems: projects.length }, { status: 200 });
	}

```

src/app/api/project/[id]/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	
	export async function GET(request: NextRequest) {
	  const project = {
	    _id: 'P001',
	    projectName: "Writer's Retreat",
	    startDate: '2024-01-10T14:42:43.530+00:00',
	    address: 'Carmel-by-the-Sea, CA 93923',
	    amount: 320000,
	    currentClaimNumber: '160000',
	    builderId: 'B001',
	    category: 'Commercial',
	    completionStatus: 'Active',
	    creatorEmail: 'huypham@gmail.com',
	    creatorId: '1',
	    currency: '$',
	    budgetSeperatorComma: false,
	    budgetSeperatorSemiColon: false,
	    budgetSeperatorTab: false,
	    date: new Date(),
	    dateCreate: new Date(),
	    dateModify: new Date(),
	    imageUrl: '/assets/images/j2c-logo.svg',
	    items: ''
	  };
	
	  return NextResponse.json(project, { status: 200 });
	}
	
	type RequestType = {
	  projectName: string;
	  startDate: string;
	  address: string;
	  imageUrl: string;
	  currentClaim: number;
	};
	export async function PUT(request: NextRequest) {
	  const data: RequestType = await request.json();
	
	  return NextResponse.json(data, { status: 200 });
	}
	
	export async function DELETE(request: NextRequest) {
	  return NextResponse.json({ success: true }, { status: 200 });
	}

```

src/app/api/project/[id]/contractors/route.ts```ts
	import { NextResponse } from 'next/server';
	
	export async function GET() {
	  const contractors = [
	    {
	      _id: 'U001',
	      name: 'Thomas Miller',
	      email: 'example@gmail.com',
	      phoneNumber: '+1 4578-420-410',
	      projectRole: 'Contractor/Admin',
	      imageUrl: ''
	    },
	    {
	      _id: 'U002',
	      name: 'Jennifer Thompson',
	      email: 'example@gmail.com',
	      phoneNumber: '+1 4578-420-410',
	      projectRole: 'Contractor/Project Manager',
	      imageUrl: ''
	    },
	    {
	      _id: 'U003',
	      name: 'Robert Brown',
	      email: 'example@gmail.com',
	      phoneNumber: '+1 4578-420-410',
	      projectRole: 'Contractor/Site Supervisor',
	      imageUrl: ''
	    },
	    {
	      _id: 'U004',
	      name: 'John Davis',
	      email: 'example@gmail.com',
	      phoneNumber: '+1 4578-420-410',
	      projectRole: 'Contractor/Account Payable',
	      imageUrl: ''
	    },
	    {
	      _id: 'U005',
	      name: 'Emily Brown',
	      email: 'example@gmail.com',
	      phoneNumber: '+1 4578-420-410',
	      projectRole: 'Contractor/Account Payable',
	      imageUrl: ''
	    }
	  ];
	
	  return NextResponse.json({ contractors, totalItems: contractors.length }, { status: 200 });
	}

```

src/app/api/project/[id]/invoices/route.ts```ts
	import { IInvoice } from '@/types/resource/invoice';
	import DateCustom from '@/utils/datetime/date.custom';
	import { NextResponse } from 'next/server';
	
	export async function GET() {
	  const invoices: Partial<IInvoice>[] = [
	    {
	      id: 'U001',
	      projectId: 'P001',
	      budgetId: 'U001',
	      invoiceIndex: 1,
	      invoiceContractorId: 'C001',
	      invoiceNumber: 'A',
	      invoiceStatus: 0,
	      invoiceDate: new DateCustom(),
	      invoiceReceivedDate: new DateCustom().toISOString(),
	      invoiceSubtotal: 10000,
	      invoiceGst: 80000,
	      invoiceGstOverride: true,
	      invoicePst: '5000',
	      invoicePstOverride: false,
	      invoiceHoldback: 300,
	      invoiceHoldbackEnabled: true,
	      invoiceTotal: 500000
	    },
	    {
	      id: 'U002',
	      projectId: 'P002',
	      budgetId: 'U001',
	      invoiceIndex: 1,
	      invoiceContractorId: 'C001',
	      invoiceNumber: 'A',
	      invoiceStatus: 1,
	      invoiceDate: new DateCustom(),
	      invoiceReceivedDate: new DateCustom().toISOString(),
	      invoiceSubtotal: 10000,
	      invoiceGst: 80000,
	      invoiceGstOverride: true,
	      invoicePst: '5000',
	      invoicePstOverride: false,
	      invoiceHoldback: 300,
	      invoiceHoldbackEnabled: false,
	      invoiceTotal: 500000
	    },
	    {
	      id: 'U003',
	      projectId: 'P003',
	      budgetId: 'U001',
	      invoiceIndex: 1,
	      invoiceContractorId: 'C001',
	      invoiceNumber: 'A',
	      invoiceStatus: 2,
	      invoiceDate: new DateCustom(),
	      invoiceReceivedDate: new DateCustom().toISOString(),
	      invoiceSubtotal: 10000,
	      invoiceGst: 80000,
	      invoiceGstOverride: true,
	      invoicePst: '5000',
	      invoicePstOverride: false,
	      invoiceHoldback: 300,
	      invoiceHoldbackEnabled: false,
	      invoiceTotal: 500000
	    },
	    {
	      id: 'U004',
	      projectId: 'P004',
	      budgetId: 'U001',
	      invoiceIndex: 1,
	      invoiceContractorId: 'C001',
	      invoiceNumber: 'A',
	      invoiceStatus: 1,
	      invoiceDate: new DateCustom(),
	      invoiceReceivedDate: new DateCustom().toISOString(),
	      invoiceSubtotal: 10000,
	      invoiceGst: 80000,
	      invoiceGstOverride: true,
	      invoicePst: '5000',
	      invoicePstOverride: true,
	      invoiceHoldback: 300,
	      invoiceHoldbackEnabled: false,
	      invoiceTotal: 500000
	    },
	    {
	      id: 'U005',
	      projectId: 'P005',
	      budgetId: 'U001',
	      invoiceIndex: 1,
	      invoiceContractorId: 'C001',
	      invoiceNumber: 'A',
	      invoiceStatus: 0,
	      invoiceDate: new DateCustom(),
	      invoiceReceivedDate: new DateCustom().toISOString(),
	      invoiceSubtotal: 10000,
	      invoiceGst: 80000,
	      invoiceGstOverride: true,
	      invoicePst: '5000',
	      invoicePstOverride: false,
	      invoiceHoldback: 300,
	      invoiceHoldbackEnabled: true
	    },
	    {
	      id: 'U006',
	      projectId: 'P006',
	      budgetId: 'U001',
	      invoiceIndex: 1,
	      invoiceContractorId: 'C001',
	      invoiceNumber: 'A',
	      invoiceStatus: 1,
	      invoiceDate: new DateCustom(),
	      invoiceReceivedDate: new DateCustom().toISOString(),
	      invoiceSubtotal: 10000,
	      invoiceGst: 80000,
	      invoiceGstOverride: true,
	      invoicePst: '5000',
	      invoicePstOverride: true,
	      invoiceHoldback: 300,
	      invoiceHoldbackEnabled: false,
	      invoiceTotal: 500000
	    },
	    {
	      id: 'U010',
	      projectId: 'P007',
	      budgetId: 'U001',
	      invoiceIndex: 1,
	      invoiceContractorId: 'C001',
	      invoiceNumber: 'A',
	      invoiceStatus: 2,
	      invoiceDate: new DateCustom(),
	      invoiceReceivedDate: new DateCustom().toISOString(),
	      invoiceSubtotal: 10000,
	      invoiceGst: 80000,
	      invoiceGstOverride: true,
	      invoicePst: '5000',
	      invoicePstOverride: true,
	      invoiceHoldback: 300,
	      invoiceHoldbackEnabled: false,
	      invoiceTotal: 500000
	    },
	    {
	      id: 'U007',
	      projectId: 'P008',
	      budgetId: 'U001',
	      invoiceIndex: 1,
	      invoiceContractorId: 'C001',
	      invoiceNumber: 'A',
	      invoiceStatus: 3,
	      invoiceDate: new DateCustom(),
	      invoiceReceivedDate: new DateCustom().toISOString(),
	      invoiceSubtotal: 10000,
	      invoiceGst: 80000,
	      invoiceGstOverride: true,
	      invoicePst: '5000',
	      invoicePstOverride: false,
	      invoiceHoldback: 300,
	      invoiceHoldbackEnabled: true,
	      invoiceTotal: 500000
	    },
	    {
	      id: 'U008',
	      projectId: 'P009',
	      budgetId: 'U001',
	      invoiceIndex: 1,
	      invoiceContractorId: 'C001',
	      invoiceNumber: 'A',
	      invoiceStatus: 0,
	      invoiceDate: new DateCustom(),
	      invoiceReceivedDate: new DateCustom().toISOString(),
	      invoiceSubtotal: 10000,
	      invoiceGst: 80000,
	      invoiceGstOverride: true,
	      invoicePst: '5000',
	      invoicePstOverride: true,
	      invoiceHoldback: 300,
	      invoiceHoldbackEnabled: true,
	      invoiceTotal: 500000
	    },
	    {
	      id: 'U009',
	      projectId: 'P001',
	      budgetId: 'U010',
	      invoiceIndex: 10,
	      invoiceContractorId: 'C001',
	      invoiceNumber: 'A',
	      invoiceStatus: 3,
	      invoiceDate: new DateCustom(),
	      invoiceReceivedDate: new DateCustom().toISOString(),
	      invoiceSubtotal: 10300,
	      invoiceGst: 40000,
	      invoiceGstOverride: false,
	      invoicePst: '3000',
	      invoicePstOverride: true,
	      invoiceHoldback: 300,
	      invoiceHoldbackEnabled: false,
	      invoiceTotal: 500000
	    }
	  ];
	
	  return NextResponse.json({ invoices }, { status: 200 });
	}

```

src/app/api/project/[id]/roles/route.ts```ts
	import { NextResponse } from 'next/server';
	
	export async function GET() {
	  const roles = [
	    {
	      _id: 'U001',
	      name: 'Thomas Miller',
	      email: 'example@gmail.com',
	      phoneNumber: '+1 4578-420-410',
	      projectRole: 'Builder/Admin',
	      approvalLevel: 'Approve 0',
	      imageUrl: ''
	    },
	    {
	      _id: 'U002',
	      name: 'Jennifer Thompson',
	      email: 'example@gmail.com',
	      phoneNumber: '+1 4578-420-410',
	      projectRole: 'Builder/Project Manager',
	      approvalLevel: 'Approve 1',
	      imageUrl: ''
	    },
	    {
	      _id: 'U003',
	      name: 'Robert Brown',
	      email: 'example@gmail.com',
	      phoneNumber: '+1 4578-420-410',
	      projectRole: 'Builder/Site Supervisor',
	      approvalLevel: 'Approve 2',
	      imageUrl: ''
	    },
	    {
	      _id: 'U004',
	      name: 'John Davis',
	      email: 'example@gmail.com',
	      phoneNumber: '+1 4578-420-410',
	      projectRole: 'Builder/Account Payable',
	      approvalLevel: 'Approve 1',
	      imageUrl: ''
	    },
	    {
	      _id: 'U005',
	      name: 'Emily Brown',
	      email: 'example@gmail.com',
	      phoneNumber: '+1 4578-420-410',
	      projectRole: 'Builder/Account Payable',
	      approvalLevel: 'Approve 3',
	      imageUrl: ''
	    }
	  ];
	
	  return NextResponse.json({ roles, totalItems: roles.length }, { status: 200 });
	}

```

src/app/api/project/[id]/budgets/route.ts```ts
	import { IBudget } from '@/types/resource/budget';
	import { NextResponse } from 'next/server';
	
	export async function GET() {
	  const budgets: Partial<IBudget>[] = [
	    {
	      id: 'U001',
	      projectId: 'P001',
	      budgetCode: 'P808-1',
	      budgetCategory: 'A',
	      budgetOriginalBudget: 180000,
	      budgetRevision: 5000,
	      budgetCurrentBudget: 12000,
	      budgetCurrentClaim: 0,
	      budgetClaimToDate: 35600,
	      budgetTotalClaim: 500000,
	      budgetTotalClaimPercentage: 0.12,
	      budgetCostToComplete: 40000
	    },
	    {
	      id: 'U002',
	      projectId: 'P002',
	      budgetCode: 'P808-5',
	      budgetCategory: 'A',
	      budgetOriginalBudget: 190000,
	      budgetRevision: 50000,
	      budgetCurrentBudget: 12300,
	      budgetCurrentClaim: 10,
	      budgetClaimToDate: 35600,
	      budgetTotalClaim: 400000,
	      budgetTotalClaimPercentage: 0.12,
	      budgetCostToComplete: 40000
	    },
	    {
	      id: 'U003',
	      projectId: 'P003',
	      budgetCode: 'P808-4',
	      budgetCategory: 'A',
	      budgetOriginalBudget: 180000,
	      budgetRevision: 5000,
	      budgetCurrentBudget: 12000,
	      budgetCurrentClaim: 0,
	      budgetClaimToDate: 35600,
	      budgetTotalClaim: 500000,
	      budgetTotalClaimPercentage: 0.12,
	      budgetCostToComplete: 40000
	    },
	    {
	      id: 'U004',
	      projectId: 'P004',
	      budgetCode: 'P808-1',
	      budgetCategory: 'A',
	      budgetOriginalBudget: 180000,
	      budgetRevision: 5000,
	      budgetCurrentBudget: 12000,
	      budgetCurrentClaim: 0,
	      budgetClaimToDate: 35600,
	      budgetTotalClaim: 500000,
	      budgetTotalClaimPercentage: 0.12,
	      budgetCostToComplete: 40000
	    },
	    {
	      id: 'U005',
	      projectId: 'P005',
	      budgetCode: 'P808-7',
	      budgetCategory: 'A',
	      budgetOriginalBudget: 180000,
	      budgetRevision: 5000,
	      budgetCurrentBudget: 12000,
	      budgetCurrentClaim: 0,
	      budgetClaimToDate: 35600,
	      budgetTotalClaim: 500000,
	      budgetTotalClaimPercentage: 0.12,
	      budgetCostToComplete: 40000
	    },
	    {
	      id: 'U006',
	      projectId: 'P006',
	      budgetCode: 'P808-1',
	      budgetCategory: 'A',
	      budgetOriginalBudget: 180000,
	      budgetRevision: 5000,
	      budgetCurrentBudget: 12000,
	      budgetCurrentClaim: 0,
	      budgetClaimToDate: 35600,
	      budgetTotalClaim: 500000,
	      budgetTotalClaimPercentage: 0.12,
	      budgetCostToComplete: 40000
	    },
	    {
	      id: 'U010',
	      projectId: 'P007',
	      budgetCode: 'P808-2',
	      budgetCategory: 'A',
	      budgetOriginalBudget: 180000,
	      budgetRevision: 5000,
	      budgetCurrentBudget: 12000,
	      budgetCurrentClaim: 0,
	      budgetClaimToDate: 35600,
	      budgetTotalClaim: 500000,
	      budgetTotalClaimPercentage: 0.12,
	      budgetCostToComplete: 40000
	    },
	    {
	      id: 'U007',
	      projectId: 'P008',
	      budgetCode: 'P808-3',
	      budgetCategory: 'A',
	      budgetOriginalBudget: 180000,
	      budgetRevision: 5000,
	      budgetCurrentBudget: 12000,
	      budgetCurrentClaim: 0,
	      budgetClaimToDate: 35600,
	      budgetTotalClaim: 500000,
	      budgetTotalClaimPercentage: 0.12,
	      budgetCostToComplete: 40000
	    },
	    {
	      id: 'U008',
	      projectId: 'P009',
	      budgetCode: 'P808-1',
	      budgetCategory: 'A',
	      budgetOriginalBudget: 180000,
	      budgetRevision: 5000,
	      budgetCurrentBudget: 12000,
	      budgetCurrentClaim: 0,
	      budgetClaimToDate: 35600,
	      budgetTotalClaim: 500000,
	      budgetTotalClaimPercentage: 0.12,
	      budgetCostToComplete: 40000
	    },
	    {
	      id: 'U009',
	      projectId: 'P001',
	      budgetCode: 'P808-9',
	      budgetCategory: 'A',
	      budgetOriginalBudget: 180000,
	      budgetRevision: 5000,
	      budgetCurrentBudget: 12000,
	      budgetCurrentClaim: 0,
	      budgetClaimToDate: 35600,
	      budgetTotalClaim: 500000,
	      budgetTotalClaimPercentage: 0.12,
	      budgetCostToComplete: 40000
	    }
	  ];
	
	  return NextResponse.json({ budgets }, { status: 200 });
	}

```

src/app/api/user/create/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	
	type RequestType = {
	  contractorName: string;
	  service: string;
	  address: string;
	  completionStatus: string;
	  image?: File;
	};
	export async function POST(request: NextRequest) {
	  const data: RequestType = await request.json();
	
	  return NextResponse.json({ success: data }, { status: 200 });
	}

```

src/app/api/user/delete/[id]/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	
	export async function DELETE(request: NextRequest, { params }: { params: { id: string } }) {
	  const { id } = params;
	
	  return NextResponse.json({ success: { id } }, { status: 200 });
	}

```

src/app/api/user/bulk-control/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import { BulkAction } from '@/utils/enums';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import UserRepository from '@/backend/repositories/mongodb/user.repository';
	import UserService from '@/backend/services/user.service';
	import ResponseStruct from '@/backend/structs/response.struct';
	import UserBulkActionValidator from '@/backend/validator/user-bulk-action.validator';
	import IdsNotFoundException from '@/backend/exceptions/idsnotfound.exception';
	import { headers } from 'next/headers';
	import { decode, JWT } from 'next-auth/jwt';
	
	export async function PATCH(request: NextRequest) {
	  const data: { ids: string[]; action: BulkAction } = await request.json();
	  const token = headers().get('authorization')?.split(' ')[1];
	  const dataDecode: JWT | null = await decode({
	    token: token as string,
	    secret: (process.env.NEXTAUTH_SECRET as string) || ''
	  });
	  const responseStruct = new ResponseStruct(true);
	
	  if (!dataDecode) {
	    responseStruct.setStatus(401);
	    responseStruct.setErrors(['Unauthorized']);
	
	    return NextResponse.json(responseStruct.getResponse(), { status: responseStruct.getValue('status') });
	  }
	
	  const validation = new UserBulkActionValidator({ ...data, currentUserId: dataDecode.id as string });
	
	  validation.validate();
	
	  if (validation.getErrors().length > 0) {
	    responseStruct.setErrors(validation.getErrors());
	    responseStruct.setStatus(400);
	
	    return NextResponse.json(responseStruct.getResponse(), { status: responseStruct.getValue('status') });
	  }
	
	  const conn = await MongoConnect();
	  const userRepository = new UserRepository(conn);
	  const userServices = new UserService(userRepository);
	
	  try {
	    await userServices.bulkUpdateOrDelete(data.ids, data.action);
	  } catch (error: any) {
	    responseStruct.pushError(error.message);
	    responseStruct.setStatus(500);
	
	    if (error instanceof IdsNotFoundException) {
	      responseStruct.setStatus(400);
	    }
	  }
	
	  return NextResponse.json(responseStruct.getResponse(), { status: responseStruct.getValue('status') });
	}

```

src/app/api/user/list/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import ResponseStruct from '@/backend/structs/response.struct';
	import UserService from '@/backend/services/user.service';
	import UserRepository from '@/backend/repositories/mongodb/user.repository';
	import { getListingQuery } from '@/app/api/listing';
	import { headers } from 'next/headers';
	import { decode, JWT } from 'next-auth/jwt';
	
	export async function GET(request: NextRequest) {
	  const conn = await MongoConnect();
	  const responseStruct = new ResponseStruct(true);
	  const token = headers().get('authorization')?.split(' ')[1];
	  const dataDecode: JWT | null = await decode({
	    token: token as string,
	    secret: (process.env.NEXTAUTH_SECRET as string) || ''
	  });
	
	  if (!dataDecode) {
	    responseStruct.setStatus(401);
	    responseStruct.setErrors(['Unauthorized']);
	
	    return NextResponse.json(responseStruct.getResponse(), { status: responseStruct.getValue('status') });
	  }
	
	  try {
	    const { limit: limitValue, page: pageValue, order: orderValue } = getListingQuery(request);
	    const userRepository = new UserRepository(conn);
	    const userService = new UserService(userRepository);
	
	    const data = await userService.listingUsers(limitValue, pageValue, orderValue, { exclude: [dataDecode.id as string] });
	
	    responseStruct.setData({
	      meta: data.pagination,
	      data: data.collection
	    });
	    responseStruct.setStatus(200);
	  } catch (error: any) {
	    responseStruct.pushError(error.message);
	    responseStruct.setStatus(500);
	
	    return NextResponse.json(responseStruct.getResponse(), { status: 500 });
	  }
	
	  return NextResponse.json(responseStruct.getResponse(), { status: 200 });
	}

```

src/app/api/user/[id]/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import ResponseStruct from '@/backend/structs/response.struct';
	import UserRepository from '@/backend/repositories/mongodb/user.repository';
	import UserDto from '@/utils/dtos/user.dto';
	import NotFoundException from '@/backend/exceptions/notfound.exception';
	
	export async function GET(_: NextRequest, { params }: { params: { id: string } }) {
	  const responseStruct = new ResponseStruct(true);
	
	  if (!params.id) {
	    responseStruct.setStatus(400);
	    responseStruct.pushError('User id is required.');
	
	    return NextResponse.json(responseStruct.getResponse(), { status: 400 });
	  }
	
	  const conn = await MongoConnect();
	  const userRepository = new UserRepository(conn);
	  try {
	    const user: UserDto = await userRepository.findUserId(params.id);
	
	    responseStruct.setData({
	      data: user.toObject()
	    });
	    responseStruct.setStatus(200);
	  } catch (error: NotFoundException | any) {
	    responseStruct.setStatus(500);
	
	    if (error instanceof NotFoundException) {
	      responseStruct.setStatus(404);
	    }
	
	    responseStruct.pushError(error.message);
	  }
	
	  return NextResponse.json(responseStruct.getResponse(), { status: responseStruct.getValue('status') });
	}

```

src/app/api/user/[id]/delete/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import ResponseStruct from '@/backend/structs/response.struct';
	import UserRepository from '@/backend/repositories/mongodb/user.repository';
	import UserService from '@/backend/services/user.service';
	import { Actions } from '@/utils/enums';
	import NotFoundException from '@/backend/exceptions/notfound.exception';
	import { headers } from 'next/headers';
	import { decode, JWT}  from 'next-auth/jwt';
	
	export async function DELETE(_: NextRequest, { params }: { params: { id: string } }) {
	  const token = headers().get('authorization')?.split(' ')[1];
	  const dataDecode: JWT | null = await decode({
	    token: token as string,
	    secret: (process.env.NEXTAUTH_SECRET as string) || ''
	  });
	  const responseStruct = new ResponseStruct(true);
	
	  if (!params.id) {
	    responseStruct.setStatus(400);
	    responseStruct.pushError('User id is required.');
	
	    return NextResponse.json(responseStruct.getResponse(), { status: 400 });
	  }
	
	  if (dataDecode && dataDecode.id === params.id) {
	    responseStruct.setStatus(400);
	    responseStruct.pushError('You cannot delete yourself.');
	
	    return NextResponse.json(responseStruct.getResponse(), { status: 400 });
	  }
	
	  const conn = await MongoConnect();
	  const userRepository = new UserRepository(conn);
	  const userService = new UserService(userRepository);
	  try {
	    await userService.singleUpdateOrDelete(params.id, Actions.DELETE);
	
	    responseStruct.setStatus(200);
	  } catch (error: NotFoundException | any) {
	    responseStruct.setStatus(500);
	
	    if (error instanceof NotFoundException) {
	      responseStruct.setStatus(404);
	    }
	
	    responseStruct.pushError(error.message);
	  }
	
	  return NextResponse.json(responseStruct.getResponse(), { status: responseStruct.getValue('status') });
	}

```

src/app/api/user/[id]/archive/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import ResponseStruct from '@/backend/structs/response.struct';
	import UserRepository from '@/backend/repositories/mongodb/user.repository';
	import UserService from '@/backend/services/user.service';
	import { Actions } from '@/utils/enums';
	import NotFoundException from '@/backend/exceptions/notfound.exception';
	import { headers } from 'next/headers';
	import { decode, JWT } from 'next-auth/jwt';
	
	export async function PATCH(_: NextRequest, { params }: { params: { id: string } }) {
	  const token = headers().get('authorization')?.split(' ')[1];
	  const dataDecode: JWT | null = await decode({
	    token: token as string,
	    secret: (process.env.NEXTAUTH_SECRET as string) || ''
	  });
	  const responseStruct = new ResponseStruct(true);
	
	  if (!params.id) {
	    responseStruct.setStatus(400);
	    responseStruct.pushError('User id is required.');
	
	    return NextResponse.json(responseStruct.getResponse(), { status: 400 });
	  }
	
	  if (dataDecode && dataDecode.id === params.id) {
	    responseStruct.setStatus(400);
	    responseStruct.pushError('You cannot lock yourself.');
	
	    return NextResponse.json(responseStruct.getResponse(), { status: 400 });
	  }
	
	  const conn = await MongoConnect();
	  const userRepository = new UserRepository(conn);
	  const userService = new UserService(userRepository);
	  try {
	    await userService.singleUpdateOrDelete(params.id, Actions.ARCHIVE);
	
	    responseStruct.setStatus(200);
	  } catch (error: NotFoundException | any) {
	    responseStruct.setStatus(500);
	
	    if (error instanceof NotFoundException) {
	      responseStruct.setStatus(404);
	    }
	
	    responseStruct.pushError(error.message);
	  }
	
	  return NextResponse.json(responseStruct.getResponse(), { status: responseStruct.getValue('status') });
	}

```

src/app/api/user/update/[id]/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	
	type RequestData = {
	  contractorName?: string;
	  category?: string;
	  address?: string;
	  completionStatus?: string;
	  image?: File;
	};
	type RequestType = {
	  id: string;
	  data: RequestData;
	};
	export async function PUT(request: NextRequest, { params }: { params: { id: string } }) {
	  const { id } = params;
	  const data: RequestType = await request.json();
	
	  return NextResponse.json({ success: { id, data } }, { status: 200 });
	}

```

src/app/api/contractor/create/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import UploadValidator from '@/backend/validator/upload.validator';
	import { FolderName } from '@/utils/enums';
	import ContractorService from '@/backend/services/contractor.service';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import ContractorValidator from '@/backend/validator/contractor.validator';
	import ResponseStruct from '@/backend/structs/response.struct';
	
	export async function POST(request: NextRequest) {
	  const formData: FormData = await request.formData();
	
	  const conn = await MongoConnect();
	  const contractorService = new ContractorService(conn);
	  const errors: string[] = [];
	  const responseStruct = new ResponseStruct(true);
	
	  if (formData.get('file')) {
	    const file = formData.get('file') as unknown as File;
	
	    const validatorFile = new UploadValidator({ file, folderName: FolderName.CONTRACTORS });
	    await validatorFile.validate();
	
	    validatorFile.getErrors().forEach((err) => {
	      errors.push(err);
	    });
	  }
	
	  try {
	    const validator = new ContractorValidator({
	      creatorEmail: formData.get('creatorEmail') as string,
	      creatorId: formData.get('creatorId') as string,
	      contractorName: formData.get('contractorName') as string,
	      service: formData.get('service') as string,
	      address: formData.get('address') as string,
	      completionStatus: formData.get('completionStatus') as string
	    });
	
	    await validator.validate();
	    validator.getErrors().forEach((err) => {
	      errors.push(err);
	    });
	
	    if (errors.length > 0) {
	      responseStruct.setStatus(400);
	      responseStruct.setErrors(errors);
	
	      return NextResponse.json(responseStruct.getResponse(), { status: 400 });
	    }
	
	    await contractorService.createContractor(formData);
	
	    responseStruct.setStatus(200);
	  } catch (err: any) {
	    responseStruct.pushError(err.message);
	    responseStruct.setStatus(500);
	
	    return NextResponse.json(responseStruct.getResponse(), { status: 500 });
	  }
	
	  return NextResponse.json(responseStruct.getResponse(), { status: 200 });
	}

```

src/app/api/contractor/delete/[id]/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import ContractorService from '@/backend/services/contractor.service';
	import ResponseStruct from '@/backend/structs/response.struct';
	
	export async function DELETE(request: NextRequest, { params }: { params: { id: string } }) {
	  const { id } = params;
	  const conn = await MongoConnect();
	  const contractorService = new ContractorService(conn);
	  const responseStruct = new ResponseStruct(true);
	
	  try {
	    await contractorService.deleteContractor(id);
	    responseStruct.setStatus(200);
	  } catch (error: any) {
	    responseStruct.pushError(error.message);
	    responseStruct.setStatus(500);
	
	    return NextResponse.json(responseStruct.getResponse(), { status: 500 });
	  }
	
	  return NextResponse.json(responseStruct.getResponse(), { status: 200 });
	}

```

src/app/api/contractor/update-contractor-role/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import ContractorRepository from '@/backend/repositories/mongodb/contractor.repository';
	import RoleRepository from '@/backend/repositories/mongodb/role.repository';
	import ContractorService from '@/backend/services/contractor.service';
	import { ROLE_TARGET_TYPE_ENUM } from '@/utils/common';
	import RoleService from '@/backend/services/role.service';
	
	export async function PUT(request: NextRequest) {
	  const conn = await MongoConnect();
	  const contractorRepository = new ContractorRepository(conn);
	  const roleRepository = new RoleRepository(conn);
	  const contractorService = new ContractorService(conn);
	  const roleService = new RoleService(roleRepository, contractorRepository);
	
	  const data = await request.json();
	
	  const roles = [data.role0 ? data.role0 : '', data.role1 ? data.role1 : '', data.role2 ? data.role2 : ''];
	
	  try {
	    await contractorService.updateContractorRoles(data.id, roles);
	
	    await roleService.updateRoles(data.id, ROLE_TARGET_TYPE_ENUM.contractorEmail, data.creatorId, data.creatorEmail, null, roles);
	  } catch (err) {
	    return NextResponse.json({ message: 'Error updating roles' }, { status: 500 });
	  }
	
	  return NextResponse.json({ message: '' }, { status: 200 });
	}

```

src/app/api/contractor/list/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import ContractorService from '@/backend/services/contractor.service';
	import ResponseStruct from '@/backend/structs/response.struct';
	import { getListingQuery } from '@/app/api/listing';
	
	export async function GET(request: NextRequest) {
	  const conn = await MongoConnect();
	  const contractorService = new ContractorService(conn);
	  const responseStructure = new ResponseStruct(true);
	
	  try {
	    const { limit: limitValue, page: pageValue, order: orderValue } = getListingQuery(request);
	
	    const data = await contractorService.listingContractors(limitValue, pageValue, orderValue);
	
	    responseStructure.setData({
	      meta: data.pagination,
	      data: data.collection
	    });
	
	    return NextResponse.json(responseStructure.getResponse(), { status: 200 });
	  } catch (error: any) {
	    responseStructure.pushError(error.message);
	    responseStructure.setStatus(500);
	
	    return NextResponse.json(responseStructure.getResponse(), { status: 500 });
	  }
	}

```

src/app/api/contractor/update/[id]/route.ts```ts
	import { NextRequest, NextResponse } from 'next/server';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import ContractorService from '@/backend/services/contractor.service';
	import UploadValidator from '@/backend/validator/upload.validator';
	import { FolderName } from '@/utils/enums';
	import ContractorValidator from '@/backend/validator/contractor.validator';
	import ResponseStruct from '@/backend/structs/response.struct';
	
	export async function PUT(request: NextRequest, { params }: { params: { id: string } }) {
	  const { id } = params;
	  const formData: FormData = await request.formData();
	  const conn = await MongoConnect();
	  const contractorService = new ContractorService(conn);
	  const errors: string[] = [];
	  const responseStruct = new ResponseStruct(true);
	
	  if (formData.get('file')) {
	    const file = formData.get('file') as unknown as File;
	
	    const validatorFile = new UploadValidator({ file, folderName: FolderName.CONTRACTORS });
	    await validatorFile.validate();
	
	    validatorFile.getErrors().forEach((err) => {
	      errors.push(err);
	    });
	  }
	
	  try {
	    const validator = new ContractorValidator({
	      creatorEmail: formData.get('creatorEmail') as string,
	      creatorId: formData.get('creatorId') as string,
	      contractorName: formData.get('contractorName') as string,
	      service: formData.get('service') as string,
	      address: formData.get('address') as string,
	      completionStatus: formData.get('completionStatus') as string
	    });
	
	    await validator.validate();
	    validator.getErrors().forEach((err) => {
	      errors.push(err);
	    });
	
	    if (errors.length > 0) {
	      responseStruct.setStatus(400);
	      responseStruct.setErrors(errors);
	
	      return NextResponse.json(responseStruct.getResponse(), { status: 400 });
	    }
	
	    const contractor = await contractorService.updateContractor(id, formData);
	    responseStruct.setStatus(200);
	    responseStruct.setData({
	      data: contractor
	    });
	
	    return NextResponse.json(responseStruct.getResponse(), { status: 200 });
	  } catch (error: any) {
	    responseStruct.pushError(error.message);
	    responseStruct.setStatus(500);
	
	    return NextResponse.json(responseStruct.getResponse(), { status: 500 });
	  }
	}

```

src/app/api/builder/route.ts```ts
	import BuilderRepository from '@/backend/repositories/mongodb/builder.repository';
	import MongoConnect from '@/backend/connection/mongo.connection';
	import BuilderValidator from '@/backend/validator/builder.validator';
	import { Builder } from '@/utils/dtos/builder.dto';
	import { NextRequest, NextResponse } from 'next/server';
	import BuilderService from '@/backend/services/builder.service';
	import AuthService from '@/backend/services/auth.service';
	import { PAGINATE_OFFSET, PAGINATE_PAGE_SIZE } from '@/utils/constant';
	import { SortOrder } from 'mongoose';
	import { parsePayloadBuilderToCreateData } from '@/utils/helper';
	import ResponseStruct from '@/backend/structs/response.struct';
	import PaginationStruct from '@/backend/structs/pagination.struct';
	
	export async function POST(request: NextRequest) {
	  const formData = await request.formData();
	
	  const data = parsePayloadBuilderToCreateData(formData);
	
	  const conn = await MongoConnect();
	  const builderService = new BuilderService(conn);
	  const authService = new AuthService(conn);
	  const builderValidator = new BuilderValidator(data);
	
	  try {
	    await builderValidator.validate();
	
	    if (builderValidator.getErrors().length > 0) {
	      return NextResponse.json({ errors: builderValidator.getErrors() }, { status: 400 });
	    }
	    const currentUser = await authService.getUserByToken(request);
	    if (!!currentUser) {
	      const result = await builderService.addBuilder(formData, currentUser);
	      return NextResponse.json({ success: true, builder: result.toObject() }, { status: 200 });
	    }
	  } catch (error: any) {
	    return NextResponse.json({ errors: [error.message] }, { status: 400 });
	  }
	}
	export async function GET(request: NextRequest) {
	  const conn = await MongoConnect();
	  const builderRepository = new BuilderRepository(conn);
	  const builderService = new BuilderService(conn);
	  const responseStructure = new ResponseStruct(true);
	  const params = request.nextUrl.searchParams;
	  const sortBy = (params.get?.('sortBy') || 'dateCreate') as keyof Builder;
	  const sortDir = (params.get('sortDir') || 'desc') as SortOrder;
	  const search = (params.get('search') || '') as string;
	  const page = +(params.get('page') || PAGINATE_OFFSET);
	  const limit = +(params.get('limit') || PAGINATE_PAGE_SIZE);
	  const filter = {
	    page,
	    sortBy,
	    limit,
	    sortDir,
	    search
	  };
	  try {
	    const total = await builderRepository.count(filter.search ? { builderName: { $regex: filter.search } } : {});
	    const builders = (await builderService.findBuilders(filter)) as unknown as Builder[];
	    const pagination = new PaginationStruct(page, limit, total);
	    responseStructure.setData({
	      meta: pagination,
	      data: builders
	    });
	    return NextResponse.json(responseStructure.getResponse(), { status: 200 });
	  } catch (error: any) {
	    responseStructure.pushError(error.message);
	    responseStructure.setStatus(400);
	    return NextResponse.json(responseStructure.getResponse(), { status: 400 });
	  }
	}

```

src/app/api/builder/[id]/route.ts```ts
	import MongoConnect from '@/backend/connection/mongo.connection';
	import BuilderValidator from '@/backend/validator/builder.validator';
	import { NextRequest, NextResponse } from 'next/server';
	import BuilderService from '@/backend/services/builder.service';
	import { parsePayloadBuilderToCreateData } from '@/utils/helper';
	import ObjectIdValidator from '@/backend/validator/objectId.validator';
	import StorageFactory from '@/backend/services/storage/storage.factory';
	
	export async function GET(_: NextRequest, { params }: { params: { id: string } }) {
	  const { id } = params;
	  if (!id) {
	    return NextResponse.json({ errors: ['Builder id not found'] }, { status: 400 });
	  }
	  const conn = await MongoConnect();
	  const builderService = new BuilderService(conn);
	  try {
	    const builder = await builderService.getBuilder(id);
	    if (!builder) {
	      return NextResponse.json({ errors: ['Builder not found'] }, { status: 400 });
	    }
	
	    return NextResponse.json({ success: true, builder }, { status: 200 });
	  } catch (error) {
	    return NextResponse.json({ errors: [error] }, { status: 400 });
	  }
	}
	
	export async function PUT(request: NextRequest, { params }: { params: { id: string } }) {
	  const { id } = params;
	  const objectIdValidator = new ObjectIdValidator({ id });
	  await objectIdValidator.validate();
	
	  if (objectIdValidator.getErrors().length > 0) {
	    return NextResponse.json({ errors: ['Invalid builder id'] }, { status: 400 });
	  }
	  const formData = await request.formData();
	
	  const conn = await MongoConnect();
	  const builderService = new BuilderService(conn);
	
	  try {
	    const data = parsePayloadBuilderToCreateData(formData);
	    const builderValidator = new BuilderValidator(data);
	    await builderValidator.validate();
	
	    if (builderValidator.getErrors().length > 0) {
	      return NextResponse.json({ errors: builderValidator.getErrors() }, { status: 400 });
	    }
	
	    const result = await builderService.updateBuilder(id, formData);
	    return NextResponse.json({ success: true, builder: result }, { status: 200 });
	  } catch (error) {
	    return NextResponse.json({ errors: [error] }, { status: 400 });
	  }
	}
	
	export async function DELETE(_: NextRequest, { params }: { params: { id: string } }) {
	  const { id } = params;
	  const objectIdValidator = new ObjectIdValidator({ id });
	  await objectIdValidator.validate();
	
	  if (objectIdValidator.getErrors().length > 0) {
	    return NextResponse.json({ errors: ['Invalid builder id'] }, { status: 400 });
	  }
	
	  const conn = await MongoConnect();
	  const builderService = new BuilderService(conn);
	
	  try {
	    const builder = await builderService.getBuilder(id);
	    if (!builder) {
	      return NextResponse.json({ errors: ['Builder not found'] }, { status: 400 });
	    }
	
	    await builderService.deleteBuilder(id);
	
	    const imageUrl = builder.get('imageUrl') as string;
	    const storageFactory = new StorageFactory('s3');
	
	    if (!!imageUrl.trim()) {
	      await storageFactory.getStorage().removeFile(imageUrl);
	    }
	    return NextResponse.json({ success: true }, { status: 200 });
	  } catch (error) {
	    return NextResponse.json({ errors: [error] }, { status: 400 });
	  }
	}

```

src/hooks/useConfig.ts```ts
	import { useContext } from 'react';
	import { ConfigContext } from 'contexts/ConfigContext';
	
	// ==============================|| CONFIG - HOOKS ||============================== //
	
	const useConfig = () => useContext(ConfigContext);
	
	export default useConfig;

```

src/hooks/useLocalStorage.ts```ts
	import { useState, useEffect } from 'react';
	
	// ==============================|| LOCAL STORAGE HOOKS ||============================== //
	
	export default function useLocalStorage<ValueType>(key: string, defaultValue: ValueType) {
	  const [value, setValue] = useState(() => {
	    const storedValue = localStorage.getItem(key);
	    return storedValue === null ? defaultValue : JSON.parse(storedValue);
	  });
	
	  useEffect(() => {
	    const listener = (e: StorageEvent) => {
	      if (e.storageArea === localStorage && e.key === key) {
	        setValue(e.newValue ? JSON.parse(e.newValue) : e.newValue);
	      }
	    };
	    window.addEventListener('storage', listener);
	
	    return () => {
	      window.removeEventListener('storage', listener);
	    };
	  }, [key, defaultValue]);
	
	  const setValueInLocalStorage = (newValue: ValueType) => {
	    setValue((currentValue: any) => {
	      const result = typeof newValue === 'function' ? newValue(currentValue) : newValue;
	      localStorage.setItem(key, JSON.stringify(result));
	      return result;
	    });
	  };
	
	  return [value, setValueInLocalStorage];
	}

```

src/hooks/useAsync.ts```ts
	import { get } from 'lodash';
	import { useCallback, useEffect, useReducer, useRef } from 'react';
	import { ResponseError } from '@/types/response';
	import { error as notifyError } from '@/utils/notify';
	
	type Status = 'idle' | 'pending' | 'resolved' | 'rejected';
	
	interface State<T, E> {
	  status: Status;
	  data: T | null;
	  error: E | null;
	  showNotifOnError?: boolean;
	}
	
	export function useAsync<T = any, E = ResponseError>(initState?: Partial<State<T, E>> & { showNotifOnError?: boolean }) {
	  const mounted = useRef(false);
	  const countRef = useRef(0);
	  const initialStateRef = useRef<State<T, E>>({
	    status: 'idle' as Status,
	    data: null,
	    error: null,
	    showNotifOnError: true,
	    ...initState
	  });
	
	  const [state, _setState] = useReducer((s: State<T, E>, a: Partial<State<T, E>>) => ({ ...s, ...a }), initialStateRef.current);
	
	  useEffect(() => {
	    mounted.current = true;
	    return () => {
	      mounted.current = false;
	    };
	  }, []);
	
	  const setState = useCallback((args: Partial<State<T, E>>) => (mounted.current ? _setState(args) : void 0), [_setState]);
	
	  const reset = useCallback(() => {
	    countRef.current = 0;
	    setState(initialStateRef.current);
	  }, [setState]);
	
	  const execute = useCallback(
	    (asyncFn: Promise<T>) => {
	      countRef.current = countRef.current + 1;
	      setState({ status: 'pending' });
	      return asyncFn.then(
	        (data) => {
	          setState({ data, status: 'resolved', error: null });
	          return data;
	        },
	        (error) => {
	          setState({ status: 'rejected', data: null, error });
	          if (state.showNotifOnError) {
	            notifyError(error.errors[0]);
	          }
	          return Promise.reject(Error);
	        }
	      );
	    },
	    [setState, state.showNotifOnError]
	  );
	
	  const request = useCallback(
	    async (asyncFn: Promise<T>): Promise<{ data: T | null; error: boolean }> => {
	      return new Promise((resolve) => {
	        execute(asyncFn)
	          .then((res) => {
	            resolve({
	              data: get(res, 'data') as T,
	              error: false
	            });
	          })
	          .catch(() => {
	            resolve({
	              data: null,
	              error: true
	            });
	          });
	      });
	    },
	    [execute]
	  );
	
	  return {
	    isIdle: state.status === 'idle',
	    isLoading: state.status === 'pending',
	    isError: state.status === 'rejected',
	    isSuccess: state.status === 'resolved',
	    setState,
	    ...state,
	    execute,
	    reset,
	    count: countRef.current,
	    request
	  };
	}

```

src/hooks/useUploadFile.ts```ts
	import { useIntl } from 'react-intl';
	
	// projects import
	import { uploadFile } from 'utils/services/upload';
	import { FolderName } from 'utils/enums';
	import { useAsync } from 'hooks/useAsync';
	import * as notify from 'utils/notify';
	import { MAX_FILE_SIZE } from '@/constant';
	export interface IUploadFile {
	  file: File;
	  folder: FolderName;
	  onSuccess?: (file: { url: string }) => void;
	  onError?: () => void;
	}
	
	const useUploadFile = () => {
	  const { isLoading, request, ...rest } = useAsync();
	  const { formatMessage } = useIntl();
	
	  const triggerUpload = async (params: IUploadFile) => {
	    const { file, onSuccess, onError, folder } = params;
	    if (!file) return;
	    const { size } = file;
	    const sizeMB = size / 1024 / 1024;
	
	    if (sizeMB > MAX_FILE_SIZE) {
	      notify.error(formatMessage({ id: 'maxSizeFileUpload' }, { size: MAX_FILE_SIZE }));
	      return;
	    }
	
	    const result = await request(
	      uploadFile({
	        file,
	        folder
	      })
	    );
	
	    if (result?.error && onError) {
	      onError();
	    }
	
	    if (!result.error && onSuccess) {
	      onSuccess({
	        url: result.data.url
	      });
	    }
	
	    return result;
	  };
	
	  return {
	    isUploading: isLoading,
	    ...rest,
	    triggerUpload
	  };
	};
	
	export default useUploadFile;

```

src/hooks/useScriptRef.ts```ts
	'use client';
	
	import { useEffect, useRef } from 'react';
	
	// ==============================|| ELEMENT REFERENCE HOOKS ||============================== //
	
	const useScriptRef = () => {
	  const scripted = useRef(true);
	
	  useEffect(
	    () => () => {
	      scripted.current = false;
	    },
	    []
	  );
	
	  return scripted;
	};
	
	export default useScriptRef;

```

src/hooks/useCommonValidates.ts```ts
	import { useIntl } from 'react-intl';
	import { isUndefined } from 'lodash';
	import * as Yup from 'yup';
	
	const useCommonValidates = () => {
	  const { formatMessage } = useIntl();
	
	  return {
	    password: ({ isRequired = false } = {}) => {
	      const commonRules = Yup.string().min(8, formatMessage({ id: 'minLengthValidateMessage' }, { number: 8 }));
	
	      if (isRequired) {
	        return commonRules.required(formatMessage({ id: 'requiredValidateMessage' }));
	      }
	
	      return commonRules;
	    },
	    confirmPassword: ({ passwordFieldName = 'password', isRequired = false } = {}) => {
	      const commonRules = Yup.string()
	        .min(8, formatMessage({ id: 'minLengthValidateMessage' }, { number: 8 }))
	        .oneOf([Yup.ref(passwordFieldName), ''], formatMessage({ id: 'passwordsMustMatch' }));
	
	      if (isRequired) {
	        return commonRules.required(formatMessage({ id: 'requiredValidateMessage' }));
	      }
	
	      return commonRules;
	    },
	    email: ({ isRequired = false } = {}) => {
	      const commonRules = Yup.string()
	        .email(formatMessage({ id: 'emailFormatValidateMessage' }))
	        .max(255, formatMessage({ id: 'maxLengthValidateMessage' }, { number: 255 }));
	
	      if (isRequired) {
	        return commonRules.required(formatMessage({ id: 'requiredValidateMessage' }));
	      }
	
	      return commonRules;
	    },
	    text: ({ isRequired = false, maxLength = 255 } = {}) => {
	      const commonRules = Yup.string().max(maxLength, formatMessage({ id: 'maxLengthValidateMessage' }, { number: maxLength }));
	
	      if (isRequired) {
	        return commonRules.required(formatMessage({ id: 'requiredValidateMessage' }));
	      }
	
	      return commonRules;
	    },
	    array: ({ isRequired = false } = {}) => {
	      const commonRules = Yup.array().min(1, formatMessage({ id: 'requiredValidateMessage' }));
	      if (isRequired) {
	        return commonRules.required(formatMessage({ id: 'requiredValidateMessage' }));
	      }
	
	      return commonRules;
	    },
	    phoneNumber: ({ isRequired = true }) => {
	      const commonRules = Yup.string()
	        .min(10, formatMessage({ id: 'minLengthValidateMessage' }, { number: 10 }))
	        .max(11, formatMessage({ id: 'maxLengthValidateMessage' }, { number: 11 }));
	      if (isRequired) {
	        return commonRules.required(formatMessage({ id: 'requiredValidateMessage' }));
	      }
	
	      return commonRules;
	    },
	    number: ({ isRequired = false, max = undefined, min = undefined } = {}) => {
	      let commonRules = Yup.number().typeError(formatMessage({ id: 'validateNumberMessage' }));
	
	      if (!isUndefined(max)) {
	        commonRules = commonRules.max(max);
	      }
	
	      if (!isUndefined(min)) {
	        commonRules = commonRules.min(min);
	      }
	
	      if (isRequired) {
	        return commonRules.required(formatMessage({ id: 'requiredValidateMessage' }));
	      }
	
	      return commonRules;
	    }
	  };
	};
	
	export default useCommonValidates;

```

src/utils/enums.ts```ts
	export enum UserStatus {
	  ACTIVE = 'active',
	  INACTIVE = 'inactive',
	  DELETED = 'deleted',
	  LOCKED = 'locked',
	  SUSPENDED = 'suspended'
	}
	
	export enum ErrorLoggIn {
	  INVALID_CREDENTIALS = 'invalid credentials',
	  USER_NOT_FOUND = 'user not found',
	  USER_NOT_CONFIRMED = 'user not confirmed',
	  USER_NOT_ACTIVE = 'user not active',
	  USER_LOCKED = 'user locked',
	  MAX_FAILED_ATTEMPTS = 'max failed attempts'
	}
	
	export enum FolderName {
	  BUILDERS = 'builders',
	  USERS = 'users',
	  PROJECTS = 'projects',
	  CONTRACTORS = 'contractors'
	}
	
	export enum AuthProvider {
	  GOOGLE = 'google',
	  REGISTER = 'register'
	}
	
	export enum Actions {
	  DELETE = 'delete',
	  ACTIVATE = 'activate',
	  DEACTIVATE = 'deactivate',
	  ARCHIVE = 'archive'
	}

```

src/utils/common.ts```ts
	/**
	 * @license
	 * Copyright 2024 J2C
	 */
	
	import {
	  ADD_SUCCESS,
	  EDIT_SUCCESS,
	  EDIT_ROLES_SUCCESS,
	  EDIT_BUDGETS_SUCCESS,
	  DELETE_SUCCESS,
	  ADD_ERROR,
	  EDIT_ERROR,
	  EDIT_ROLES_ERROR,
	  EDIT_BUDGETS_ERROR,
	  DELETE_ERROR
	} from '@/utils/constant';
	
	export const MAX_ROWS = Object.freeze({
	  XS: 1,
	  S: 3,
	  M: 5,
	  L: 10,
	  XL: 20
	});
	
	export const PROJECTS_ENUM = Object.freeze({
	  none: 0,
	  add: 1,
	  edit: 2,
	  editRoles: 3,
	  editProjectContractors: 4,
	  addBudget: 5,
	  importBudgets: 6,
	  addInvoice: 7,
	  editInvoice: 8,
	  delete: 9,
	  addBuilder: 10,
	  editBuilder: 11,
	  addContractor: 12,
	  editContractor: 13
	});
	
	export const PAGE_ENUM = Object.freeze({
	  builder: 0,
	  project: 1,
	  contractor: 2
	});
	
	export const SUCCESS_MAP: { [key: number]: string } = {
	  [PROJECTS_ENUM.add]: ADD_SUCCESS,
	  [PROJECTS_ENUM.edit]: EDIT_SUCCESS,
	  [PROJECTS_ENUM.editRoles]: EDIT_ROLES_SUCCESS,
	  [PROJECTS_ENUM.addBudget]: EDIT_BUDGETS_SUCCESS,
	  [PROJECTS_ENUM.importBudgets]: EDIT_BUDGETS_SUCCESS,
	  [PROJECTS_ENUM.delete]: DELETE_SUCCESS
	};
	
	export const ERROR_MAP: { [key: number]: string } = {
	  [PROJECTS_ENUM.add]: ADD_ERROR,
	  [PROJECTS_ENUM.edit]: EDIT_ERROR,
	  [PROJECTS_ENUM.editRoles]: EDIT_ROLES_ERROR,
	  [PROJECTS_ENUM.addBudget]: EDIT_BUDGETS_ERROR,
	  [PROJECTS_ENUM.importBudgets]: EDIT_BUDGETS_ERROR,
	  [PROJECTS_ENUM.delete]: DELETE_ERROR
	};
	
	export const ROLE_LEVEL_ENUM_GENERAL = Object.freeze({
	  max: 500,
	  admin: 500,
	  power: 300,
	  basic: 100,
	  min: 100,
	  none: 0
	});
	
	export const ROLE_ARRAY_GENERAL = [
	  ROLE_LEVEL_ENUM_GENERAL.admin,
	  ROLE_LEVEL_ENUM_GENERAL.power,
	  ROLE_LEVEL_ENUM_GENERAL.basic,
	  ROLE_LEVEL_ENUM_GENERAL.none
	];
	
	export const ROLE_LEVEL_ENUM_BUILDER = Object.freeze({
	  max: 500,
	  approver0: 500,
	  approver1: 400,
	  approver2: 300,
	  approver3: 200,
	  approver4: 100,
	  min: 100,
	  none: 0
	});
	
	export const ROLE_ARRAY_BUILDER = [
	  ROLE_LEVEL_ENUM_BUILDER.approver0,
	  ROLE_LEVEL_ENUM_BUILDER.approver1,
	  ROLE_LEVEL_ENUM_BUILDER.approver2,
	  ROLE_LEVEL_ENUM_BUILDER.approver3,
	  ROLE_LEVEL_ENUM_BUILDER.approver4,
	  ROLE_LEVEL_ENUM_BUILDER.none
	];
	
	export const ROLE_TARGET_TYPE_ENUM = Object.freeze({
	  none: 0,
	  projectBuilder: 1,
	  projectContractor: 2,
	  builderEmail: 3,
	  contractorEmail: 4,
	  projectEmail: 5
	});
	
	export const CSV_COMPANY_ENUM = Object.freeze({
	  companyId: 0,
	  highestRole: 1,
	  companyName: 2
	});
	
	export const INVOICE_STATUS_ENUM = Object.freeze({
	  open: 0,
	  approved: 1,
	  rejected: 2
	});
	
	export const BUDGET_ENUM = Object.freeze({
	  budgetCode: 0,
	  budgetCategory: 1,
	  budgetOriginalBudget: 2,
	  budgetCurrentBudget: 3,
	  maxCount: 4
	});

```

src/utils/api.ts```ts
	const APIS = {
	  GET_BUILDER_PROJECTS: '/projects',
	  GET_CONTRACTORS: '/contractor/list',
	  CREATE_CONTRACTOR: '/contractor/create',
	  UPDATE_CONTRACTOR: '/contractor/update',
	  DELETE_CONTRACTOR: '/contractor/delete',
	  UPSERT_PROJECT: '/projects/upsert',
	  PROJECT_ADD_BUDGET: '/projects/add-budget',
	  BUILDERS: '/builder',
	  GET_USERS: '/user/list',
	  GET_USER_DETAIL: '/user/:id',
	  CREATE_USER: '/user/create',
	  UPDATE_USER: '/user/update',
	  DELETE_USER: '/user/delete',
	  UPDATE_PROJECT_ROLES: '/projects/update-project-roles',
	  IMPORT_PROJECT_BUDGET: '/projects/import-project-budget',
	  UPDATE_CONTRACTOR_ROLE: '/contractors/update-contractor-role',
	  UPSERT_INVOICE: '/invoices/upsert',
	  UPDATE_PROJECT_CONTRACTORS: '/projects/update-project-contractors',
	  REGISTER: '/auth/register',
	  UPDATE_PROFILE: '/profile/update/:id',
	  CHANGE_PASSWORD: '/profile/change-password/:id',
	  GET_PROFILE: '/profile',
	  SEND_CODE: '/auth/code/send',
	  VERIFY_CODE: '/auth/code/verify',
	  RESET_PASSWORD: '/auth/reset-password',
	  UPLOAD_FILE: '/file/upload',
	  GET_PROJECTS: '/project/list',
	  GET_PROJECT_ROLES: '/project/:id/roles',
	  GET_PROJECT_CONTRACTORS: '/project/:id/contractors',
	  GET_PROJECT_BUDGETS: '/project/:id/budgets',
	  GET_PROJECT_INVOICES: '/project/:id/invoices',
	  CREATE_PROJECT: '/project/create',
	  GET_PROJECT: '/project/:id',
	  UPDATE_PROJECT: '/project/:id',
	  DELETE_PROJECT: '/project/:id'
	};
	
	export default APIS;

```

src/utils/email.ts```ts
	export const showPartialEmail = (email: string): string => {
	  if (!email) return '';
	  return email.replace(/(\w{3})[\w.-]+@([\w.]+\w)/, '$1***@$2');
	};

```

src/utils/notify.ts```ts
	// store
	import { dispatch } from 'store';
	import { openSnackbar } from 'store/slices/snackbar';
	
	export const error = (message: string) => {
	  dispatch(
	    openSnackbar({
	      open: true,
	      message: message,
	      variant: 'alert',
	      alert: {
	        color: 'error',
	        severity: 'error'
	      },
	      close: false
	    })
	  );
	};
	
	export const success = (message: string) => {
	  dispatch(
	    openSnackbar({
	      open: true,
	      message: message,
	      variant: 'alert',
	      alert: {
	        color: 'success',
	        severity: 'success'
	      },
	      close: false
	    })
	  );
	};
	
	export const warning = (message: string) => {
	  dispatch(
	    openSnackbar({
	      open: true,
	      message: message,
	      variant: 'alert',
	      alert: {
	        color: 'warning',
	        severity: 'warning'
	      },
	      close: false
	    })
	  );
	};
	
	export const info = (message: string) => {
	  dispatch(
	    openSnackbar({
	      open: true,
	      message: message,
	      variant: 'alert',
	      alert: {
	        color: 'info',
	        severity: 'info'
	      },
	      close: false
	    })
	  );
	};

```

src/utils/helper.ts```ts
	/**
	 * @license
	 * Copyright 2024 J2C
	 */
	
	import React, { Dispatch } from 'react';
	import { CSV_SEP, GST_RATE, HOLDBACK_RATE, PST_RATE } from '@/utils/constant';
	import { CSV_COMPANY_ENUM, ROLE_LEVEL_ENUM_BUILDER, ROLE_LEVEL_ENUM_GENERAL, ROLE_TARGET_TYPE_ENUM } from '@/utils/common';
	import { BuilderRequestType } from './dtos/builder.dto';
	import { IRequestFilter } from '@/types/request';
	
	interface FormFields {
	  [key: string]: any;
	}
	
	export const updateFormField = (setFormFields: Dispatch<any>, event: React.ChangeEvent<HTMLInputElement>, field: string) => {
	  setFormFields((prevState: FormFields) => ({
	    ...prevState,
	    [field]: event.target.value
	  }));
	};
	
	export const updateFormFieldInt = (setFormFields: Dispatch<any>, event: React.ChangeEvent<HTMLInputElement>, field: string) => {
	  const targetValue = event.target.value;
	
	  if (targetValue.match(/[^0-9]/)) {
	    // setError('Forbidden character: %<>$'\'')
	    return;
	  }
	
	  setFormFields((prevState: FormFields) => ({
	    ...prevState,
	    [field]: event.target.value
	  }));
	};
	
	export const updateFormFieldFloat = (setFormFields: Dispatch<any>, event: React.ChangeEvent<HTMLInputElement>, field: string) => {
	  const targetValue = event.target.value;
	
	  if (targetValue.match(/[^\.0-9]/)) {
	    // setError('Forbidden character: %<>$'\'')
	    return;
	  }
	
	  setFormFields((prevState: FormFields) => ({
	    ...prevState,
	    [field]: event.target.value
	  }));
	};
	
	export const updateFormFieldChecked = (setFormFields: Dispatch<any>, event: React.ChangeEvent<HTMLInputElement>, field: string) => {
	  setFormFields((prevState: FormFields) => ({
	    ...prevState,
	    [field]: event.target.checked
	  }));
	};
	
	export const getCookie = (name: string, cookie: string | null) => {
	  if (!cookie) {
	    return null;
	  }
	
	  const cookieValue = `; ${cookie}`;
	  const parts = cookieValue.split(`; ${name}=`);
	
	  if (parts.length === 2) {
	    return parts.pop()?.split(';').shift();
	  }
	
	  return null;
	};
	
	export function calculateInvoiceTotal(
	  invoiceSubtotal: number,
	  invoiceGst: number,
	  invoiceGstOverride: any,
	  invoicePst: number,
	  invoicePstOverride: any,
	  invoiceHoldbackEnabled: any
	) {
	  return (
	    invoiceSubtotal * 1 +
	    (invoiceGstOverride ? invoiceGst * 1 : invoiceSubtotal * GST_RATE) +
	    (invoicePstOverride ? invoicePst * 1 : invoiceSubtotal * PST_RATE) +
	    (invoiceHoldbackEnabled ? invoiceSubtotal * HOLDBACK_RATE : 0)
	  );
	}
	
	export function getCsvCompanyFieldValue(csvCompany: string | null, index: number) {
	  if (!csvCompany) {
	    return '';
	  }
	
	  let result = '';
	  const firstIndex = csvCompany.indexOf(CSV_SEP);
	  switch (index) {
	    case CSV_COMPANY_ENUM.companyId:
	      result = csvCompany.substring(0, firstIndex);
	      break;
	    case CSV_COMPANY_ENUM.highestRole:
	      result = csvCompany.substring(firstIndex + 1, csvCompany.indexOf(CSV_SEP, firstIndex + 1));
	      break;
	    case CSV_COMPANY_ENUM.companyName:
	      result = csvCompany.substring(csvCompany.indexOf(CSV_SEP, firstIndex + 1) + 1);
	      break;
	  }
	  return result;
	}
	
	export function getRoleNameBuilder(roleLevelEnum: number) {
	  let result = '';
	  switch (roleLevelEnum) {
	    case ROLE_LEVEL_ENUM_BUILDER.approver0:
	      result = 'Approver_0';
	      break;
	    case ROLE_LEVEL_ENUM_BUILDER.approver1:
	      result = 'Approver_1';
	      break;
	    case ROLE_LEVEL_ENUM_BUILDER.approver2:
	      result = 'Approver_2';
	      break;
	    case ROLE_LEVEL_ENUM_BUILDER.approver3:
	      result = 'Approver_3';
	      break;
	    case ROLE_LEVEL_ENUM_BUILDER.approver4:
	      result = 'Approver_4';
	      break;
	  }
	  return result;
	}
	
	export function getRoleNameGeneral(roleLevelEnum: number) {
	  let result = '';
	  switch (roleLevelEnum) {
	    case ROLE_LEVEL_ENUM_GENERAL.admin:
	      result = 'Admin';
	      break;
	    case ROLE_LEVEL_ENUM_GENERAL.power:
	      result = 'Power';
	      break;
	    case ROLE_LEVEL_ENUM_GENERAL.basic:
	      result = 'Basic';
	      break;
	    case ROLE_LEVEL_ENUM_GENERAL.none:
	      result = 'None';
	      break;
	  }
	  return result;
	}
	
	export const isEmaillRoleTypeEnum = (roleTypeEnum: number) => {
	  return roleTypeEnum >= ROLE_TARGET_TYPE_ENUM.builderEmail;
	};
	
	export const parsePayloadBuilderToCreateData = (formData: FormData): BuilderRequestType => {
	  const image = formData.get('image') as unknown as File;
	  const builderName = formData.get('builderName') as string;
	  const category = formData.get('category') as string;
	  const address = formData.get('address') as string;
	  const completionStatus = formData.get('completionStatus') as string;
	  return {
	    builderName,
	    category,
	    address,
	    completionStatus,
	    image
	  };
	};
	
	export const generateQueryFromFilter = (path: string, filter: IRequestFilter) => {
	  let newQuery = '';
	  const objQuery = Object.entries(filter);
	  const length = objQuery.length;
	  objQuery.forEach((item, index) => {
	    const [key, value] = item;
	    if (!!value) {
	      newQuery += `${key}=${value}`;
	      if (index < length - 1) {
	        newQuery += '&';
	      }
	    }
	  });
	  return path + '?' + newQuery;
	};

```

src/utils/constant.ts```ts
	import { IRequestFilter } from '@/types/request';
	
	export const DEFAULT_FILE_NAME: string = 'No file selected';
	export const ADD_SUCCESS: string = 'Project was successfully added!';
	export const ADD_ERROR: string = 'Project was not successfully added!';
	export const EDIT_SUCCESS: string = 'Project was successfully updated!';
	export const EDIT_ERROR: string = 'Project was not successfully updated!';
	export const EDIT_ROLES_SUCCESS: string = 'Project roles were successfully updated!';
	export const EDIT_ROLES_ERROR: string = 'Project roles were not successfully updated!';
	export const EDIT_BUDGETS_SUCCESS: string = 'Project budgets were successfully updated!';
	export const EDIT_BUDGETS_ERROR: string = 'Project budgets were not successfully updated!';
	export const DELETE_SUCCESS: string = 'Project successfully deleted!';
	export const DELETE_ERROR: string = 'Project not successfully deleted!';
	
	export const GST_RATE = 0.05;
	export const PST_RATE = 0.07;
	export const HOLDBACK_RATE = 0.1;
	export const CSV_SEP = ',';
	export const ROLE_REGEX_SEPARATOR = /[,;\n\s\t]+/;
	
	export const PAGINATE_PAGE_SIZE = 10;
	export const PAGINATE_OFFSET = 1;
	export const SORT_DIRECTION_DEFAULT = 'asc';
	export const SORT_FIELD_DEFAULT = '_id';
	
	export const API_FILTER_DEFAULT: IRequestFilter = {
	  sortBy: SORT_FIELD_DEFAULT,
	  sortDir: SORT_DIRECTION_DEFAULT,
	  filterBy: '',
	  limit: PAGINATE_PAGE_SIZE,
	  page: PAGINATE_OFFSET
	};

```

src/utils/password-strength.ts```ts
	/**
	 * Password validator for login pages
	 */
	import { NumbColorFunc, StringBoolFunc, StringNumFunc } from '../types';
	import value from '../scss/_themes-vars.module.scss';
	
	// has number
	const hasNumber: StringBoolFunc = (number) => new RegExp(/[0-9]/).test(number);
	
	// has mix of small and capitals
	const hasMixed: StringBoolFunc = (number) => new RegExp(/[a-z]/).test(number) && new RegExp(/[A-Z]/).test(number);
	
	// has special chars
	const hasSpecial: StringBoolFunc = (number) => new RegExp(/[!#@$%^&*)(+=._-]/).test(number);
	
	// set color based on password strength
	export const strengthColor: NumbColorFunc = (count) => {
	  if (count < 2) return { label: 'Poor', color: value.errorMain };
	  if (count < 3) return { label: 'Weak', color: value.warningDark };
	  if (count < 4) return { label: 'Normal', color: value.orangeMain };
	  if (count < 5) return { label: 'Good', color: value.successMain };
	  if (count < 6) return { label: 'Strong', color: value.successDark };
	  return { label: 'Poor', color: value.errorMain };
	};
	
	// password strength indicator
	export const strengthIndicator: StringNumFunc = (number) => {
	  let strengths = 0;
	  if (number.length > 5) strengths += 1;
	  if (number.length > 7) strengths += 1;
	  if (hasNumber(number)) strengths += 1;
	  if (hasSpecial(number)) strengths += 1;
	  if (hasMixed(number)) strengths += 1;
	  return strengths;
	};

```

src/utils/auth.ts```ts
	import { signOut as nextAuthSignOut, SignOutParams } from 'next-auth/react';
	
	export interface ISignOut extends SignOutParams {
	  onSuccess?: () => void;
	  onError?: (errorMessage: string) => void;
	}
	
	export const signOut = async (params: ISignOut) => {
	  const { onSuccess, onError, ...rest } = params;
	  try {
	    await nextAuthSignOut(rest);
	    if (onSuccess) {
	      onSuccess();
	    }
	  } catch (err) {
	    if (onError) {
	      onError((err as Error).message);
	    }
	  }
	};

```

src/utils/axios.ts```ts
	/**
	 * axios setup to use mock service
	 */
	
	import axios from 'axios';
	
	const axiosServices = axios.create({ baseURL: process.env.REACT_APP_API_URL as string });
	
	// interceptor for http
	axiosServices.interceptors.response.use(
	  (response) => response,
	  (error) => {
	    return Promise.reject((error.response && error.response.data) || 'Wrong Services');
	  }
	);
	
	export default axiosServices;

```

src/utils/services/builder.ts```ts
	import { IResponseCreateBuilder, IResponseDeleteBuilder, IResponseUpdateBuilder } from './../../types/response';
	import axiosServices from '../axios';
	import endPoints from '../api';
	import { IResponseListBuilders } from '@/types/response';
	import { IRequestFilter, IRequestUpdateBuilder } from '@/types/request';
	import { BuilderRequestType } from '../dtos/builder.dto';
	import { generateQueryFromFilter } from '../helper';
	
	export const getBuilders = async (params?: IRequestFilter) => {
	  const query = params ? generateQueryFromFilter(endPoints.BUILDERS, params) : endPoints.BUILDERS;
	  return await axiosServices.get<IResponseListBuilders>(query);
	};
	
	export const createBuilder = async (payload: BuilderRequestType) => {
	  const formData = new FormData();
	  formData.append('builderName', payload.builderName);
	  formData.append('address', payload.address);
	  formData.append('completionStatus', payload.completionStatus);
	  formData.append('category', payload.category);
	  !!payload?.image && formData.append('image', payload.image);
	  return await axiosServices.post<IResponseCreateBuilder>(endPoints.BUILDERS, formData);
	};
	
	export const updateBuilder = async (id: string, payload: IRequestUpdateBuilder) => {
	  const formData = new FormData();
	  !!payload?.builderName && formData.append('builderName', payload.builderName);
	  !!payload?.address && formData.append('address', payload.address);
	  !!payload?.completionStatus && formData.append('completionStatus', payload.completionStatus);
	  !!payload?.category && formData.append('category', payload.category);
	  !!payload?.image && formData.append('image', payload.image);
	  return await axiosServices.put<IResponseUpdateBuilder>(`${endPoints.BUILDERS}/${id}`, formData);
	};
	
	export const deleteBuilder = async (id: string) => {
	  return await axiosServices.delete<IResponseDeleteBuilder>(`${endPoints.BUILDERS}/${id}`);
	};

```

src/utils/services/contractor.ts```ts
	import axiosServices from '../axios';
	import endPoints from '../api';
	import {
	  IResponseCreateContractor,
	  IResponseDeleteContractor,
	  IResponseListContractors,
	  IResponseUpdateContractor
	} from '@/types/response';
	import { IRequestFilter } from '@/types/request';
	import { User } from '../dtos/user.dto';
	import { generateQueryFromFilter } from '../helper';
	
	export interface IContractor {
	  id: string;
	  contractorName: string;
	  service: string;
	  address: string;
	  completionStatus: string;
	  creatorId: Partial<User>;
	  creatorEmail: string;
	  budgetSeperatorComma: boolean;
	  budgetSeperatorSemiColon: boolean;
	  budgetSeperatorTab: boolean;
	  category: string;
	  currency: string;
	  date: Date;
	  dateCreate: Date;
	  dateModify: Date;
	  generalContractor: string;
	  imageUrl?: string;
	  items: string;
	  role0?: string;
	  role1?: string;
	  role2?: string;
	}
	
	// TODO: Should Remove
	export const CSV_SEP = ',';
	
	export async function getContractor(contractorId: string) {
	  return null;
	}
	
	export function getCsvCompanyFieldValue(csvCompany: any, index: number) {
	  return '';
	}
	/******************** */
	export const getContractors = async (filter?: IRequestFilter) => {
	  const query = filter ? generateQueryFromFilter(endPoints.GET_CONTRACTORS, filter) : endPoints.GET_CONTRACTORS;
	  return await axiosServices.get<IResponseListContractors>(query);
	};
	
	export const createContractor = async (payload: FormData) => {
	  return await axiosServices.post<IResponseCreateContractor>(endPoints.CREATE_CONTRACTOR, payload, {
	    headers: {
	      'Content-Type': 'multipart/form-data'
	    }
	  });
	};
	
	export const updateContractor = async (id: string, payload: FormData) => {
	  return await axiosServices.put<IResponseUpdateContractor>(`${endPoints.UPDATE_CONTRACTOR}/${id}`, payload);
	};
	
	export const deleteContractor = async (id: string) => {
	  return await axiosServices.delete<IResponseDeleteContractor>(`${endPoints.DELETE_CONTRACTOR}/${id}`);
	};

```

src/utils/services/upload.ts```ts
	import axios from '../axios';
	import endPoints from '../api';
	import { IRequestUpload } from 'types/request';
	
	export const uploadFile = async (params: IRequestUpload) => {
	  const formData = new FormData();
	  formData.append('file', params.file);
	  formData.append('folderName', params.folder);
	  return axios.post(endPoints.UPLOAD_FILE, formData, {
	    headers: {
	      'Content-Type': 'multipart/form-data'
	    }
	  });
	};

```

src/utils/services/user.ts```ts
	import axiosServices from '../axios';
	import endPoints from '../api';
	import { IResponseCreateUser, IResponseDeleteUser, IResponseListUsers, IResponseUpdateUser } from '@/types/response';
	import { IRequestCreateUser, IRequestUpdateUser } from '@/types/request';
	import { IUser } from '@/app/api/users/list/route';
	
	export const getUsers = async () => {
	  return await axiosServices.get<IResponseListUsers<IUser>>(endPoints.GET_USERS);
	};
	
	export const createUser = async (payload: IRequestCreateUser) => {
	  return await axiosServices.post<IResponseCreateUser>(endPoints.CREATE_USER, payload);
	};
	
	export const updateUser = async (id: string, payload: IRequestUpdateUser) => {
	  return await axiosServices.put<IResponseUpdateUser>(`${endPoints.UPDATE_USER}/${id}`, payload);
	};
	
	export const deleteUser = async (id: string) => {
	  return await axiosServices.delete<IResponseDeleteUser>(`${endPoints.DELETE_USER}/${id}`);
	};
	
	export const getUserDetail = async (id: string) => {
	  return await axiosServices.get<IResponseListUsers<IUser>>(endPoints.GET_USER_DETAIL.replace(':id', id));
	};

```

src/utils/services/auth.ts```ts
	import axios from '../axios';
	import endPoints from '../api';
	import {
	  IRequestRegister,
	  IRequestUpdateProfile,
	  IRequestVerifyCode,
	  IRequestSendCode,
	  IRequestResetPassword,
	  IRequestChangePassword,
	  IRequestChangeAvatar
	} from 'types/request';
	import { IResponseRegister, IResponseVerifyCode, IResponseSendCode, IResponseSuccessStatus } from 'types/response';
	
	export const register = async (user: IRequestRegister): Promise<IResponseRegister> => {
	  const res: IResponseRegister = await axios.post(endPoints.REGISTER, {
	    email: user.email,
	    name: user.name,
	    password: user.password
	  });
	
	  return res;
	};
	
	export const updateProfile = async (user: IRequestUpdateProfile): Promise<IResponseRegister> => {
	  if (!user?.id) return Promise.reject();
	  const url = endPoints.UPDATE_PROFILE.replace(':id', user.id);
	  const res: IResponseRegister = await axios.put(url, {
	    email: user.email,
	    name: user.name,
	    phoneNumber: user.phone,
	    birthDate: user.birthdayText || null,
	    company: user.company,
	    country: user.location
	  });
	
	  return res;
	};
	
	export const updateAvatar = async (params: IRequestChangeAvatar): Promise<IResponseRegister> => {
	  if (!params.id) return Promise.reject();
	  const url = endPoints.UPDATE_PROFILE.replace(':id', params.id);
	  const res: IResponseRegister = await axios.put(url, {
	    image: params.imageUrl,
	    name: params.name,
	    email: params.email
	  });
	
	  return res;
	};
	
	export const getProfile = async (): Promise<any> => {
	  const res: any = await axios.get(endPoints.GET_PROFILE);
	  return res?.data?.data;
	};
	
	export const changePassword = async (params: IRequestChangePassword): Promise<IResponseSuccessStatus> => {
	  if (!params?.password || !params?.id) return Promise.reject();
	
	  const url = endPoints.CHANGE_PASSWORD.replace(':id', params.id);
	  const res: IResponseSuccessStatus = await axios.put(url, {
	    newPassword: params.password,
	    oldPassword: params.oldPassword,
	    newPasswordConfirm: params.confirmPassword
	  });
	
	  return res;
	};
	
	export const verifyCode = async (params: IRequestVerifyCode): Promise<IResponseSuccessStatus> => {
	  if (!params?.email || !params?.code) return Promise.reject();
	
	  const res: IResponseVerifyCode = await axios.post(endPoints.VERIFY_CODE, {
	    email: params.email,
	    code: params.code
	  });
	
	  return res;
	};
	
	export const sendCode = async (params: IRequestSendCode): Promise<IResponseSuccessStatus> => {
	  if (!params?.email) return Promise.reject();
	
	  const res: IResponseSendCode = await axios.post(endPoints.SEND_CODE, {
	    email: params.email
	  });
	
	  return res;
	};
	
	export const resetPassword = async (params: IRequestResetPassword): Promise<IResponseSuccessStatus> => {
	  if (!params?.password) return Promise.reject();
	
	  const res: IResponseSendCode = await axios.post(endPoints.RESET_PASSWORD, {
	    password: params.password,
	    confirmPassword: params.confirmPassword,
	    email: params.email,
	    token: params.token
	  });
	
	  return res;
	};

```

src/utils/services/project.ts```ts
	import axios from '../axios';
	import endPoints from '../api';
	import { IResponseProjects, IResponseDeleteProject } from 'types/response';
	import { IRequestCreateProject, IRequestUpdateProject } from 'types/request';
	import { Project } from '@/utils/dtos/project.dto';
	import { IBudget } from '@/types/resource/budget';
	import { IInvoice } from '@/types/resource/invoice';
	
	export const getProjects = async (): Promise<IResponseProjects> => {
	  return axios.get(endPoints.GET_PROJECTS);
	};
	
	export const createProject = async (params: IRequestCreateProject): Promise<Project> => {
	  return axios.post(endPoints.CREATE_PROJECT, params);
	};
	
	export const getProject = async (id: string): Promise<Project> => {
	  return axios.get(endPoints.GET_PROJECT.replace(':id', id));
	};
	
	export const updateProject = async (params: IRequestUpdateProject): Promise<Project> => {
	  const { id, ...rest } = params;
	  return axios.put(endPoints.UPDATE_PROJECT.replace(':id', id), rest);
	};
	
	export const deleteProject = async (id: string): Promise<IResponseDeleteProject> => {
	  return axios.delete(endPoints.DELETE_PROJECT.replace(':id', id));
	};
	
	export const getProjectRoles = async (id: string): Promise<Project> => {
	  return axios.get(endPoints.GET_PROJECT_ROLES.replace(':id', id));
	};
	
	export const getProjectContractors = async (id: string): Promise<Project> => {
	  return axios.get(endPoints.GET_PROJECT_CONTRACTORS.replace(':id', id));
	};
	
	export const getProjectBudgets = async (id: string): Promise<IBudget[]> => {
	  return axios.get(endPoints.GET_PROJECT_BUDGETS.replace(':id', id));
	};
	
	export const getProjectInvoices = async (id: string): Promise<IInvoice[]> => {
	  return axios.get(endPoints.GET_PROJECT_INVOICES.replace(':id', id));
	};

```

src/utils/dtos/role.dto.ts```ts
	/**
	 * @license
	 * Copyright 2024 J2C
	 */
	
	import BaseDto from '@/utils/dtos/base.dto';
	import { ROLE_LEVEL_ENUM_BUILDER, ROLE_TARGET_TYPE_ENUM } from '@/utils/common';
	
	export type Role = {
	  dateCreate?: Date;
	  dateModify?: Date;
	  individualEmail?: string;
	  individualId?: string;
	  parentId?: string;
	  roleLevelEnum: number;
	  targetId: string;
	  targetTypeEnum: number;
	  roleName?: string;
	  roleEmails: string | undefined | null;
	};
	
	export default class RoleDto extends BaseDto {
	  dateCreate?: Date;
	  dateModify?: Date;
	  individualEmail?: string;
	  individualId?: string;
	  parentId?: string;
	  roleLevelEnum: number;
	  targetId: string;
	  targetTypeEnum: number;
	  roleName?: string;
	  roleEmails?: string | undefined | null;
	
	  constructor() {
	    super();
	    this.roleLevelEnum = ROLE_LEVEL_ENUM_BUILDER.none;
	    this.targetId = '';
	    this.targetTypeEnum = ROLE_TARGET_TYPE_ENUM.none;
	  }
	
	  public static fromObject(obj: Role): RoleDto {
	    const roleDto = new RoleDto();
	
	    roleDto.setData(obj);
	
	    return roleDto;
	  }
	
	  public static fromJSON(json: string): RoleDto {
	    return RoleDto.fromObject(JSON.parse(json));
	  }
	}

```

src/utils/dtos/builder.dto.ts```ts
	/**
	 * @license
	 * Copyright 2024 J2C
	 */
	
	import BaseDto from '@/utils/dtos/base.dto';
	import DateCustom from '@/utils/datetime/date.custom';
	import { User } from './user.dto';
	
	export type Builder = {
	  creatorEmail: string;
	  creatorId: object | string;
	  creator: Partial<User> | null;
	  address: string;
	  budgetSeperatorComma?: boolean;
	  budgetSeperatorSemiColon?: boolean;
	  budgetSeperatorTab?: boolean;
	  builderName: string;
	  category: string;
	  completionStatus: string;
	  date: Date;
	  dateCreate: Date;
	  dateModify: Date;
	  generalContractor?: string;
	  imageUrl?: string;
	  items?: string;
	  role0?: string;
	  role1?: string;
	  role2?: string;
	  role3?: string;
	  role4?: string;
	};
	
	export type BuilderRequestType = {
	  builderName: string;
	  category: string;
	  address: string;
	  completionStatus: string;
	  image?: File;
	};
	
	export default class BuilderDto extends BaseDto {
	  creatorEmail: string;
	  creatorId: string;
	  creator: Partial<User> | null;
	  address: string;
	  budgetSeperatorComma?: boolean;
	  budgetSeperatorSemiColon?: boolean;
	  budgetSeperatorTab?: boolean;
	  builderName: string;
	  category: string;
	  completionStatus: string;
	  date: Date;
	  dateCreate: Date;
	  dateModify: Date;
	  generalContractor?: string;
	  imageUrl?: string;
	  items?: string;
	  role0?: string;
	  role1?: string;
	  role2?: string;
	  role3?: string;
	  role4?: string;
	
	  constructor() {
	    super();
	    this.creatorEmail = '';
	    this.creatorId = '';
	    this.creator = null;
	    this.address = '';
	    this.budgetSeperatorComma = false;
	    this.budgetSeperatorSemiColon = false;
	    this.budgetSeperatorTab = false;
	    this.builderName = '';
	    this.category = '';
	    this.completionStatus = '';
	    this.date = new DateCustom();
	    this.dateCreate = new DateCustom();
	    this.dateModify = new DateCustom();
	    this.generalContractor = '';
	    this.imageUrl = '';
	    this.items = '';
	  }
	
	  public static fromObject(obj: Builder): BuilderDto {
	    const builderDTO = new BuilderDto();
	
	    builderDTO.setData(obj);
	
	    return builderDTO;
	  }
	
	  public static fromJSON(json: string): BuilderDto {
	    return BuilderDto.fromObject(JSON.parse(json));
	  }
	}

```

src/utils/dtos/contractor.dto.ts```ts
	/**
	 * @license
	 * Copyright 2024 J2C
	 */
	
	import BaseDto from '@/utils/dtos/base.dto';
	import DateCustom from '@/utils/datetime/date.custom';
	
	export type Contractor = {
	  creatorEmail: string;
	  creatorId: string;
	  address: string;
	  budgetSeperatorComma: boolean;
	  budgetSeperatorSemiColon: boolean;
	  budgetSeperatorTab: boolean;
	  category: string;
	  completionStatus: string;
	  contractorName: string;
	  currency: string;
	  date: Date;
	  dateCreate: Date;
	  dateModify: Date;
	  generalContractor: string;
	  imageUrl?: string | null;
	  items: string;
	  role0?: string;
	  role1?: string;
	  role2?: string;
	};
	
	export default class ContractorDto extends BaseDto {
	  creatorEmail: string;
	  creatorId: string;
	  address: string;
	  budgetSeperatorComma: boolean = false;
	  budgetSeperatorSemiColon: boolean = false;
	  budgetSeperatorTab: boolean = false;
	  category: string;
	  completionStatus: string;
	  contractorName: string;
	  currency: string;
	  date: Date = new DateCustom();
	  dateCreate: Date = new DateCustom();
	  dateModify: Date = new DateCustom();
	  generalContractor: string;
	  imageUrl?: string | null = null;
	  items: string;
	  role0?: string;
	  role1?: string;
	  role2?: string;
	
	  constructor() {
	    super();
	    this.creatorEmail = '';
	    this.creatorId = '';
	    this.address = '';
	    this.category = ' ';
	    this.completionStatus = '';
	    this.contractorName = '';
	    this.currency = ' ';
	    this.generalContractor = ' ';
	    this.items = ' ';
	    this.imageUrl = ' ';
	  }
	
	  public static fromObject(obj: Contractor): ContractorDto {
	    const contractorDto = new ContractorDto();
	
	    contractorDto.setData(obj);
	
	    return contractorDto;
	  }
	
	  public static fromJSON(json: string): ContractorDto {
	    return ContractorDto.fromObject(JSON.parse(json));
	  }
	}

```

src/utils/dtos/budget.dto.ts```ts
	/**
	 * @license
	 * Copyright 2024 J2C
	 */
	
	import BaseDto from '@/utils/dtos/base.dto';
	
	export type Budget = {
	  creatorId: string;
	  projectId: string;
	  creatorEmail: string;
	  budgetAdditionalFields: Array<string>;
	  budgetCategory: string;
	  budgetCode: string;
	  budgetCurrentBudget: number;
	  budgetCurrentClaim: number;
	  budgetDescription?: string;
	  budgetIndex: number;
	  budgetOriginalBudget: number;
	  budgetRevision: number;
	  budgetTotalClaim: number;
	  budgetTotalClaimBeforeHoldback: number;
	  budgetTotalClaimPercentage: number;
	  budgetTotalHoldback: number;
	  dateCreate: Date;
	  dateModify: Date;
	};
	
	export default class BudgetDto extends BaseDto {
	  creatorId: string;
	  projectId: string;
	  creatorEmail: string;
	  budgetAdditionalFields: Array<string>;
	  budgetCategory: string;
	  budgetCode: string;
	  budgetCurrentBudget: number;
	  budgetCurrentClaim: number;
	  budgetDescription?: string;
	  budgetIndex: number;
	  budgetOriginalBudget: number;
	  budgetRevision: number;
	  budgetTotalClaim: number;
	  budgetTotalClaimBeforeHoldback: number;
	  budgetTotalClaimPercentage: number;
	  budgetTotalHoldback: number;
	  dateCreate: Date;
	  dateModify: Date;
	
	  constructor() {
	    super();
	    this.creatorId = '';
	    this.projectId = '';
	    this.creatorEmail = '';
	    this.budgetAdditionalFields = [];
	    this.budgetCategory = '';
	    this.budgetCode = '';
	    this.budgetCurrentBudget = 0;
	    this.budgetCurrentClaim = 0;
	    this.budgetIndex = 0;
	    this.budgetOriginalBudget = 0;
	    this.budgetRevision = 0;
	    this.budgetTotalClaim = 0;
	    this.budgetTotalClaimBeforeHoldback = 0;
	    this.budgetTotalClaimPercentage = 0;
	    this.budgetTotalHoldback = 0;
	    this.dateCreate = new Date();
	    this.dateModify = new Date();
	  }
	
	  public static fromObject(obj: Budget): BudgetDto {
	    const budgetDto = new BudgetDto();
	
	    budgetDto.setData(obj);
	
	    return budgetDto;
	  }
	
	  public static fromJSON(json: string): BudgetDto {
	    return BudgetDto.fromObject(JSON.parse(json));
	  }
	}

```

src/utils/dtos/user.dto.ts```ts
	/**
	 * @license
	 * Copyright 2024 J2C
	 */
	
	import BaseDto from '@/utils/dtos/base.dto';
	import { UserStatus } from '@/utils/enums';
	import DateCustom from '@/utils/datetime/date.custom';
	
	export type User = {
	  email: string;
	  name: string;
	  password: string | null;
	  emailConfirmed: boolean;
	  confirmationToken: string | null;
	  passwordResetToken: string | null;
	  imageUrl: string | null;
	  company: string | null;
	  country: string | null;
	  phoneNumber: string | null;
	  birthDate: Date | null;
	  isContractor: boolean;
	  status: UserStatus;
	  selectedContractorId: string | null;
	  selectedBuilderId: string | null;
	  failedLoginAttempts: number;
	  accountLockedUntil: Date | null;
	  lastLogin: Date | null;
	  dateCreate: Date;
	  dateModify: Date;
	};
	
	export default class UserDto extends BaseDto {
	  email: string = '';
	  name: string = '';
	  password: string | null = null;
	  emailConfirmed: boolean = false;
	  confirmationToken: string | null = null;
	  passwordResetToken: string | null = null;
	  imageUrl: string | null = null;
	  company: string | null = null;
	  country: string | null = null;
	  phoneNumber: string | null = null;
	  birthDate: Date | null = null;
	  isContractor: boolean = false;
	  status: UserStatus = UserStatus.ACTIVE;
	  selectedContractorId: string | null = null;
	  selectedBuilderId: string | null = null;
	  failedLoginAttempts: number = 0;
	  accountLockedUntil: Date | null = null;
	  lastLogin: Date | null = null;
	  dateCreate: Date = new DateCustom();
	  dateModify: Date = new DateCustom();
	
	  constructor() {
	    super();
	  }
	
	  public static fromObject(obj: User): UserDto {
	    const userDto = new UserDto();
	
	    userDto.setData(obj);
	
	    return userDto;
	  }
	
	  public static fromJSON(json: string): UserDto {
	    return UserDto.fromObject(JSON.parse(json));
	  }
	}

```

src/utils/dtos/project.dto.ts```ts
	/**
	 * @license
	 * Copyright 2024 J2C
	 */
	
	import BaseDto from '@/utils/dtos/base.dto';
	
	export type Project = {
	  address: string;
	  amount?: number;
	  builderId: string;
	  category: string;
	  completionStatus: string;
	  creatorEmail: string;
	  creatorId: string;
	  currency: string;
	  currentClaimNumber: string;
	  budgetSeperatorComma: boolean;
	  budgetSeperatorSemiColon: boolean;
	  budgetSeperatorTab: boolean;
	  startDate: Date | null;
	  date: Date;
	  dateCreate: Date;
	  dateModify: Date;
	  imageBucket?: string;
	  imageUrl?: string;
	  items: string;
	  projectName: string;
	  role0?: string;
	  role1?: string;
	  role2?: string;
	  role3?: string;
	  role4?: string;
	  roleProjectContractors?: string;
	};
	
	export default class ProjectDto extends BaseDto {
	  address: string;
	  amount?: number;
	  builderId: string;
	  category: string;
	  completionStatus: string;
	  creatorEmail: string;
	  creatorId: string;
	  currency: string;
	  currentClaimNumber: string;
	  budgetSeperatorComma: boolean;
	  budgetSeperatorSemiColon: boolean;
	  budgetSeperatorTab: boolean;
	  flowPublishedAt: Date;
	  date: Date;
	  startDate: Date | null;
	  dateCreate: Date;
	  dateModify: Date;
	  imageBucket: string;
	  imageUrl?: string;
	  items: string;
	  projectName: string;
	  role0?: string;
	  role1?: string;
	  role2?: string;
	  role3?: string;
	  role4?: string;
	  roleProjectContractors?: string;
	
	  constructor() {
	    super();
	    this.address = '';
	    this.amount = 0;
	    this.builderId = '';
	    this.category = '';
	    this.completionStatus = '';
	    this.creatorEmail = '';
	    this.creatorId = '';
	    this.currency = '';
	    this.currentClaimNumber = '';
	    this.budgetSeperatorComma = false;
	    this.budgetSeperatorSemiColon = false;
	    this.budgetSeperatorTab = false;
	    this.flowPublishedAt = new Date();
	    this.date = new Date();
	    this.dateCreate = new Date();
	    this.dateModify = new Date();
	    this.startDate = new Date();
	    this.imageBucket = '';
	    this.items = '';
	    this.projectName = '';
	  }
	
	  public static fromObject(obj: Project): ProjectDto {
	    const projectDto = new ProjectDto();
	
	    projectDto.setData(obj);
	
	    return projectDto;
	  }
	
	  public static fromJSON(json: string): ProjectDto {
	    return ProjectDto.fromObject(JSON.parse(json));
	  }
	}

```

src/utils/dtos/base.dto.ts```ts
	/**
	 * @license
	 * Copyright 2024 J2C
	 */
	import { DTO } from '@/utils/dtos/types/dto.type';
	import DateCustom from '@/utils/datetime/date.custom';
	
	export default abstract class BaseDto {
	  public _id: object | string;
	
	  protected constructor() {
	    this._id = '';
	  }
	
	  public setData(data: DTO | any): void {
	    const keys = Object.keys(data);
	
	    keys.forEach((key) => {
	      if (key === 'id') {
	        // @ts-ignore
	        this['_id'] = data.id;
	      }
	
	      if (this.hasOwnProperty(key)) {
	        // @ts-ignore
	        this[key] = data[key];
	      }
	    });
	  }
	
	  public toObject(): DTO & { id: string } {
	    return this.recursiveCovertToDto(this) as DTO & { id: string };
	  }
	
	  public toJSON(): string {
	    return JSON.stringify(this.toObject());
	  }
	
	  private recursiveCovertToDto(data: any): any {
	    // If data is not an object, return it
	    if (!data || typeof data !== 'object') {
	      return data;
	    }
	
	    // Convert Date to string
	    if (data instanceof Date) {
	      return new DateCustom(data).toString();
	    }
	
	    // Convert array of data
	    if (Array.isArray(data)) {
	      const _this = this;
	      // Check if data is an array
	      return data.map((item) => _this.recursiveCovertToDto(item));
	    }
	
	    const dto = { ...data };
	
	    // Convert _id to id
	    if (dto._id) {
	      dto.id = dto._id.toString();
	      delete dto._id;
	    }
	
	    // Remove _id if it is empty
	    if (!dto._id) {
	      delete dto._id;
	    }
	
	    for (const key in dto) {
	      dto[key] = this.recursiveCovertToDto(dto[key]);
	    }
	
	    return dto;
	  }
	}

```

src/utils/dtos/invoice.dto.ts```ts
	/**
	 * @license
	 * Copyright 2024 J2C
	 */
	
	import BaseDto from '@/utils/dtos/base.dto';
	
	export type Invoice = {
	  budgetId: string;
	  projectId: string;
	  creatorId: string;
	  creatorEmail: string;
	  invoiceContractorId: string;
	  invoiceContractorName: string;
	  invoiceIndex: number;
	  invoiceNumber: string;
	  invoicePst: string;
	  invoicePstOverride: boolean;
	  invoiceReceivedDate: string;
	  invoiceStatus: number;
	  invoiceSubtotal: number;
	  invoiceTotal: number;
	  invoiceDate: Date;
	  invoiceDescription: string;
	  dateCreate: Date;
	  dateModify: Date;
	  imageBucket: string;
	  invoiceAdditionalFields: string[];
	  invoiceApprove?: boolean;
	  invoiceCategory: string;
	  invoiceChqDate: string;
	  invoiceChqNumber: string;
	  invoiceClaimNumber: string;
	  invoiceCode: string;
	  invoiceGst: object;
	  invoiceGstOverride: boolean;
	  invoiceHoldbackEnabled?: boolean;
	  imageUrl?: string;
	};
	
	export default class InvoiceDto extends BaseDto {
	  budgetId: string;
	  projectId: string;
	  creatorId: string;
	  creatorEmail: string;
	  invoiceContractorId: string;
	  invoiceContractorName: string;
	  invoiceIndex: number;
	  invoiceNumber: string;
	  invoicePst: string;
	  invoicePstOverride: boolean;
	  invoiceReceivedDate: string;
	  invoiceStatus: number;
	  invoiceSubtotal: number;
	  invoiceTotal: number;
	  invoiceDate: Date;
	  invoiceDescription: string;
	  dateCreate: Date;
	  dateModify: Date;
	  imageBucket: string;
	  invoiceAdditionalFields: string[];
	  invoiceApprove?: boolean;
	  invoiceCategory: string;
	  invoiceChqDate: string;
	  invoiceChqNumber: string;
	  invoiceClaimNumber: string;
	  invoiceCode: string;
	  invoiceGst: object;
	  invoiceGstOverride: boolean;
	  invoiceHoldbackEnabled?: boolean;
	  imageUrl?: string;
	
	  constructor() {
	    super();
	    this.budgetId = '';
	    this.projectId = '';
	    this.creatorId = '';
	    this.creatorEmail = '';
	    this.invoiceContractorId = '';
	    this.invoiceContractorName = '';
	    this.invoiceIndex = 0;
	    this.invoiceNumber = '';
	    this.invoicePst = '';
	    this.invoicePstOverride = false;
	    this.invoiceReceivedDate = '';
	    this.invoiceStatus = 0;
	    this.invoiceSubtotal = 0;
	    this.invoiceTotal = 0;
	    this.invoiceDate = new Date();
	    this.invoiceDescription = '';
	    this.dateCreate = new Date();
	    this.dateModify = new Date();
	    this.imageBucket = '';
	    this.invoiceAdditionalFields = [];
	    this.invoiceCategory = '';
	    this.invoiceChqDate = '';
	    this.invoiceChqNumber = '';
	    this.invoiceClaimNumber = '';
	    this.invoiceCode = '';
	    this.invoiceGst = {};
	    this.invoiceGstOverride = false;
	  }
	
	  public static fromObject(obj: Invoice): InvoiceDto {
	    const invoiceDto = new InvoiceDto();
	
	    invoiceDto.setData(obj);
	
	    return invoiceDto;
	  }
	
	  public static fromJSON(json: string): InvoiceDto {
	    return InvoiceDto.fromObject(JSON.parse(json));
	  }
	}

```

src/utils/dtos/types/dto.type.ts```ts
	import Budget from '@/utils/dtos/budget.dto';
	import Builder from '@/utils/dtos/builder.dto';
	import Contractor from '@/utils/dtos/contractor.dto';
	import Project from '@/utils/dtos/project.dto';
	import Invoice from '@/utils/dtos/invoice.dto';
	import Role from '@/utils/dtos/role.dto';
	import User from '@/utils/dtos/user.dto';
	
	export type DTO = Budget | Builder | Contractor | Project | Invoice | Role | User;

```

src/utils/form/index.ts```ts
	import { forOwn } from 'lodash';
	import { FormikErrors, FormikTouched } from 'formik';
	
	export interface IIsError<IFormValues> {
	  fieldName: keyof IFormValues;
	  errors: FormikErrors<IFormValues>;
	  touched: FormikTouched<IFormValues>;
	}
	export function isError<IFormValues>(params: IIsError<IFormValues>): boolean {
	  const { errors, touched, fieldName } = params;
	  return !!errors[fieldName] && !!touched[fieldName];
	}
	
	export type Errors<IFormValues> = {
	  [K in keyof IFormValues]?: boolean;
	};
	export type IGetFieldErrorStatuses<IFormValues> = {
	  errors: FormikErrors<IFormValues>;
	  touched: FormikTouched<IFormValues>;
	};
	export function getFieldErrorStatuses<IFormValues>(params: IGetFieldErrorStatuses<IFormValues>): Errors<IFormValues> {
	  const { errors, touched } = params;
	  const newErrors: Errors<IFormValues> = {};
	
	  forOwn(errors, (_, key) => {
	    const k = key as keyof IFormValues;
	    newErrors[k] = isError<IFormValues>({ fieldName: k, errors, touched });
	  });
	
	  return newErrors;
	}
	
	export type ErrorList<IFormValues> = {
	  [K in keyof IFormValues]?: {
	    error: boolean;
	    message: string;
	  };
	};
	export function getFieldErrors<IFormValues>(params: IGetFieldErrorStatuses<IFormValues>): ErrorList<IFormValues> {
	  const { errors, touched } = params;
	  const newErrors: ErrorList<IFormValues> = {};
	
	  forOwn(errors, (_, key) => {
	    const k = key as keyof IFormValues;
	    const hasError = isError<IFormValues>({ fieldName: k, errors, touched });
	    newErrors[k] = {
	      error: hasError,
	      message: hasError ? (errors[k] as string) : ''
	    };
	  });
	
	  return newErrors;
	}

```

src/utils/route-guard/AuthGuard.tsx```tsx
	'use client';
	
	import { useRouter } from 'next/navigation';
	
	// project imports
	import { useEffect } from 'react';
	
	// types
	import { GuardProps } from 'types';
	import { useSession } from 'next-auth/react';
	
	import routes from 'routes';
	
	// ==============================|| AUTH GUARD ||============================== //
	
	/**
	 * Authentication guard for routes
	 * @param {PropTypes.node} children children element/node
	 */
	const AuthGuard = ({ children }: GuardProps) => {
	  const router = useRouter();
	  const { data: session } = useSession();
	
	  useEffect(() => {
	    if (session === null || session.user === null || !session.user.id) {
	      router.push(routes.login.getUrl());
	    }
	  }, [session, router]);
	
	  return children;
	};
	
	export default AuthGuard;

```

src/utils/route-guard/GuestGuard.tsx```tsx
	'use client';
	
	import { useEffect } from 'react';
	import { useRouter } from 'next/navigation';
	
	// project imports
	import routes from 'routes';
	
	// types
	import { GuardProps } from 'types';
	import { useSession } from 'next-auth/react';
	
	// ==============================|| GUEST GUARD ||============================== //
	
	/**
	 * Guest guard for routes having no auth required
	 * @param {PropTypes.node} children children element/node
	 */
	
	const GuestGuard = ({ children }: GuardProps) => {
	  const { data: session } = useSession();
	  const router = useRouter();
	
	  useEffect(() => {
	    if (session !== null && session.user !== null) {
	      router.push(routes.dashboard.getUrl());
	    }
	    // eslint-disable-next-line
	  }, []);
	
	  return children;
	};
	
	export default GuestGuard;

```

src/utils/locales/en/index.ts```ts
	import defaultLanguages from './default.json';
	import auth from './auth.json';
	import builder from './builder.json';
	import contractor from './contractor.json';
	import project from './project.json';
	import user from './user.json';
	import form from './form.json';
	import budget from './budget.json';
	import invoice from './invoice.json';
	
	const languages = {
	  ...defaultLanguages,
	  ...auth,
	  ...builder,
	  ...contractor,
	  ...user,
	  ...project,
	  ...form,
	  ...budget,
	  ...invoice
	};
	
	export default languages;

```

src/utils/datetime/date.custom.ts```ts
	import { DATE_FORMAT_DEFAULT } from '@/constant';
	import { format } from 'date-fns';
	export default class DateCustom extends Date {
	  constructor(...args: any[]) {
	    // If no arguments provided, use current date and time
	    if (args.length === 0) {
	      super();
	    } else {
	      // @ts-ignore
	      super(...args);
	    }
	
	    // Set the timezone offset to UTC
	    this.setTimezoneOffsetToUTC();
	  }
	
	  private setTimezoneOffsetToUTC(): void {
	    this.setTime(this.getTime() - this.getTimezoneOffset() * 60 * 1000);
	  }
	
	  // Convert to date string in the specified timezone
	  toDateStringInTimezone(timezone: string): string {
	    const options: Intl.DateTimeFormatOptions = {
	      timeZone: timezone,
	      year: 'numeric',
	      month: '2-digit',
	      day: '2-digit',
	      hour: '2-digit',
	      minute: '2-digit',
	      second: '2-digit',
	      hour12: false
	    };
	
	    return this.toLocaleString('en-US', options);
	  }
	
	  public toTimestamp(): number {
	    return this.getTime();
	  }
	}
	
	export const formatDate = (date: Date | string, dateFormat = DATE_FORMAT_DEFAULT) => {
	  return format(new DateCustom(date), dateFormat);
	};

```

src/utils/currency/index.ts```ts
	import { CURRENCY } from 'constant';
	
	export function formatPrice(price: number): string {
	  const formatter = new Intl.NumberFormat('en-US', {
	    style: 'currency',
	    currency: CURRENCY,
	    maximumSignificantDigits: 1
	  });
	  return formatter.format(price);
	}

```

src/components/ui-component/Logo.tsx```tsx
	// material-ui
	import Image from 'next/image';
	import React from 'react';
	import { LOGO_LIGHT } from '@/constant';
	
	/**
	 * if you want to use image instead of <svg> uncomment following.
	 *
	 * import logoDark from 'assets/images/logo-dark.svg';
	 * import logo from 'assets/images/logo.svg';
	 *
	 */
	
	// ==============================|| LOGO SVG ||============================== //
	
	const Logo = () => {
	  return (
	    <Image
	      src={LOGO_LIGHT.url}
	      alt={LOGO_LIGHT.alt}
	      width={LOGO_LIGHT.width}
	      height={LOGO_LIGHT.height}
	      style={{
	        maxWidth: '80%',
	        height: 'auto'
	      }}
	    />
	  );
	};
	
	export default Logo;

```

src/components/ui-component/Locales.tsx```tsx
	import React, { useState, useEffect } from 'react';
	
	// third-party
	import { IntlProvider, MessageFormatElement } from 'react-intl';
	import useConfig from 'hooks/useConfig';
	
	// load locales files
	const loadLocaleData = (locale: string) => {
	  switch (locale) {
	    default:
	      return import('../../utils/locales/en/index');
	  }
	};
	
	// ==============================|| LOCALIZATION ||============================== //
	interface LocalsProps {
	  children: React.ReactNode;
	}
	
	const Locales = ({ children }: LocalsProps) => {
	  const { locale } = useConfig();
	  const [messages, setMessages] = useState<Record<string, string> | Record<string, MessageFormatElement[]> | undefined>();
	
	  useEffect(() => {
	    loadLocaleData(locale).then((d: { default: Record<string, string> | Record<string, MessageFormatElement[]> | undefined }) => {
	      setMessages(d.default);
	    });
	  }, [locale]);
	
	  return (
	    <>
	      {messages && (
	        <IntlProvider locale={locale} defaultLocale="en" messages={messages}>
	          {children}
	        </IntlProvider>
	      )}
	    </>
	  );
	};
	
	export default Locales;

```

src/components/ui-component/RTLLayout.tsx```tsx
	import { useEffect, ReactNode } from 'react';
	
	// material-ui
	import { CacheProvider } from '@emotion/react';
	import createCache, { StylisPlugin } from '@emotion/cache';
	
	// third-party
	import rtlPlugin from 'stylis-plugin-rtl';
	import useConfig from 'hooks/useConfig';
	
	// ==============================|| RTL LAYOUT ||============================== //
	
	interface RTLLayoutProps {
	  children: ReactNode;
	}
	
	const RTLLayout = ({ children }: RTLLayoutProps) => {
	  const { rtlLayout } = useConfig();
	
	  useEffect(() => {
	    document.dir = rtlLayout ? 'rtl' : 'ltr';
	  }, [rtlLayout]);
	
	  const cacheRtl = createCache({
	    key: rtlLayout ? 'rtl' : 'css',
	    prepend: true,
	    stylisPlugins: rtlLayout ? [rtlPlugin as StylisPlugin] : []
	  });
	
	  return <CacheProvider value={cacheRtl}>{children}</CacheProvider>;
	};
	
	export default RTLLayout;

```

src/components/ui-component/Loadable.tsx```tsx
	import { Suspense, ElementType } from 'react';
	
	// project imports
	import Loader from './Loader';
	
	// ==============================|| LOADABLE - LAZY LOADING ||============================== //
	
	const Loadable = (Component: ElementType) => (props: any) => (
	  <Suspense fallback={<Loader />}>
	    <Component {...props} />
	  </Suspense>
	);
	
	export default Loadable;

```

src/components/ui-component/Loader.tsx```tsx
	// material-ui
	import LinearProgress from '@mui/material/LinearProgress';
	import { styled } from '@mui/material/styles';
	
	// styles
	const LoaderWrapper = styled('div')({
	  position: 'fixed',
	  top: 0,
	  left: 0,
	  zIndex: 1301,
	  width: '100%'
	});
	
	// ==============================|| LOADER ||============================== //
	
	const Loader = () => (
	  <LoaderWrapper>
	    <LinearProgress color="primary" />
	  </LoaderWrapper>
	);
	
	export default Loader;

```

src/components/ui-component/Page.tsx```tsx
	import { forwardRef, ReactNode, Ref } from 'react';
	
	// next
	import Head from 'next/head';
	
	// material-ui
	import { Box, BoxProps } from '@mui/material';
	
	// ==============================|| Page - SET TITLE & META TAGS ||============================== //
	
	interface Props extends BoxProps {
	  children: ReactNode;
	  meta?: ReactNode;
	  title: string;
	}
	
	const Page = forwardRef<HTMLDivElement, Props>(({ children, title = '', meta, ...other }: Props, ref: Ref<HTMLDivElement>) => (
	  <>
	    <Head>
	      <title>{`${title} | Berry - React Material Admin Dashboard Template`}</title>
	      {meta}
	    </Head>
	
	    <Box ref={ref} {...other}>
	      {children}
	    </Box>
	  </>
	));
	
	export default Page;

```

src/components/ui-component/cards/SubCard.tsx```tsx
	import React, { ReactNode, Ref } from 'react';
	
	// material-ui
	import { useTheme } from '@mui/material/styles';
	import { Card, CardContent, CardHeader, Divider, Typography } from '@mui/material';
	
	interface SubCardProps {
	  children: ReactNode | string | null;
	  content?: boolean;
	  className?: string;
	  contentClass?: string;
	  darkTitle?: boolean;
	  secondary?: ReactNode | string;
	  sx?: {};
	  contentSX?: {};
	  title?: ReactNode | string;
	}
	
	// ==============================|| CUSTOM SUB CARD ||============================== //
	
	const SubCard = React.forwardRef(
	  (
	    { children, className, content = true, contentClass, darkTitle, secondary, sx = {}, contentSX = {}, title, ...others }: SubCardProps,
	    ref: Ref<HTMLDivElement>
	  ) => {
	    const theme = useTheme();
	
	    return (
	      <Card
	        ref={ref}
	        sx={{
	          border: '1px solid',
	          borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.grey[200],
	          ':hover': {
	            boxShadow: theme.palette.mode === 'dark' ? '0 2px 14px 0 rgb(33 150 243 / 10%)' : '0 2px 14px 0 rgb(32 40 45 / 8%)'
	          },
	          ...sx
	        }}
	        {...others}
	      >
	        {/* card header and action */}
	        {!darkTitle && title && <CardHeader sx={{ p: 2.5 }} title={<Typography variant="h5">{title}</Typography>} action={secondary} />}
	        {darkTitle && title && <CardHeader sx={{ p: 2.5 }} title={<Typography variant="h4">{title}</Typography>} action={secondary} />}
	
	        {/* content & header divider */}
	        {title && (
	          <Divider
	            sx={{
	              opacity: 1,
	              borderColor: theme.palette.mode === 'dark' ? theme.palette.dark.light + 15 : theme.palette.grey[200]
	            }}
	          />
	        )}
	
	        {/* card content */}
	        {content && (
	          <CardContent sx={{ p: 2.5, ...contentSX }} className={contentClass || ''}>
	            {children}
	          </CardContent>
	        )}
	        {!content && children}
	      </Card>
	    );
	  }
	);
	
	export default SubCard;

```

src/components/ui-component/cards/CardSecondaryAction.tsx```tsx
	import { ReactNode } from 'react';
	
	// material-ui
	import { useTheme } from '@mui/material/styles';
	import { ButtonBase, Link, Tooltip } from '@mui/material';
	
	// project imports
	import Avatar from '../extended/Avatar';
	
	// ==============================|| CARD SECONDARY ACTION ||============================== //
	
	interface CardSecondaryActionProps {
	  title?: string;
	  link?: string;
	  icon?: ReactNode | string;
	}
	
	const CardSecondaryAction = ({ title, link, icon }: CardSecondaryActionProps) => {
	  const theme = useTheme();
	
	  return (
	    <Tooltip title={title || 'Reference'} placement="left">
	      <ButtonBase disableRipple>
	        {!icon && (
	          <Avatar
	            component={Link}
	            href={link}
	            target="_blank"
	            alt="MUI Logo"
	            size="badge"
	            color="primary"
	            aria-label="ui material icon"
	            outline
	          >
	            <svg width="500" height="500" viewBox="0 0 500 500" fill="none" xmlns="http://www.w3.org/2000/svg">
	              <g clipPath="url(#clip0)">
	                <path d="M100 260.9V131L212.5 195.95V239.25L137.5 195.95V282.55L100 260.9Z" fill={theme.palette.primary[800]} />
	                <path
	                  d="M212.5 195.95L325 131V260.9L250 304.2L212.5 282.55L287.5 239.25V195.95L212.5 239.25V195.95Z"
	                  fill={theme.palette.primary.main}
	                />
	                <path d="M212.5 282.55V325.85L287.5 369.15V325.85L212.5 282.55Z" fill={theme.palette.primary[800]} />
	                <path
	                  d="M287.5 369.15L400 304.2V217.6L362.5 239.25V282.55L287.5 325.85V369.15ZM362.5 195.95V152.65L400 131V174.3L362.5 195.95Z"
	                  fill={theme.palette.primary.main}
	                />
	              </g>
	              <defs>
	                <clipPath id="clip0">
	                  <rect width="300" height="238.3" fill="white" transform="translate(100 131)" />
	                </clipPath>
	              </defs>
	            </svg>
	          </Avatar>
	        )}
	        {icon && (
	          <Avatar component={Link} href={link} target="_blank" size="badge" color="primary" outline>
	            {icon}
	          </Avatar>
	        )}
	      </ButtonBase>
	    </Tooltip>
	  );
	};
	
	export default CardSecondaryAction;

```

src/components/ui-component/cards/MainCard.tsx```tsx
	'use client';
	import React, { Ref } from 'react';
	
	// material-ui
	import { useTheme } from '@mui/material/styles';
	import { Card, CardContent, CardHeader, Divider, Typography, CardProps, CardHeaderProps, CardContentProps } from '@mui/material';
	
	// types
	import { KeyedObject } from 'types';
	
	// constant
	const headerSX = {
	  '& .MuiCardHeader-action': { mr: 0 }
	};
	
	// ==============================|| CUSTOM MAIN CARD ||============================== //
	
	export interface MainCardProps extends KeyedObject {
	  border?: boolean;
	  boxShadow?: boolean;
	  children: React.ReactNode | string;
	  style?: React.CSSProperties;
	  content?: boolean;
	  className?: string;
	  contentClass?: string;
	  contentSX?: CardContentProps['sx'];
	  darkTitle?: boolean;
	  sx?: CardProps['sx'];
	  secondary?: CardHeaderProps['action'];
	  shadow?: string;
	  elevation?: number;
	  title?: React.ReactNode | string;
	}
	
	const MainCard = React.forwardRef(
	  (
	    {
	      border = false,
	      boxShadow,
	      children,
	      content = true,
	      contentClass = '',
	      contentSX = {},
	      darkTitle,
	      secondary,
	      shadow,
	      sx = {},
	      title,
	      ...others
	    }: MainCardProps,
	    ref: Ref<HTMLDivElement>
	  ) => {
	    const theme = useTheme();
	
	    return (
	      <Card
	        ref={ref}
	        {...others}
	        sx={{
	          border: border ? '1px solid' : 'none',
	          borderColor: theme.palette.mode === 'dark' ? theme.palette.background.default : theme.palette.grey[300] + 98,
	          ':hover': {
	            boxShadow: boxShadow
	              ? shadow || (theme.palette.mode === 'dark' ? '0 2px 14px 0 rgb(33 150 243 / 10%)' : '0 2px 14px 0 rgb(32 40 45 / 8%)')
	              : 'inherit'
	          },
	          ...sx
	        }}
	      >
	        {/* card header and action */}
	        {!darkTitle && title && <CardHeader sx={headerSX} title={title} action={secondary} />}
	        {darkTitle && title && <CardHeader sx={headerSX} title={<Typography variant="h3">{title}</Typography>} action={secondary} />}
	
	        {/* content & header divider */}
	        {title && <Divider />}
	
	        {/* card content */}
	        {content && (
	          <CardContent sx={contentSX} className={contentClass}>
	            {children}
	          </CardContent>
	        )}
	        {!content && children}
	      </Card>
	    );
	  }
	);
	
	export default MainCard;

```

src/components/ui-component/cards/AuthFooter.tsx```tsx
	// material-ui
	import { Link, Typography, Stack } from '@mui/material';
	
	// ==============================|| FOOTER - AUTHENTICATION 2 & 3 ||============================== //
	
	const AuthFooter = () => (
	  <Stack direction="row" justifyContent="space-between">
	    <Typography variant="subtitle2" component={Link} href="https://berrydashboard.io" target="_blank" underline="hover">
	      berrydashboard.io
	    </Typography>
	    <Typography variant="subtitle2" component={Link} href="https://codedthemes.com" target="_blank" underline="hover">
	      &copy; codedthemes.com
	    </Typography>
	  </Stack>
	);
	
	export default AuthFooter;

```

src/components/ui-component/Select/index.tsx```tsx
	import * as React from 'react';
	
	import { InputLabel, Select, SelectProps } from '@mui/material';
	import styles from './styles.module.scss';
	import FormControl from '../FormControl';
	
	interface Props extends SelectProps {
	  children?: React.ReactNode;
	}
	export default function SelectField({ labelId, label, children, ...props }: Props) {
	  return (
	    <FormControl fullWidth>
	      <InputLabel id="labelSelect">{label}</InputLabel>
	      <Select
	        label={label}
	        labelId={labelId}
	        fullWidth
	        {...props}
	        classes={{
	          root: styles.root
	        }}
	      >
	        {children}
	      </Select>
	    </FormControl>
	  );
	}

```

src/components/ui-component/Select/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.root {
	  border-radius: 12px;
	  background-color: $grey50;
	}

```

src/components/ui-component/Card/index.tsx```tsx
	import React from 'react';
	import cs from 'classnames';
	import {
	  Card as MUICard,
	  CardHeader as MUICardHeader,
	  CardHeaderProps,
	  CardContent as MUICardContent,
	  CardContentProps
	} from '@mui/material';
	
	// projects import
	import styles from './styles.module.scss';
	
	export interface ICardProps {
	  title?: React.ReactNode;
	  children?: React.ReactNode;
	  cardHeaderProps?: CardHeaderProps;
	  cardContentProps?: CardContentProps;
	  className?: string;
	}
	
	export default function Card(props: ICardProps) {
	  const { title, children, cardHeaderProps, cardContentProps, className = '' } = props;
	  return (
	    <MUICard classes={{ root: cs(styles.card, className) }}>
	      {!!title && (
	        <MUICardHeader
	          {...cardHeaderProps}
	          title={title}
	          classes={{
	            title: styles.title,
	            root: styles.cardHeader
	          }}
	        />
	      )}
	      <MUICardContent {...cardContentProps} classes={{ root: styles.cardContent }}>
	        {children}
	      </MUICardContent>
	    </MUICard>
	  );
	}

```

src/components/ui-component/Card/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.card {
	  border: 1px solid $darkPrimaryLight;
	  border-radius: 12px;
	}
	
	.cardHeader {
	  border-bottom: 1px solid $darkPrimaryLight;
	}
	.title {
	  font-size: 0.75rem;
	  color: $grey900;
	}
	
	.cardContent {
	  padding: 20px 20px;
	}

```

src/components/ui-component/TimeCountDown/index.tsx```tsx
	import { useEffect, useRef } from 'react';
	
	export interface ITimeCountDownProps {
	  seconds: number;
	}
	
	export default function TimeCountDown(props: ITimeCountDownProps) {
	  const { seconds } = props;
	  const divRef = useRef<any>();
	
	  useEffect(() => {
	    let time = seconds;
	
	    const interval = window.setInterval(() => {
	      time = time - 1;
	      if (time < 0) {
	        window.clearInterval(interval);
	        return;
	      }
	      console.log('div', divRef);
	      if (divRef.current?.innerText) {
	        divRef.current.innerText = time + '';
	      }
	    }, 1000);
	
	    return () => {
	      clearInterval(interval);
	    };
	  }, [seconds]);
	
	  return <div ref={divRef}>{seconds}</div>;
	}

```

src/components/ui-component/extended/Breadcrumbs.tsx```tsx
	'use client';
	import { CSSProperties, ReactElement, useEffect, useState } from 'react';
	
	// next
	import Link from 'next/link';
	import { usePathname } from 'next/navigation';
	
	// material-ui
	import { useTheme } from '@mui/material/styles';
	import { Box, Card, Divider, Grid, Typography } from '@mui/material';
	import MuiBreadcrumbs from '@mui/material/Breadcrumbs';
	
	// project import
	import navigation from 'menu-items';
	
	// assets
	import { IconChevronRight, IconTallymark1 } from '@tabler/icons-react';
	import AccountTreeTwoToneIcon from '@mui/icons-material/AccountTreeTwoTone';
	import HomeIcon from '@mui/icons-material/Home';
	import HomeTwoToneIcon from '@mui/icons-material/HomeTwoTone';
	
	// types
	import { NavItemType, OverrideIcon } from 'types';
	
	interface BreadcrumbLinkProps {
	  title: string;
	  to?: string;
	  icon?: string | OverrideIcon;
	}
	
	// ==============================|| BREADCRUMBS TITLE ||============================== //
	
	const BTitle = ({ title }: { title: string }) => {
	  return (
	    <Grid item>
	      <Typography variant="h3" sx={{ fontWeight: 500 }}>
	        {title}
	      </Typography>
	    </Grid>
	  );
	};
	
	// ==============================|| BREADCRUMBS ||============================== //
	
	export interface BreadCrumbSxProps extends CSSProperties {
	  mb?: string;
	  bgcolor?: string;
	}
	
	interface Props {
	  card?: boolean;
	  custom?: boolean;
	  divider?: boolean;
	  heading?: string;
	  icon?: boolean;
	  icons?: boolean;
	  links?: BreadcrumbLinkProps[];
	  maxItems?: number;
	  rightAlign?: boolean;
	  separator?: OverrideIcon;
	  title?: boolean;
	  titleBottom?: boolean;
	  sx?: BreadCrumbSxProps;
	}
	
	const Breadcrumbs = ({
	  card,
	  custom = false,
	  divider = false,
	  heading,
	  icon = true,
	  icons,
	  links,
	  maxItems,
	  rightAlign = true,
	  separator = IconChevronRight,
	  title = true,
	  titleBottom,
	  sx,
	  ...others
	}: Props) => {
	  const theme = useTheme();
	  const pathname = usePathname();
	  const [main, setMain] = useState<NavItemType | undefined>();
	  const [item, setItem] = useState<NavItemType>();
	
	  const iconSX = {
	    marginRight: theme.spacing(0.75),
	    marginTop: `-${theme.spacing(0.25)}`,
	    width: '1rem',
	    height: '1rem',
	    color: theme.palette.secondary.main
	  };
	
	  const linkSX = {
	    display: 'flex',
	    color: 'grey.900',
	    textDecoration: 'none',
	    alignContent: 'center',
	    alignItems: 'center'
	  };
	
	  let customLocation = pathname;
	
	  useEffect(() => {
	    navigation?.items?.map((menu: NavItemType) => {
	      if (menu.type && menu.type === 'group') {
	        if (menu?.url && menu.url === customLocation) {
	          setMain(menu);
	          setItem(menu);
	        } else {
	          getCollapse(menu as { children: NavItemType[]; type?: string });
	        }
	      }
	      return false;
	    });
	  });
	
	  // set active item state
	  const getCollapse = (menu: NavItemType) => {
	    if (!custom && menu.children) {
	      menu.children.filter((collapse: NavItemType) => {
	        if (collapse.type && collapse.type === 'collapse') {
	          getCollapse(collapse as { children: NavItemType[]; type?: string });
	          if (collapse.url === customLocation) {
	            setMain(collapse);
	            setItem(collapse);
	          }
	        } else if (collapse.type && collapse.type === 'item') {
	          if (customLocation === collapse.url) {
	            setMain(menu);
	            setItem(collapse);
	          }
	        }
	        return false;
	      });
	    }
	  };
	
	  // item separator
	  const SeparatorIcon = separator!;
	  const separatorIcon = separator ? <SeparatorIcon stroke={1.5} size="16px" /> : <IconTallymark1 stroke={1.5} size="16px" />;
	
	  let mainContent;
	  let itemContent;
	  let breadcrumbContent: ReactElement = <Typography />;
	  let itemTitle: NavItemType['title'] = '';
	  let CollapseIcon;
	  let ItemIcon;
	
	  // collapse item
	  if (main && main.type === 'collapse') {
	    CollapseIcon = main.icon ? main.icon : AccountTreeTwoToneIcon;
	    mainContent = (
	      <Typography
	        {...(main.url && { component: Link, href: main.url })}
	        variant="subtitle1"
	        sx={linkSX}
	        color={window.location.pathname === main.url ? 'text.primary' : 'text.secondary'}
	      >
	        {icons && <CollapseIcon style={iconSX} />}
	        {main.title}
	      </Typography>
	    );
	  }
	
	  if (!custom && main && main.type === 'collapse' && main.breadcrumbs === true) {
	    breadcrumbContent = (
	      <Card sx={card === false ? { mb: 3, bgcolor: 'transparent', ...sx } : { mb: 3, bgcolor: 'background.default', ...sx }} {...others}>
	        <Box sx={{ p: 2, pl: card === false ? 0 : 2 }}>
	          <Grid
	            container
	            direction={rightAlign ? 'row' : 'column'}
	            justifyContent={rightAlign ? 'space-between' : 'flex-start'}
	            alignItems={rightAlign ? 'center' : 'flex-start'}
	            spacing={1}
	          >
	            {title && !titleBottom && <BTitle title={main.title as string} />}
	            <Grid item>
	              <MuiBreadcrumbs
	                aria-label="breadcrumb"
	                maxItems={maxItems || 8}
	                separator={separatorIcon}
	                sx={{ '& .MuiBreadcrumbs-separator': { width: 16, ml: 1.25, mr: 1.25 } }}
	              >
	                <Typography component={Link} href="/" color="textSecondary" variant="subtitle1" sx={linkSX}>
	                  {icons && <HomeTwoToneIcon style={iconSX} />}
	                  {icon && !icons && <HomeIcon style={{ ...iconSX, marginRight: 0 }} />}
	                  {(!icon || icons) && 'Dashboard'}
	                </Typography>
	                {mainContent}
	              </MuiBreadcrumbs>
	            </Grid>
	            {title && titleBottom && <BTitle title={main.title as string} />}
	          </Grid>
	        </Box>
	        {card === false && divider !== false && <Divider sx={{ mt: 2 }} />}
	      </Card>
	    );
	  }
	
	  // items
	  if ((item && item.type === 'item') || (item?.type === 'group' && item?.url) || custom) {
	    itemTitle = item?.title;
	
	    ItemIcon = item?.icon ? item.icon : AccountTreeTwoToneIcon;
	    itemContent = (
	      <Typography variant="subtitle1" sx={{ ...linkSX, color: 'text.secondary' }}>
	        {icons && <ItemIcon style={iconSX} />}
	        {itemTitle}
	      </Typography>
	    );
	
	    let tempContent = (
	      <MuiBreadcrumbs
	        aria-label="breadcrumb"
	        maxItems={maxItems || 8}
	        separator={separatorIcon}
	        sx={{ '& .MuiBreadcrumbs-separator': { width: 16, ml: 1.25, mr: 1.25 } }}
	      >
	        <Typography component={Link} href="/" color="textSecondary" variant="subtitle1" sx={linkSX}>
	          {icons && <HomeTwoToneIcon style={iconSX} />}
	          {icon && !icons && <HomeIcon style={{ ...iconSX, marginRight: 0 }} />}
	          {(!icon || icons) && 'Dashboard'}
	        </Typography>
	        {mainContent}
	        {itemContent}
	      </MuiBreadcrumbs>
	    );
	
	    if (custom && links && links?.length > 0) {
	      tempContent = (
	        <MuiBreadcrumbs
	          aria-label="breadcrumb"
	          maxItems={maxItems || 8}
	          separator={separatorIcon}
	          sx={{ '& .MuiBreadcrumbs-separator': { width: 16, ml: 1.25, mr: 1.25 } }}
	        >
	          {links?.map((link: BreadcrumbLinkProps, index: number) => {
	            CollapseIcon = link.icon ? link.icon : AccountTreeTwoToneIcon;
	
	            return (
	              <Typography
	                key={index}
	                {...(link.to && { component: Link, href: link.to })}
	                variant="subtitle1"
	                sx={linkSX}
	                color={!link.to ? 'text.primary' : 'text.secondary'}
	              >
	                {link.icon && <CollapseIcon style={iconSX} />}
	                {link.title}
	              </Typography>
	            );
	          })}
	        </MuiBreadcrumbs>
	      );
	    }
	
	    // main
	    if (item?.breadcrumbs !== false || custom) {
	      breadcrumbContent = (
	        <Card sx={card === false ? { mb: 3, bgcolor: 'transparent', ...sx } : { mb: 3, bgcolor: 'background.default', ...sx }} {...others}>
	          <Box sx={{ p: 2, pl: card === false ? 0 : 2 }}>
	            <Grid
	              container
	              direction={rightAlign ? 'row' : 'column'}
	              justifyContent={rightAlign ? 'space-between' : 'flex-start'}
	              alignItems={rightAlign ? 'center' : 'flex-start'}
	              spacing={1}
	            >
	              {title && !titleBottom && <BTitle title={custom ? (heading as string) : (item?.title as string)} />}
	              <Grid item>{tempContent}</Grid>
	              {title && titleBottom && <BTitle title={custom ? (heading as string) : (item?.title as string)} />}
	            </Grid>
	          </Box>
	          {card === false && divider !== false && <Divider sx={{ mt: 2 }} />}
	        </Card>
	      );
	    }
	  }
	
	  return breadcrumbContent;
	};
	
	export default Breadcrumbs;

```

src/components/ui-component/extended/Snackbar.tsx```tsx
	import { SyntheticEvent } from 'react';
	
	// material-ui
	import { Alert, Button, Fade, Grow, IconButton, Slide, SlideProps } from '@mui/material';
	import MuiSnackbar from '@mui/material/Snackbar';
	
	// project import
	import { useDispatch, useSelector } from 'store';
	import { closeSnackbar } from 'store/slices/snackbar';
	
	// types
	import { KeyedObject } from 'types';
	
	// assets
	import CloseIcon from '@mui/icons-material/Close';
	
	// animation function
	function TransitionSlideLeft(props: SlideProps) {
	  return <Slide {...props} direction="left" />;
	}
	
	function TransitionSlideUp(props: SlideProps) {
	  return <Slide {...props} direction="up" />;
	}
	
	function TransitionSlideRight(props: SlideProps) {
	  return <Slide {...props} direction="right" />;
	}
	
	function TransitionSlideDown(props: SlideProps) {
	  return <Slide {...props} direction="down" />;
	}
	
	function GrowTransition(props: SlideProps) {
	  return <Grow {...props} />;
	}
	
	// animation options
	const animation: KeyedObject = {
	  SlideLeft: TransitionSlideLeft,
	  SlideUp: TransitionSlideUp,
	  SlideRight: TransitionSlideRight,
	  SlideDown: TransitionSlideDown,
	  Grow: GrowTransition,
	  Fade
	};
	
	// ==============================|| SNACKBAR ||============================== //
	
	const Snackbar = () => {
	  const dispatch = useDispatch();
	  const snackbar = useSelector((state) => state.snackbar);
	  const { actionButton, anchorOrigin, alert, close, message, open, transition, variant } = snackbar;
	
	  const handleClose = (event: SyntheticEvent | Event, reason?: string) => {
	    if (reason === 'clickaway') {
	      return;
	    }
	    dispatch(closeSnackbar());
	  };
	
	  return (
	    <>
	      {/* default snackbar */}
	      {variant === 'default' && (
	        <MuiSnackbar
	          anchorOrigin={anchorOrigin}
	          open={open}
	          autoHideDuration={1500}
	          onClose={handleClose}
	          message={message}
	          TransitionComponent={animation[transition]}
	          action={
	            <>
	              <Button color="secondary" size="small" onClick={handleClose}>
	                UNDO
	              </Button>
	              <IconButton size="small" aria-label="close" color="inherit" onClick={handleClose} sx={{ mt: 0.25 }}>
	                <CloseIcon fontSize="small" />
	              </IconButton>
	            </>
	          }
	        />
	      )}
	
	      {/* alert snackbar */}
	      {variant === 'alert' && (
	        <MuiSnackbar
	          TransitionComponent={animation[transition]}
	          anchorOrigin={anchorOrigin}
	          open={open}
	          autoHideDuration={1500}
	          onClose={handleClose}
	        >
	          <Alert
	            variant={alert.variant}
	            color={alert.color}
	            severity={alert.severity}
	            action={
	              <>
	                {actionButton !== false && (
	                  <Button size="small" onClick={handleClose} sx={{ color: 'background.paper' }}>
	                    UNDO
	                  </Button>
	                )}
	                {close !== false && (
	                  <IconButton sx={{ color: 'background.paper' }} size="small" aria-label="close" onClick={handleClose}>
	                    <CloseIcon fontSize="small" />
	                  </IconButton>
	                )}
	              </>
	            }
	            sx={{
	              ...(alert.variant === 'outlined' && {
	                bgcolor: 'background.paper'
	              })
	            }}
	          >
	            {message}
	          </Alert>
	        </MuiSnackbar>
	      )}
	    </>
	  );
	};
	
	export default Snackbar;

```

src/components/ui-component/extended/Transitions.tsx```tsx
	import React, { Ref, ExoticComponent, ReactElement } from 'react';
	
	// material-ui
	import { Collapse, Fade, Box, Grow, Slide, Zoom } from '@mui/material';
	
	// ==============================|| TRANSITIONS ||============================== //
	
	interface TSProps {
	  children?: ReactElement;
	  position?: string;
	  sx?: React.CSSProperties;
	  in?: boolean;
	  type?: string;
	  direction?: 'up' | 'right' | 'left' | 'down';
	  [others: string]: any;
	}
	
	const Transitions = React.forwardRef(
	  ({ children, position = 'top-left', sx, type = 'grow', direction = 'up', ...others }: TSProps, ref: Ref<ExoticComponent>) => {
	    let positionSX = {
	      transformOrigin: '0 0 0'
	    };
	
	    switch (position) {
	      case 'top-right':
	        positionSX = {
	          transformOrigin: 'top right'
	        };
	        break;
	      case 'top':
	        positionSX = {
	          transformOrigin: 'top'
	        };
	        break;
	      case 'bottom-left':
	        positionSX = {
	          transformOrigin: 'bottom left'
	        };
	        break;
	      case 'bottom-right':
	        positionSX = {
	          transformOrigin: 'bottom right'
	        };
	        break;
	      case 'bottom':
	        positionSX = {
	          transformOrigin: 'bottom'
	        };
	        break;
	      case 'top-left':
	      default:
	        positionSX = {
	          transformOrigin: '0 0 0'
	        };
	        break;
	    }
	
	    return (
	      <Box ref={ref}>
	        {type === 'grow' && (
	          <Grow {...others}>
	            <Box sx={positionSX}>{children}</Box>
	          </Grow>
	        )}
	        {type === 'collapse' && (
	          <Collapse {...others} sx={positionSX}>
	            {children}
	          </Collapse>
	        )}
	        {type === 'fade' && (
	          <Fade
	            {...others}
	            timeout={{
	              appear: 500,
	              enter: 600,
	              exit: 400
	            }}
	          >
	            <Box sx={positionSX}>{children}</Box>
	          </Fade>
	        )}
	        {type === 'slide' && (
	          <Slide
	            {...others}
	            timeout={{
	              appear: 0,
	              enter: 400,
	              exit: 200
	            }}
	            direction={direction}
	          >
	            <Box sx={positionSX}>{children}</Box>
	          </Slide>
	        )}
	        {type === 'zoom' && (
	          <Zoom {...others}>
	            <Box sx={positionSX}>{children}</Box>
	          </Zoom>
	        )}
	      </Box>
	    );
	  }
	);
	
	export default Transitions;

```

src/components/ui-component/extended/Chip.tsx```tsx
	// material-ui
	import { useTheme } from '@mui/material/styles';
	import MuiChip, { ChipProps } from '@mui/material/Chip';
	
	// ==============================|| CHIP ||============================== //
	
	interface chipProps extends ChipProps {
	  chipcolor?: string;
	  sx?: {};
	  disabled?: boolean;
	  label?: string;
	  avatar?: React.ReactElement | undefined;
	  onClick?: () => void;
	}
	
	const Chip = ({ chipcolor, disabled, sx = {}, variant, ...others }: chipProps) => {
	  const theme = useTheme();
	
	  let defaultSX = {
	    color: theme.palette.mode === 'dark' ? theme.palette.primary.light : theme.palette.primary.main,
	    bgcolor: theme.palette.mode === 'dark' ? theme.palette.primary.main : theme.palette.primary.light,
	    ':hover': {
	      color: theme.palette.primary.light,
	      bgcolor: theme.palette.mode === 'dark' ? theme.palette.primary.dark + 90 : theme.palette.primary.dark
	    }
	  };
	
	  let outlineSX = {
	    color: theme.palette.primary.main,
	    bgcolor: 'transparent',
	    border: '1px solid',
	    borderColor: theme.palette.primary.main,
	    ':hover': {
	      color: theme.palette.mode === 'dark' ? theme.palette.primary.light : theme.palette.primary.light,
	      bgcolor: theme.palette.mode === 'dark' ? theme.palette.primary.main : theme.palette.primary.dark
	    }
	  };
	
	  switch (chipcolor) {
	    case 'secondary':
	      if (variant === 'outlined') {
	        outlineSX = {
	          color: theme.palette.secondary.main,
	          bgcolor: 'transparent',
	          border: '1px solid',
	          borderColor: theme.palette.secondary.main,
	          ':hover': {
	            color: theme.palette.mode === 'dark' ? theme.palette.secondary.light : theme.palette.secondary.main,
	            bgcolor: theme.palette.mode === 'dark' ? theme.palette.secondary.dark : theme.palette.secondary.light
	          }
	        };
	      } else {
	        defaultSX = {
	          color: theme.palette.mode === 'dark' ? theme.palette.secondary.light : theme.palette.secondary.main,
	          bgcolor: theme.palette.mode === 'dark' ? theme.palette.secondary.dark : theme.palette.secondary.light,
	          ':hover': {
	            color: theme.palette.secondary.light,
	            bgcolor: theme.palette.mode === 'dark' ? theme.palette.secondary.dark + 90 : theme.palette.secondary.main
	          }
	        };
	      }
	      break;
	    case 'success':
	      if (variant === 'outlined') {
	        outlineSX = {
	          color: theme.palette.success.dark,
	          bgcolor: 'transparent',
	          border: '1px solid',
	          borderColor: theme.palette.success.dark,
	          ':hover': {
	            color: theme.palette.mode === 'dark' ? theme.palette.success.light : theme.palette.success.dark,
	            bgcolor: theme.palette.mode === 'dark' ? theme.palette.success.dark : theme.palette.success.light + 60
	          }
	        };
	      } else {
	        defaultSX = {
	          color: theme.palette.mode === 'dark' ? theme.palette.success.light : theme.palette.success.dark,
	          bgcolor: theme.palette.mode === 'dark' ? theme.palette.success.dark : theme.palette.success.light + 60,
	          ':hover': {
	            color: theme.palette.success.light,
	            bgcolor: theme.palette.mode === 'dark' ? theme.palette.success.dark + 90 : theme.palette.success.dark
	          }
	        };
	      }
	      break;
	    case 'error':
	      if (variant === 'outlined') {
	        outlineSX = {
	          color: theme.palette.error.main,
	          bgcolor: 'transparent',
	          border: '1px solid',
	          borderColor: theme.palette.error.main,
	          ':hover': {
	            color: theme.palette.mode === 'dark' ? theme.palette.error.light : theme.palette.error.dark,
	            bgcolor: theme.palette.mode === 'dark' ? theme.palette.error.dark : theme.palette.error.light
	          }
	        };
	      } else {
	        defaultSX = {
	          color: theme.palette.mode === 'dark' ? theme.palette.error.light : theme.palette.error.dark,
	          bgcolor: theme.palette.mode === 'dark' ? theme.palette.error.dark : theme.palette.error.light + 60,
	          ':hover': {
	            color: theme.palette.error.light,
	            bgcolor: theme.palette.mode === 'dark' ? theme.palette.error.dark + 90 : theme.palette.error.dark
	          }
	        };
	      }
	      break;
	    case 'orange':
	      if (variant === 'outlined') {
	        outlineSX = {
	          color: theme.palette.orange?.dark!,
	          bgcolor: 'transparent',
	          border: '1px solid',
	          borderColor: theme.palette.orange?.main!,
	          ':hover': {
	            color: theme.palette.orange?.dark!,
	            bgcolor: theme.palette.orange?.light!
	          }
	        };
	      } else {
	        defaultSX = {
	          color: theme.palette.orange?.dark!,
	          bgcolor: theme.palette.orange?.light!,
	          ':hover': {
	            color: theme.palette.orange?.light!,
	            bgcolor: theme.palette.orange?.dark!
	          }
	        };
	      }
	      break;
	    case 'warning':
	      if (variant === 'outlined') {
	        outlineSX = {
	          color: theme.palette.warning.dark,
	          bgcolor: 'transparent',
	          border: '1px solid',
	          borderColor: theme.palette.warning.dark,
	          ':hover': {
	            color: theme.palette.warning.dark,
	            bgcolor: theme.palette.warning.light
	          }
	        };
	      } else {
	        defaultSX = {
	          color: theme.palette.warning.dark,
	          bgcolor: theme.palette.warning.light,
	          ':hover': {
	            color: theme.palette.warning.light,
	            bgcolor: theme.palette.mode === 'dark' ? theme.palette.warning.dark + 90 : theme.palette.warning.dark
	          }
	        };
	      }
	      break;
	    default:
	  }
	
	  if (disabled) {
	    if (variant === 'outlined') {
	      outlineSX = {
	        color: theme.palette.grey[500],
	        bgcolor: 'transparent',
	        border: '1px solid',
	        borderColor: theme.palette.grey[500],
	        ':hover': {
	          color: theme.palette.grey[500],
	          bgcolor: 'transparent'
	        }
	      };
	    } else {
	      defaultSX = {
	        color: theme.palette.grey[500],
	        bgcolor: theme.palette.grey[50],
	        ':hover': {
	          color: theme.palette.grey[500],
	          bgcolor: theme.palette.grey[50]
	        }
	      };
	    }
	  }
	
	  let SX = defaultSX;
	  if (variant === 'outlined') {
	    SX = outlineSX;
	  }
	  SX = { ...SX, ...sx };
	  return <MuiChip {...others} sx={SX} />;
	};
	
	export default Chip;

```

src/components/ui-component/extended/Avatar.tsx```tsx
	import { ReactNode } from 'react';
	
	// material-ui
	import { useTheme } from '@mui/material/styles';
	import MuiAvatar, { AvatarProps } from '@mui/material/Avatar';
	import { OverridableComponent } from '@mui/material/OverridableComponent';
	
	// types
	import { LinkTarget } from 'types';
	
	// ==============================|| AVATAR ||============================== //
	
	interface AvatarProp extends AvatarProps {
	  alt?: string;
	  src?: string;
	  className?: string;
	  color?: string;
	  component?: OverridableComponent<any> /** Any component can override */;
	  target?: LinkTarget;
	  href?: string;
	  sx?: AvatarProps['sx'];
	  children?: ReactNode;
	  outline?: boolean;
	  size?: 'badge' | 'xs' | 'sm' | 'md' | 'lg' | 'xl';
	}
	
	const Avatar = ({ className, color, outline, size, sx, ...others }: AvatarProp) => {
	  const theme = useTheme();
	
	  const colorSX = color && !outline && { color: theme.palette.background.paper, bgcolor: `${color}.main` };
	  const outlineSX = outline && {
	    color: color ? `${color}.main` : `primary.main`,
	    bgcolor: theme.palette.background.paper,
	    border: '2px solid',
	    borderColor: color ? `${color}.main` : `primary.main`
	  };
	  let sizeSX = {};
	  switch (size) {
	    case 'badge':
	      sizeSX = {
	        width: theme.spacing(3.5),
	        height: theme.spacing(3.5)
	      };
	      break;
	    case 'xs':
	      sizeSX = {
	        width: theme.spacing(4.25),
	        height: theme.spacing(4.25)
	      };
	      break;
	    case 'sm':
	      sizeSX = {
	        width: theme.spacing(5),
	        height: theme.spacing(5)
	      };
	      break;
	    case 'lg':
	      sizeSX = {
	        width: theme.spacing(9),
	        height: theme.spacing(9)
	      };
	      break;
	    case 'xl':
	      sizeSX = {
	        width: theme.spacing(12.75),
	        height: theme.spacing(12.75)
	      };
	      break;
	    case 'md':
	      sizeSX = {
	        width: theme.spacing(7.5),
	        height: theme.spacing(7.5)
	      };
	      break;
	    default:
	      sizeSX = {};
	  }
	
	  return <MuiAvatar sx={{ ...colorSX, ...outlineSX, ...sizeSX, ...sx }} {...others} />;
	};
	
	export default Avatar;

```

src/components/ui-component/extended/AnimateButton.tsx```tsx
	'use client';
	
	import React, { Ref } from 'react';
	
	// third-party
	import { motion, useCycle } from 'framer-motion';
	
	type ScaleProps = {
	  hover: number | string | undefined;
	  tap: number | string | undefined;
	};
	
	interface AnimateButtonProps {
	  children?: React.ReactNode;
	  type?: 'slide' | 'scale' | 'rotate';
	  direction?: 'up' | 'down' | 'left' | 'right';
	  offset?: number;
	  scale?: ScaleProps;
	}
	
	// ==============================|| ANIMATION BUTTON ||============================== //
	
	const AnimateButton = React.forwardRef(
	  (
	    {
	      children,
	      type = 'scale',
	      direction = 'right',
	      offset = 10,
	      scale = {
	        hover: 1,
	        tap: 0.9
	      }
	    }: AnimateButtonProps,
	    ref: Ref<HTMLDivElement>
	  ) => {
	    let offset1;
	    let offset2;
	    switch (direction) {
	      case 'up':
	      case 'left':
	        offset1 = offset;
	        offset2 = 0;
	        break;
	      case 'right':
	      case 'down':
	      default:
	        offset1 = 0;
	        offset2 = offset;
	        break;
	    }
	
	    const [x, cycleX] = useCycle(offset1, offset2);
	    const [y, cycleY] = useCycle(offset1, offset2);
	
	    switch (type) {
	      case 'rotate':
	        return (
	          <motion.div
	            ref={ref}
	            animate={{ rotate: 360 }}
	            transition={{
	              repeat: Infinity,
	              repeatType: 'loop',
	              duration: 2,
	              repeatDelay: 0
	            }}
	          >
	            {children}
	          </motion.div>
	        );
	      case 'slide':
	        if (direction === 'up' || direction === 'down') {
	          return (
	            <motion.div ref={ref} animate={{ y: y !== undefined ? y : '' }} onHoverEnd={() => cycleY()} onHoverStart={() => cycleY()}>
	              {children}
	            </motion.div>
	          );
	        }
	        return (
	          <motion.div ref={ref} animate={{ x: x !== undefined ? x : '' }} onHoverEnd={() => cycleX()} onHoverStart={() => cycleX()}>
	            {children}
	          </motion.div>
	        );
	
	      case 'scale':
	      default:
	        if (typeof scale === 'number') {
	          scale = {
	            hover: scale,
	            tap: scale
	          };
	        }
	        return (
	          <motion.div ref={ref} whileHover={{ scale: scale?.hover }} whileTap={{ scale: scale?.tap }}>
	            {children}
	          </motion.div>
	        );
	    }
	  }
	);
	
	export default AnimateButton;

```

src/components/ui-component/extended/Form/FormControlSelect.tsx```tsx
	'use client';
	
	import { useState } from 'react';
	
	// material-ui
	import { useTheme } from '@mui/material/styles';
	import { Divider, FormControl, InputAdornment, MenuItem, TextField } from '@mui/material';
	
	// types
	import { GenericCardProps } from 'types';
	
	// ==============================|| FORM CONTROL SELECT ||============================== //
	
	interface FormControlSelectProps {
	  captionLabel?: string;
	  currencies?: { value: string; label: string }[];
	  formState?: string;
	  iconPrimary?: GenericCardProps['iconPrimary'];
	  iconSecondary?: GenericCardProps['iconPrimary'];
	  selected?: string;
	  textPrimary?: string;
	  textSecondary?: string;
	}
	
	const FormControlSelect = ({
	  captionLabel,
	  currencies,
	  formState,
	  iconPrimary,
	  iconSecondary,
	  selected,
	  textPrimary,
	  textSecondary
	}: FormControlSelectProps) => {
	  const theme = useTheme();
	  const IconPrimary = iconPrimary!;
	  const primaryIcon = iconPrimary ? <IconPrimary fontSize="small" sx={{ color: theme.palette.grey[700] }} /> : null;
	
	  const IconSecondary = iconSecondary!;
	  const secondaryIcon = iconSecondary ? <IconSecondary fontSize="small" sx={{ color: theme.palette.grey[700] }} /> : null;
	
	  const errorState = formState === 'error';
	  const val = selected || '';
	
	  const [currency, setCurrency] = useState(val);
	  const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement> | undefined) => {
	    if (event?.target.value) setCurrency(event?.target.value);
	  };
	
	  return (
	    <FormControl fullWidth error={errorState}>
	      <TextField
	        id="outlined-select-currency"
	        select
	        fullWidth
	        label={captionLabel}
	        value={currency}
	        onChange={handleChange}
	        InputProps={{
	          startAdornment: (
	            <>
	              {primaryIcon && <InputAdornment position="start">{primaryIcon}</InputAdornment>}
	              {textPrimary && (
	                <>
	                  <InputAdornment position="start">{textPrimary}</InputAdornment>
	                  <Divider sx={{ height: 28, m: 0.5 }} orientation="vertical" />
	                </>
	              )}
	            </>
	          ),
	          endAdornment: (
	            <>
	              {secondaryIcon && <InputAdornment position="end">{secondaryIcon}</InputAdornment>}
	              {textSecondary && (
	                <>
	                  <Divider sx={{ height: 28, m: 0.5 }} orientation="vertical" />
	                  <InputAdornment position="end">{textSecondary}</InputAdornment>
	                </>
	              )}
	            </>
	          )
	        }}
	      >
	        {currencies?.map((option, index) => (
	          <MenuItem key={index} value={option.value}>
	            {option.label}
	          </MenuItem>
	        ))}
	      </TextField>
	    </FormControl>
	  );
	};
	
	export default FormControlSelect;

```

src/components/ui-component/extended/Form/FormControl.tsx```tsx
	// material-ui
	import { useTheme } from '@mui/material/styles';
	import { Divider, InputAdornment, InputLabel, OutlinedInput } from '@mui/material';
	import MUIFormControl from '@mui/material/FormControl';
	
	// types
	import { GenericCardProps } from 'types';
	
	// ==============================|| FORM CONTROL ||============================== //
	
	interface FormControlProps {
	  captionLabel?: string;
	  currencies?: { value: string; label: string }[];
	  formState?: string;
	  iconPrimary?: GenericCardProps['iconPrimary'];
	  iconSecondary?: GenericCardProps['iconPrimary'];
	  placeholder?: string;
	  selected?: string;
	  textPrimary?: string;
	  textSecondary?: string;
	}
	
	const FormControl = ({
	  captionLabel,
	  formState,
	  iconPrimary,
	  iconSecondary,
	  placeholder,
	  textPrimary,
	  textSecondary
	}: FormControlProps) => {
	  const theme = useTheme();
	  const IconPrimary = iconPrimary!;
	  const primaryIcon = iconPrimary ? <IconPrimary fontSize="small" sx={{ color: theme.palette.grey[700] }} /> : null;
	
	  const IconSecondary = iconSecondary!;
	  const secondaryIcon = iconSecondary ? <IconSecondary fontSize="small" sx={{ color: theme.palette.grey[700] }} /> : null;
	
	  const errorState = formState === 'error';
	
	  return (
	    <MUIFormControl fullWidth error={errorState}>
	      <InputLabel>{captionLabel}</InputLabel>
	      <OutlinedInput
	        placeholder={placeholder}
	        type="text"
	        label={captionLabel}
	        startAdornment={
	          <>
	            {primaryIcon && <InputAdornment position="start">{primaryIcon}</InputAdornment>}
	            {textPrimary && (
	              <>
	                <InputAdornment position="start">{textPrimary}</InputAdornment>
	                <Divider sx={{ height: 28, m: 0.5, mr: 1.5 }} orientation="vertical" />
	              </>
	            )}
	          </>
	        }
	        endAdornment={
	          <>
	            {secondaryIcon && <InputAdornment position="end">{secondaryIcon}</InputAdornment>}
	            {textSecondary && (
	              <>
	                <Divider sx={{ height: 28, m: 0.5 }} orientation="vertical" />
	                <InputAdornment position="end">{textSecondary}</InputAdornment>
	              </>
	            )}
	          </>
	        }
	      />
	    </MUIFormControl>
	  );
	};
	
	export default FormControl;

```

src/components/ui-component/extended/Form/InputLabel.tsx```tsx
	'use client';
	
	// material-ui
	import { experimentalStyled as styled } from '@mui/material/styles';
	import { InputLabel as MuiInputLabel, InputLabelProps } from '@mui/material';
	
	// ==============================|| INPUT LABEL ||============================== //
	
	const BInputLabel = styled((props: MUIInputLabelProps) => <MuiInputLabel {...props} />, {
	  shouldForwardProp: (prop) => prop !== 'horizontal'
	})(({ theme, horizontal }) => ({
	  color: theme.palette.text.primary,
	  fontWeight: 500,
	  marginBottom: horizontal ? 0 : 8
	}));
	
	interface MUIInputLabelProps extends InputLabelProps {
	  horizontal?: boolean;
	}
	
	const InputLabel = ({ children, horizontal = false, ...others }: MUIInputLabelProps) => (
	  <BInputLabel horizontal={horizontal} {...others}>
	    {children}
	  </BInputLabel>
	);
	
	export default InputLabel;

```

src/components/ui-component/PasswordStrength/index.tsx```tsx
	import * as React from 'react';
	import { strengthColor, strengthIndicator } from 'utils/password-strength';
	import { Box, Typography } from '@mui/material';
	
	export interface IPasswordStrengthProps {
	  value: string;
	}
	
	const ITEM_WIDTH = 16.67; // percent
	
	export default function PasswordStrength(props: IPasswordStrengthProps) {
	  const { value } = props;
	  const indicator = strengthIndicator(value);
	  const items = Array(indicator).fill('');
	  const color = strengthColor(indicator);
	
	  if (!value) return null;
	
	  return (
	    <Box display="flex" alignItems="center">
	      <Box display="flex" width={`${ITEM_WIDTH * indicator}%`}>
	        {items.map((item) => {
	          return <Box marginRight="8px" height="8px" width={`${100 / indicator}%`} borderRadius={12} bgcolor={color?.color} key={item} />;
	        })}
	      </Box>
	      <Typography variant="h5">{color?.label}</Typography>
	    </Box>
	  );
	}

```

src/components/ui-component/FormControl/index.tsx```tsx
	import { FormControl as MUIFormControl, FormControlProps, InputLabel, FormHelperText } from '@mui/material';
	import cs from 'classnames';
	import styles from './styles.module.scss';
	
	export interface IFormControlProps extends FormControlProps {
	  label?: string;
	  labelFor?: string;
	  errorMessage?: string;
	  hideLabel?: boolean;
	}
	
	export default function FormControl(props: IFormControlProps) {
	  const { children, label, labelFor, error, errorMessage, hideLabel = false, ...rest } = props;
	  const showLabel = !hideLabel && label;
	  return (
	    <MUIFormControl
	      classes={{
	        root: cs(styles.root, {
	          [styles.hideLabel]: hideLabel
	        })
	      }}
	      error={error}
	      {...rest}
	    >
	      {showLabel && (
	        <InputLabel classes={{ root: styles.label }} htmlFor={labelFor}>
	          {label}
	        </InputLabel>
	      )}
	      {children}
	      {error && errorMessage && (
	        <FormHelperText error classes={{ root: styles.errorMessage }}>
	          {errorMessage}
	        </FormHelperText>
	      )}
	    </MUIFormControl>
	  );
	}

```

src/components/ui-component/FormControl/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.root {
	  margin-top: 1px;
	  margin-bottom: 1px;
	  input {
	    padding-top: 23px !important;
	  }
	}
	
	.hideLabel {
	  input {
	    padding-top: 0px !important;
	  }
	}
	
	.label {
	  color: $grey700;
	  font-size: 0.625rem;
	  &[data-shrink='false'] {
	    top: 50%;
	    transform: translateY(-50%);
	    padding: 0 16px;
	    font-size: 0.875rem;
	  }
	  &[data-shrink='true'] {
	    top: 50%;
	    font-size: 0.625rem;
	    transform: translateY(calc(-50% - 10px));
	    padding: 0 16px;
	    color: $grey700;
	  }
	}
	
	.errorMessage {
	  position: absolute;
	  top: 100%;
	}

```

src/components/ui-component/Upload/index.tsx```tsx
	import { ChangeEvent, useState } from 'react';
	import { Button } from '@mui/material';
	import { useIntl } from 'react-intl';
	
	// projects import
	import * as notify from 'utils/notify';
	import { MAX_FILE_SIZE } from '@/constant';
	import AddIcon from '@mui/icons-material/Add';
	import styles from './styles.module.scss';
	
	export interface IUploadProps {
	  imageUrl?: string;
	  onChange?: (file?: File) => void;
	  accept?: string;
	  maxSize?: number;
	}
	
	export default function Upload(props: IUploadProps) {
	  const { imageUrl = '', accept, maxSize = MAX_FILE_SIZE, onChange } = props;
	  const [src, setSrc] = useState<string>(imageUrl);
	  const { formatMessage } = useIntl();
	
	  const handleChange = async (e: ChangeEvent<HTMLInputElement>) => {
	    const file = e.currentTarget.files?.[0];
	    if (!file) return;
	    const { size } = file;
	    const sizeMB = size / 1024 / 1024;
	
	    if (sizeMB > maxSize) {
	      notify.error(formatMessage({ id: 'maxSizeFileUpload' }, { size: maxSize }));
	      return;
	    }
	    setSrc(URL.createObjectURL(file));
	    if (onChange) {
	      onChange(file);
	    }
	  };
	
	  return (
	    <Button component="label" variant="outlined" color="primary" sx={{ width: '100%', position: 'relative' }}>
	      <AddIcon />
	      {
	        // eslint-disable-next-line @next/next/no-img-element
	        !!src && <img alt="local" src={src} className={styles.imageLocal} />
	      }
	      <input type="file" hidden id="imageUrl" accept={accept} onChange={handleChange} />
	    </Button>
	  );
	}

```

src/components/ui-component/Upload/styles.module.scss```scss
	.imageLocal {
	  position: absolute;
	  inset: 0;
	  z-index: 0;
	  width: 100%;
	  height: 100%;
	  object-fit: contain;
	}

```

src/components/ui-component/Link/index.tsx```tsx
	import NextLink, { LinkProps } from 'next/link';
	import { Box, BoxProps } from '@mui/material';
	import cs from 'classnames';
	import styles from './styles.module.scss';
	import React from 'react';
	
	export interface ILinkProps extends Omit<BoxProps, 'onClick' | 'onMouseEnter' | 'onTouchStart'>, LinkProps {
	  className?: string;
	  children?: React.ReactNode;
	}
	
	export default function Link(props: ILinkProps) {
	  const { className } = props;
	  return <Box component={NextLink} {...props} className={cs(styles.link, className)} />;
	}

```

src/components/ui-component/Link/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.link {
	  color: $secondaryNormal;
	  text-decoration: none;
	  &:hover {
	    color: $secondaryNormalHover;
	  }
	  &:active {
	    color: $secondaryNormalActive;
	  }
	}

```

src/components/ui-component/TextField/index.tsx```tsx
	import * as React from 'react';
	import cs from 'classnames';
	import { TextField as MUITextField, TextFieldProps as MUITextFieldProps } from '@mui/material';
	import styles from './styles.module.scss';
	
	export type TextFieldProps = MUITextFieldProps;
	export default function TextField(props: TextFieldProps) {
	  const { size } = props;
	  return (
	    <MUITextField
	      {...props}
	      classes={{
	        root: cs(styles.root, { [styles.sizeSmall]: size === 'small', [styles.sizeMedium]: size === 'medium' })
	      }}
	    />
	  );
	}

```

src/components/ui-component/TextField/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.root {
	  :global {
	    .MuiOutlinedInput-root {
	      border-radius: 12px;
	      fieldset {
	        border-color: #00000023;
	      }
	    }
	    .MuiInputBase-root {
	      background-color: $grey50;
	    }
	  }
	  label[data-shrink='false'] {
	    margin-top: 5px;
	  }
	  input {
	    height: 62px;
	    box-sizing: border-box;
	    color: $grey900;
	    font-weight: 500;
	    background-color: $grey50;
	    border-radius: inherit;
	  }
	}
	
	.sizeSmall {
	  label[data-shrink='false'] {
	    margin-top: 1px;
	  }
	  input {
	    height: 42px;
	  }
	}
	
	.sizeMedium {
	  label[data-shrink='false'] {
	    margin-top: -1px;
	  }
	  input {
	    height: 52px;
	  }
	}

```

src/components/ui-component/autocomplete/Users.tsx```tsx
	import { useEffect, useState } from 'react';
	import TextField from '@mui/material/TextField';
	import Autocomplete from '@mui/material/Autocomplete';
	import CircularProgress from '@mui/material/CircularProgress';
	import { useAsync } from '@/hooks/useAsync';
	import { getUsers } from '@/utils/services/user';
	import { User } from '@/utils/dtos/user.dto';
	import { Box, Popper, Typography, useTheme } from '@mui/material';
	import Avatar from '../extended/Avatar';
	import Chip from '../extended/Chip';
	import { TextFieldProps } from '../TextField';
	import { useIntl } from 'react-intl';
	import { MagnifyingGlass } from '@phosphor-icons/react';
	interface IUser extends User {
	  _id: string;
	  firstName: string;
	  lastName: string;
	}
	interface Props {
	  onChange?: (values: any) => void;
	  inputProps?: TextFieldProps;
	}
	const UserAutoComplete = ({ onChange, inputProps }: Props) => {
	  const theme = useTheme();
	  const { formatMessage } = useIntl();
	  const { execute } = useAsync();
	  const [open, setOpen] = useState(false);
	  const [users, setUsers] = useState<IUser[]>([]);
	  const loading = open && users.length === 0;
	
	  const fetchData = async () => {
	    const result = await execute(getUsers());
	    setUsers(result?.data?.users || []);
	  };
	
	  const handleChange = (_: any, values: IUser[]) => {
	    onChange?.(values);
	  };
	  useEffect(() => {
	    if (!loading) {
	      return;
	    }
	
	    fetchData();
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [loading]);
	
	  const renderName = (v: IUser) => `${v.firstName} ${v.lastName}`;
	
	  return (
	    <Autocomplete
	      sx={{
	        '& .MuiAutocomplete-inputRoot': {
	          borderRadius: '12px'
	        }
	      }}
	      fullWidth
	      open={open}
	      onOpen={() => {
	        setOpen(true);
	      }}
	      onClose={() => {
	        setOpen(false);
	      }}
	      multiple
	      disableCloseOnSelect
	      isOptionEqualToValue={(option: IUser, value) => option._id === value._id}
	      getOptionLabel={renderName}
	      options={users}
	      renderTags={(tagValue, getTagProps) =>
	        tagValue.map((option, index) => <Chip {...getTagProps({ index })} key={option._id} label={renderName(option)} />)
	      }
	      renderOption={(props, option) => (
	        <li {...props}>
	          <Box display="flex" gap={1}>
	            <Avatar src={option?.imageUrl || undefined} alt={renderName(option)} />
	            <Typography variant="h5">{renderName(option)}</Typography>
	            <Typography>{option.email}</Typography>
	          </Box>
	        </li>
	      )}
	      loading={loading}
	      renderInput={(params) => (
	        <TextField
	          {...params}
	          hiddenLabel
	          {...inputProps}
	          InputProps={{
	            ...params.InputProps,
	            placeholder: formatMessage({ id: 'userAutoCompletePlaceholder' }),
	            startAdornment: (
	              <>
	                <MagnifyingGlass size={20} />
	                {params.InputProps.startAdornment}
	              </>
	            ),
	            endAdornment: (
	              <>
	                {loading ? <CircularProgress color="inherit" size={20} /> : null}
	                {params.InputProps.endAdornment}
	              </>
	            )
	          }}
	        />
	      )}
	      onChange={handleChange}
	      PopperComponent={(popperProps) => (
	        <Popper
	          {...popperProps}
	          sx={{
	            borderRadius: '8px',
	            boxShadow: theme.shadows[2]
	          }}
	        />
	      )}
	    />
	  );
	};
	
	export default UserAutoComplete;

```

src/components/ui-component/inputs/index.ts```ts
	export { default as OutlinedInput } from './OutlinedInput';
	export { default as OutlinePassword } from './OutlinedPassword';
	export { default as AmountInput } from './Amount';

```

src/components/ui-component/inputs/OutlinedPassword/index.tsx```tsx
	import { useState } from 'react';
	import { IconButton, InputAdornment } from '@mui/material';
	import Visibility from '@mui/icons-material/Visibility';
	import VisibilityOff from '@mui/icons-material/VisibilityOff';
	
	// projects import
	import OutlinedInput, { IOutlinedInputProps } from '../OutlinedInput';
	
	export interface IOutlinePasswordProps extends IOutlinedInputProps {
	  showPassword?: boolean;
	}
	
	export default function OutlinePassword(props: IOutlinePasswordProps) {
	  const { showPassword: defaultShowPassword = false } = props;
	  const [showPassword, setShowPassword] = useState(defaultShowPassword);
	
	  const handleToggleShowPassword = () => {
	    setShowPassword((prev) => {
	      return !prev;
	    });
	  };
	
	  return (
	    <OutlinedInput
	      {...props}
	      type={showPassword ? 'text' : 'password'}
	      endAdornment={
	        <InputAdornment position="end">
	          <IconButton aria-label="toggle password visibility" edge="end" size="large" onClick={handleToggleShowPassword}>
	            {showPassword ? <Visibility /> : <VisibilityOff />}
	          </IconButton>
	        </InputAdornment>
	      }
	    />
	  );
	}

```

src/components/ui-component/inputs/OutlinedInput/index.tsx```tsx
	import { OutlinedInput as MUIOutlinedInput, OutlinedInputProps } from '@mui/material';
	import cs from 'classnames';
	import styles from './styles.module.scss';
	
	export interface IOutlinedInputProps extends OutlinedInputProps {
	  hideLabel?: boolean;
	}
	
	export default function OutlinedInput(props: IOutlinedInputProps) {
	  const { size } = props;
	  return (
	    <MUIOutlinedInput
	      classes={{
	        notchedOutline: styles.notchedOutline,
	        input: cs(styles.input, {
	          [styles.sizeMedium]: size === 'medium'
	        }),
	        root: styles.root
	      }}
	      size={size}
	      {...props}
	    />
	  );
	}

```

src/components/ui-component/inputs/OutlinedInput/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.notchedOutline {
	  border-color: $border;
	  top: 0;
	  border-radius: 12px;
	  legend {
	    display: none;
	    font-size: 0;
	  }
	}
	
	.root {
	  border-radius: 12px;
	  overflow: hidden;
	  background-color: $grey50;
	}
	
	.input {
	  font-size: 0.875rem;
	  padding: 0px 16px 0px 16px;
	  box-sizing: border-box;
	  height: 66px;
	  background-color: $grey50;
	  &::placeholder {
	    color: $grey700;
	    opacity: 1;
	  }
	}
	
	.sizeMedium {
	  height: 48px;
	  padding-top: 12px;
	  padding-bottom: 0;
	}

```

src/components/ui-component/inputs/Amount/index.tsx```tsx
	import * as React from 'react';
	import { NumericFormat, NumericFormatProps, NumberFormatValues } from 'react-number-format';
	import TextField, { TextFieldProps } from 'components/ui-component/TextField';
	import { CURRENCY_SYMBOL } from 'constant';
	
	interface CustomProps {
	  onChange: (event: { target: { name: string; value: string } }) => void;
	  name: string;
	}
	const NumericFormatCustom = React.forwardRef<NumericFormatProps, CustomProps>(function NumericFormatCustom(props, ref) {
	  const { onChange, ...rest } = props;
	
	  const handleChange = (values: NumberFormatValues) => {
	    if (onChange) {
	      onChange({
	        target: {
	          name: props.name,
	          value: values.value
	        }
	      });
	    }
	  };
	
	  return (
	    <NumericFormat
	      {...rest}
	      getInputRef={ref}
	      onValueChange={handleChange}
	      thousandSeparator
	      valueIsNumericString
	      prefix={CURRENCY_SYMBOL}
	    />
	  );
	});
	
	export type AmountProps = TextFieldProps & {};
	export default function Amount(props: AmountProps) {
	  const { onChange, ...rest } = props;
	
	  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
	    if (onChange) {
	      onChange(event);
	    }
	  };
	
	  return (
	    <TextField
	      {...rest}
	      InputProps={{
	        inputComponent: NumericFormatCustom as any
	      }}
	      onChange={handleChange}
	    />
	  );
	}

```

src/components/ui-component/DatePicker/index.tsx```tsx
	import * as React from 'react';
	import { FormHelperText } from '@mui/material';
	import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
	import enGB from 'date-fns/locale/en-GB';
	import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
	import { DatePicker as MUIDatePicker, DatePickerProps } from '@mui/x-date-pickers/DatePicker';
	
	export interface IDatePickerProps extends DatePickerProps<Date> {
	  error?: boolean;
	  helperText?: string;
	}
	
	export default function DatePicker(props: IDatePickerProps) {
	  const { error, helperText, ...rest } = props;
	  return (
	    <LocalizationProvider adapterLocale={enGB} dateAdapter={AdapterDateFns}>
	      <MUIDatePicker {...rest} />
	      {helperText && <FormHelperText error={error}>{helperText}</FormHelperText>}
	    </LocalizationProvider>
	  );
	}

```

src/components/ui-component/buttons/index.tsx```tsx
	export { default as Button } from './Button';

```

src/components/ui-component/buttons/Button/index.tsx```tsx
	import LoadingButton, { LoadingButtonProps } from '@mui/lab/LoadingButton';
	import styles from './styles.module.scss';
	
	export interface IButtonProps extends LoadingButtonProps {}
	
	export default function Button(props: IButtonProps) {
	  return (
	    <LoadingButton
	      {...props}
	      classes={{
	        root: styles.root,
	        sizeLarge: styles.sizeLarge,
	        containedError: styles.containedError,
	        loading: styles.loading,
	        loadingIndicator: styles.loadingIndicator
	      }}
	    />
	  );
	}

```

src/components/ui-component/buttons/Button/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.root {
	  border-radius: 4px;
	}
	
	.sizeLarge {
	  height: 44px;
	  font-size: 0.875rem;
	}
	
	.containedError {
	  background-color: $highlightNormal;
	}
	
	.loading {
	  img,
	  svg {
	    opacity: 0;
	  }
	}
	.loadingIndicator {
	  img,
	  svg {
	    opacity: 1;
	  }
	}

```

src/components/ui-component/table/default.scss```scss
	@import 'styles/variables.module';
	
	.tableActionIcon {
	  font-size: 20px;
	  cursor: pointer;
	  padding: 0;
	  margin: 0;
	  min-width: 0;
	  display: block;
	  line-height: 1;
	}
	.tableActionIconEdit {
	  color: $grey600;
	}
	.tableActionIconDelete,
	.tableActionIconLock,
	.tableActionIconDelete {
	  color: $primaryMain;
	}
	.tableActionIconView {
	  color: $grey600;
	}

```

src/components/ui-component/table/table.module.scss```scss
	@import 'styles/variables.module';
	
	.iconSort{
	  position: relative;
	  width: 24px;
	  height: 24px;
	}
	.arrow{
	  position: absolute;
	  left: 0;
	  width: auto;
	  height: auto;
	  color: rgba($grey600, 0.4);
	}
	.arrowUp{
	  top: -3px;
	}
	.arrowDown{
	  bottom: -3px;
	}
	.active{
	  color: $primaryMain;
	}
	.icon{
	  color: 'red'
	}
```

src/components/ui-component/table/index.tsx```tsx
	'use client';
	import { Box, BoxProps } from '@mui/material';
	import { DataGrid, DataGridProps, GridSortDirection } from '@mui/x-data-grid';
	import { ArrowDropDown, ArrowDropUp } from '@mui/icons-material';
	import styles from './table.module.scss';
	import './default.scss';
	import clsx from 'clsx';
	import { useMemo } from 'react';
	import { useIntl } from 'react-intl';
	import { PAGINATE_PAGE_SIZE } from '@/utils/constant';
	
	interface CustomTableProps extends DataGridProps {
	  wrapperBox?: Partial<BoxProps>;
	}
	
	const IconSort = ({ dir = 'desc' }: { dir: GridSortDirection }) => (
	  <Box className={styles.iconSort}>
	    <ArrowDropUp className={clsx([styles.arrow, styles.arrowUp, dir === 'asc' && styles.active])} />
	    <ArrowDropDown className={clsx([styles.arrow, styles.arrowDown, dir === 'desc' && styles.active])} />
	  </Box>
	);
	
	export default function Table({ initialState, sx, slots, rows, columns, wrapperBox, rowCount, ...props }: CustomTableProps) {
	  const { formatMessage } = useIntl();
	  const formatRows = useMemo(() => {
	    return rows.map((item) => ({ ...item, id: item?._id || item?.id }));
	  }, [rows]);
	
	  const renderNoItem = () => (
	    <Box width="100%" height="100%" display="flex" justifyContent="center" alignItems="center">
	      {formatMessage({ id: 'tableNoItems' })}
	    </Box>
	  );
	
	  const isNoItems = rows.length === 0;
	  return (
	    <Box width="100%" sx={{ height: isNoItems ? '150px' : 'unset' }} {...wrapperBox}>
	      <DataGrid
	        rows={formatRows}
	        columns={columns}
	        initialState={{
	          pagination: {
	            paginationModel: { page: 0, pageSize: PAGINATE_PAGE_SIZE }
	          },
	          sorting: {
	            sortModel: [
	              {
	                field: '_id',
	                sort: 'asc'
	              }
	            ]
	          },
	          ...initialState
	        }}
	        rowCount={rowCount || PAGINATE_PAGE_SIZE}
	        sortingMode="server"
	        // filterMode="server"
	        paginationMode="server"
	        pageSizeOptions={[5, 10, 20, 50, 100]}
	        disableRowSelectionOnClick
	        disableColumnMenu
	        hideFooterSelectedRowCount
	        slots={{
	          columnSortedAscendingIcon: () => <IconSort dir="asc" />,
	          columnSortedDescendingIcon: () => <IconSort dir="desc" />,
	          columnUnsortedIcon: () => <IconSort dir={null} />,
	          noRowsOverlay: () => renderNoItem(),
	          ...slots
	        }}
	        sx={{
	          color: '#121926',
	          '& .MuiDataGrid-main': {
	            backgroundColor: '#fff',
	            borderRadius: 4,
	            border: '1px solid #e0e0e0'
	          },
	          '& .MuiDataGrid-iconButtonContainer': {
	            width: 'auto',
	            visibility: 'visible'
	          },
	          '& .MuiIconButton-root': {
	            flex: '1'
	          },
	          '& .MuiDataGrid-sortIcon': {
	            opacity: '1 !important'
	          },
	          '& .MuiDataGrid-footerContainer': {
	            marginTop: '16px',
	            backgroundColor: '#fff',
	            borderRadius: 4,
	            border: '1px solid #e0e0e0',
	            display: isNoItems ? 'none' : 'flex'
	          },
	          '& .MuiTablePagination-toolbar': {
	            paddingTop: 0,
	            paddingBottom: 0
	          },
	          '& .MuiDataGrid-columnHeaderTitle': {
	            color: '#4B5565',
	            fontWeight: 400
	          },
	          ...sx
	        }}
	        {...props}
	      />
	    </Box>
	  );
	}

```

src/components/maintenance/ComingSoon/ComingSoon1/Slider.tsx```tsx
	// material-ui
	import { CardMedia, Grid, Link } from '@mui/material';
	
	// third party
	import Slider from 'react-slick';
	
	// assets
	const imageSlider1 = '/assets/images/maintenance/img-slider-layout1.png';
	const imageSlider2 = '/assets/images/maintenance/img-slider-layout2.png';
	const imageSlider3 = '/assets/images/maintenance/img-slider-layout3.png';
	
	// ================================|| SLIDER - ITEMS ||================================ //
	
	const Item = ({ item }: { item: { image: string } }) => (
	  <Grid container direction="column" alignItems="center" spacing={3} textAlign="center">
	    <Grid item>
	      <CardMedia component="img" image={item.image} title="Slider5 image" />
	    </Grid>
	  </Grid>
	);
	
	// ================================|| SLIDER ||================================ //
	
	const ComingSoonSlider = ({ handleClickOpen }: { handleClickOpen: (slideIndex: number) => void }) => {
	  const settings = {
	    autoplay: true,
	    arrows: false,
	    dots: true,
	    infinite: true,
	    speed: 500,
	    slidesToShow: 1,
	    slidesToScroll: 1
	  };
	
	  const items = [
	    {
	      image: imageSlider1
	    },
	    {
	      image: imageSlider2
	    },
	    {
	      image: imageSlider3
	    }
	  ];
	  return (
	    <Slider {...settings}>
	      {items.map((item, index) => (
	        <Link key={index} href="#" variant="inherit" sx={{ cursor: 'pointer' }} onClick={() => handleClickOpen(index)}>
	          <Item item={item} />
	        </Link>
	      ))}
	    </Slider>
	  );
	};
	
	export default ComingSoonSlider;

```

src/components/maintenance/ComingSoon/ComingSoon1/MailerSubscriber.tsx```tsx
	// material-ui
	import { Box, Button, FormControl, FormHelperText, Grid, InputLabel, OutlinedInput } from '@mui/material';
	
	// third party
	import { useDispatch } from 'store';
	import { Formik } from 'formik';
	import clsx from 'clsx';
	import * as Yup from 'yup';
	import axios from 'axios';
	
	// project imports
	import AnimateButton from 'ui-component/extended/AnimateButton';
	import useScriptRef from 'hooks/useScriptRef';
	import { openSnackbar } from 'store/slices/snackbar';
	import { gridSpacing } from 'store/constant';
	
	// ===========================|| MAILER SUBSCRIBER ||=========================== //
	
	const MailerSubscriber = ({ className, ...others }: { className?: string }) => {
	  const scriptedRef = useScriptRef();
	  const dispatch = useDispatch();
	
	  return (
	    <Formik
	      initialValues={{
	        email: '',
	        submit: null
	      }}
	      validationSchema={Yup.object().shape({
	        email: Yup.string().email('Must be a valid email').max(255).required('Email is required')
	      })}
	      onSubmit={async (values, { setErrors, setStatus, setSubmitting }) => {
	        try {
	          const options = {
	            headers: {
	              'content-type': 'application/json'
	            }
	          };
	          await axios.post('https://yourapicall', { email: values.email }, options);
	          dispatch(
	            openSnackbar({
	              open: true,
	              message: 'Success! Please check inbox and confirm.',
	              variant: 'alert',
	              alert: {
	                color: 'success'
	              },
	              close: false
	            })
	          );
	
	          if (scriptedRef.current) {
	            setStatus({ success: true });
	            setSubmitting(false);
	          }
	        } catch (err: any) {
	          if (scriptedRef.current) {
	            setStatus({ success: false });
	            setErrors({ submit: err?.message });
	            setSubmitting(false);
	          }
	        }
	      }}
	    >
	      {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => (
	        <form noValidate onSubmit={handleSubmit} className={clsx(className)} {...others}>
	          <Grid container alignItems="center" spacing={gridSpacing}>
	            <Grid item xs zeroMinWidth>
	              <FormControl fullWidth error={Boolean(touched.email && errors.email)}>
	                <InputLabel htmlFor="outlined-adornment-email-forgot">Email Address</InputLabel>
	                <OutlinedInput
	                  id="outlined-adornment-email-forgot"
	                  type="email"
	                  defaultValue={values.email}
	                  name="email"
	                  onBlur={handleBlur}
	                  onChange={handleChange}
	                  label="Email Address"
	                />
	              </FormControl>
	            </Grid>
	            <Grid item>
	              <AnimateButton>
	                <Button
	                  disableElevation
	                  disabled={isSubmitting}
	                  type="submit"
	                  variant="contained"
	                  size="large"
	                  sx={{
	                    px: 2.75,
	                    py: 1.5
	                  }}
	                >
	                  Subscribe
	                </Button>
	              </AnimateButton>
	            </Grid>
	          </Grid>
	          {touched.email && errors.email && (
	            <Box sx={{ mt: 1 }}>
	              <FormHelperText error id="standard-weight-helper-text-email-forgot">
	                {errors.email}
	              </FormHelperText>
	            </Box>
	          )}
	          {errors.submit && (
	            <Box sx={{ mt: 3 }}>
	              <FormHelperText error>{errors.submit}</FormHelperText>
	            </Box>
	          )}
	        </form>
	      )}
	    </Formik>
	  );
	};
	
	export default MailerSubscriber;

```

src/components/dialogs/ProjectRolesDialog.tsx```tsx
	/**
	 * @license
	 * Copyright 2024 J2C
	 */
	
	import { useState, useEffect, ChangeEvent, Dispatch, SetStateAction } from 'react';
	import { Button, Dialog, DialogActions, DialogContent, TextField, Typography } from '@mui/material';
	import { MAX_ROWS, PROJECTS_ENUM } from '@/utils/common';
	import { updateFormField } from '@/utils/helper';
	import styles from '@/styles/dataDialog.module.scss';
	import APIS from '@/utils/api';
	import axiosServices from '@/utils/axios';
	
	const DEFAULT_FORM_STATE = {
	  role0: '',
	  role1: '',
	  role2: '',
	  role3: '',
	  role4: ''
	};
	
	interface ProjectRolesDialogProps {
	  setAction: Dispatch<SetStateAction<any>>;
	  showDialog: boolean;
	  currentEditObject: any;
	  onCloseDialog: () => void;
	  onSuccess: (type: number) => void;
	  onError: (type: number) => void;
	}
	
	const FEATURE_FLAG: boolean = false;
	
	export default function ProjectRolesDialog(props: ProjectRolesDialogProps) {
	  const isEdit = Object.keys(props.currentEditObject).length > 0;
	
	  const [formFields, setFormFields] = useState<any>(isEdit ? props.currentEditObject : DEFAULT_FORM_STATE);
	  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
	
	  // @ts-ignore
	  useEffect(() => {
	    if (props.showDialog) {
	      setFormFields(isEdit ? props.currentEditObject : DEFAULT_FORM_STATE);
	    }
	  }, [props.currentEditObject, props.showDialog, isEdit]);
	
	  const isDisabled = () => false;
	
	  const closeDialog = () => {
	    setIsSubmitting(false);
	    props.onCloseDialog();
	  };
	
	  const handleSubmit = async () => {
	    setIsSubmitting(true);
	
	    try {
	      if (isEdit) {
	        const roles = [];
	        roles[0] = formFields.role0;
	        roles[1] = formFields.role1;
	        roles[2] = formFields.role2;
	        roles[3] = formFields.role3;
	        await axiosServices.put(APIS.UPDATE_PROJECT_ROLES, {
	          projectId: formFields._id,
	          creatorEmail: formFields.creatorEmail,
	          creatorId: formFields.creatorId,
	          builderId: formFields.builderId,
	          roles
	        });
	      }
	
	      props.onSuccess(PROJECTS_ENUM.editRoles);
	    } catch (error) {
	      props.onError(PROJECTS_ENUM.editRoles);
	    }
	
	    closeDialog();
	  };
	
	  return (
	    <Dialog classes={{ paper: styles.dialog }} onClose={closeDialog} open={props.showDialog} component="form">
	      <Typography variant="h5" className={styles.title}>
	        {isEdit ? 'EDIT' : 'CREATE'} PROJECT ROLES
	      </Typography>
	      <Typography variant="h6" className={styles.title} sx={{ marginBottom: '10px' }}>
	        Add email addresses (line/comma separated)
	      </Typography>
	      {FEATURE_FLAG && (
	        <DialogContent className={styles.fields}>
	          {FEATURE_FLAG && (
	            <div>
	              <TextField
	                disabled={true}
	                // color="tertiary"
	                label="projectId*"
	                variant="standard"
	                value={formFields.id}
	                onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'id')}
	              />
	              <TextField
	                disabled={true}
	                // color="tertiary"
	                label="UID*"
	                variant="standard"
	                value={formFields.creatorId}
	                onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'creatorId')}
	              />
	              <TextField
	                disabled={true}
	                // color="tertiary"
	                label="CreatorEmail*"
	                variant="standard"
	                value={formFields.creatorEmail}
	                onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'creatorEmail')}
	              />
	              <TextField
	                disabled={true}
	                // color="tertiary"
	                label="BuilderId*"
	                variant="standard"
	                value={formFields.builderId}
	                onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'builderId')}
	              />
	            </div>
	          )}
	        </DialogContent>
	      )}
	
	      <DialogContent className={styles.fields}>
	        <TextField
	          multiline={true}
	          maxRows={MAX_ROWS.M}
	          // color="tertiary"
	          label="Approver_0 (Admin, Owner) - Full Access"
	          variant="standard"
	          value={formFields.role0}
	          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'role0')}
	        />
	        <TextField
	          multiline={true}
	          maxRows={MAX_ROWS.M}
	          // color="tertiary"
	          label="Approver_1 (Project Manager, Site Superintendent) - Full Access Except Payments"
	          variant="standard"
	          value={formFields.role1}
	          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'role1')}
	        />
	
	        <TextField
	          multiline={true}
	          maxRows={MAX_ROWS.M}
	          // color="tertiary"
	          label="Approver_2 (Accounts Payable, Basic) - Read-Only"
	          variant="standard"
	          value={formFields.role2}
	          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'role2')}
	        />
	        {FEATURE_FLAG && (
	          <>
	            <TextField
	              multiline={true}
	              maxRows={MAX_ROWS.M}
	              // color="tertiary"
	              label="Approver_3"
	              variant="standard"
	              value={formFields.role3}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'role3')}
	            />
	
	            <TextField
	              multiline={true}
	              maxRows={MAX_ROWS.M}
	              // color="tertiary"
	              label="Approver_4"
	              variant="standard"
	              value={formFields.role4}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'role4')}
	            />
	          </>
	        )}
	      </DialogContent>
	
	      <DialogActions>
	        <Button color="secondary" variant="contained" onClick={closeDialog}>
	          Cancel
	        </Button>
	        {isSubmitting ? (
	          <Button color="secondary" variant="contained" disabled={true}>
	            Submitting...
	          </Button>
	        ) : (
	          <Button color="secondary" variant="contained" onClick={handleSubmit} disabled={isDisabled()}>
	            Submit
	          </Button>
	        )}
	      </DialogActions>
	    </Dialog>
	  );
	}

```

src/components/dialogs/BudgetImportDialog.tsx```tsx
	/**
	 * @license
	 * Copyright 2024 J2C
	 */
	
	import { useState, useEffect, ChangeEvent, Dispatch, SetStateAction } from 'react';
	import { Dialog, DialogActions, DialogContent, TextField, Typography, FormControlLabel, FormGroup, Checkbox, Button } from '@mui/material';
	import { MAX_ROWS, PROJECTS_ENUM } from '@/utils/common';
	import { updateFormField, updateFormFieldChecked } from '@/utils/helper';
	import styles from '@/styles/dataDialog.module.scss';
	import axiosServices from '@/utils/axios';
	import APIS from '@/utils/api';
	
	const DEFAULT_FORM_STATE = {
	  amount: '',
	  items: '',
	  budgetSeperatorTab: true,
	  budgetSeperatorComma: false,
	  budgetSeperatorSemiColon: true
	};
	
	const FEATURE_FLAG: boolean = false;
	
	interface BudgetImportDialogProps {
	  setAction: Dispatch<SetStateAction<any>>;
	  showDialog: boolean;
	  currentEditObject: object;
	  budgetIndexMax: number;
	  onCloseDialog: () => void;
	  onSuccess: (action: number) => void;
	  onError: (action: number) => void;
	}
	
	export default function BudgetImportDialog(props: BudgetImportDialogProps): JSX.Element {
	  const showDialog = props.showDialog;
	
	  const isEdit = Object.keys(props.currentEditObject).length > 0;
	
	  const [formFields, setFormFields] = useState<any>(isEdit ? props.currentEditObject : DEFAULT_FORM_STATE);
	  const [isSubmitting, setIsSubmitting] = useState(false);
	
	  useEffect(() => {
	    if (showDialog) {
	      setFormFields(isEdit ? props.currentEditObject : DEFAULT_FORM_STATE);
	    }
	  }, [props.currentEditObject, showDialog, isEdit]);
	
	  if (!showDialog) {
	    return <></>;
	  }
	
	  const isDisabled = () => formFields.items.length === 0;
	
	  const closeDialog = () => {
	    setIsSubmitting(false);
	    props.onCloseDialog();
	  };
	
	  const handleSubmit = async () => {
	    setIsSubmitting(true);
	
	    try {
	      if (isEdit) {
	        await axiosServices.post(APIS.IMPORT_PROJECT_BUDGET, {
	          id: formFields._id,
	          creatorId: formFields.creatorId,
	          creatorEmail: formFields.creatorEmail,
	          items: formFields.items,
	          amount: formFields.amount ? formFields.amount : 0,
	          budgetSeperatorTab: formFields.budgetSeperatorTab,
	          budgetSeperatorComma: formFields.budgetSeperatorComma,
	          budgetSeperatorSemiColon: formFields.budgetSeperatorSemiColon,
	          budgetIndexMax: props.budgetIndexMax
	        });
	      }
	
	      props.onSuccess(PROJECTS_ENUM.importBudgets);
	    } catch (error) {
	      props.onError(PROJECTS_ENUM.importBudgets);
	    }
	
	    closeDialog();
	  };
	
	  return (
	    <Dialog classes={{ paper: styles.dialog }} onClose={closeDialog} open={showDialog} component="form">
	      <Typography variant="h5" className={styles.title}>
	        IMPORT BUDGET ITEMS
	      </Typography>
	      <Typography variant="h6">Enter each budget on a separate line, with fields in required order divided by separator</Typography>
	
	      <DialogContent className={styles.fields}>
	        {FEATURE_FLAG && (
	          <div>
	            <TextField
	              disabled={true}
	              // color="tertiary"
	              label="projectId*"
	              variant="standard"
	              value={formFields.id}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'id')}
	            />
	            <TextField
	              disabled={true}
	              // color="tertiary"
	              label="UID*"
	              variant="standard"
	              value={formFields.creatorId}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'creatorId')}
	            />
	            <TextField
	              disabled={true}
	              // color="tertiary"
	              label="CreatorEmail*"
	              variant="standard"
	              value={formFields.creatorEmail}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'creatorEmail')}
	            />
	          </div>
	        )}
	      </DialogContent>
	      <DialogContent className={styles.fields}>
	        {FEATURE_FLAG && (
	          <TextField
	            // color="tertiary"
	            label="Budget Amount"
	            variant="standard"
	            value={formFields.amount}
	            onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'amount')}
	          />
	        )}
	
	        <FormGroup row>
	          <FormControlLabel
	            control={
	              <Checkbox
	                color="secondary"
	                checked={formFields.budgetSeperatorTab}
	                onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldChecked(setFormFields, event, 'budgetSeperatorTab')}
	              />
	            }
	            label="Tab (\t)"
	          />
	          {FEATURE_FLAG && (
	            <FormControlLabel
	              control={
	                <Checkbox
	                  color="secondary"
	                  checked={formFields.budgetSeperatorComma}
	                  onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldChecked(setFormFields, event, 'budgetSeperatorComma')}
	                />
	              }
	              label="Comma (,)"
	            />
	          )}
	          <FormControlLabel
	            control={
	              <Checkbox
	                color="secondary"
	                checked={formFields.budgetSeperatorSemiColon}
	                onChange={(event: ChangeEvent<HTMLInputElement>) => {
	                  updateFormFieldChecked(setFormFields, event, 'budgetSeperatorSemiColon');
	                }}
	              />
	            }
	            label="Semi-Colon (;)"
	          />
	        </FormGroup>
	        <TextField
	          multiline={true}
	          maxRows={MAX_ROWS.M}
	          // color="tertiary"
	          label="Items (Order: Code, Category, Original Budget, Current Budget)"
	          variant="standard"
	          value={formFields.items}
	          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'items')}
	        />
	      </DialogContent>
	      <DialogActions>
	        <Button color="secondary" variant="contained" onClick={closeDialog}>
	          Cancel
	        </Button>
	        {isSubmitting ? (
	          <Button color="secondary" variant="contained" disabled={true}>
	            Submitting...
	          </Button>
	        ) : (
	          <Button color="secondary" variant="contained" onClick={handleSubmit} disabled={isDisabled()}>
	            Submit
	          </Button>
	        )}
	      </DialogActions>
	    </Dialog>
	  );
	}

```

src/components/dialogs/BudgetAddDialog.tsx```tsx
	/**
	 * @license
	 * Copyright 2024 J2C
	 */
	
	import { useState, useEffect, ChangeEvent, Dispatch, SetStateAction } from 'react';
	import { Button, Dialog, DialogActions, DialogContent, TextField, Typography } from '@mui/material';
	import { PROJECTS_ENUM } from '@/utils/common';
	import { updateFormField, updateFormFieldFloat, updateFormFieldInt } from '@/utils/helper';
	import styles from '@/styles/dataDialog.module.scss';
	import axiosServices from '@/utils/axios';
	import APIS from '@/utils/api';
	
	const DEFAULT_FORM_STATE = {
	  budgetIndex: 0,
	  budgetCode: '',
	  budgetOriginalBudget: '',
	  budgetCurrentBudget: '',
	  budgetCategory: '',
	  budgetRevision: '',
	  budgetTotalClaimBeforeHoldback: '',
	  budgetTotalHoldback: '',
	  budgetCurrentClaim: '',
	  budgetTotalClaim: '',
	  budgetTotalClaimPercentage: '',
	  budgetDescription: ''
	};
	
	const FEATURE_FLAG: boolean = false;
	
	interface BudgetAddDialogProps {
	  setAction: Dispatch<SetStateAction<any>>;
	  showDialog: boolean;
	  currentEditObject: any;
	  budgetIndexMax: number;
	  onCloseDialog: () => void;
	  onSuccess: (action: number) => void;
	  onError: (action: number) => void;
	}
	
	export default function BudgetAddDialog(props: BudgetAddDialogProps): JSX.Element {
	  const showDialog = props.showDialog;
	
	  const [formFields, setFormFields] = useState<any>(DEFAULT_FORM_STATE);
	  const [isSubmitting, setIsSubmitting] = useState(false);
	
	  useEffect(() => {
	    if (showDialog) {
	      const initFormData = {
	        ...props.currentEditObject,
	        budgetIndex: Math.floor(props.budgetIndexMax) + 1, // desired index = max + 1
	        budgetCode: '',
	        budgetOriginalBudget: '',
	        budgetCurrentBudget: '',
	        budgetCategory: '',
	        budgetRevision: '',
	        budgetTotalClaimBeforeHoldback: '',
	        budgetTotalHoldback: '',
	        budgetCurrentClaim: '',
	        budgetTotalClaim: '',
	        budgetTotalClaimPercentage: '',
	        budgetDescription: ''
	      };
	      setFormFields(initFormData);
	    }
	  }, [props.currentEditObject, showDialog, props.budgetIndexMax]);
	
	  if (!showDialog) {
	    return <></>;
	  }
	
	  const isDisabled = () =>
	    formFields.budgetIndex === 0 ||
	    formFields.budgetCode.length === 0 ||
	    formFields.budgetOriginalBudget.length === 0 ||
	    formFields.budgetCategory.length === 0;
	
	  const closeDialog = () => {
	    setIsSubmitting(false);
	    props.onCloseDialog();
	  };
	
	  const handleSubmit = async () => {
	    setIsSubmitting(true);
	
	    try {
	      await axiosServices.post(APIS.PROJECT_ADD_BUDGET, {
	        projectId: formFields.id,
	        creatorId: formFields.creatorId,
	        creatorEmail: formFields.creatorEmail,
	        budgetIndex: formFields.budgetIndex,
	        budgetCode: formFields.budgetCode,
	        budgetOriginalBudget: formFields.budgetOriginalBudget,
	        budgetCurrentBudget: formFields.budgetCurrentBudget,
	        budgetCategory: formFields.budgetCategory,
	        budgetRevision: formFields.budgetRevision,
	        budgetTotalClaimBeforeHoldback: formFields.budgetTotalClaimBeforeHoldback,
	        budgetTotalHoldback: formFields.budgetTotalHoldback,
	        budgetCurrentClaim: formFields.budgetCurrentClaim,
	        budgetTotalClaim: formFields.budgetTotalClaim,
	        budgetTotalClaimPercentage: formFields.budgetTotalClaimPercentage,
	        budgetDescription: formFields.budgetDescription
	      });
	
	      props.onSuccess(PROJECTS_ENUM.addBudget);
	    } catch (error) {
	      props.onError(PROJECTS_ENUM.addBudget);
	    }
	
	    closeDialog();
	  };
	
	  return (
	    <Dialog classes={{ paper: styles.dialog }} onClose={closeDialog} open={showDialog} component="form">
	      <Typography variant="h5" className={styles.title}>
	        ADD BUDGET ITEM
	      </Typography>
	
	      <DialogContent className={styles.fields}>
	        {FEATURE_FLAG && (
	          <>
	            <TextField
	              disabled={true}
	              // color="tertiary"
	              label="projectId*"
	              variant="standard"
	              value={formFields.id}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'id')}
	            />
	            <TextField
	              disabled={true}
	              // color="tertiary"
	              label="UID*"
	              variant="standard"
	              value={formFields.creatorId}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'creatorId')}
	            />
	            <TextField
	              disabled={true}
	              // color="tertiary"
	              label="CreatorEmail*"
	              variant="standard"
	              value={formFields.creatorEmail}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'creatorEmail')}
	            />
	            <TextField
	              // color="tertiary"
	              label="Description"
	              variant="standard"
	              value={formFields.budgetDescription}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'budgetDescription')}
	            />
	
	            <TextField
	              // color="tertiary"
	              label="Revision"
	              variant="standard"
	              value={formFields.budgetRevision}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldInt(setFormFields, event, 'budgetRevision')}
	            />
	            <TextField
	              // color="tertiary"
	              label="Total Claim Before Holdback"
	              variant="standard"
	              value={formFields.budgetTotalClaimBeforeHoldback}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => {
	                updateFormFieldFloat(setFormFields, event, 'budgetTotalClaimBeforeHoldback');
	              }}
	            />
	            <TextField
	              // color="tertiary"
	              label="Total Holdback"
	              variant="standard"
	              value={formFields.budgetTotalHoldback}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldFloat(setFormFields, event, 'budgetTotalHoldback')}
	            />
	            <TextField
	              // color="tertiary"
	              label="Current Claim"
	              variant="standard"
	              value={formFields.budgetCurrentClaim}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldFloat(setFormFields, event, 'budgetCurrentClaim')}
	            />
	            <TextField
	              // color="tertiary"
	              label="Total Claim"
	              variant="standard"
	              value={formFields.budgetTotalClaim}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldFloat(setFormFields, event, 'budgetTotalClaim')}
	            />
	            <TextField
	              // color="tertiary"
	              label="Total Claim %"
	              variant="standard"
	              value={formFields.budgetTotalClaimPercentage}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldFloat(setFormFields, event, 'budgetTotalClaimPercentage')}
	            />
	          </>
	        )}
	
	        <TextField
	          // color="tertiary"
	          label="Code"
	          variant="standard"
	          value={formFields.budgetCode}
	          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'budgetCode')}
	        />
	        <TextField
	          // color="tertiary"
	          label="Category"
	          variant="standard"
	          value={formFields.budgetCategory}
	          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'budgetCategory')}
	        />
	
	        <TextField
	          // color="tertiary"
	          label="Original Budget ($)"
	          variant="standard"
	          value={formFields.budgetOriginalBudget}
	          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldFloat(setFormFields, event, 'budgetOriginalBudget')}
	        />
	
	        <TextField
	          // color="tertiary"
	          label="Current Budget ($)"
	          variant="standard"
	          value={formFields.budgetCurrentBudget}
	          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldFloat(setFormFields, event, 'budgetCurrentBudget')}
	        />
	
	        <TextField
	          // color="tertiary"
	          label="Row Index"
	          variant="standard"
	          value={formFields.budgetIndex}
	          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldInt(setFormFields, event, 'budgetIndex')}
	        />
	      </DialogContent>
	      <DialogActions>
	        <Button color="secondary" variant="contained" onClick={closeDialog}>
	          Cancel
	        </Button>
	        {isSubmitting ? (
	          <Button color="secondary" variant="contained" disabled={true}>
	            Submitting...
	          </Button>
	        ) : (
	          <Button color="secondary" variant="contained" onClick={handleSubmit} disabled={isDisabled()}>
	            Submit
	          </Button>
	        )}
	      </DialogActions>
	    </Dialog>
	  );
	}

```

src/components/dialogs/ProjectContractorsDialog.tsx```tsx
	/**
	 * @license
	 * Copyright 2024 J2C
	 */
	
	import { useState, useEffect, ChangeEvent, Dispatch, SetStateAction } from 'react';
	import { Button, Dialog, DialogActions, DialogContent, TextField, Typography } from '@mui/material';
	import { MAX_ROWS, PROJECTS_ENUM } from '@/utils/common';
	import { updateFormField } from '@/utils/helper';
	import styles from '@/styles/dataDialog.module.scss';
	import axiosServices from '@/utils/axios';
	import APIS from '@/utils/api';
	
	const DEFAULT_FORM_STATE = {
	  roleProjectContractors: ''
	};
	
	interface ProjectContractorsDialogProps {
	  setAction: Dispatch<SetStateAction<any>>;
	  showDialog: boolean;
	  currentEditObject: any;
	  onCloseDialog: () => void;
	  onSuccess: (action: number) => void;
	  onError: (action: number) => void;
	}
	
	const FEATURE_FLAG: boolean = false;
	
	export default function ProjectContractorsDialog(props: ProjectContractorsDialogProps) {
	  const isEdit = Object.keys(props.currentEditObject).length > 0;
	
	  const [formFields, setFormFields] = useState<any>(isEdit ? props.currentEditObject : DEFAULT_FORM_STATE);
	  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);
	
	  useEffect(() => {
	    if (props.showDialog) {
	      setFormFields(isEdit ? props.currentEditObject : DEFAULT_FORM_STATE);
	    }
	  }, [props.currentEditObject, props.showDialog, isEdit]);
	
	  const isDisabled = () => false;
	
	  const closeDialog = () => {
	    setIsSubmitting(false);
	    props.onCloseDialog();
	  };
	
	  const handleSubmit = async () => {
	    setIsSubmitting(true);
	
	    try {
	      if (isEdit) {
	        await axiosServices.post(APIS.UPDATE_PROJECT_CONTRACTORS, {
	          id: formFields.id,
	          creatorEmail: formFields.creatorEmail,
	          creatorId: formFields.creatorId,
	          builderId: formFields.builderId,
	          roleProjectContractors: formFields.roleProjectContractors
	        });
	      }
	
	      props.onSuccess(PROJECTS_ENUM.editRoles);
	    } catch (error) {
	      props.onError(PROJECTS_ENUM.editRoles);
	    }
	
	    closeDialog();
	  };
	
	  return (
	    <Dialog classes={{ paper: styles.dialog }} onClose={closeDialog} open={props.showDialog} component="form">
	      <Typography variant="h5" className={styles.title}>
	        {isEdit ? 'EDIT' : 'CREATE'} PROJECT CONTRACTORS
	      </Typography>
	      <Typography variant="h6" className={styles.title} sx={{ marginBottom: '10px' }} />
	      {FEATURE_FLAG && (
	        <DialogContent className={styles.fields}>
	          {FEATURE_FLAG && (
	            <div>
	              <TextField
	                disabled={true}
	                // color="tertiary"
	                label="projectId*"
	                variant="standard"
	                value={formFields.id}
	                onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'id')}
	              />
	              <TextField
	                disabled={true}
	                // color="tertiary"
	                label="UID*"
	                variant="standard"
	                value={formFields.creatorId}
	                onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'creatorId')}
	              />
	              <TextField
	                disabled={true}
	                // color="tertiary"
	                label="CreatorEmail*"
	                variant="standard"
	                value={formFields.creatorEmail}
	                onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'creatorEmail')}
	              />
	              <TextField
	                disabled={true}
	                // color="tertiary"
	                label="BuilderId*"
	                variant="standard"
	                value={formFields.builderId}
	                onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'builderId')}
	              />
	            </div>
	          )}
	        </DialogContent>
	      )}
	
	      <DialogContent className={styles.fields}>
	        <TextField
	          multiline={true}
	          maxRows={MAX_ROWS.M}
	          // color="tertiary"
	          label="Contractor ID"
	          variant="standard"
	          value={formFields.roleProjectContractors}
	          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'roleProjectContractors')}
	        />
	      </DialogContent>
	
	      <DialogActions>
	        <Button color="secondary" variant="contained" onClick={closeDialog}>
	          Cancel
	        </Button>
	        {isSubmitting ? (
	          <Button color="secondary" variant="contained" disabled={true}>
	            Submitting...
	          </Button>
	        ) : (
	          <Button color="secondary" variant="contained" onClick={handleSubmit} disabled={isDisabled()}>
	            Submit
	          </Button>
	        )}
	      </DialogActions>
	    </Dialog>
	  );
	}

```

src/components/dialogs/InvoiceDialog.tsx```tsx
	/**
	 * @license
	 * Copyright 2024 J2C
	 */
	
	import { useState, useEffect, ChangeEvent, Dispatch, SetStateAction } from 'react';
	import {
	  Button,
	  Dialog,
	  DialogActions,
	  DialogContent,
	  Stack,
	  TextField,
	  Typography,
	  FormControlLabel,
	  Checkbox,
	  IconButton,
	  Autocomplete
	} from '@mui/material';
	import { PROJECTS_ENUM } from '@/utils/common';
	import { updateFormField, updateFormFieldChecked, updateFormFieldFloat, updateFormFieldInt } from '@/utils/helper';
	import styles from '@/styles/dataDialog.module.scss';
	import FileDownload from '@mui/icons-material/FileDownload';
	import APIS from '@/utils/api';
	import axiosServices from '@/utils/axios';
	
	const DEFAULT_FILE_NAME: string = 'No file selected';
	
	const DEFAULT_FORM_STATE = {
	  budgetId: '',
	  fileName: DEFAULT_FILE_NAME,
	  file: null,
	  invoiceIndex: 0,
	  invoiceNumber: '',
	  invoiceDate: null,
	  invoiceReceivedDate: '',
	  invoiceSubtotal: '',
	  invoiceGst: '',
	  invoiceGstOverride: false,
	  invoicePst: '',
	  invoicePstOverride: false,
	  invoiceTotal: '',
	  invoiceChqNumber: '',
	  invoiceChqDate: '',
	  invoiceCode: '',
	  invoiceCategory: '',
	  invoiceClaimNumber: '',
	  invoiceDescription: ''
	};
	
	interface InvoiceDialogProps {
	  setAction: Dispatch<SetStateAction<any>>;
	  showDialog: boolean;
	  currentEditObject: any;
	  invoiceContractor: { label: string; invoiceContractorId: string }[];
	  isEdit: boolean;
	  invoiceIndexMax: number;
	  onCloseDialog: () => void;
	  onSuccess: (action: number) => void;
	  onError: (action: number) => void;
	}
	
	const FEATURE_FLAG: boolean = true;
	
	export default function InvoiceDialog(props: InvoiceDialogProps) {
	  const showDialog = props.showDialog;
	
	  const currentEditObject = props.currentEditObject; // NOTE: currentEditObject is budget for add, invoice for edit
	  const isEdit = props.isEdit; // isEdit passed in since currentEditObject always exists for invoices
	
	  const [formFields, setFormFields] = useState(isEdit ? currentEditObject : DEFAULT_FORM_STATE);
	
	  useState(true);
	  const [isSubmitting, setIsSubmitting] = useState(false);
	
	  useEffect(() => {
	    if (showDialog) {
	      const initFormData = isEdit
	        ? currentEditObject
	        : {
	            ...currentEditObject,
	            budgetId: currentEditObject.id,
	            invoiceIndex: Math.floor(props.invoiceIndexMax) + 1, // desired index = max + 1
	            invoiceNumber: '',
	            invoiceDate: null,
	            invoiceReceivedDate: '',
	            invoiceSubtotal: '',
	            invoiceGst: '',
	            invoiceGstOverride: false,
	            invoicePst: '',
	            invoicePstOverride: false,
	            invoiceTotal: '',
	            invoiceChqNumber: '',
	            invoiceChqDate: '',
	            invoiceCode: currentEditObject.budgetCode,
	            invoiceCategory: currentEditObject.budgetCategory,
	            invoiceClaimNumber: '',
	            invoiceDescription: '',
	            invoiceContractorId: '',
	            invoiceContractorName: ''
	          };
	      setFormFields(initFormData);
	    }
	  }, [currentEditObject, showDialog, isEdit, props.invoiceIndexMax]);
	
	  if (!showDialog) {
	    return <></>;
	  }
	
	  const isDisabled = () =>
	    formFields.fileName === DEFAULT_FILE_NAME ||
	    !formFields.invoiceDate ||
	    formFields.invoiceIndex.length === 0 ||
	    formFields.invoiceSubtotal.length === 0;
	
	  const closeDialog = () => {
	    setIsSubmitting(false);
	    props.onCloseDialog();
	  };
	
	  const setFileData = (target: any) => {
	    const file = target.files[0];
	    setFormFields((prevState: any) => ({ ...prevState, fileName: file.name }));
	    setFormFields((prevState: any) => ({ ...prevState, file }));
	  };
	
	  const handleSubmit = async () => {
	    setIsSubmitting(true);
	
	    try {
	      let imageBucketUrl = '';
	
	      if (formFields.file) {
	        // TODO: upload image to S3
	      }
	
	      await axiosServices.post(APIS.UPSERT_INVOICE, {
	        isEdit,
	        imageBucket: imageBucketUrl,
	        budgetId: formFields.budgetId,
	        projectId: formFields.projectId,
	        invoiceIndex: formFields.invoiceIndex,
	        invoiceContractorId: formFields.invoiceContractorId,
	        invoiceContractorName: formFields.invoiceContractorName,
	        creatorEmail: formFields.creatorEmail,
	        creatorId: formFields.creatorId,
	        invoiceNumber: formFields.invoiceNumber,
	        invoiceDate: formFields.invoiceDate,
	        invoiceReceivedDate: formFields.invoiceReceivedDate,
	        invoiceSubtotal: formFields.invoiceSubtotal,
	        invoiceGst: formFields.invoiceGst,
	        invoiceGstOverride: formFields.invoiceGstOverride,
	        invoicePst: formFields.invoicePst,
	        invoicePstOverride: formFields.invoicePstOverride,
	        invoiceTotal: formFields.invoiceTotal,
	        invoiceChqNumber: formFields.invoiceChqNumber,
	        invoiceChqDate: formFields.invoiceChqDate,
	        invoiceCode: formFields.invoiceCode,
	        invoiceCategory: formFields.invoiceCategory,
	        invoiceClaimNumber: formFields.invoiceClaimNumber,
	        invoiceDescription: formFields.invoiceDescription
	      });
	      props.onSuccess(PROJECTS_ENUM.addInvoice);
	    } catch (error) {
	      // console.log(error)
	      props.onError(PROJECTS_ENUM.addInvoice);
	    }
	
	    closeDialog();
	  };
	
	  return (
	    <Dialog classes={{ paper: styles.dialog }} onClose={closeDialog} open={showDialog} component="form">
	      <Typography variant="h5" className={styles.title}>
	        {isEdit ? 'EDIT' : 'ADD'} INVOICE
	      </Typography>
	
	      <DialogContent className={styles.fields}>
	        {FEATURE_FLAG && (
	          <>
	            <TextField
	              disabled={true}
	              // color="tertiary"
	              label="InvoiceID"
	              variant="standard"
	              value={formFields.id}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'id')}
	            />
	            <TextField
	              disabled={true}
	              // color="tertiary"
	              label="BudgetID"
	              variant="standard"
	              value={formFields.budgetId}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'budgetId')}
	            />
	            <TextField
	              disabled={true}
	              // color="tertiary"
	              label="projectId*"
	              variant="standard"
	              value={formFields.projectId}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'projectId')}
	            />
	            <TextField
	              disabled={true}
	              // color="tertiary"
	              label="UID*"
	              variant="standard"
	              value={formFields.creatorId}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'creatorId')}
	            />
	            <TextField
	              disabled={true}
	              // color="tertiary"
	              label="CreatorEmail*"
	              variant="standard"
	              value={formFields.creatorEmail}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'creatorEmail')}
	            />
	            <TextField
	              // color="tertiary"
	              label="GST ($)"
	              variant="standard"
	              value={formFields.invoiceGst}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldFloat(setFormFields, event, 'invoiceGst')}
	            />
	            <FormControlLabel
	              control={
	                <Checkbox
	                  color="secondary"
	                  checked={formFields.invoiceGstOverride}
	                  onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldChecked(setFormFields, event, 'invoiceGstOverride')}
	                />
	              }
	              label="GST Override"
	            />
	            <TextField
	              // color="tertiary"
	              label="PST ($)"
	              variant="standard"
	              value={formFields.invoicePst}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldFloat(setFormFields, event, 'invoicePst')}
	            />
	            <FormControlLabel
	              control={
	                <Checkbox
	                  color="secondary"
	                  checked={formFields.invoicePstOverride}
	                  onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldChecked(setFormFields, event, 'invoicePstOverride')}
	                />
	              }
	              label="PST Override"
	            />
	            <TextField
	              disabled={true}
	              // color="tertiary"
	              label="Total ($)"
	              variant="standard"
	              value={formFields.invoiceTotal}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldFloat(setFormFields, event, 'invoiceTotal')}
	            />
	            <TextField
	              // color="tertiary"
	              label="Description"
	              variant="standard"
	              value={formFields.invoiceDescription}
	              onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'invoiceDescription')}
	            />
	          </>
	        )}
	        <Stack direction="row" spacing={2} className={styles.dataImage}>
	          <Button variant="outlined" component="label" color="secondary">
	            Upload Invoice*
	            <input
	              type="file"
	              hidden
	              onInput={(event: ChangeEvent<HTMLInputElement>) => {
	                setFileData(event.target);
	              }}
	            />
	          </Button>
	          {isEdit && !formFields.fileName && (
	            <IconButton aria-label="edit" color="secondary" className={styles.addButton}>
	              <a href={formFields.imageUrl} target="_blank" download>
	                <FileDownload />
	              </a>
	            </IconButton>
	          )}
	          <Typography>{formFields.fileName}</Typography>
	        </Stack>
	        <Autocomplete
	          disablePortal
	          id="combo-box-contractors"
	          options={props.invoiceContractor}
	          sx={{ width: 300 }}
	          value={{
	            label: formFields.invoiceContractorName,
	            invoiceContractorId: formFields.invoiceContractorId
	          }}
	          onChange={(event: any, value: any) => {
	            // NOTE: Autocomplete requires {label:<comboOption>, ...}
	            //       {label:contractorName, invoiceContractorId:invoiceContractorId}
	            // setFormFields((prevState) => ({
	            //   ...prevState,
	            //   invoiceContractor: value,
	            // }))
	            setFormFields((prevState: any) => ({
	              ...prevState,
	              invoiceContractorId: value.invoiceContractorId
	            }));
	            setFormFields((prevState: any) => ({
	              ...prevState,
	              invoiceContractorName: value.label
	            }));
	          }}
	          renderInput={(params) => <TextField {...params} label="Contractor" />}
	        />
	        <TextField
	          // color="tertiary"
	          label="Row Index"
	          variant="standard"
	          value={formFields.invoiceIndex}
	          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldInt(setFormFields, event, 'invoiceIndex')}
	        />
	        <TextField
	          disabled={true}
	          // color="tertiary"
	          label="Code"
	          variant="standard"
	          value={formFields.invoiceCode}
	          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'invoiceCode')}
	        />
	        <TextField
	          disabled={true}
	          // color="tertiary"
	          label="Category"
	          variant="standard"
	          value={formFields.invoiceCategory}
	          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'invoiceCategory')}
	        />
	        <TextField
	          // color="tertiary"
	          label="Invoice Number*"
	          variant="standard"
	          value={formFields.invoiceNumber}
	          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'invoiceNumber')}
	        />
	        {/* @ts-ignore */}
	        {/*<LocalizationProvider dateAdapter={AdapterDateFns}>*/}
	        {/*  <DatePicker*/}
	        {/*    label="Invoice Date*"*/}
	        {/*    value={formFields.invoiceDate}*/}
	        {/*    onChange={(newDate) => {*/}
	        {/*      setFormFields((prevState: any) => ({*/}
	        {/*        ...prevState,*/}
	        {/*        invoiceDate: newDate,*/}
	        {/*      }))*/}
	        {/*    }}*/}
	        {/*    renderInput={(params) => <TextField {...params} />}*/}
	        {/*  />*/}
	        {/*</LocalizationProvider>*/}
	        <TextField
	          // color="tertiary"
	          label="Invoice Received Date"
	          variant="standard"
	          value={formFields.invoiceReceivedDate}
	          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'invoiceReceivedDate')}
	        />
	        <TextField
	          // color="tertiary"
	          label="Subtotal* ($)"
	          variant="standard"
	          value={formFields.invoiceSubtotal}
	          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormFieldFloat(setFormFields, event, 'invoiceSubtotal')}
	        />
	        <TextField
	          // color="tertiary"
	          label="Chq #"
	          variant="standard"
	          value={formFields.invoiceChqNumber}
	          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'invoiceChqNumber')}
	        />
	        <TextField
	          // color="tertiary"
	          label="ChqDate"
	          variant="standard"
	          value={formFields.invoiceChqDate}
	          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'invoiceChqDate')}
	        />
	        <TextField
	          // color="tertiary"
	          label="Claim Number"
	          variant="standard"
	          value={formFields.invoiceClaimNumber}
	          onChange={(event: ChangeEvent<HTMLInputElement>) => updateFormField(setFormFields, event, 'invoiceClaimNumber')}
	        />{' '}
	      </DialogContent>
	
	      <DialogActions>
	        <Button color="secondary" variant="contained" onClick={closeDialog}>
	          Cancel
	        </Button>
	        {isSubmitting ? (
	          <Button color="secondary" variant="contained" disabled={true}>
	            Submitting...
	          </Button>
	        ) : (
	          <Button color="secondary" variant="contained" onClick={handleSubmit} disabled={isDisabled()}>
	            Submit
	          </Button>
	        )}
	      </DialogActions>
	    </Dialog>
	  );
	}

```

src/components/dialogs/user/UserDeleteDialog.tsx```tsx
	import { Dialog, DialogActions, DialogContent, DialogProps, DialogTitle, IconButton, Typography } from '@mui/material';
	import { GridCloseIcon } from '@mui/x-data-grid';
	import { Button } from '@/components/ui-component/buttons';
	import { useIntl } from 'react-intl';
	import { useAsync } from '@/hooks/useAsync';
	import { success as notifySuccess } from '@/utils/notify';
	import LoadingButton from '@mui/lab/LoadingButton';
	import { IUser } from '@/app/api/users/list/route';
	import { deleteUser } from '@/utils/services/user';
	interface UserDialogProps extends Omit<DialogProps, 'onClose'> {
	  users: Partial<IUser>[];
	  onClose?: () => void;
	}
	
	export default function UserDeleteDialog({ users, onClose, ...props }: UserDialogProps): JSX.Element {
	  const { formatMessage } = useIntl();
	  const { isLoading, execute } = useAsync();
	  const handleClose = () => {
	    onClose?.();
	  };
	
	  const handleDelete = async () => {
	    for (let index = 0; index < users.length; index++) {
	      const item = users[index];
	      await execute(deleteUser(item._id + ''));
	    }
	    handleClose();
	    notifySuccess(formatMessage({ id: 'userApiDeleted' }));
	  };
	
	  const renderContent = () => {
	    let msg = formatMessage({ id: 'userDialogDeleteContent' });
	    let noMsg = '';
	    if (users.length === 1) {
	      noMsg = `<strong>${users[0].firstName} ${users[0].lastName}</strong>`;
	    } else {
	      noMsg = `<strong>${users.length}</strong> users`;
	    }
	    return msg.replace('{userName}', noMsg);
	  };
	
	  return (
	    <Dialog onClose={handleClose} {...props}>
	      <DialogTitle sx={{ pt: '8px' }}>{formatMessage({ id: 'userDialogDeleteTitle' })}</DialogTitle>
	      <IconButton
	        aria-label="close"
	        onClick={handleClose}
	        sx={{
	          position: 'absolute',
	          right: 10,
	          top: 16,
	          color: (theme) => theme.palette.grey[500]
	        }}
	      >
	        <GridCloseIcon />
	      </IconButton>
	      <DialogContent dividers sx={{ minWidth: '600px' }}>
	        <Typography gutterBottom sx={{ my: '12px' }}>
	          <span
	            dangerouslySetInnerHTML={{
	              __html: renderContent()
	            }}
	          />
	        </Typography>
	      </DialogContent>
	      <DialogActions sx={{ gap: '20px', pt: '24px', pb: '12px', px: '24px' }}>
	        <Button variant="text" color="error" onClick={handleClose}>
	          {formatMessage({ id: 'buttonLabelCancel' })}
	        </Button>
	        {isLoading ? (
	          <LoadingButton loading variant="contained" color="error" type="submit">
	            {formatMessage({ id: 'userDialogDeleteButtonDelete' })}
	          </LoadingButton>
	        ) : (
	          <Button variant="contained" color="error" type="submit" onClick={handleDelete}>
	            {formatMessage({ id: 'userDialogDeleteButtonDelete' })}
	          </Button>
	        )}
	      </DialogActions>
	    </Dialog>
	  );
	}

```

src/components/dialogs/user/UserChangeStatus.tsx```tsx
	import { Dialog, DialogActions, DialogContent, DialogProps, DialogTitle, IconButton, Typography } from '@mui/material';
	import { GridCloseIcon } from '@mui/x-data-grid';
	import { Button } from '@/components/ui-component/buttons';
	import { useIntl } from 'react-intl';
	import { useAsync } from '@/hooks/useAsync';
	import { success as notifySuccess } from '@/utils/notify';
	import LoadingButton from '@mui/lab/LoadingButton';
	import { IUser } from '@/app/api/users/list/route';
	import { updateUser } from '@/utils/services/user';
	import { USER_STATUS_ACTIVE } from '@/constant/user';
	interface UserDialogProps extends Omit<DialogProps, 'onClose'> {
	  users: Partial<IUser>[];
	  status: string;
	  onClose?: () => void;
	}
	
	export default function UserChangeStatusDialog({ users, status, onClose, ...props }: UserDialogProps): JSX.Element {
	  const { formatMessage } = useIntl();
	  const { isLoading, execute } = useAsync();
	  const handleClose = () => {
	    onClose?.();
	  };
	
	  const handleSubmit = async () => {
	    for (let index = 0; index < users.length; index++) {
	      const item = users[index];
	      await execute(updateUser(item._id + '', { completionStatus: status }));
	    }
	    handleClose();
	    notifySuccess(formatMessage({ id: 'userApiUpdated' }));
	  };
	
	  const renderContent = () => {
	    const msgStatus = status === USER_STATUS_ACTIVE ? 'active' : 'deactivate';
	    let msg = formatMessage({ id: 'userDialogChangeStatusContent' }).replace('{status}', msgStatus);
	    let noMsg = '';
	    if (users.length === 1) {
	      noMsg = `<strong>${users[0].firstName} ${users[0].lastName}</strong>`;
	    } else {
	      noMsg = `<strong>${users.length}</strong> users`;
	    }
	    return msg.replace('{no}', noMsg);
	  };
	
	  return (
	    <Dialog onClose={handleClose} {...props}>
	      <DialogTitle sx={{ pt: '8px' }}>
	        {formatMessage({ id: status === USER_STATUS_ACTIVE ? 'userDialogActiveTitle' : 'userDialogDeactiveTitle' })}
	      </DialogTitle>
	      <IconButton
	        aria-label="close"
	        onClick={handleClose}
	        sx={{
	          position: 'absolute',
	          right: 10,
	          top: 16,
	          color: (theme) => theme.palette.grey[500]
	        }}
	      >
	        <GridCloseIcon />
	      </IconButton>
	      <DialogContent dividers sx={{ minWidth: '600px' }}>
	        <Typography gutterBottom sx={{ my: '12px' }}>
	          <span
	            dangerouslySetInnerHTML={{
	              __html: renderContent()
	            }}
	          />
	        </Typography>
	      </DialogContent>
	      <DialogActions sx={{ gap: '20px', pt: '24px', pb: '12px', px: '24px' }}>
	        <Button variant="text" color="error" type="submit" onClick={handleClose}>
	          {formatMessage({ id: 'buttonLabelCancel' })}
	        </Button>
	        {isLoading ? (
	          <LoadingButton loading variant="contained" color="error" type="submit">
	            {status}
	          </LoadingButton>
	        ) : (
	          <Button variant="contained" color="error" type="submit" onClick={handleSubmit}>
	            {status}
	          </Button>
	        )}
	      </DialogActions>
	    </Dialog>
	  );
	}

```

src/components/dialogs/contractor/ContractorDeleteDialog.tsx```tsx
	import { Dialog, DialogActions, DialogContent, DialogProps, DialogTitle, IconButton, Typography } from '@mui/material';
	import { GridCloseIcon } from '@mui/x-data-grid';
	import { Button } from '@/components/ui-component/buttons';
	import { useIntl } from 'react-intl';
	import { useAsync } from '@/hooks/useAsync';
	import * as notify from '@/utils/notify';
	import LoadingButton from '@mui/lab/LoadingButton';
	import { IContractor, deleteContractor } from '@/utils/services/contractor';
	interface ContactorDialogProps extends Omit<DialogProps, 'onClose'> {
	  contractor: Partial<IContractor> | null;
	  onClose?: () => void;
	  onSuccess?: () => void;
	}
	
	export default function ContractorDeleteDialog({ contractor, onClose, onSuccess, ...props }: ContactorDialogProps): JSX.Element {
	  const { formatMessage } = useIntl();
	  const { isLoading, execute } = useAsync();
	  const handleClose = () => {
	    onClose?.();
	  };
	
	  const handleDelete = async () => {
	    if (contractor?.id) {
	      const result = await execute(deleteContractor(contractor.id + ''));
	      if (result.data.success) {
	        handleClose();
	        notify.success(formatMessage({ id: 'contractorApiDeleted' }));
	        onSuccess?.();
	      }
	    }
	  };
	  const content = formatMessage({ id: 'contractorDialogDeleteContent' }).replace('{contractorName}', contractor?.contractorName || '');
	  return (
	    <Dialog onClose={handleClose} {...props}>
	      <DialogTitle sx={{ pt: '8px' }}>{formatMessage({ id: 'contractorDialogDeleteTitle' })}</DialogTitle>
	      <IconButton
	        aria-label="close"
	        onClick={handleClose}
	        sx={{
	          position: 'absolute',
	          right: 10,
	          top: 16,
	          color: (theme) => theme.palette.grey[500]
	        }}
	      >
	        <GridCloseIcon />
	      </IconButton>
	      <DialogContent dividers sx={{ minWidth: '600px' }}>
	        <Typography gutterBottom sx={{ my: '12px' }}>
	          <span
	            dangerouslySetInnerHTML={{
	              __html: content
	            }}
	          />
	        </Typography>
	      </DialogContent>
	      <DialogActions sx={{ gap: '20px', pt: '24px', pb: '12px', px: '24px' }}>
	        <Button variant="text" color="error" onClick={handleClose}>
	          {formatMessage({ id: 'buttonLabelCancel' })}
	        </Button>
	        {isLoading ? (
	          <LoadingButton loading variant="contained" color="error" type="submit">
	            {formatMessage({ id: 'contractorDialogDeleteButtonDelete' })}
	          </LoadingButton>
	        ) : (
	          <Button variant="contained" color="error" type="submit" onClick={handleDelete}>
	            {formatMessage({ id: 'contractorDialogDeleteButtonDelete' })}
	          </Button>
	        )}
	      </DialogActions>
	    </Dialog>
	  );
	}

```

src/components/dialogs/contractor/ContractorDialog.tsx```tsx
	import {
	  Box,
	  Button,
	  Dialog,
	  DialogActions,
	  DialogContent,
	  DialogProps,
	  DialogTitle,
	  Grid,
	  IconButton,
	  MenuItem,
	  Select,
	  Typography,
	  FormHelperText
	} from '@mui/material';
	import LoadingButton from '@mui/lab/LoadingButton';
	import TextField from 'components/ui-component/TextField';
	import styles from '@/styles/dataDialog.module.scss';
	import { GridCloseIcon } from '@mui/x-data-grid';
	import { useIntl } from 'react-intl';
	import AddIcon from '@mui/icons-material/Add';
	import { Formik } from 'formik';
	import { object as yupObject } from 'yup';
	import { useAsync } from '@/hooks/useAsync';
	import { success as notifySuccess } from '@/utils/notify';
	import { CONTRACTOR_SERVICES, CONTRACTOR_STATUS, CONTRACTOR_STATUS_ACTIVE } from '@/constant/contractor';
	import stylesDialog from '../builder/style.module.scss';
	import useCommonValidates from '@/hooks/useCommonValidates';
	import { IContractor, createContractor, updateContractor } from '@/utils/services/contractor';
	import { useSession } from 'next-auth/react';
	
	export interface IFormValues {
	  contractorName: string;
	  service: string;
	  completionStatus: string;
	  imageUrl: string;
	  address: string;
	  file?: File;
	}
	
	interface ContractorDialogProps extends Omit<DialogProps, 'onError' | 'onClose'> {
	  contractor: Partial<IContractor> | null;
	  onClose: () => void;
	  onSuccess?: () => void;
	}
	
	export default function ContractorDialog({ onClose, contractor, onSuccess, ...props }: ContractorDialogProps): JSX.Element {
	  const { data: session } = useSession();
	  const { formatMessage } = useIntl();
	  const { execute, isLoading } = useAsync();
	  const validates = useCommonValidates();
	  const initialValues: IFormValues = {
	    contractorName: contractor?.contractorName || '',
	    service: contractor?.service || '',
	    completionStatus: contractor?.completionStatus || CONTRACTOR_STATUS_ACTIVE,
	    address: contractor?.address || '',
	    imageUrl: contractor?.imageUrl || ''
	  };
	
	  const validationSchema = yupObject().shape({
	    contractorName: validates.text({ isRequired: true }),
	    service: validates.text({ isRequired: true }),
	    address: validates.text({ isRequired: true })
	  });
	
	  const handleCloseDialog = () => {
	    if (isLoading) {
	      return;
	    }
	    onClose();
	  };
	
	  const handleSubmitForm = async (values: IFormValues) => {
	    let result;
	    if (contractor) {
	      const formData = new FormData();
	      formData.append('creatorEmail', (session?.user.email as string) || '');
	      formData.append('creatorId', (session?.user.id as string) || '');
	      values.contractorName && formData.append('contractorName', values.contractorName);
	      values.service && formData.append('service', values.service);
	      values.completionStatus && formData.append('completionStatus', values.completionStatus);
	      values.address && formData.append('address', values.address);
	      values.file && formData.append('file', values.file);
	      result = await execute(updateContractor(contractor.id + '', formData));
	      if (result.data.success) {
	        notifySuccess(formatMessage({ id: 'contractorApiUpdated' }));
	        handleCloseDialog();
	        onSuccess?.();
	      }
	    } else {
	      const formData = new FormData();
	      formData.append('creatorEmail', (session?.user.email as string) || '');
	      formData.append('creatorId', (session?.user.id as string) || '');
	      formData.append('contractorName', values.contractorName);
	      formData.append('service', values.service);
	      formData.append('completionStatus', values.completionStatus);
	      formData.append('address', values.address);
	      values.file && formData.append('file', values.file);
	
	      result = await execute(createContractor(formData));
	      if (result.data.success) {
	        notifySuccess(formatMessage({ id: 'contractorApiCreated' }));
	        handleCloseDialog();
	        onSuccess?.();
	      }
	    }
	  };
	  return (
	    <Dialog onClose={handleCloseDialog} {...props}>
	      <DialogTitle sx={{ pt: '8px' }}>
	        {formatMessage({ id: contractor ? 'contractorDialogEditTitle' : 'contractorDialogAddTitle' })}
	      </DialogTitle>
	      <IconButton
	        aria-label="close"
	        onClick={handleCloseDialog}
	        sx={{
	          position: 'absolute',
	          right: 10,
	          top: 16,
	          color: (theme) => theme.palette.grey[500]
	        }}
	      >
	        <GridCloseIcon />
	      </IconButton>
	      <Formik
	        validateOnBlur={false}
	        validateOnChange={false}
	        initialValues={initialValues}
	        validationSchema={validationSchema}
	        onSubmit={handleSubmitForm}
	      >
	        {({ errors, handleChange, handleSubmit, values, setFieldValue }) => {
	          return (
	            <form noValidate onSubmit={handleSubmit}>
	              <DialogContent dividers className={styles.content}>
	                <Grid container spacing={2.5}>
	                  <Grid item xs={8}>
	                    <Typography variant="h5" mb="4px">
	                      {formatMessage({ id: 'contractorDialogCreateNameLabel' })}
	                    </Typography>
	                    <TextField
	                      hiddenLabel
	                      value={values.contractorName}
	                      name="contractorName"
	                      fullWidth
	                      size="medium"
	                      placeholder={formatMessage({ id: 'contractorDialogCreateNamePlaceholder' })}
	                      error={!!errors.contractorName}
	                      helperText={errors.contractorName}
	                      onChange={handleChange}
	                    />
	                    <Box sx={{ mb: 2 }} />
	                    <Typography variant="h5" mb="4px">
	                      {formatMessage({ id: 'contractorDialogCreateServiceLabel' })}
	                    </Typography>
	                    <Select
	                      value={values.service}
	                      fullWidth
	                      sx={{ borderRadius: '12px' }}
	                      error={!!errors.service}
	                      onChange={handleChange}
	                      name="service"
	                    >
	                      {CONTRACTOR_SERVICES.map((item) => (
	                        <MenuItem value={item} key={item}>
	                          {item}
	                        </MenuItem>
	                      ))}
	                    </Select>
	                    {!!errors.service && (
	                      <FormHelperText error sx={{ mx: '14px' }}>
	                        {errors.service}
	                      </FormHelperText>
	                    )}
	                  </Grid>
	                  <Grid item xs={4} display="flex" flexDirection="column">
	                    <Typography variant="h5" mb="4px">
	                      {formatMessage({ id: 'contractorDialogCreateThumbailLabel' })}
	                    </Typography>
	                    <Box flex="1" display="flex">
	                      <Button variant="outlined" color="primary" sx={{ width: '100%', position: 'relative' }} component="label">
	                        <AddIcon />
	                        {
	                          // eslint-disable-next-line @next/next/no-img-element
	                          !!values.file && <img alt="local" src={URL.createObjectURL(values.file)} className={stylesDialog.imageLocal} />
	                        }
	                        <input
	                          type="file"
	                          hidden
	                          id="imageUrl"
	                          accept="image/*"
	                          onChange={(e) => {
	                            if (e.currentTarget.files?.[0]) {
	                              setFieldValue('file', e.currentTarget.files?.[0]);
	                            }
	                          }}
	                        />
	                      </Button>
	                    </Box>
	                  </Grid>
	                </Grid>
	                <Box sx={{ mb: 2 }} />
	                <Grid container spacing={3.125} flexDirection="column">
	                  <Grid item xs={12}>
	                    <Typography variant="h5" mb="4px">
	                      {formatMessage({ id: 'contractorDialogCreateAddressLabel' })}
	                    </Typography>
	                    <TextField
	                      multiline
	                      minRows={4}
	                      hiddenLabel
	                      fullWidth
	                      size="medium"
	                      name="address"
	                      placeholder={formatMessage({ id: 'contractorDialogCreateAddressPlaceholder' })}
	                      error={!!errors.address}
	                      helperText={errors.address}
	                      onChange={handleChange}
	                      value={values.address}
	                    />
	                  </Grid>
	                  <Grid item xs={12}>
	                    <Typography variant="h5" mb="4px">
	                      {formatMessage({ id: 'contractorDialogCreateStatusLabel' })}
	                    </Typography>
	                    <Select
	                      value={values.completionStatus}
	                      fullWidth
	                      sx={{ borderRadius: '12px' }}
	                      onChange={handleChange}
	                      name="completionStatus"
	                    >
	                      {CONTRACTOR_STATUS.map((item) => (
	                        <MenuItem value={item} key={item}>
	                          {item}
	                        </MenuItem>
	                      ))}
	                    </Select>
	                  </Grid>
	                </Grid>
	              </DialogContent>
	
	              <DialogActions sx={{ gap: '20px', pt: '24px', pb: '12px', px: '24px' }}>
	                <Button variant="text" color="error" type="submit" onClick={handleCloseDialog}>
	                  {formatMessage({ id: 'buttonLabelCancel' })}
	                </Button>
	                {isLoading ? (
	                  <LoadingButton loading variant="contained" color="error" type="submit">
	                    {formatMessage({ id: 'contractorDialogCreateButtonSubmit' })}
	                  </LoadingButton>
	                ) : (
	                  <Button variant="contained" color="error" type="submit">
	                    {formatMessage({ id: 'contractorDialogCreateButtonSubmit' })}
	                  </Button>
	                )}
	              </DialogActions>
	            </form>
	          );
	        }}
	      </Formik>
	    </Dialog>
	  );
	}

```

src/components/dialogs/builder/style.module.scss```scss
	.imageLocal{
	  position: absolute;
	  inset: 0;
	  z-index: 0;
	  width: 100%;
	  height: 100%;
	  object-fit: contain;
	}
```

src/components/dialogs/builder/BuilderDialog.tsx```tsx
	import {
	  Box,
	  Button,
	  Dialog,
	  DialogActions,
	  DialogContent,
	  DialogProps,
	  DialogTitle,
	  Grid,
	  IconButton,
	  MenuItem,
	  Select,
	  Typography,
	  FormHelperText
	} from '@mui/material';
	import LoadingButton from '@mui/lab/LoadingButton';
	import TextField from 'components/ui-component/TextField';
	import styles from '@/styles/dataDialog.module.scss';
	import { Builder as BuilderType } from '@/utils/dtos/builder.dto';
	import { GridCloseIcon } from '@mui/x-data-grid';
	import { useIntl } from 'react-intl';
	import AddIcon from '@mui/icons-material/Add';
	import { Formik } from 'formik';
	import { object as yupObject } from 'yup';
	import { useAsync } from '@/hooks/useAsync';
	import { createBuilder, updateBuilder } from '@/utils/services/builder';
	import { success as notifySuccess } from '@/utils/notify';
	import { BUILDER_CATEGORIES, BUILDER_STATUS, BUILDER_STATUS_ACTIVE } from '@/constant/builder';
	import stylesDialog from './style.module.scss';
	import useCommonValidates from '@/hooks/useCommonValidates';
	
	export interface IFormValues {
	  builderName: string;
	  category: string;
	  completionStatus: string;
	  imageUrl: string;
	  address: string;
	  image?: File;
	}
	
	interface BuilderDialogProps extends Omit<DialogProps, 'onError' | 'onClose'> {
	  builder: Partial<BuilderType> | null;
	  onClose: () => void;
	  onSuccess?: () => void;
	}
	
	export default function BuilderDialog({ onClose, builder, onSuccess, ...props }: BuilderDialogProps): JSX.Element {
	  const { formatMessage } = useIntl();
	  const { execute, isLoading } = useAsync();
	  const validates = useCommonValidates();
	  const initialValues: IFormValues = {
	    builderName: builder?.builderName || '',
	    category: builder?.category || '',
	    completionStatus: builder?.completionStatus || BUILDER_STATUS_ACTIVE,
	    address: builder?.address || '',
	    imageUrl: builder?.imageUrl || ''
	  };
	
	  const validationSchema = yupObject().shape({
	    builderName: validates.text({ isRequired: true }),
	    category: validates.text({ isRequired: true }),
	    address: validates.text({ isRequired: true })
	  });
	
	  const handleCloseDialog = () => {
	    if (isLoading) {
	      return;
	    }
	    onClose();
	  };
	
	  const handleSubmitForm = async (values: IFormValues) => {
	    let result;
	    if (builder) {
	      result = await execute(updateBuilder(builder._id + '', values));
	      if (result.data.success) {
	        notifySuccess(formatMessage({ id: 'builderApiUpdated' }));
	        handleCloseDialog();
	        onSuccess?.();
	      }
	    } else {
	      result = await execute(createBuilder(values));
	      if (result.data.success) {
	        notifySuccess(formatMessage({ id: 'builderApiCreated' }));
	        handleCloseDialog();
	        onSuccess?.();
	      }
	    }
	  };
	  return (
	    <Dialog onClose={handleCloseDialog} {...props}>
	      <DialogTitle sx={{ pt: '8px' }}>{formatMessage({ id: builder ? 'builderDialogEditTitle' : 'builderDialogAddTitle' })}</DialogTitle>
	      <IconButton
	        aria-label="close"
	        onClick={handleCloseDialog}
	        sx={{
	          position: 'absolute',
	          right: 10,
	          top: 16,
	          color: (theme) => theme.palette.grey[500]
	        }}
	      >
	        <GridCloseIcon />
	      </IconButton>
	      <Formik
	        validateOnBlur={false}
	        validateOnChange={false}
	        initialValues={initialValues}
	        validationSchema={validationSchema}
	        onSubmit={handleSubmitForm}
	      >
	        {({ errors, handleChange, handleSubmit, values, setFieldValue }) => {
	          return (
	            <form noValidate onSubmit={handleSubmit}>
	              <DialogContent dividers className={styles.content}>
	                <Grid container spacing={2.5}>
	                  <Grid item xs={8}>
	                    <Typography variant="h5" mb="4px">
	                      {formatMessage({ id: 'builderDialogCreateNameLabel' })}
	                    </Typography>
	                    <TextField
	                      hiddenLabel
	                      value={values.builderName}
	                      name="builderName"
	                      fullWidth
	                      size="medium"
	                      placeholder={formatMessage({ id: 'builderDialogCreateNamePlaceholder' })}
	                      error={!!errors.builderName}
	                      helperText={errors.builderName}
	                      onChange={handleChange}
	                    />
	                    <Box sx={{ mb: 2 }} />
	                    <Typography variant="h5" mb="4px">
	                      {formatMessage({ id: 'builderDialogCreateCategoryLabel' })}
	                    </Typography>
	                    <Select
	                      value={values.category}
	                      fullWidth
	                      placeholder={formatMessage({ id: 'builderDialogCreateCategoryPlaceholder' })}
	                      sx={{ borderRadius: '12px' }}
	                      error={!!errors.category}
	                      onChange={handleChange}
	                      name="category"
	                    >
	                      {BUILDER_CATEGORIES.map((item) => (
	                        <MenuItem value={item} key={item}>
	                          {item}
	                        </MenuItem>
	                      ))}
	                    </Select>
	                    {!!errors.category && (
	                      <FormHelperText error sx={{ mx: '14px' }}>
	                        {errors.category}
	                      </FormHelperText>
	                    )}
	                  </Grid>
	                  <Grid item xs={4} display="flex" flexDirection="column">
	                    <Typography variant="h5" mb="4px">
	                      {formatMessage({ id: 'builderDialogCreateThumbnailLabel' })}
	                    </Typography>
	                    <Box flex="1" display="flex">
	                      <Button variant="outlined" color="primary" sx={{ width: '100%', position: 'relative' }} component="label">
	                        <AddIcon />
	                        {
	                          // eslint-disable-next-line @next/next/no-img-element
	                          !!values.image && <img alt="local" src={URL.createObjectURL(values.image)} className={stylesDialog.imageLocal} />
	                        }
	                        <input
	                          type="file"
	                          hidden
	                          id="image"
	                          name="image"
	                          accept="image/*"
	                          onChange={(e) => {
	                            if (e.currentTarget.files?.[0]) {
	                              setFieldValue('image', e.currentTarget.files?.[0]);
	                            }
	                          }}
	                        />
	                      </Button>
	                    </Box>
	                  </Grid>
	                </Grid>
	                <Box sx={{ mb: 2 }} />
	                <Grid container spacing={3.125} flexDirection="column">
	                  <Grid item xs={12}>
	                    <Typography variant="h5" mb="4px">
	                      {formatMessage({ id: 'builderDialogCreateAddressLabel' })}
	                    </Typography>
	                    <TextField
	                      multiline
	                      minRows={4}
	                      hiddenLabel
	                      fullWidth
	                      size="medium"
	                      name="address"
	                      placeholder={formatMessage({ id: 'builderDialogCreateAddressPlaceholder' })}
	                      error={!!errors.address}
	                      helperText={errors.address}
	                      onChange={handleChange}
	                      value={values.address}
	                    />
	                  </Grid>
	                  <Grid item xs={12}>
	                    <Typography variant="h5" mb="4px">
	                      {formatMessage({ id: 'builderDialogCreateStatusLabel' })}
	                    </Typography>
	                    <Select
	                      value={values.completionStatus}
	                      fullWidth
	                      placeholder={formatMessage({ id: 'builderDialogCreateCategoryPlaceholder' })}
	                      sx={{ borderRadius: '12px' }}
	                      onChange={handleChange}
	                      name="completionStatus"
	                    >
	                      {BUILDER_STATUS.map((item) => (
	                        <MenuItem value={item} key={item}>
	                          {item}
	                        </MenuItem>
	                      ))}
	                    </Select>
	                  </Grid>
	                </Grid>
	              </DialogContent>
	
	              <DialogActions sx={{ gap: '20px', pt: '24px', pb: '12px', px: '24px' }}>
	                <Button variant="text" color="error" onClick={handleCloseDialog}>
	                  {formatMessage({ id: 'buttonLabelCancel' })}
	                </Button>
	                {isLoading ? (
	                  <LoadingButton loading variant="contained" color="error" type="submit">
	                    {formatMessage({ id: 'builderDialogCreateButtonSubmit' })}
	                  </LoadingButton>
	                ) : (
	                  <Button variant="contained" color="error" type="submit">
	                    {formatMessage({ id: 'builderDialogCreateButtonSubmit' })}
	                  </Button>
	                )}
	              </DialogActions>
	            </form>
	          );
	        }}
	      </Formik>
	    </Dialog>
	  );
	}

```

src/components/dialogs/builder/BuilderDeleteDialog.tsx```tsx
	import { Builder } from '@/utils/dtos/builder.dto';
	import { Dialog, DialogActions, DialogContent, DialogProps, DialogTitle, IconButton, Typography } from '@mui/material';
	import { GridCloseIcon } from '@mui/x-data-grid';
	import { Button } from '@/components/ui-component/buttons';
	import { useIntl } from 'react-intl';
	import { useAsync } from '@/hooks/useAsync';
	import { deleteBuilder } from '@/utils/services/builder';
	import * as notify from '@/utils/notify';
	import LoadingButton from '@mui/lab/LoadingButton';
	interface BuilderDialogProps extends Omit<DialogProps, 'onClose'> {
	  builder: Partial<Builder> | null;
	  onClose?: () => void;
	  onSuccess?: () => void;
	}
	
	export default function BuilderDeleteDialog({ builder, onClose, onSuccess, ...props }: BuilderDialogProps): JSX.Element {
	  const { formatMessage } = useIntl();
	  const { isLoading, execute } = useAsync();
	  const handleClose = () => {
	    onClose?.();
	  };
	
	  const handleDelete = async () => {
	    if (builder?._id) {
	      const result = await execute(deleteBuilder(builder._id + ''));
	      if (result.data.success) {
	        handleClose();
	        notify.success(formatMessage({ id: 'builderApiDeleted' }));
	        onSuccess?.();
	      }
	    }
	  };
	  const content = formatMessage({ id: 'builderDialogDeleteContent' }).replace('{builderName}', builder?.builderName || '');
	  return (
	    <Dialog onClose={handleClose} {...props}>
	      <DialogTitle sx={{ pt: '8px' }}>{formatMessage({ id: 'builderDialogDeleteTitle' })}</DialogTitle>
	      <IconButton
	        aria-label="close"
	        onClick={handleClose}
	        sx={{
	          position: 'absolute',
	          right: 10,
	          top: 16,
	          color: (theme) => theme.palette.grey[500]
	        }}
	      >
	        <GridCloseIcon />
	      </IconButton>
	      <DialogContent dividers sx={{ minWidth: '600px' }}>
	        <Typography gutterBottom sx={{ my: '12px' }}>
	          <span
	            dangerouslySetInnerHTML={{
	              __html: content
	            }}
	          />
	        </Typography>
	      </DialogContent>
	      <DialogActions sx={{ gap: '20px', pt: '24px', pb: '12px', px: '24px' }}>
	        <Button variant="text" color="error" onClick={handleClose}>
	          {formatMessage({ id: 'buttonLabelCancel' })}
	        </Button>
	        {isLoading ? (
	          <LoadingButton loading variant="contained" color="error" type="submit">
	            {formatMessage({ id: 'builderDialogDeleteButtonDelete' })}
	          </LoadingButton>
	        ) : (
	          <Button variant="contained" color="error" type="submit" onClick={handleDelete}>
	            {formatMessage({ id: 'builderDialogDeleteButtonDelete' })}
	          </Button>
	        )}
	      </DialogActions>
	    </Dialog>
	  );
	}

```

src/components/projects/Add/style.module.scss```scss
	.imageLocal{
	  position: absolute;
	  inset: 0;
	  z-index: 0;
	  width: 100%;
	  height: 100%;
	  object-fit: contain;
	}
```

src/components/projects/Add/index.tsx```tsx
	import { useEffect } from 'react';
	import { isEmpty } from 'lodash';
	import { Box, Dialog, DialogActions, DialogContent, DialogProps, DialogTitle, Grid, IconButton, Typography } from '@mui/material';
	import { useIntl } from 'react-intl';
	import { useFormik } from 'formik';
	import { object as yupObject } from 'yup';
	import { GridCloseIcon } from '@mui/x-data-grid';
	import { format } from 'date-fns';
	
	// projects import
	import * as notify from 'utils/notify';
	import useCommonValidates from '@/hooks/useCommonValidates';
	import { useAsync } from 'hooks/useAsync';
	import useUploadFile from '@/hooks/useUploadFile';
	import DatePicker from 'components/ui-component/DatePicker';
	import Upload from 'components/ui-component/Upload';
	import TextField from 'components/ui-component/TextField';
	import { Button } from 'ui-component/buttons';
	import { AmountInput } from 'ui-component/inputs';
	import { Project } from 'utils/dtos/project.dto';
	import { FolderName } from 'utils/enums';
	import { getFieldErrors } from 'utils/form';
	import { createProject, updateProject } from 'utils/services/project';
	import { DATE_FORMAT } from '@/constant';
	import styles from '@/styles/dataDialog.module.scss';
	
	export interface IFormValues {
	  projectName: string;
	  startDate: Date;
	  address: string;
	  file?: File;
	  currentClaimNumber: number;
	}
	
	interface ProjectAddDialogProps extends Omit<DialogProps, 'onError' | 'onClose'> {
	  project: Partial<Project> | null;
	  onClose: () => void;
	  onSuccess?: (project: Project) => void;
	  loading?: boolean;
	}
	
	export default function ProjectAddDialog({ onClose, project, onSuccess, loading = false, ...props }: ProjectAddDialogProps): JSX.Element {
	  const { formatMessage } = useIntl();
	  const validates = useCommonValidates();
	  const { triggerUpload } = useUploadFile();
	  const { request } = useAsync();
	  const isEdit = !isEmpty(project);
	  const { handleSubmit, values, errors, touched, isSubmitting, handleChange, setFieldValue, setValues, resetForm } = useFormik({
	    initialValues: {
	      projectName: project?.projectName || '',
	      startDate: project?.startDate || new Date(),
	      address: project?.address || '',
	      currentClaimNumber: Number(project?.currentClaimNumber || 0)
	    },
	    onSubmit: async (currentValues: IFormValues) => {
	      let imageUrl = project?.imageUrl;
	      if (currentValues.file) {
	        const result = await triggerUpload({
	          file: currentValues.file,
	          folder: FolderName.PROJECTS
	        });
	        if (!result?.error) {
	          imageUrl = result?.data.url;
	        }
	      }
	      const params = {
	        projectName: currentValues.projectName,
	        startDate: format(currentValues.startDate as Date, DATE_FORMAT),
	        address: currentValues.address,
	        imageUrl: imageUrl || '',
	        currentClaimNumber: currentValues.currentClaimNumber
	      };
	
	      const result = await request(
	        isEdit
	          ? updateProject({
	              id: `${project._id}`,
	              ...params
	            })
	          : createProject(params)
	      );
	
	      if (!result?.error) {
	        if (!isEdit) notify.success(formatMessage({ id: 'projectCreatedSuccessful' }));
	        if (isEdit) notify.success(formatMessage({ id: 'projectUpdatedSuccessful' }));
	        if (onSuccess) {
	          onSuccess(result.data);
	        }
	        resetForm();
	      }
	    },
	    validationSchema: yupObject().shape({
	      projectName: validates.text({ isRequired: true }),
	      startDate: validates.text({ isRequired: true }),
	      address: validates.text({ isRequired: true }),
	      currentClaimNumber: validates.number({ isRequired: true })
	    }),
	    validateOnBlur: false,
	    validateOnChange: false
	  });
	  const errorList = getFieldErrors({ errors, touched });
	
	  const title = isEdit ? formatMessage({ id: 'projectDialogEditTitle' }) : formatMessage({ id: 'projectDialogAddTitle' });
	  const isDisabledBtn = isSubmitting || loading;
	
	  useEffect(() => {
	    if (!isEmpty(project)) {
	      setValues({
	        projectName: project?.projectName || '',
	        startDate: project?.startDate || new Date(),
	        address: project?.address || '',
	        currentClaimNumber: Number(project?.currentClaimNumber || 0)
	      });
	    }
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [project]);
	
	  const handleCloseDialog = () => {
	    if (isSubmitting) return;
	    resetForm();
	    if (onClose) {
	      onClose();
	    }
	  };
	
	  return (
	    <Dialog onClose={handleCloseDialog} {...props}>
	      <DialogTitle sx={{ pt: '8px' }}>{title}</DialogTitle>
	      <IconButton
	        aria-label="close"
	        onClick={handleCloseDialog}
	        sx={{
	          position: 'absolute',
	          right: 10,
	          top: 16,
	          color: (theme) => theme.palette.grey[500]
	        }}
	      >
	        <GridCloseIcon />
	      </IconButton>
	      <form noValidate onSubmit={handleSubmit}>
	        <DialogContent dividers className={styles.content}>
	          <Grid container spacing={2.5}>
	            <Grid item xs={8}>
	              <Typography variant="h5" mb="4px">
	                {formatMessage({ id: 'projectNameFormLabel' })}
	              </Typography>
	              <TextField
	                hiddenLabel
	                value={values.projectName}
	                name="projectName"
	                fullWidth
	                size="medium"
	                placeholder={formatMessage({ id: 'projectNameFormPlaceholder' })}
	                error={errorList.projectName?.error}
	                helperText={errorList.projectName?.message}
	                onChange={handleChange}
	              />
	              <Box sx={{ mb: 2 }} />
	              <Typography variant="h5" mb="4px">
	                {formatMessage({ id: 'projectStartDateFormLabel' })}
	              </Typography>
	              <DatePicker
	                slots={{
	                  textField: TextField
	                }}
	                name="startDate"
	                slotProps={{
	                  textField: {
	                    fullWidth: true,
	                    size: 'medium',
	                    error: false
	                  }
	                }}
	                value={values.startDate}
	                error={errorList.startDate?.error}
	                helperText={errorList.startDate?.message}
	                onChange={(datetime) => {
	                  setFieldValue('startDate', datetime);
	                }}
	              />
	            </Grid>
	            <Grid item xs={4} display="flex" flexDirection="column">
	              <Typography variant="h5" mb="4px">
	                {formatMessage({ id: 'projectThumbnailFormLabel' })}
	              </Typography>
	              <Box flex="1" display="flex">
	                <Upload
	                  onChange={(file) => {
	                    setFieldValue('file', file);
	                  }}
	                  imageUrl={project?.imageUrl}
	                />
	              </Box>
	            </Grid>
	          </Grid>
	          <Box sx={{ mb: 2 }} />
	          <Grid container spacing={3.125} flexDirection="column">
	            <Grid item xs={12}>
	              <Typography variant="h5" mb="4px">
	                {formatMessage({ id: 'projectAddressFormLabel' })}
	              </Typography>
	              <TextField
	                multiline
	                minRows={4}
	                hiddenLabel
	                fullWidth
	                size="medium"
	                name="address"
	                placeholder={formatMessage({ id: 'projectAddressFormPlaceholder' })}
	                error={errorList.address?.error}
	                helperText={errorList.address?.message}
	                onChange={handleChange}
	                value={values.address}
	              />
	            </Grid>
	            <Grid item xs={12}>
	              <Typography variant="h5" mb="4px">
	                {formatMessage({ id: 'projectCurrentClaimFormLabel' })}
	              </Typography>
	              <AmountInput
	                hiddenLabel
	                fullWidth
	                size="medium"
	                name="currentClaimNumber"
	                error={errorList.currentClaimNumber?.error}
	                helperText={errorList.currentClaimNumber?.message}
	                onChange={handleChange}
	                value={values.currentClaimNumber}
	              />
	            </Grid>
	          </Grid>
	        </DialogContent>
	
	        <DialogActions sx={{ gap: '20px', pt: '24px', pb: '12px', px: '24px' }}>
	          <Button disabled={isDisabledBtn} variant="text" color="error" type="submit" onClick={handleCloseDialog}>
	            {formatMessage({ id: 'buttonLabelCancel' })}
	          </Button>
	          <Button loading={isSubmitting} color="error" disabled={isDisabledBtn} size="large" type="submit" variant="contained">
	            {formatMessage({ id: 'projectSaveButton' })}
	          </Button>
	        </DialogActions>
	      </form>
	    </Dialog>
	  );
	}

```

src/components/projects/DeleteDialog/index.tsx```tsx
	import { Dialog, DialogActions, DialogContent, DialogProps, DialogTitle, IconButton, Typography } from '@mui/material';
	import { useIntl } from 'react-intl';
	import { GridCloseIcon } from '@mui/x-data-grid';
	
	// projects import
	import * as notify from 'utils/notify';
	import { useAsync } from 'hooks/useAsync';
	import { Button } from 'ui-component/buttons';
	import { Project } from 'utils/dtos/project.dto';
	import { deleteProject } from 'utils/services/project';
	import styles from '@/styles/dataDialog.module.scss';
	
	interface ProjectDeleteDialogProps extends Omit<DialogProps, 'onError' | 'onClose'> {
	  project: Partial<Project>;
	  onClose: () => void;
	  onSuccess?: (project: Partial<Project>) => void;
	}
	
	export default function ProjectDeleteDialog({ onClose, project, onSuccess, ...props }: ProjectDeleteDialogProps) {
	  const { formatMessage } = useIntl();
	  const { request, isLoading } = useAsync();
	  const isDisabledBtn = isLoading;
	
	  const handleCloseDialog = () => {
	    if (isLoading) return;
	
	    if (onClose) {
	      onClose();
	    }
	  };
	
	  const handleDelete = async () => {
	    const result = await request(deleteProject(`${project._id}`));
	    if (!result.error) {
	      if (onSuccess) onSuccess(project);
	      notify.success(formatMessage({ id: 'projectDialogDeletedSuccessful' }));
	      return;
	    }
	    notify.success(formatMessage({ id: 'projectDialogDeleted' }));
	  };
	
	  if (!project) return null;
	
	  return (
	    <Dialog onClose={handleCloseDialog} {...props}>
	      <DialogTitle sx={{ pt: '8px' }}>{formatMessage({ id: 'projectDialogDeleteTitle' })}</DialogTitle>
	      <IconButton
	        aria-label="close"
	        onClick={handleCloseDialog}
	        sx={{
	          position: 'absolute',
	          right: 10,
	          top: 16,
	          color: (theme) => theme.palette.grey[500]
	        }}
	      >
	        <GridCloseIcon />
	      </IconButton>
	      <DialogContent dividers className={styles.content}>
	        <Typography>{formatMessage({ id: 'projectDialogDeleteNote' }, { projectName: project.projectName })}</Typography>
	      </DialogContent>
	
	      <DialogActions sx={{ gap: '20px', pt: '24px', pb: '12px', px: '24px' }}>
	        <Button disabled={isDisabledBtn} variant="text" color="error" type="submit" onClick={handleCloseDialog}>
	          {formatMessage({ id: 'buttonLabelCancel' })}
	        </Button>
	        <Button
	          onClick={handleDelete}
	          loading={isLoading}
	          color="error"
	          disabled={isDisabledBtn}
	          size="large"
	          type="submit"
	          variant="contained"
	        >
	          {formatMessage({ id: 'projectDeleteButton' })}
	        </Button>
	      </DialogActions>
	    </Dialog>
	  );
	}

```

src/components/projects/List/index.tsx```tsx
	'use client';
	import { useEffect, useState } from 'react';
	import { useIntl } from 'react-intl';
	import { GridColDef } from '@mui/x-data-grid';
	import { Box, Stack } from '@mui/material';
	import { Pencil, Eye } from '@phosphor-icons/react';
	
	// projects import
	import { Button } from '@/components/ui-component/buttons';
	import Breadcrumbs from 'components/Breadcrumbs';
	import Table from 'components/ui-component/table';
	import { getProjects } from '@/utils/services/project';
	import { useAsync } from '@/hooks/useAsync';
	import { IResponseProjects } from 'types/response';
	import { Project } from '@/utils/dtos/project.dto';
	import AddDialog from '../Add';
	
	import ProjectName from './components/ProjectName';
	import StartDate from './components/StartDate';
	import TotalBudget from './components/TotalBudget';
	import EditBtn from './components/EditBtn';
	import DeleteBtn from './components/DeleteBtn';
	
	import NextLink from 'next/link';
	import routes from '@/routes';
	
	const ProjectList = () => {
	  const [projects, setProjects] = useState<Project[]>([]);
	  const [openDialog, setOpenDialog] = useState(false);
	  const { formatMessage } = useIntl();
	  const { request, isLoading } = useAsync();
	
	  const columns: GridColDef<Project>[] = [
	    { field: '_id', headerName: formatMessage({ id: 'tableId' }), align: 'center', headerAlign: 'center', flex: 1 },
	    {
	      field: 'name',
	      headerName: formatMessage({ id: 'projectName' }),
	      align: 'center',
	      headerAlign: 'center',
	      flex: 1,
	      renderCell: ({ row }) => <ProjectName project={row} />
	    },
	    {
	      field: 'startDate',
	      headerName: formatMessage({ id: 'startDate' }),
	      align: 'center',
	      headerAlign: 'center',
	      flex: 1,
	      renderCell: ({ row }) => <StartDate project={row} />
	    },
	    {
	      field: 'address',
	      headerName: formatMessage({ id: 'address' }),
	      headerAlign: 'center',
	      flex: 1
	    },
	    {
	      field: 'amount',
	      headerName: formatMessage({ id: 'totalBudget' }),
	      align: 'center',
	      headerAlign: 'center',
	      flex: 1,
	      renderCell: ({ row }) => <TotalBudget project={row} />
	    },
	    {
	      field: 'other',
	      headerName: '',
	      width: 120,
	      renderCell: (params) => (
	        <Box display="flex" gap={1}>
	          <Button
	            LinkComponent={NextLink}
	            href={routes.projects.getUrl(params.id)}
	            key="view"
	            className="tableActionIcon tableActionIconView"
	          >
	            <Eye />
	          </Button>
	          <EditBtn
	            id={`${params.row._id}`}
	            onSuccess={(data) => {
	              console.log(data);
	            }}
	            key="edit"
	          />
	          <DeleteBtn
	            project={{
	              _id: `${params.row._id}`,
	              projectName: params.row.projectName
	            }}
	            key="delete"
	            onSuccess={(project) => {
	              setProjects((prevState) => {
	                return prevState.filter((item) => item._id !== project._id);
	              });
	            }}
	          />
	        </Box>
	      )
	    }
	  ];
	
	  useEffect(() => {
	    initData();
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, []);
	
	  const handleAddNew = () => {
	    setOpenDialog(true);
	  };
	
	  const renderAddButton = () => (
	    <Button variant="contained" startIcon={<Pencil size={14} />} color="error" type="submit" onClick={handleAddNew}>
	      {formatMessage({ id: 'buttonLabelAddNew' })}
	    </Button>
	  );
	
	  const initData = async () => {
	    const result = await request(getProjects());
	
	    if (!result.error) {
	      const { projects } = result.data as IResponseProjects;
	      setProjects(projects);
	    }
	  };
	
	  return (
	    <Stack direction="column">
	      <Breadcrumbs title={formatMessage({ id: 'projects' })} actionCom={renderAddButton} onSearch={() => console.log('hello')} />
	      <Table rows={projects} columns={columns} loading={isLoading} />
	      <AddDialog
	        open={openDialog}
	        project={null}
	        onClose={() => {
	          setOpenDialog(false);
	        }}
	        onSuccess={() => {
	          setOpenDialog(false);
	        }}
	      />
	    </Stack>
	  );
	};
	
	export default ProjectList;

```

src/components/projects/List/styles.module.scss```scss

```

src/components/projects/List/components/TotalBudget/index.tsx```tsx
	import * as React from 'react';
	import { Typography } from '@mui/material';
	
	//projects import
	import { Project } from '@/utils/dtos/project.dto';
	import { formatPrice } from 'utils/currency';
	
	export interface ITotalBudgetProps {
	  project: Project;
	}
	
	export default function TotalBudget(props: ITotalBudgetProps) {
	  const { project } = props;
	  return <Typography variant="h6">{formatPrice(project?.amount || 0)}</Typography>;
	}

```

src/components/projects/List/components/ProjectName/index.tsx```tsx
	import * as React from 'react';
	import { Box, Typography } from '@mui/material';
	
	//projects import
	import Avatar from '@/components/ui-component/extended/Avatar';
	import { Project } from '@/utils/dtos/project.dto';
	
	import styles from './styles.module.scss';
	
	export interface IProjectNameProps {
	  project: Project;
	}
	
	export default function ProjectName(props: IProjectNameProps) {
	  const { project } = props;
	  return (
	    <Box className={styles.wrapper}>
	      <Avatar src={project.imageUrl} alt={project.projectName} />
	      <Typography className={styles.text} variant="h4">
	        {project.projectName}
	      </Typography>
	    </Box>
	  );
	}

```

src/components/projects/List/components/ProjectName/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.wrapper {
	  display: flex;
	  align-items: center;
	  padding: 30px 0;
	}
	
	.text {
	  font-weight: 500;
	  margin-left: 10px;
	}

```

src/components/projects/List/components/DeleteBtn/index.tsx```tsx
	import { useState } from 'react';
	
	// projects import
	import { Button } from '@/components/ui-component/buttons';
	import { Trash } from '@phosphor-icons/react';
	import { Project } from '@/utils/dtos/project.dto';
	import DeleteDialog from '../../../DeleteDialog';
	
	export interface IDeleteBtnProps {
	  project: Partial<Project>;
	  onSuccess?: (data: Partial<Project>) => void;
	}
	
	export default function DeleteBtn(props: IDeleteBtnProps) {
	  const { project, onSuccess } = props;
	  const [open, setOpen] = useState(false);
	
	  const handleClose = () => {
	    setOpen(false);
	  };
	
	  const handleSuccess = (data: Partial<Project>) => {
	    setOpen(false);
	    if (onSuccess) {
	      onSuccess(data);
	    }
	  };
	
	  const handleDelete = async () => {
	    if (!project) return;
	    setOpen(true);
	  };
	
	  return (
	    <>
	      <Button onClick={handleDelete} className="tableActionIcon tableActionIconDelete">
	        <Trash />
	      </Button>
	      {open && <DeleteDialog project={project} onClose={handleClose} open onSuccess={handleSuccess} />}
	    </>
	  );
	}

```

src/components/projects/List/components/EditBtn/index.tsx```tsx
	import { useState } from 'react';
	
	// projects import
	import { useAsync } from '@/hooks/useAsync';
	import { Button } from '@/components/ui-component/buttons';
	import { Pencil } from '@phosphor-icons/react';
	import { getProject } from 'utils/services/project';
	import { Project } from '@/utils/dtos/project.dto';
	import DateCustom from '@/utils/datetime/date.custom';
	
	import AddDialog from '../../../Add';
	
	export interface IEditBtnProps {
	  id: string;
	  onSuccess?: (data: Project) => void;
	}
	
	export default function EditBtn(props: IEditBtnProps) {
	  const { id, onSuccess } = props;
	  const [project, setProject] = useState<Project | null>(null);
	  const [open, setOpen] = useState(false);
	  const { request, isLoading } = useAsync();
	
	  const handleClose = () => {
	    setOpen(false);
	  };
	
	  const handleSuccess = (data: Project) => {
	    setOpen(false);
	    setProject(null);
	    if (onSuccess) {
	      onSuccess(data);
	    }
	  };
	
	  const handleEdit = async () => {
	    if (!id) return;
	    setOpen(true);
	    const result = await request(getProject(id));
	    if (!result?.error) {
	      const { _id, startDate, ...rest } = result.data;
	      setProject({
	        _id: _id,
	        startDate: startDate ? new DateCustom(startDate) : null,
	        ...rest
	      });
	    }
	  };
	
	  return (
	    <>
	      <Button loading={isLoading} onClick={handleEdit} disabled={isLoading} className="tableActionIcon tableActionIconEdit">
	        <Pencil />
	      </Button>
	      {open && <AddDialog loading={isLoading} project={project} onClose={handleClose} open onSuccess={handleSuccess} />}
	    </>
	  );
	}

```

src/components/projects/List/components/StartDate/index.tsx```tsx
	import * as React from 'react';
	import { format, isValid } from 'date-fns';
	import { Typography } from '@mui/material';
	
	//projects import
	import DateCustom from '@/utils/datetime/date.custom';
	import { Project } from '@/utils/dtos/project.dto';
	import { VISIABLE_DATE_FORMAT } from '@/constant';
	
	export interface IStartDateProps {
	  project: Project;
	}
	
	export default function StartDate(props: IStartDateProps) {
	  const { project } = props;
	  const startDate = project?.startDate ? new DateCustom(project?.startDate) : null;
	  return <Typography variant="h6">{isValid(startDate) && startDate ? format(startDate, VISIABLE_DATE_FORMAT) : ''}</Typography>;
	}

```

src/components/projects/Detail/style.module.scss```scss
	
	@import 'styles/variables.module';
	
	.tab{
	  min-height: 52px;
	}
	.overviewLabel{
	  color: $grey700;
	  font-weight: 700;
	  margin-bottom: 2px;
	}
	.overviewValue{
	  color: #202020;
	}
```

src/components/projects/Detail/index.tsx```tsx
	'use client';
	
	import Breadcrumbs from '@/components/Breadcrumbs';
	import routes from '@/routes';
	import { Box, Tab, Tabs } from '@mui/material';
	import { useParams, useRouter } from 'next/navigation';
	import { useEffect, useState } from 'react';
	import { useAsync } from '@/hooks/useAsync';
	import Loader from '@/components/ui-component/Loader';
	import { Project } from '@/utils/dtos/project.dto';
	import { CurrencyCircleDollar, Receipt, Rows, SquaresFour, UserCircleGear } from '@phosphor-icons/react';
	import style from './style.module.scss';
	import { ProjectOverview } from './overview';
	import { getProject } from '@/utils/services/project';
	import { ProjectRoles } from './roles';
	import { ProjectContractors } from './contractors';
	import { ProjectBudgets } from './budgets';
	import { ProjectInvoices } from './invoices';
	
	const ProjectDetail = () => {
	  const { execute, isLoading } = useAsync();
	  const params = useParams();
	  const router = useRouter();
	  const projectId = params.id as string;
	  const [project, setProject] = useState<Project | null>(null);
	  const [selectedTab, setSelectedTab] = useState(0);
	  const projectUrl = routes.projects.getUrl();
	  const breadCrumbs = [
	    {
	      ...routes.projects,
	      url: projectUrl
	    },
	    {
	      ...routes.profile,
	      url: projectUrl,
	      label: project?.projectName || ''
	    }
	  ];
	
	  const handleSelect = (_: any, value: number) => {
	    setSelectedTab(value);
	  };
	
	  const getData = async () => {
	    if (params.id) {
	      const result = await execute(getProject(projectId));
	      if (result.data) {
	        setProject(result.data);
	      } else {
	        router.push(projectUrl);
	      }
	    }
	  };
	
	  useEffect(() => {
	    if (!projectId) {
	      router.push(projectUrl);
	    }
	    getData();
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [projectId]);
	
	  if (isLoading) return <Loader />;
	
	  if (!project) {
	    return <Loader />;
	  }
	
	  return (
	    <>
	      <Breadcrumbs title={project.projectName} customRoutes={breadCrumbs} />
	      <Box mt={4} bgcolor="#fff" borderRadius={2}>
	        <Tabs value={selectedTab} onChange={handleSelect}>
	          <Tab label="Overview" icon={<SquaresFour size={20} />} iconPosition="start" className={style.tab} />
	          <Tab label="Project Roles" icon={<UserCircleGear size={20} />} iconPosition="start" className={style.tab} />
	          <Tab label="Contractors" icon={<Rows size={20} />} iconPosition="start" className={style.tab} />
	          <Tab label="Budgets" icon={<CurrencyCircleDollar size={20} />} iconPosition="start" className={style.tab} />
	          <Tab label="Invoices" icon={<Receipt size={20} />} iconPosition="start" className={style.tab} />
	        </Tabs>
	        <TabPanel value={selectedTab} index={0}>
	          <ProjectOverview project={project} />
	        </TabPanel>
	        <TabPanel value={selectedTab} index={1}>
	          <ProjectRoles project={project} />
	        </TabPanel>
	        <TabPanel value={selectedTab} index={2}>
	          <ProjectContractors project={project} />
	        </TabPanel>
	        <TabPanel value={selectedTab} index={3}>
	          <ProjectBudgets project={project} />
	        </TabPanel>
	        <TabPanel value={selectedTab} index={4}>
	          <ProjectInvoices project={project} />
	        </TabPanel>
	      </Box>
	    </>
	  );
	};
	
	const TabPanel = ({ value, index, children }: any) => (
	  <div role="tabpanel" hidden={value !== index} id={`simple-tabpanel-${index}`} aria-labelledby={`simple-tab-${index}`}>
	    {value === index && <Box>{children}</Box>}
	  </div>
	);
	export default ProjectDetail;

```

src/components/projects/Detail/contractors/index.tsx```tsx
	import { Button } from '@/components/ui-component/buttons';
	import { Project } from '@/utils/dtos/project.dto';
	import { Box, Typography } from '@mui/material';
	import { Plus, Trash } from '@phosphor-icons/react';
	import { useIntl } from 'react-intl';
	import { useEffect, useState } from 'react';
	import { useAsync } from '@/hooks/useAsync';
	import { User } from '@/utils/dtos/user.dto';
	import { getProjectContractors } from '@/utils/services/project';
	import Table from '@/components/ui-component/table';
	import { GridColDef, GridRowParams } from '@mui/x-data-grid';
	import Avatar from '@/components/ui-component/extended/Avatar';
	import ProjectAddUserDialog from './addContractor';
	
	interface Props {
	  project: Project;
	}
	export const ProjectContractors = ({ project }: Props) => {
	  const { formatMessage } = useIntl();
	  const [openDialog, setOpenDialog] = useState(false);
	  const [listContractors, setListContractors] = useState([]);
	  const { execute, isLoading } = useAsync();
	
	  const getData = async () => {
	    const result = await execute(getProjectContractors(project._id + ''));
	    const data = result.data?.contractors && result.data?.contractors.length > 0 ? result.data?.contractors : [];
	    setListContractors(data);
	  };
	  useEffect(() => {
	    getData();
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, []);
	
	  const columns: GridColDef[] = [
	    {
	      field: 'name',
	      headerName: formatMessage({ id: 'userTableName' }),
	      headerAlign: 'center',
	      renderCell: ({ row }) => (
	        <Box display="flex" gap="12px" alignItems="center">
	          <Avatar src={row.imageUrl} alt={row.name} />
	          <Typography variant="h4">{row.name}</Typography>
	        </Box>
	      ),
	      flex: 2
	    },
	    {
	      field: 'email',
	      headerName: formatMessage({ id: 'userTableEmail' }),
	      flex: 2,
	      align: 'center',
	      headerAlign: 'center'
	    },
	    {
	      field: 'phoneNumber',
	      headerName: formatMessage({ id: 'userDetailPhoneNumber' }),
	      headerAlign: 'center',
	      flex: 2,
	      align: 'center'
	    },
	    {
	      field: 'projectRole',
	      headerName: formatMessage({ id: 'projectDetailCellRole' }),
	      flex: 2,
	      align: 'center',
	      headerAlign: 'center'
	    },
	    {
	      field: 'actions',
	      type: 'actions',
	      width: 100,
	      getActions: (params: GridRowParams<Partial<User>>) => [
	        <Button key="delete" className="tableActionIcon tableActionIconDelete">
	          <Trash />
	        </Button>
	      ]
	    }
	  ];
	
	  return (
	    <Box>
	      <Box p={3} display="flex" justifyContent="flex-end">
	        <Button
	          variant="contained"
	          startIcon={<Plus size={14} />}
	          color="error"
	          type="submit"
	          sx={{ px: 3 }}
	          onClick={() => setOpenDialog(true)}
	        >
	          {formatMessage({ id: 'projectDetailAddContractor' })}
	        </Button>
	      </Box>
	      <Table
	        rows={listContractors}
	        columns={columns}
	        loading={isLoading}
	        sx={{
	          '& .MuiDataGrid-main': {
	            border: 0
	          }
	        }}
	      />
	      <ProjectAddUserDialog open={openDialog} projectId={project._id.toString()} onClose={() => setOpenDialog(false)} />
	    </Box>
	  );
	};

```

src/components/projects/Detail/contractors/addContractor/index.tsx```tsx
	import {
	  Box,
	  Dialog,
	  DialogActions,
	  DialogContent,
	  DialogProps,
	  DialogTitle,
	  IconButton,
	  MenuItem,
	  Select,
	  Typography
	} from '@mui/material';
	import { useIntl } from 'react-intl';
	import { useFormik } from 'formik';
	import { object as yupObject } from 'yup';
	import { GridCloseIcon } from '@mui/x-data-grid';
	import { success as notifySuccess } from '@/utils/notify';
	
	// projects import
	import useCommonValidates from '@/hooks/useCommonValidates';
	import { Button } from 'ui-component/buttons';
	import { Project } from 'utils/dtos/project.dto';
	import styles from '@/styles/dataDialog.module.scss';
	import { PROJECT_ROLE } from '@/constant/project';
	import UserAutoComplete from '@/components/ui-component/autocomplete/Users';
	
	export interface IFormValues {
	  projectId: string;
	  contractorRole: string;
	  userIds: string[];
	}
	
	interface ProjectAddDialogProps extends Omit<DialogProps, 'onError' | 'onClose'> {
	  projectId: string;
	  onClose: () => void;
	  onSuccess?: (project: Project) => void;
	  loading?: boolean;
	}
	
	export default function ProjectAddContractorDialog({
	  onClose,
	  projectId,
	  onSuccess,
	  loading = false,
	  ...props
	}: ProjectAddDialogProps): JSX.Element {
	  const { formatMessage } = useIntl();
	  const validates = useCommonValidates();
	
	  const { handleSubmit, values, errors, isSubmitting, setFieldValue, handleChange, resetForm } = useFormik({
	    initialValues: {
	      projectId,
	      contractorRole: PROJECT_ROLE[0],
	      userIds: []
	    },
	    onSubmit: async (currentValues: IFormValues) => {
	      notifySuccess(formatMessage({ id: 'projectApiAddedContractor' }));
	      resetForm();
	      onClose();
	    },
	    validationSchema: yupObject().shape({
	      contractorRole: validates.text({ isRequired: true }),
	      userIds: validates.array({ isRequired: true })
	    }),
	    validateOnBlur: false,
	    validateOnChange: false
	  });
	
	  const isDisabledBtn = isSubmitting || loading;
	
	  const handleCloseDialog = () => {
	    if (isSubmitting) return;
	    resetForm();
	    if (onClose) {
	      onClose();
	    }
	  };
	
	  const handleChangeUsers = (values: any[]) => {
	    setFieldValue(
	      'userIds',
	      values.map((item) => item._id)
	    );
	  };
	  return (
	    <Dialog onClose={handleCloseDialog} {...props}>
	      <DialogTitle sx={{ pt: '8px' }}>{formatMessage({ id: 'projectDetailAddContractor' })}</DialogTitle>
	      <IconButton
	        aria-label="close"
	        onClick={handleCloseDialog}
	        sx={{
	          position: 'absolute',
	          right: 10,
	          top: 16,
	          color: (theme) => theme.palette.grey[500]
	        }}
	      >
	        <GridCloseIcon />
	      </IconButton>
	      <form noValidate onSubmit={handleSubmit}>
	        <DialogContent dividers className={styles.content}>
	          <Box>
	            <UserAutoComplete
	              onChange={handleChangeUsers}
	              inputProps={{
	                name: 'userIds',
	                error: !!errors.userIds,
	                helperText: errors.userIds
	              }}
	            />
	          </Box>
	          <Box mb={2} />
	          <Box>
	            <Typography variant="h5" mb="4px">
	              {formatMessage({ id: 'projectAddContractorLabelRole' })}
	            </Typography>
	            <Select value={values.contractorRole} fullWidth sx={{ borderRadius: '12px' }} onChange={handleChange} name="contractorRole">
	              {PROJECT_ROLE.map((item) => (
	                <MenuItem value={item} key={item}>
	                  {item}
	                </MenuItem>
	              ))}
	            </Select>
	          </Box>
	        </DialogContent>
	
	        <DialogActions sx={{ gap: '20px', pt: '24px', pb: '12px', px: '24px' }}>
	          <Button disabled={isDisabledBtn} variant="text" color="error" onClick={handleCloseDialog}>
	            {formatMessage({ id: 'buttonLabelCancel' })}
	          </Button>
	          <Button loading={isSubmitting} color="error" disabled={isDisabledBtn} size="large" type="submit" variant="contained">
	            {formatMessage({ id: 'add' })}
	          </Button>
	        </DialogActions>
	      </form>
	    </Dialog>
	  );
	}

```

src/components/projects/Detail/invoices/style.module.scss```scss
	
	@import 'styles/variables.module';
	
	.headerTitle{
	  text-overflow: unset;
	  white-space: pre-wrap;
	  line-height: 1.3;
	}
	
	.statusSubmitted{
	  background-color: #E6F4FB;
	  color: #0084C2;
	  font-weight: 500;
	}
	.statusApprove{
	  background-color: #FFFCE8;
	  color: #E8CC18;
	  font-weight: 500;
	}
	.statusInvoiceApproved{
	  background-color:#E6FAEE;
	  color: #00C853;
	  font-weight: 500;
	}

```

src/components/projects/Detail/invoices/index.tsx```tsx
	import { Button } from '@/components/ui-component/buttons';
	import { Project } from '@/utils/dtos/project.dto';
	import { Box, Typography, Chip } from '@mui/material';
	import { Plus, Trash } from '@phosphor-icons/react';
	import { useIntl } from 'react-intl';
	import { useEffect, useState } from 'react';
	import { useAsync } from '@/hooks/useAsync';
	import { getProjectInvoices } from '@/utils/services/project';
	import Table from '@/components/ui-component/table';
	import { GridColDef } from '@mui/x-data-grid';
	import { formatPrice } from '@/utils/currency';
	import { GST_RATE, HOLDBACK_RATE, PST_RATE } from '@/utils/constant';
	import styles from './style.module.scss';
	import { formatDate } from '@/utils/datetime/date.utc';
	
	interface Props {
	  project: Project;
	}
	export const ProjectInvoices = ({ project }: Props) => {
	  const { formatMessage } = useIntl();
	  const [listInvoices, setListInvoices] = useState([]);
	  const { execute, isLoading } = useAsync();
	
	  const getData = async () => {
	    const result = await execute(getProjectInvoices(project._id + ''));
	    const data = result.data?.invoices && result.data?.invoices.length > 0 ? result.data?.invoices : [];
	    setListInvoices(data);
	  };
	  useEffect(() => {
	    getData();
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, []);
	
	  const renderStatus = (status: number) => {
	    switch (status) {
	      case 0: {
	        return <Chip label="Submitted" className={styles.statusSubmitted} />;
	      }
	      case 1: {
	        return <Chip label="Approval 3" className={styles.statusApprove} />;
	      }
	      case 2: {
	        return <Chip label="Approval 0" className={styles.statusApprove} />;
	      }
	      case 3: {
	        return <Chip label="Invoice Approved" className={styles.statusInvoiceApproved} />;
	      }
	      default: {
	        return '';
	      }
	    }
	  };
	  const columns: GridColDef[] = [
	    {
	      field: 'id',
	      headerName: formatMessage({ id: 'invoiceTableId' }),
	      width: 150,
	      align: 'center'
	    },
	    {
	      field: 'budgetId',
	      headerName: formatMessage({ id: 'budgetTableId' }),
	      width: 150,
	      align: 'center'
	    },
	    {
	      field: 'invoiceIndex',
	      headerName: formatMessage({ id: 'invoiceTableIndex' }),
	      width: 120,
	      align: 'center'
	    },
	    {
	      field: 'invoiceContractorId',
	      headerName: formatMessage({ id: 'invoiceTableContractor' }),
	      width: 150,
	      align: 'center'
	    },
	    { field: 'invoiceNumber', headerName: formatMessage({ id: 'invoiceTableNumber' }), width: 150, align: 'center' },
	    {
	      field: 'invoiceStatus',
	      headerName: formatMessage({ id: 'invoiceTableStatus' }),
	      width: 180,
	      align: 'center',
	      renderCell: ({ value }) => renderStatus(value)
	    },
	    {
	      field: 'invoiceDate',
	      headerName: formatMessage({ id: 'invoiceTableInvoiceDate' }),
	      width: 170,
	      align: 'center',
	      renderCell: ({ value }) => <Typography variant="h5">{formatDate(value)}</Typography>
	    },
	    {
	      field: 'invoiceReceivedDate',
	      headerName: formatMessage({ id: 'invoiceTableReceivedDate' }),
	      width: 180,
	      align: 'center',
	      renderCell: ({ value }) => <Typography variant="h5">{formatDate(value)}</Typography>
	    },
	    {
	      field: 'invoiceSubtotal',
	      headerName: formatMessage({ id: 'invoiceTableSubtotal' }),
	      width: 150,
	      headerClassName: 'alignRight',
	      align: 'right',
	      renderCell: ({ value }) => <Typography variant="h5">{formatPrice(value)}</Typography>
	    },
	    {
	      field: 'invoiceGst',
	      headerName: formatMessage({ id: 'invoiceTableGST' }),
	      width: 150,
	      headerClassName: 'alignRight',
	      align: 'right',
	      renderCell: ({ value }) => <Typography variant="h5">{formatPrice(value)}</Typography>
	    },
	    {
	      field: 'invoiceGstOverride',
	      renderHeader: () => (
	        <div className={styles.headerTitle}>{`${formatMessage({ id: 'invoiceTableGSTOverride' })} (else ${GST_RATE * 100}%)`}</div>
	      ),
	      width: 170,
	      headerClassName: 'alignRight',
	      align: 'right',
	      renderCell: ({ row, value }) => <Typography variant="h5">{formatPrice(value ? row.invoiceGst * (GST_RATE * 100) : 0)}</Typography>
	    },
	    {
	      field: 'invoicePst',
	      headerName: formatMessage({ id: 'invoiceTablePST' }),
	      width: 130,
	      headerClassName: 'alignRight',
	      align: 'right',
	      renderCell: ({ value }) => <Typography variant="h5">{formatPrice(value)}</Typography>
	    },
	    {
	      field: 'invoicePstOverride',
	      headerName: formatMessage({ id: 'invoiceDialogPSTOverride' }),
	      width: 170,
	      align: 'right',
	      renderHeader: () => (
	        <div
	          className={styles.headerTitle}
	        >{`${formatMessage({ id: 'invoiceDialogPSTOverride' })} (else ${(PST_RATE * 100).toFixed(0)}%)`}</div>
	      ),
	      renderCell: ({ row, value }) => <Typography variant="h5">{formatPrice(value ? row.invoicePst * (PST_RATE * 100) : 0)}</Typography>
	    },
	    {
	      field: 'invoiceHoldback',
	      headerName: formatMessage({ id: 'invoiceDialogHoldback' }),
	      width: 150,
	      headerClassName: 'alignRight',
	      align: 'right',
	      renderCell: ({ value }) => <Typography variant="h5">{formatPrice(value)}</Typography>
	    },
	    {
	      field: 'invoiceHoldbackEnabled',
	      headerName: formatMessage({ id: 'invoiceDialogHoldbackEnabled' }),
	      width: 200,
	      headerClassName: 'alignRight',
	      align: 'right',
	      renderHeader: () => (
	        <div
	          className={styles.headerTitle}
	        >{`${formatMessage({ id: 'invoiceDialogHoldbackEnabled' })} (else ${(HOLDBACK_RATE * 100).toFixed(0)}%)`}</div>
	      ),
	      renderCell: ({ row, value }) => (
	        <Typography variant="h5">{formatPrice(value ? row.invoicePst * (HOLDBACK_RATE * 100) : 0)}</Typography>
	      )
	    },
	    {
	      field: 'invoiceTotal',
	      headerName: formatMessage({ id: 'invoiceDialogTotal' }),
	      width: 150,
	      headerClassName: 'alignRight',
	      align: 'right',
	      renderCell: ({ value }) => <Typography variant="h5">{formatPrice(value || 0)}</Typography>
	    }
	  ];
	
	  return (
	    <Box>
	      <Box p={3} display="flex" gap={2}>
	        <Button variant="contained" startIcon={<Plus size={14} />} color="error" sx={{ px: 3 }}>
	          {formatMessage({ id: 'projectDetailBtnAddBudget' })}
	        </Button>
	        <Button variant="contained" startIcon={<Trash size={14} />} color="danger" sx={{ px: 3, color: '#fff' }}>
	          {formatMessage({ id: 'projectDetailBtnDeleteBudget' })}
	        </Button>
	      </Box>
	      <Table
	        rows={listInvoices}
	        columns={columns}
	        loading={isLoading}
	        checkboxSelection
	        sx={{
	          '& .MuiDataGrid-main': {
	            border: 0
	          },
	          '& .alignRight .MuiDataGrid-columnHeaderTitleContainer': {
	            flexDirection: 'row',
	            justifyContent: 'flex-end'
	          }
	        }}
	      />
	    </Box>
	  );
	};

```

src/components/projects/Detail/roles/index.tsx```tsx
	import { Button } from '@/components/ui-component/buttons';
	import { Project } from '@/utils/dtos/project.dto';
	import { Box, Typography } from '@mui/material';
	import { Plus, Trash } from '@phosphor-icons/react';
	import { useIntl } from 'react-intl';
	import { useEffect, useState } from 'react';
	import { useAsync } from '@/hooks/useAsync';
	import { User } from '@/utils/dtos/user.dto';
	import { getProjectRoles } from '@/utils/services/project';
	import Table from '@/components/ui-component/table';
	import { GridColDef, GridRowParams } from '@mui/x-data-grid';
	import Avatar from '@/components/ui-component/extended/Avatar';
	import ProjectAddUserDialog from './addUser';
	
	interface Props {
	  project: Project;
	}
	export const ProjectRoles = ({ project }: Props) => {
	  const { formatMessage } = useIntl();
	  const [openDialog, setOpenDialog] = useState(false);
	  const [listRoles, setListRoles] = useState([]);
	  const { execute, isLoading } = useAsync();
	
	  const getData = async () => {
	    const result = await execute(getProjectRoles(project._id + ''));
	    const data = result.data?.roles && result.data?.roles.length > 0 ? result.data?.roles : [];
	    setListRoles(data);
	  };
	  useEffect(() => {
	    getData();
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, []);
	
	  const columns: GridColDef[] = [
	    {
	      field: 'name',
	      headerName: formatMessage({ id: 'userTableName' }),
	      headerAlign: 'center',
	      renderCell: ({ row }) => (
	        <Box display="flex" gap="12px" alignItems="center">
	          <Avatar src={row.imageUrl} alt={row.name} />
	          <Typography variant="h4">{row.name}</Typography>
	        </Box>
	      ),
	      flex: 2
	    },
	    {
	      field: 'email',
	      headerName: formatMessage({ id: 'userTableEmail' }),
	      flex: 2,
	      align: 'center',
	      headerAlign: 'center'
	    },
	    {
	      field: 'phoneNumber',
	      headerName: formatMessage({ id: 'userDetailPhoneNumber' }),
	      headerAlign: 'center',
	      flex: 2,
	      align: 'center'
	    },
	    {
	      field: 'projectRole',
	      headerName: formatMessage({ id: 'projectDetailCellRole' }),
	      flex: 2,
	      align: 'center',
	      headerAlign: 'center'
	    },
	    {
	      field: 'approvalLevel',
	      headerName: formatMessage({ id: 'projectDetailCellApproval' }),
	      flex: 2,
	      align: 'center',
	      headerAlign: 'center'
	    },
	    {
	      field: 'actions',
	      type: 'actions',
	      width: 100,
	      getActions: (params: GridRowParams<Partial<User>>) => [
	        <Button key="delete" className="tableActionIcon tableActionIconDelete">
	          <Trash />
	        </Button>
	      ]
	    }
	  ];
	
	  return (
	    <Box>
	      <Box p={3} display="flex" justifyContent="flex-end">
	        <Button
	          variant="contained"
	          startIcon={<Plus size={14} />}
	          color="error"
	          type="submit"
	          sx={{ px: 3 }}
	          onClick={() => setOpenDialog(true)}
	        >
	          {formatMessage({ id: 'projectDetailAddUser' })}
	        </Button>
	      </Box>
	      <Table
	        rows={listRoles}
	        columns={columns}
	        loading={isLoading}
	        sx={{
	          '& .MuiDataGrid-main': {
	            border: 0
	          }
	        }}
	      />
	      <ProjectAddUserDialog open={openDialog} projectId={project._id.toString()} onClose={() => setOpenDialog(false)} />
	    </Box>
	  );
	};

```

src/components/projects/Detail/roles/addUser/index.tsx```tsx
	import {
	  Box,
	  Dialog,
	  DialogActions,
	  DialogContent,
	  DialogProps,
	  DialogTitle,
	  IconButton,
	  MenuItem,
	  Select,
	  Typography
	} from '@mui/material';
	import { useIntl } from 'react-intl';
	import { useFormik } from 'formik';
	import { object as yupObject } from 'yup';
	import { GridCloseIcon } from '@mui/x-data-grid';
	import { success as notifySuccess } from '@/utils/notify';
	
	// projects import
	import useCommonValidates from '@/hooks/useCommonValidates';
	import { Button } from 'ui-component/buttons';
	import { Project } from 'utils/dtos/project.dto';
	import styles from '@/styles/dataDialog.module.scss';
	import { PROJECT_ROLE } from '@/constant/project';
	import UserAutoComplete from '@/components/ui-component/autocomplete/Users';
	
	export interface IFormValues {
	  projectId: string;
	  projectRole: string;
	  userIds: string[];
	}
	
	interface ProjectAddDialogProps extends Omit<DialogProps, 'onError' | 'onClose'> {
	  projectId: string;
	  onClose: () => void;
	  onSuccess?: (project: Project) => void;
	  loading?: boolean;
	}
	
	export default function ProjectAddUserDialog({
	  onClose,
	  projectId,
	  onSuccess,
	  loading = false,
	  ...props
	}: ProjectAddDialogProps): JSX.Element {
	  const { formatMessage } = useIntl();
	  const validates = useCommonValidates();
	
	  const { handleSubmit, values, errors, isSubmitting, setFieldValue, handleChange, resetForm } = useFormik({
	    initialValues: {
	      projectId,
	      projectRole: PROJECT_ROLE[0],
	      userIds: []
	    },
	    onSubmit: async (currentValues: IFormValues) => {
	      notifySuccess(formatMessage({ id: 'projectApiAddedUser' }));
	      resetForm();
	      onClose();
	    },
	    validationSchema: yupObject().shape({
	      projectRole: validates.text({ isRequired: true }),
	      userIds: validates.array({ isRequired: true })
	    }),
	    validateOnBlur: false,
	    validateOnChange: false
	  });
	  // const errorList = getFieldErrors({ errors, touched });
	
	  const isDisabledBtn = isSubmitting || loading;
	
	  const handleCloseDialog = () => {
	    if (isSubmitting) return;
	    resetForm();
	    if (onClose) {
	      onClose();
	    }
	  };
	
	  const handleChangeUsers = (values: any[]) => {
	    setFieldValue(
	      'userIds',
	      values.map((item) => item._id)
	    );
	  };
	  return (
	    <Dialog onClose={handleCloseDialog} {...props}>
	      <DialogTitle sx={{ pt: '8px' }}>{formatMessage({ id: 'projectDetailAddUser' })}</DialogTitle>
	      <IconButton
	        aria-label="close"
	        onClick={handleCloseDialog}
	        sx={{
	          position: 'absolute',
	          right: 10,
	          top: 16,
	          color: (theme) => theme.palette.grey[500]
	        }}
	      >
	        <GridCloseIcon />
	      </IconButton>
	      <form noValidate onSubmit={handleSubmit}>
	        <DialogContent dividers className={styles.content}>
	          <Box>
	            <UserAutoComplete
	              onChange={handleChangeUsers}
	              inputProps={{
	                name: 'userIds',
	                error: !!errors.userIds,
	                helperText: errors.userIds
	              }}
	            />
	          </Box>
	          <Box mb={2} />
	          <Box>
	            <Typography variant="h5" mb="4px">
	              {formatMessage({ id: 'projectAddUserLabelRole' })}
	            </Typography>
	            <Select value={values.projectRole} fullWidth sx={{ borderRadius: '12px' }} onChange={handleChange} name="projectRole">
	              {PROJECT_ROLE.map((item) => (
	                <MenuItem value={item} key={item}>
	                  {item}
	                </MenuItem>
	              ))}
	            </Select>
	          </Box>
	        </DialogContent>
	
	        <DialogActions sx={{ gap: '20px', pt: '24px', pb: '12px', px: '24px' }}>
	          <Button disabled={isDisabledBtn} variant="text" color="error" onClick={handleCloseDialog}>
	            {formatMessage({ id: 'buttonLabelCancel' })}
	          </Button>
	          <Button loading={isSubmitting} color="error" disabled={isDisabledBtn} size="large" type="submit" variant="contained">
	            {formatMessage({ id: 'add' })}
	          </Button>
	        </DialogActions>
	      </form>
	    </Dialog>
	  );
	}

```

src/components/projects/Detail/budgets/index.tsx```tsx
	import { Button } from '@/components/ui-component/buttons';
	import { Project } from '@/utils/dtos/project.dto';
	import { Box, Typography } from '@mui/material';
	import { Plus, Trash, Upload } from '@phosphor-icons/react';
	import { useIntl } from 'react-intl';
	import { useEffect, useState } from 'react';
	import { useAsync } from '@/hooks/useAsync';
	import { getProjectBudgets } from '@/utils/services/project';
	import Table from '@/components/ui-component/table';
	import { GridColDef } from '@mui/x-data-grid';
	import { formatPrice } from '@/utils/currency';
	import ProjectAddBudgetDialog from './addBudget';
	
	interface Props {
	  project: Project;
	}
	export const ProjectBudgets = ({ project }: Props) => {
	  const { formatMessage } = useIntl();
	  const [openAddDialog, setOpenAddDialog] = useState(false);
	  const [listContractors, setListContractors] = useState([]);
	  const { execute, isLoading } = useAsync();
	
	  const getData = async () => {
	    const result = await execute(getProjectBudgets(project._id + ''));
	    const data = result.data?.budgets && result.data?.budgets.length > 0 ? result.data?.budgets : [];
	    setListContractors(data);
	  };
	  useEffect(() => {
	    getData();
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, []);
	
	  const columns: GridColDef[] = [
	    {
	      field: 'id',
	      headerName: formatMessage({ id: 'budgetTableId' }),
	      width: 150,
	      align: 'center'
	    },
	    {
	      field: 'index',
	      headerName: formatMessage({ id: 'budgetTableIndex' }),
	      valueGetter: (params) => params.id,
	      width: 120,
	      align: 'center'
	    },
	    {
	      field: 'budgetCode',
	      headerName: formatMessage({ id: 'budgetTableCode' }),
	      width: 150,
	      align: 'center'
	    },
	    { field: 'budgetCategory', headerName: formatMessage({ id: 'budgetTableCategory' }), width: 150, align: 'center' },
	    {
	      field: 'budgetOriginalBudget',
	      headerName: formatMessage({ id: 'budgetTableOriginal' }),
	      width: 180,
	      align: 'center',
	      renderCell: ({ value }) => <Typography variant="h5">{formatPrice(value)}</Typography>
	    },
	    {
	      field: 'budgetRevision',
	      headerName: formatMessage({ id: 'budgetTableRevision' }),
	      width: 150,
	      align: 'center',
	      renderCell: ({ value }) => <Typography variant="h5">{formatPrice(value)}</Typography>
	    },
	    {
	      field: 'budgetCurrentBudget',
	      headerName: formatMessage({ id: 'budgetTableCurrentBudget' }),
	      width: 180,
	      align: 'center',
	      renderCell: ({ value }) => <Typography variant="h5">{formatPrice(value)}</Typography>
	    },
	    {
	      field: 'budgetClaimToDate',
	      headerName: formatMessage({ id: 'budgetTableClaimedToDate' }),
	      width: 200,
	      align: 'center',
	      renderCell: ({ value }) => <Typography variant="h5">{formatPrice(value)}</Typography>
	    },
	    {
	      field: 'budgetCurrentClaim',
	      headerName: formatMessage({ id: 'budgetTableCurrentClaim' }),
	      width: 180,
	      align: 'center',
	      renderCell: ({ value }) => <Typography variant="h5">{formatPrice(value)}</Typography>
	    },
	    {
	      field: 'budgetTotalClaim',
	      headerName: formatMessage({ id: 'budgetTableTotalClaim' }),
	      width: 150,
	      align: 'center',
	      renderCell: ({ value }) => <Typography variant="h5">{formatPrice(value)}</Typography>
	    },
	    {
	      field: 'budgetTotalClaimPercentage',
	      headerName: formatMessage({ id: 'budgetTableTotalClaimPercent' }),
	      width: 180,
	      align: 'center',
	      renderCell: ({ value }) => <Typography variant="h5">{value}%</Typography>
	    },
	    {
	      field: 'budgetCostToComplete',
	      headerName: formatMessage({ id: 'budgetTableCostToComplete' }),
	      width: 200,
	      align: 'center',
	      renderCell: ({ value }) => <Typography variant="h5">{formatPrice(value)}</Typography>
	    }
	  ];
	
	  return (
	    <Box>
	      <Box p={3} display="flex" gap={2}>
	        <Button variant="contained" startIcon={<Upload size={14} />} color="error" sx={{ px: 3 }}>
	          {formatMessage({ id: 'projectDetailBtnImportBudget' })}
	        </Button>
	        <Button variant="contained" startIcon={<Plus size={14} />} color="primary" sx={{ px: 3 }} onClick={() => setOpenAddDialog(true)}>
	          {formatMessage({ id: 'projectDetailBtnAddBudget' })}
	        </Button>
	        <Button variant="contained" startIcon={<Trash size={14} />} color="danger" sx={{ px: 3, color: '#fff' }}>
	          {formatMessage({ id: 'projectDetailBtnDeleteBudget' })}
	        </Button>
	      </Box>
	      <Table
	        rows={listContractors}
	        columns={columns}
	        loading={isLoading}
	        checkboxSelection
	        sx={{
	          '& .MuiDataGrid-main': {
	            border: 0
	          }
	        }}
	      />
	      <ProjectAddBudgetDialog open={openAddDialog} projectId={project._id.toString()} onClose={() => setOpenAddDialog(false)} />
	    </Box>
	  );
	};

```

src/components/projects/Detail/budgets/addBudget/index.tsx```tsx
	import { Dialog, DialogActions, DialogContent, DialogProps, DialogTitle, FormHelperText, Grid, IconButton, MenuItem } from '@mui/material';
	import { useIntl } from 'react-intl';
	import { useFormik } from 'formik';
	import { object as yupObject } from 'yup';
	import { GridCloseIcon } from '@mui/x-data-grid';
	import { success as notifySuccess } from '@/utils/notify';
	import TextField from 'components/ui-component/TextField';
	import Select from 'components/ui-component/Select';
	
	// projects import
	import useCommonValidates from '@/hooks/useCommonValidates';
	import { Button } from 'ui-component/buttons';
	import { Project } from 'utils/dtos/project.dto';
	import styles from '@/styles/dataDialog.module.scss';
	import { PROJECT_CATEGORY } from '@/constant/project';
	
	export interface IFormValues {
	  projectId: string;
	  budgetCode?: string;
	  budgetCategory?: string;
	  budgetOriginalBudget?: number;
	  budgetCurrentBudget?: number;
	  budgetRevision?: number;
	  budgetClaimToDate?: number;
	  budgetCurrentClaim?: number;
	  budgetTotalClaim?: number;
	  budgetTotalClaimPercentage?: number;
	  budgetCostToComplete?: number;
	}
	
	interface ProjectAddDialogProps extends Omit<DialogProps, 'onError' | 'onClose'> {
	  projectId: string;
	  onClose: () => void;
	  onSuccess?: (project: Project) => void;
	  loading?: boolean;
	}
	
	export default function ProjectAddBudgetDialog({
	  onClose,
	  projectId,
	  onSuccess,
	  loading = false,
	  ...props
	}: ProjectAddDialogProps): JSX.Element {
	  const { formatMessage } = useIntl();
	  const validates = useCommonValidates();
	
	  const { handleSubmit, values, errors, isSubmitting, handleChange, resetForm } = useFormik({
	    initialValues: {
	      projectId
	    },
	    onSubmit: async (currentValues: IFormValues) => {
	      console.log('currentValues', currentValues);
	      notifySuccess(formatMessage({ id: 'budgetApiAdded' }));
	      resetForm();
	      onClose();
	    },
	    validationSchema: yupObject().shape({
	      budgetCode: validates.text({ isRequired: true }),
	      budgetCategory: validates.text({ isRequired: true }),
	      budgetOriginalBudget: validates.number({ isRequired: true }),
	      budgetCurrentBudget: validates.number({ isRequired: true }),
	      budgetRevision: validates.number({ isRequired: true }),
	      budgetClaimToDate: validates.number({ isRequired: true }),
	      budgetCurrentClaim: validates.number({ isRequired: true }),
	      budgetTotalClaim: validates.number({ isRequired: true }),
	      budgetTotalClaimPercentage: validates.number({ isRequired: true }),
	      budgetCostToComplete: validates.number({ isRequired: true })
	    }),
	    validateOnBlur: false,
	    validateOnChange: false
	  });
	
	  const isDisabledBtn = isSubmitting || loading;
	
	  const handleCloseDialog = () => {
	    if (isSubmitting) {
	      return;
	    }
	
	    resetForm();
	
	    if (onClose) {
	      onClose();
	    }
	  };
	
	  return (
	    <Dialog onClose={handleCloseDialog} {...props}>
	      <DialogTitle sx={{ pt: '8px' }}>{formatMessage({ id: 'budgetDialogAddTitle' })}</DialogTitle>
	      <IconButton
	        aria-label="close"
	        onClick={handleCloseDialog}
	        sx={{
	          position: 'absolute',
	          right: 10,
	          top: 16,
	          color: (theme) => theme.palette.grey[500]
	        }}
	      >
	        <GridCloseIcon />
	      </IconButton>
	      <form noValidate onSubmit={handleSubmit}>
	        <DialogContent dividers className={styles.content}>
	          <Grid container spacing={2.5} pb={2}>
	            <Grid item xs={6}>
	              <TextField
	                label={formatMessage({ id: 'budgetTableCode' })}
	                value={values.budgetCode}
	                name="budgetCode"
	                fullWidth
	                size="medium"
	                placeholder={formatMessage({ id: 'budgetDialogAddCodePlaceholder' })}
	                error={!!errors?.budgetCode}
	                helperText={errors.budgetCode}
	                onChange={handleChange}
	              />
	            </Grid>
	            <Grid item xs={6}>
	              <Select
	                label={formatMessage({ id: 'budgetTableCategory' })}
	                labelId="labelBudgetCategory"
	                value={values.budgetCategory}
	                fullWidth
	                placeholder={formatMessage({ id: 'builderDialogCreateCategoryPlaceholder' })}
	                onChange={handleChange}
	                name="budgetCategory"
	                id="budgetCategory"
	                error={!!errors?.budgetCategory}
	              >
	                {PROJECT_CATEGORY.map((item) => (
	                  <MenuItem value={item} key={item}>
	                    {item}
	                  </MenuItem>
	                ))}
	              </Select>
	              {!!errors.budgetCategory && (
	                <FormHelperText error sx={{ mx: '14px' }}>
	                  {errors.budgetCategory}
	                </FormHelperText>
	              )}
	            </Grid>
	          </Grid>
	          <Grid container spacing={2.5} mb={2}>
	            <Grid item xs={6}>
	              <TextField
	                label={formatMessage({ id: 'budgetTableOriginal' })}
	                value={values.budgetOriginalBudget}
	                name="budgetOriginalBudget"
	                fullWidth
	                size="medium"
	                type="number"
	                error={!!errors?.budgetOriginalBudget}
	                helperText={errors.budgetOriginalBudget}
	                onChange={handleChange}
	              />
	            </Grid>
	            <Grid item xs={6}>
	              <TextField
	                label={formatMessage({ id: 'budgetTableCurrentBudget' })}
	                value={values.budgetCurrentBudget}
	                name="budgetCurrentBudget"
	                fullWidth
	                size="medium"
	                type="number"
	                error={!!errors?.budgetCurrentBudget}
	                helperText={errors.budgetCurrentBudget}
	                onChange={handleChange}
	              />
	            </Grid>
	          </Grid>
	          <Grid container spacing={2.5} mb={2}>
	            <Grid item xs={12}>
	              <TextField
	                label={formatMessage({ id: 'budgetTableRevision' })}
	                value={values.budgetRevision}
	                name="budgetRevision"
	                fullWidth
	                size="medium"
	                type="number"
	                error={!!errors?.budgetRevision}
	                helperText={errors.budgetRevision}
	                onChange={handleChange}
	              />
	            </Grid>
	          </Grid>
	          <Grid container spacing={2.5} mb={2}>
	            <Grid item xs={6}>
	              <TextField
	                label={formatMessage({ id: 'budgetTableClaimedToDate' })}
	                value={values.budgetClaimToDate}
	                name="budgetClaimToDate"
	                fullWidth
	                size="medium"
	                type="number"
	                error={!!errors?.budgetClaimToDate}
	                helperText={errors.budgetClaimToDate}
	                onChange={handleChange}
	              />
	            </Grid>
	            <Grid item xs={6}>
	              <TextField
	                label={formatMessage({ id: 'budgetTableCurrentClaim' })}
	                value={values.budgetCurrentClaim}
	                name="budgetCurrentClaim"
	                fullWidth
	                size="medium"
	                type="number"
	                error={!!errors?.budgetCurrentClaim}
	                helperText={errors.budgetCurrentClaim}
	                onChange={handleChange}
	              />
	            </Grid>
	          </Grid>
	          <Grid container spacing={2.5} mb={2}>
	            <Grid item xs={6}>
	              <TextField
	                label={formatMessage({ id: 'budgetTableTotalClaim' })}
	                value={values.budgetTotalClaim}
	                name="budgetTotalClaim"
	                fullWidth
	                size="medium"
	                type="number"
	                error={!!errors?.budgetTotalClaim}
	                helperText={errors.budgetTotalClaim}
	                onChange={handleChange}
	              />
	            </Grid>
	            <Grid item xs={6}>
	              <TextField
	                label={formatMessage({ id: 'budgetTableTotalClaimPercent' })}
	                value={values.budgetTotalClaimPercentage}
	                name="budgetTotalClaimPercentage"
	                fullWidth
	                size="medium"
	                type="number"
	                error={!!errors?.budgetTotalClaimPercentage}
	                helperText={errors.budgetTotalClaimPercentage}
	                onChange={handleChange}
	              />
	            </Grid>
	          </Grid>
	          <Grid container spacing={2.5}>
	            <Grid item xs={12}>
	              <TextField
	                label={formatMessage({ id: 'budgetTableCostToComplete' })}
	                value={values.budgetCostToComplete}
	                name="budgetCostToComplete"
	                fullWidth
	                size="medium"
	                type="number"
	                error={!!errors?.budgetCostToComplete}
	                helperText={errors.budgetCostToComplete}
	                onChange={handleChange}
	              />
	            </Grid>
	          </Grid>
	        </DialogContent>
	
	        <DialogActions sx={{ gap: '20px', pt: '24px', pb: '12px', px: '24px' }}>
	          <Button disabled={isDisabledBtn} variant="text" color="error" onClick={handleCloseDialog}>
	            {formatMessage({ id: 'buttonLabelCancel' })}
	          </Button>
	          <Button loading={isSubmitting} color="error" disabled={isDisabledBtn} size="large" type="submit" variant="contained">
	            {formatMessage({ id: 'add' })}
	          </Button>
	        </DialogActions>
	      </form>
	    </Dialog>
	  );
	}

```

src/components/projects/Detail/overview/index.tsx```tsx
	import { Button } from '@/components/ui-component/buttons';
	import DateCustom, { formatDate } from '@/utils/datetime/date.custom';
	import { Project } from '@/utils/dtos/project.dto';
	import { Box, Grid, Typography } from '@mui/material';
	import { Pencil } from '@phosphor-icons/react';
	import Image from 'next/image';
	import { useIntl } from 'react-intl';
	import styles from '../style.module.scss';
	import { useState } from 'react';
	import ProjectAddDialog from '../../Add';
	
	interface Props {
	  project: Project;
	}
	export const ProjectOverview = ({ project }: Props) => {
	  const { formatMessage } = useIntl();
	  const [openEdit, setOpenEdit] = useState(false);
	  return (
	    <Box p={3}>
	      <Box display="flex" justifyContent="flex-end">
	        <Button
	          variant="contained"
	          startIcon={<Pencil size={14} />}
	          color="error"
	          type="submit"
	          sx={{ px: 3 }}
	          onClick={() => setOpenEdit(true)}
	        >
	          {formatMessage({ id: 'edit' })}
	        </Button>
	      </Box>
	      <Box mt={3}>
	        <Grid container spacing={4}>
	          {project.imageUrl && (
	            <Grid item xs="auto">
	              <Image src={project.imageUrl} alt={project.projectName} width={264} height={264} />
	            </Grid>
	          )}
	          <Grid item xs={7}>
	            <Grid container spacing={2}>
	              <Grid item xs={6}>
	                <Typography className={styles.overviewLabel}>Project Name</Typography>
	                <Typography className={styles.overviewValue}>{project.projectName}</Typography>
	                {!!project.address && (
	                  <>
	                    <Box mt={2} />
	                    <Typography className={styles.overviewLabel}>Address</Typography>
	                    <Typography className={styles.overviewValue}>{project.address}</Typography>
	                  </>
	                )}
	              </Grid>
	              {project.startDate && (
	                <Grid item xs={6}>
	                  <Typography className={styles.overviewLabel}>Start Date</Typography>
	                  <Typography className={styles.overviewValue}>{formatDate(project.startDate)}</Typography>
	                </Grid>
	              )}
	            </Grid>
	          </Grid>
	        </Grid>
	      </Box>
	      <ProjectAddDialog
	        open={openEdit}
	        project={{
	          ...project,
	          startDate: project?.startDate ? new DateCustom(project.startDate) : new Date()
	        }}
	        onClose={() => setOpenEdit(false)}
	      />
	    </Box>
	  );
	};

```

src/components/authentication/AuthCardWrapper.tsx```tsx
	// material-ui
	import { Box } from '@mui/material';
	
	// project import
	import MainCard, { MainCardProps } from 'ui-component/cards/MainCard';
	
	// ==============================|| AUTHENTICATION CARD WRAPPER ||============================== //
	
	const AuthCardWrapper = ({ children, ...other }: MainCardProps) => (
	  <MainCard
	    sx={{
	      maxWidth: { xs: 400, lg: 475 },
	      margin: { xs: 2.5, md: 3 },
	      '& > *': {
	        flexGrow: 1,
	        flexBasis: '50%'
	      }
	    }}
	    content={false}
	    {...other}
	  >
	    <Box sx={{ p: { xs: 2, sm: 3, xl: 5 } }}>{children}</Box>
	  </MainCard>
	);
	
	export default AuthCardWrapper;

```

src/components/authentication/AuthWrapper1.tsx```tsx
	'use client';
	
	// material-ui
	import { styled } from '@mui/material/styles';
	
	// ==============================|| AUTHENTICATION 1 WRAPPER ||============================== //
	
	const AuthWrapper1 = styled('div')(({ theme }) => ({
	  backgroundColor: theme.palette.mode === 'dark' ? theme.palette.background.default : theme.palette.grey[100],
	  minHeight: '100vh'
	}));
	
	export default AuthWrapper1;

```

src/components/authentication/auth-forms/ThirdParty/index.tsx```tsx
	import { useState } from 'react';
	import { Box } from '@mui/material';
	import { useIntl } from 'react-intl';
	import NextImage from 'next/image';
	import { signIn } from 'next-auth/react';
	
	// projects import
	import routes from 'routes';
	import * as notify from 'utils/notify';
	import { Button } from 'ui-component/buttons';
	import styles from './styles.module.scss';
	
	export interface IThirdPartyProps {
	  type: 'signIn' | 'signUp';
	}
	
	export default function ThirdParty(props: IThirdPartyProps) {
	  const { type } = props;
	  const [isSigning, setIsSigning] = useState(false);
	  const { formatMessage } = useIntl();
	
	  const handleSignInWithGoogle = async () => {
	    try {
	      setIsSigning(true);
	      await signIn('google', { redirect: true, callbackUrl: routes.dashboard.getUrl() });
	    } catch (error) {
	      const err = error as Error;
	      notify.error(err.message);
	    }
	
	    setIsSigning(false);
	  };
	
	  if (type === 'signUp') {
	    return (
	      <Box className={styles.loginForm3Party}>
	        <Button loading={isSigning} onClick={handleSignInWithGoogle} className={styles.loginForm3PartyItem}>
	          <Box className={styles.loginForm3PartyItemIcon}>
	            <NextImage src="assets/images/icons/google.svg" alt={formatMessage({ id: 'signUpWithGoogle' })} width={21} height={21} />
	          </Box>
	          {formatMessage({ id: 'signUpWithGoogle' })}
	        </Button>
	      </Box>
	    );
	  }
	
	  return (
	    <Box className={styles.loginForm3Party}>
	      <Button loading={isSigning} onClick={handleSignInWithGoogle} className={styles.loginForm3PartyItem}>
	        <Box className={styles.loginForm3PartyItemIcon}>
	          <NextImage src="assets/images/icons/google.svg" alt={formatMessage({ id: 'signInWithGoogle' })} width={21} height={21} />
	        </Box>
	        {formatMessage({ id: 'signInWithGoogle' })}
	      </Button>
	    </Box>
	  );
	}

```

src/components/authentication/auth-forms/ThirdParty/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.loginForm3Party {
	  :global {
	    .firebaseui-container {
	      width: 100%;
	      max-width: 100%;
	    }
	    .firebaseui-card-content {
	      padding: 0;
	    }
	    button {
	      max-width: 100%;
	      width: 100%;
	      display: flex;
	      align-items: center;
	      justify-content: center;
	      height: 48px;
	      border-radius: 12px;
	      border: 1px solid $grey100;
	      background-color: $grey50 !important;
	      cursor: pointer;
	      box-shadow: none;
	    }
	  }
	}
	
	.loginForm3PartyItem {
	  display: flex;
	  align-items: center;
	  justify-content: center;
	  height: 48px;
	  border-radius: 12px;
	  border: 1px solid #eef2f6;
	  background-color: #f8fafc;
	  cursor: pointer;
	  color: $grey600;
	}
	
	.loginForm3PartyItemIcon {
	  margin-right: 15px;
	  img {
	    display: block;
	  }
	}

```

src/components/authentication/auth-forms/Slides/index.tsx```tsx
	import NextImage from 'next/image';
	import Slider from 'react-slick';
	import { Box, Typography } from '@mui/material';
	
	// projects import
	import styles from './styles.module.scss';
	
	export interface ISlide {
	  title: string;
	  description: string;
	  imageUrl: string;
	}
	
	export interface ISlidesProps {
	  items?: Array<ISlide>;
	}
	
	export default function Slides(props: ISlidesProps) {
	  const { items = [] } = props;
	  const settings = {
	    dots: true,
	    infinite: true,
	    speed: 500,
	    slidesToShow: 1,
	    slidesToScroll: 1,
	    autoplay: true
	  };
	
	  if (!items?.length) return null;
	
	  return (
	    <Box className={styles.slide}>
	      <Slider {...settings}>
	        {items.map((item, index) => {
	          return (
	            <Box key={index} className={styles.slideItem}>
	              <Box className={styles.slideItemInner}>
	                <NextImage className={styles.slideItemBackground} src={item.imageUrl} fill alt={item.title} />
	                <Box className={styles.slideItemContent}>
	                  <Typography component="h2" className={styles.slideItemTitle} variant="h1">
	                    {item.title}
	                  </Typography>
	                  <Box className={styles.slideItemSubTitle}>{item.description}</Box>
	                </Box>
	              </Box>
	            </Box>
	          );
	        })}
	      </Slider>
	    </Box>
	  );
	}

```

src/components/authentication/auth-forms/Slides/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.slide {
	  width: 100%;
	  overflow: hidden;
	  :global {
	    .slick-dots {
	      position: absolute;
	      bottom: 100px;
	      li {
	        width: auto;
	        height: auto;
	        margin: 0;
	        padding: 0 6px;
	        button {
	          font-size: 0;
	          padding: 0;
	          width: 6px;
	          height: 6px;
	          background: $secondaryNormal;
	          border-radius: 6px;
	          &:before {
	            display: none;
	          }
	        }
	        &.slick-active {
	          button {
	            width: 40px;
	          }
	        }
	      }
	    }
	  }
	}
	
	.slideItems {
	  width: 100%;
	  overflow: hidden;
	}
	
	.slideItem {
	  width: 100%;
	}
	
	.slideItemInner {
	  position: relative;
	  display: flex;
	  justify-content: center;
	  align-items: flex-end;
	  height: 100vh;
	}
	
	.slideItemBackground {
	  object-fit: cover;
	}
	
	.slideItemContent {
	  position: relative;
	  z-index: 2;
	  width: 405px;
	  text-align: center;
	  padding-bottom: 150px;
	}
	
	.slideItemSubTitle {
	  font-size: 1rem;
	  font-size: 1.5;
	  margin-top: 20px;
	}
	
	.slideItemTitle {
	  font-size: 2.125rem;
	  line-height: 1.23;
	  font-weight: 700;
	  font-family: $font-type;
	}
	
	.navigation {
	  position: absolute;
	  bottom: 100px;
	}

```

src/components/authentication/auth-forms/Divider/index.tsx```tsx
	import * as React from 'react';
	import { Box, Divider as MUIDivider } from '@mui/material';
	import { useIntl } from 'react-intl';
	
	// projects import
	import styles from './styles.module.scss';
	
	export default function Divider() {
	  const { formatMessage } = useIntl();
	  return (
	    <MUIDivider
	      classes={{
	        root: styles.loginFormOr
	      }}
	    >
	      <Box className={styles.loginFormOrText}>
	        {formatMessage({
	          id: 'or'
	        })}
	      </Box>
	    </MUIDivider>
	  );
	}

```

src/components/authentication/auth-forms/Divider/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.loginFormOr {
	  margin: 20px 0 20px 0 !important;
	}
	
	.loginFormOrText {
	  display: flex;
	  width: 136px;
	  height: 44px;
	  align-items: center;
	  justify-content: center;
	  border-radius: 12px;
	  border: 1px solid #ede7f6;
	  font-size: 16px;
	  font-weight: 500;
	  text-transform: uppercase;
	}
	
	.signUp {
	  margin-top: 22px;
	  padding-top: 22px;
	  border-top: 1px solid $grey100;
	  display: flex;
	  justify-content: flex-end;
	  font-weight: 500;
	}
	
	.signUpLink {
	  color: $grey500;
	}

```

src/components/authentication/auth-forms/ForgotPasswordForm/index.tsx```tsx
	import { useState } from 'react';
	import { Box, Grid, Typography } from '@mui/material';
	import { useIntl } from 'react-intl';
	
	// third party
	import * as Yup from 'yup';
	import { Formik, FormikHelpers } from 'formik';
	
	// projects import
	import { useAsync } from 'hooks/useAsync';
	import FormControl from 'ui-component/FormControl';
	import { sendCode } from 'utils/services/auth';
	import { OutlinedInput } from 'ui-component/inputs';
	import { Button } from 'ui-component/buttons';
	import Link from 'ui-component/Link';
	import routes from 'routes';
	import { getFieldErrors } from 'utils/form';
	import useCommonValidates from 'hooks/useCommonValidates';
	
	import FormContainer from '../FormContainer';
	import Slides from '../Slides';
	import styles from './styles.module.scss';
	
	export interface IForgotPasswordFormProps {}
	
	interface IFormValues {
	  email: string;
	}
	
	function ForgotPasswordForm(props: IForgotPasswordFormProps) {
	  const { request } = useAsync();
	  const { formatMessage } = useIntl();
	  const validates = useCommonValidates();
	  const [isSuccess, setIsSuccess] = useState(false);
	  const [email, setEmail] = useState('');
	  const validationSchema = Yup.object().shape({
	    email: validates.email({ isRequired: true })
	  });
	  const initialValues: IFormValues = {
	    email: ''
	  };
	  const leftTitle = isSuccess ? formatMessage({ id: 'checkMailTitle' }) : formatMessage({ id: 'forgotPassword' });
	  const leftSubTitle = isSuccess ? formatMessage({ id: 'checkMailSubTitle' }) : '';
	
	  const handleSubmitForm = async (values: IFormValues, { setSubmitting }: FormikHelpers<IFormValues>) => {
	    setSubmitting(true);
	    const result = await request(
	      sendCode({
	        email: values.email
	      })
	    );
	    setSubmitting(false);
	    if (!result?.error) {
	      setEmail(values.email);
	      setIsSuccess(true);
	    }
	  };
	
	  return (
	    <FormContainer
	      leftTitle={leftTitle}
	      leftSubTitle={leftSubTitle}
	      rightContent={
	        <Slides
	          items={[
	            {
	              title: formatMessage({ id: 'authSlideTitle1' }),
	              description: formatMessage({ id: 'authSlideContent1' }),
	              imageUrl: '/assets/images/authentication/bg-sign-in.svg'
	            },
	            {
	              title: formatMessage({ id: 'authSlideTitle2' }),
	              description: formatMessage({ id: 'authSlideContent2' }),
	              imageUrl: '/assets/images/authentication/bg-sign-up.svg'
	            },
	            {
	              title: formatMessage({ id: 'authSlideTitle3' }),
	              description: formatMessage({ id: 'authSlideContent3' }),
	              imageUrl: '/assets/images/authentication/bg-forgot-password.svg'
	            }
	          ]}
	        />
	      }
	    >
	      {isSuccess && (
	        <Box className={styles.loginForm}>
	          <Typography variant="h4" className={styles.note}>
	            {formatMessage({
	              id: 'checkMailNote'
	            })}
	          </Typography>
	          <Box marginTop={5}>
	            <Button LinkComponent="a" href={`mailto:${email}`} fullWidth color="error" size="large" type="submit" variant="contained">
	              {formatMessage({ id: 'openEmail' })}
	            </Button>
	          </Box>
	        </Box>
	      )}
	      {!isSuccess && (
	        <Box className={styles.loginForm}>
	          <Typography variant="h4" className={styles.note}>
	            {formatMessage({
	              id: 'forgotPasswordNote'
	            })}
	          </Typography>
	          <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={handleSubmitForm}>
	            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => {
	              const errorList = getFieldErrors<IFormValues>({ errors, touched });
	              return (
	                <form noValidate onSubmit={handleSubmit}>
	                  <Grid container spacing={3}>
	                    <Grid item xs={12}>
	                      <FormControl
	                        fullWidth
	                        label={formatMessage({ id: 'formEmailAndUsernameLabel' })}
	                        error={errorList.email?.error}
	                        errorMessage={errorList.email?.message}
	                        labelFor="outlined-adornment-email-login"
	                      >
	                        <OutlinedInput
	                          value={values.email}
	                          id="outlined-adornment-email-login"
	                          type="email"
	                          name="email"
	                          onBlur={handleBlur}
	                          onChange={handleChange}
	                          inputProps={{}}
	                        />
	                      </FormControl>
	                    </Grid>
	                  </Grid>
	
	                  <Box width={110} sx={{ mt: 3 }}>
	                    <Button
	                      fullWidth
	                      color="error"
	                      loading={isSubmitting}
	                      disabled={isSubmitting}
	                      size="large"
	                      type="submit"
	                      variant="contained"
	                    >
	                      {formatMessage({ id: 'send' })}
	                    </Button>
	                  </Box>
	                </form>
	              );
	            }}
	          </Formik>
	
	          <Box className={styles.signUp}>
	            <Link className={styles.signUpLink} href={routes.register.getUrl()}>
	              {formatMessage({ id: 'hasAccount' })}
	            </Link>
	          </Box>
	        </Box>
	      )}
	    </FormContainer>
	  );
	}
	
	export default ForgotPasswordForm;

```

src/components/authentication/auth-forms/ForgotPasswordForm/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.signUp {
	  margin-top: 22px;
	  padding-top: 22px;
	  border-top: 1px solid $grey100;
	  display: flex;
	  justify-content: flex-end;
	}
	
	.signUpLink {
	  color: $grey500;
	  font-weight: 500;
	}
	
	.note {
	  line-height: 1.5;
	  max-width: 380px;
	  font-weight: normal;
	  margin: 20px 0;
	}

```

src/components/authentication/auth-forms/VerifyEmailForm/index.tsx```tsx
	import { useRef } from 'react';
	import { useIntl } from 'react-intl';
	import { useSearchParams } from 'next/navigation';
	import { Typography } from '@mui/material';
	import { FormikHelpers } from 'formik';
	import { useRouter } from 'next/navigation';
	import * as Yup from 'yup';
	
	// projects import
	import { useAsync } from 'hooks/useAsync';
	import { showPartialEmail } from 'utils/email';
	import { verifyCode, sendCode } from 'utils/services/auth';
	import * as notify from 'utils/notify';
	import routes from 'routes';
	import useCommonValidates from 'hooks/useCommonValidates';
	
	import FormContainer from '../FormContainer';
	import Slides from '../Slides';
	import Form, { IFormValues, ILoginFormRef } from './components/Form';
	
	export interface IConfirmEmailFormProps {}
	
	function ConfirmEmailForm(props: IConfirmEmailFormProps) {
	  const { request } = useAsync();
	  const { formatMessage } = useIntl();
	  const formRef = useRef<ILoginFormRef>(null);
	  const validates = useCommonValidates();
	  const router = useRouter();
	  const searchParams = useSearchParams();
	  const email = searchParams.get('email') || '';
	  const validationSchema = Yup.object().shape({
	    email: validates.email({ isRequired: true })
	  });
	  let isValidEmail = false;
	
	  try {
	    validationSchema.validateSync({ email }).email;
	  } catch (error) {
	    isValidEmail = true;
	  }
	
	  const triggerTimeout = () => {
	    if (formRef.current?.setTime) {
	      formRef.current.setTime(10);
	    }
	  };
	
	  const handleSubmitForm = async (values: IFormValues, formikHelpers: FormikHelpers<IFormValues>) => {
	    const result = await request(
	      verifyCode({
	        email,
	        code: values.code.join('')
	      })
	    );
	
	    if (!result.error) {
	      notify.success(
	        formatMessage({
	          id: 'emailVerified'
	        })
	      );
	      setTimeout(() => {
	        const linkResetPassword = result.data?.linkResetPassword;
	        router.push(linkResetPassword || routes.resetPassword.getUrl());
	      }, 500);
	    }
	  };
	
	  const handleSendCode = async () => {
	    const result = await request(
	      sendCode({
	        email
	      })
	    );
	
	    if (!result?.error) {
	      notify.success(
	        formatMessage({
	          id: 'sendCodeSuccess'
	        })
	      );
	      triggerTimeout();
	    }
	  };
	
	  return (
	    <FormContainer
	      leftTitle={formatMessage({ id: 'verificationCodeFormTitle' })}
	      leftSubTitle={formatMessage({ id: 'verificationCodeFormSubTitle' })}
	      rightContent={
	        <Slides
	          items={[
	            {
	              title: formatMessage({ id: 'registerSlideTitle1' }),
	              description: formatMessage({ id: 'registerSlideContent1' }),
	              imageUrl: '/assets/images/authentication/bg-sign-up.svg'
	            },
	            {
	              title: formatMessage({ id: 'registerSlideTitle2' }),
	              description: formatMessage({ id: 'registerSlideContent2' }),
	              imageUrl: '/assets/images/authentication/bg-sign-up.svg'
	            },
	            {
	              title: formatMessage({ id: 'registerSlideTitle3' }),
	              description: formatMessage({ id: 'registerSlideContent3' }),
	              imageUrl: '/assets/images/authentication/bg-sign-up.svg'
	            }
	          ]}
	        />
	      }
	    >
	      <Typography variant="h5" marginY={2.5}>
	        {isValidEmail &&
	          formatMessage({
	            id: 'emailInValid'
	          })}
	        {!isValidEmail &&
	          formatMessage(
	            {
	              id: 'sendCodeToEmail'
	            },
	            { email: showPartialEmail(email) }
	          )}
	      </Typography>
	      {!isValidEmail && <Form ref={formRef} onSubmit={handleSubmitForm} onSendCodeClick={handleSendCode} />}
	    </FormContainer>
	  );
	}
	
	export default ConfirmEmailForm;

```

src/components/authentication/auth-forms/VerifyEmailForm/components/Form/index.tsx```tsx
	import { useState, useImperativeHandle, forwardRef, useEffect } from 'react';
	import { Box, Grid, Typography, FormHelperText, Divider } from '@mui/material';
	import { useIntl } from 'react-intl';
	
	// third party
	import * as Yup from 'yup';
	import { Formik, FormikHelpers } from 'formik';
	
	// projects import
	import { getFieldErrors } from 'utils/form';
	import { Button } from 'ui-component/buttons';
	import TimeCountDown from 'ui-component/TimeCountDown';
	import VerifyCodeInput from '../VerifyCodeInput';
	import styles from './styles.module.scss';
	
	export interface IFormValues {
	  code: Array<number>;
	}
	
	export interface ILoginFormProps {
	  onSubmit: (values: IFormValues, formikHelpers: FormikHelpers<IFormValues>) => void;
	  onSendCodeClick?: () => void;
	}
	
	export interface ILoginFormRef {
	  setTime: (seconds: number) => void;
	}
	
	const VerifyCodeForm = forwardRef<ILoginFormRef, ILoginFormProps>((props, ref) => {
	  const { onSubmit: handleSubmit, onSendCodeClick } = props;
	  const [timeOut, setTime] = useState(0);
	  const { formatMessage } = useIntl();
	
	  useImperativeHandle(ref, () => {
	    return {
	      setTime: (seconds: number) => {
	        setTime(seconds);
	      }
	    };
	  });
	
	  useEffect(() => {
	    let timer = 0;
	    if (timeOut) {
	      timer = window.setTimeout(() => {
	        setTime(0);
	      }, timeOut * 1000);
	    }
	
	    return () => {
	      clearTimeout(timer);
	    };
	  }, [timeOut]);
	
	  const validationSchema = Yup.object().shape({
	    code: Yup.array().length(4, formatMessage({ id: 'lengthValidateMessage' }))
	  });
	
	  const initialValues: IFormValues = {
	    code: []
	  };
	
	  return (
	    <>
	      <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={handleSubmit}>
	        {({ errors, handleSubmit, isSubmitting, touched, setValues }) => {
	          const errorList = getFieldErrors({ errors, touched });
	          return (
	            <form noValidate onSubmit={handleSubmit}>
	              <Grid container spacing={3}>
	                <Grid item xs={12}>
	                  <VerifyCodeInput
	                    onChange={(numbers) => {
	                      setValues({
	                        code: numbers
	                      });
	                    }}
	                    error={errorList.code?.error}
	                  />
	                  {errorList.code?.error && <FormHelperText error>{errorList.code?.message}</FormHelperText>}
	                </Grid>
	              </Grid>
	
	              <Box sx={{ mt: 2 }}>
	                <Button
	                  color="error"
	                  loading={isSubmitting}
	                  disabled={isSubmitting}
	                  fullWidth
	                  size="large"
	                  type="submit"
	                  variant="contained"
	                >
	                  {formatMessage({ id: 'continue' })}
	                </Button>
	              </Box>
	            </form>
	          );
	        }}
	      </Formik>
	      <Divider classes={{ root: styles.line }} />
	      <Typography variant="h5" textAlign="center" fontWeight="500" marginY={2.5}>
	        {formatMessage({ id: 'resendCodeNote' })}
	      </Typography>
	      <Button disabled={!!timeOut} onClick={onSendCodeClick} color="primary" fullWidth size="large" type="submit" variant="outlined">
	        {formatMessage({ id: 'resendCode' })}{' '}
	        {!!timeOut && (
	          <>
	            (<TimeCountDown seconds={timeOut} />)
	          </>
	        )}
	      </Button>
	    </>
	  );
	});
	
	export default VerifyCodeForm;

```

src/components/authentication/auth-forms/VerifyEmailForm/components/Form/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.line {
	  margin: 20px 0;
	}

```

src/components/authentication/auth-forms/VerifyEmailForm/components/VerifyCodeInput/index.tsx```tsx
	import { ChangeEvent, useRef } from 'react';
	import { Input, Box } from '@mui/material';
	import styles from './styles.module.scss';
	
	export interface IVerifyCodeInputProps {
	  numberInputs?: number;
	  onChange?: (numbers: Array<number>) => void;
	  error?: boolean;
	}
	
	export default function VerifyCodeInput(props: IVerifyCodeInputProps) {
	  const { numberInputs = 4, onChange, error = false } = props;
	  const itemsRef = useRef<Array<HTMLInputElement> | []>(Array(numberInputs));
	
	  const handleChange = (index: number) => {
	    return (e: ChangeEvent<HTMLInputElement>) => {
	      const value = e.target.value;
	      if (value != '' && index < numberInputs - 1) {
	        itemsRef.current[index + 1].focus();
	      }
	      const numbers = itemsRef.current.filter((item) => item.value != '').map((item) => Number(item.value));
	      if (onChange) {
	        onChange(numbers);
	      }
	    };
	  };
	
	  return (
	    <Box className={styles.wrapper}>
	      {Array(numberInputs)
	        .fill('')
	        .map((_, index) => {
	          const currentValue = itemsRef.current[index] ? itemsRef.current[index].value : '';
	          const width = `${100 / 4}%`;
	          return (
	            <Box key={index} width={width}>
	              <Input
	                classes={{
	                  root: styles.inputRoot,
	                  input: styles.input,
	                  error: styles.error
	                }}
	                error={error && currentValue === ''}
	                inputRef={(node: HTMLInputElement) => {
	                  itemsRef.current[index] = node;
	                }}
	                onChange={handleChange(index)}
	                inputProps={{
	                  maxLength: 1
	                }}
	              />
	            </Box>
	          );
	        })}
	    </Box>
	  );
	}

```

src/components/authentication/auth-forms/VerifyEmailForm/components/VerifyCodeInput/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.wrapper {
	  display: flex;
	  gap: 20px;
	}
	
	.inputRoot {
	  border-radius: 12px;
	  background-color: $grey50;
	  height: 48px;
	
	  &::after,
	  &:before {
	    display: none;
	  }
	}
	.input {
	  font-size: 0.875rem;
	  font-weight: 500;
	  text-align: center;
	}
	
	.error {
	  border: 1px solid $errorMain;
	}

```

src/components/authentication/auth-forms/LoginForm/index.tsx```tsx
	import { Box, Checkbox, FormControlLabel, Grid, Typography } from '@mui/material';
	import { useIntl } from 'react-intl';
	
	// third party
	import * as Yup from 'yup';
	import { Formik, FormikHelpers } from 'formik';
	
	// projects import
	import useScriptRef from 'hooks/useScriptRef';
	import AnimateButton from 'ui-component/extended/AnimateButton';
	import FormControl from 'ui-component/FormControl';
	import { OutlinedInput, OutlinePassword } from 'ui-component/inputs';
	import { Button } from 'ui-component/buttons';
	import Link from 'ui-component/Link';
	import routes from 'routes';
	import * as notify from 'utils/notify';
	import { getFieldErrors } from 'utils/form';
	import useCommonValidates from 'hooks/useCommonValidates';
	
	import FormContainer from '../FormContainer';
	import Slides from '../Slides';
	import ThirdParty from '../ThirdParty';
	import Divider from '../Divider';
	import styles from './styles.module.scss';
	import { signIn, SignInResponse } from 'next-auth/react';
	interface IFormValues {
	  password: string;
	  email: string;
	}
	
	function LoginForm() {
	  const { formatMessage } = useIntl();
	  const scriptedRef = useScriptRef();
	  const validates = useCommonValidates();
	
	  const validationSchema = Yup.object().shape({
	    email: validates.email({ isRequired: true }),
	    password: validates.password({ isRequired: true })
	  });
	
	  const initialValues: IFormValues = {
	    email: '',
	    password: ''
	  };
	
	  const handleSubmitForm = async (values: IFormValues, { setErrors, setStatus, setSubmitting }: FormikHelpers<IFormValues>) => {
	    try {
	      setSubmitting(true);
	      const data: SignInResponse | undefined = await signIn('credentials', {
	        username: values.email,
	        password: values.password,
	        redirect: false
	      });
	
	      if (!data || data.status !== 200) {
	        setStatus({ success: false });
	        notify.error(formatMessage({ id: 'loginFailed' }));
	        setSubmitting(false);
	        return;
	      }
	
	      setStatus({ success: true });
	      setSubmitting(false);
	      window.location.href = routes.dashboard.getUrl();
	    } catch (err: any) {
	      notify.error(formatMessage({ id: 'loginFailed' }));
	      if (scriptedRef.current) {
	        setStatus({ success: false });
	        setSubmitting(false);
	      }
	    }
	  };
	
	  return (
	    <FormContainer
	      leftTitle={formatMessage({ id: 'signInFormTitle' })}
	      leftSubTitle={formatMessage({ id: 'signInFormSubTitle' })}
	      rightContent={
	        <Slides
	          items={[
	            {
	              title: formatMessage({ id: 'authSlideTitle1' }),
	              description: formatMessage({ id: 'authSlideContent1' }),
	              imageUrl: '/assets/images/authentication/bg-sign-in.svg'
	            },
	            {
	              title: formatMessage({ id: 'authSlideTitle2' }),
	              description: formatMessage({ id: 'authSlideContent2' }),
	              imageUrl: '/assets/images/authentication/bg-sign-up.svg'
	            },
	            {
	              title: formatMessage({ id: 'authSlideTitle3' }),
	              description: formatMessage({ id: 'authSlideContent3' }),
	              imageUrl: '/assets/images/authentication/bg-forgot-password.svg'
	            }
	          ]}
	        />
	      }
	    >
	      <Box className={styles.loginForm}>
	        <ThirdParty type="signIn" />
	        <Divider />
	        <Typography variant="h5" textAlign="center" fontWeight="bold" marginY={2.5}>
	          {formatMessage({
	            id: 'signInWithEmail'
	          })}
	        </Typography>
	        <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={handleSubmitForm}>
	          {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => {
	            const errorList = getFieldErrors<IFormValues>({ errors, touched });
	            return (
	              <form noValidate onSubmit={handleSubmit}>
	                <Grid container spacing={3}>
	                  <Grid item xs={12}>
	                    <FormControl
	                      fullWidth
	                      label={formatMessage({ id: 'emailAddress' })}
	                      error={errorList.email?.error}
	                      errorMessage={errorList.email?.message}
	                      labelFor="login-email"
	                    >
	                      <OutlinedInput
	                        value={values.email}
	                        id="login-email"
	                        type="email"
	                        name="email"
	                        onBlur={handleBlur}
	                        onChange={handleChange}
	                        inputProps={{}}
	                      />
	                    </FormControl>
	                  </Grid>
	                  <Grid item xs={12}>
	                    <FormControl
	                      fullWidth
	                      label={formatMessage({ id: 'formPasswordLabel' })}
	                      labelFor="login-password"
	                      error={errorList.password?.error}
	                      errorMessage={errorList.password?.message}
	                    >
	                      <OutlinePassword
	                        value={values.password}
	                        name="password"
	                        id="login-password"
	                        onBlur={handleBlur}
	                        onChange={handleChange}
	                        inputProps={{}}
	                      />
	                    </FormControl>
	                  </Grid>
	                </Grid>
	                <Grid marginTop={2} container alignItems="center" justifyContent="space-between" spacing={0}>
	                  <Grid item>
	                    <FormControlLabel
	                      control={<Checkbox name="checked" color="primary" />}
	                      label={formatMessage({
	                        id: 'keepLoggedIn'
	                      })}
	                    />
	                  </Grid>
	                  <Grid item>
	                    <Link href={routes.forgotPassword.getUrl()}>
	                      {formatMessage({
	                        id: 'forgotPassword'
	                      })}
	                    </Link>
	                  </Grid>
	                </Grid>
	                <Box sx={{ mt: 2 }}>
	                  <AnimateButton>
	                    <Button
	                      color="error"
	                      loading={isSubmitting}
	                      disabled={isSubmitting}
	                      fullWidth
	                      size="large"
	                      type="submit"
	                      variant="contained"
	                    >
	                      {formatMessage({ id: 'signIn' })}
	                    </Button>
	                  </AnimateButton>
	                </Box>
	              </form>
	            );
	          }}
	        </Formik>
	        <Box className={styles.signUp}>
	          <Link className={styles.signUpLink} href={routes.register.getUrl()}>
	            {formatMessage({ id: 'dontHaveAccount' })}
	          </Link>
	        </Box>
	      </Box>
	    </FormContainer>
	  );
	}
	
	export default LoginForm;

```

src/components/authentication/auth-forms/LoginForm/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.signUp {
	  margin-top: 22px;
	  padding-top: 22px;
	  border-top: 1px solid $grey100;
	  display: flex;
	  justify-content: flex-end;
	}
	
	.signUpLink {
	  color: $grey500;
	  font-weight: 500;
	}

```

src/components/authentication/auth-forms/FormContainer/index.tsx```tsx
	import React from 'react';
	import NextImage from 'next/image';
	import { Box, Grid, Typography } from '@mui/material';
	
	// projects import
	import { LOGO } from '@/constant';
	import styles from './styles.module.scss';
	
	export interface IFormContainerProps {
	  leftTitle?: string;
	  leftSubTitle?: string;
	  children: React.ReactNode;
	  rightContent: React.ReactNode;
	}
	
	export default function FormContainer(props: IFormContainerProps) {
	  const { leftTitle = '', leftSubTitle = '', rightContent, children } = props;
	  return (
	    <Grid container minHeight="100vh" className={styles.formContainer}>
	      <Grid item xs={6} className={styles.left}>
	        <Box className={styles.innerLeft}>
	          <Box className={styles.leftHead}>
	            <Box className={styles.leftHeadLeft}>
	              {leftTitle && (
	                <Typography className={styles.leftHeadTitle} variant="h2">
	                  {leftTitle}
	                </Typography>
	              )}
	              {leftSubTitle && (
	                <Typography variant="h4" fontWeight={400} className={styles.leftHeadSubTitle}>
	                  {leftSubTitle}
	                </Typography>
	              )}
	            </Box>
	            <Box className={styles.leftHeadRight}>
	              <NextImage width={99} height={40} src={LOGO.url} alt={LOGO.alt} />
	            </Box>
	          </Box>
	          <Box className={styles.leftBody}>{children}</Box>
	        </Box>
	      </Grid>
	      <Grid item xs={6} className={styles.right}>
	        <Box className={styles.rightInner}>{rightContent}</Box>
	      </Grid>
	    </Grid>
	  );
	}

```

src/components/authentication/auth-forms/FormContainer/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.formContainer {
	  background-color: $grey100;
	}
	.left {
	  display: flex;
	  align-items: center;
	  justify-content: center;
	  padding: 20px 20px;
	  height: 100vh;
	  overflow: auto;
	}
	
	.innerLeft {
	  width: 90%;
	  background: #fff;
	  padding: 40px 40px;
	  border-radius: 12px;
	  max-width: 508px;
	  margin: auto;
	}
	
	.leftHead {
	  display: flex;
	  justify-content: space-between;
	  margin: 0 0 25px 0;
	}
	
	.leftHeadTitle {
	  color: $primaryNormal;
	  margin: 0 0 5px 0;
	}
	
	.leftHeadSubTitle {
	  font-weight: 400;
	  color: $grey700;
	}
	
	// right side
	
	.rightInner {
	  position: relative;
	  display: flex;
	  justify-content: center;
	  align-items: flex-end;
	  height: 100vh;
	}

```

src/components/authentication/auth-forms/RegisterForm/index.tsx```tsx
	import { Box, Checkbox, FormControlLabel, Grid, Typography } from '@mui/material';
	import { useRouter } from 'next/navigation';
	import { useIntl, FormattedMessage } from 'react-intl';
	import * as Yup from 'yup';
	import { Formik, FormikHelpers } from 'formik';
	
	// projects import
	import AnimateButton from 'ui-component/extended/AnimateButton';
	import FormControl from 'ui-component/FormControl';
	import { OutlinedInput, OutlinePassword } from 'ui-component/inputs';
	import { Button } from 'ui-component/buttons';
	import Link from 'ui-component/Link';
	import routes from 'routes';
	import { getFieldErrors } from 'utils/form';
	import useCommonValidates from 'hooks/useCommonValidates';
	import PasswordStrength from 'components/ui-component/PasswordStrength';
	
	import { register } from 'utils/services/auth';
	import * as notify from 'utils/notify';
	import { useAsync } from 'hooks/useAsync';
	
	import FormContainer from '../FormContainer';
	import Slides from '../Slides';
	import ThirdParty from '../ThirdParty';
	import Divider from '../Divider';
	import styles from './styles.module.scss';
	
	interface IFormValues {
	  password: string;
	  email: string;
	  submit: string;
	  firstName: string;
	  lastName: string;
	  checked: boolean;
	}
	
	function RegisterForm() {
	  const { request } = useAsync();
	  const { formatMessage } = useIntl();
	  const router = useRouter();
	  const validates = useCommonValidates();
	
	  const validationSchema = Yup.object().shape({
	    email: validates.email({ isRequired: true }),
	    password: validates.password({ isRequired: true }),
	    firstName: validates.text({ isRequired: true }),
	    lastName: validates.text({ isRequired: true })
	  });
	
	  const initialValues: IFormValues = {
	    email: '',
	    password: '',
	    submit: '',
	    firstName: '',
	    lastName: '',
	    checked: false
	  };
	
	  const handleSubmitForm = async (values: IFormValues, { setErrors, setStatus, setSubmitting }: FormikHelpers<IFormValues>) => {
	    const result = await request(
	      register({
	        email: values.email,
	        password: values.password,
	        name: `${values.firstName} ${values.lastName}`
	      })
	    );
	
	    if (!result.error) {
	      setStatus({ success: true });
	      setSubmitting(false);
	      notify.success(formatMessage({ id: 'registerSuccessfull' }));
	
	      setTimeout(() => {
	        router.push(routes.login.getUrl());
	      }, 1500);
	    }
	  };
	
	  return (
	    <FormContainer
	      leftTitle={formatMessage({ id: 'signUp' })}
	      leftSubTitle={formatMessage({ id: 'signUpFormSubTitle' })}
	      rightContent={
	        <Slides
	          items={[
	            {
	              title: formatMessage({ id: 'authSlideTitle1' }),
	              description: formatMessage({ id: 'authSlideContent1' }),
	              imageUrl: '/assets/images/authentication/bg-sign-in.svg'
	            },
	            {
	              title: formatMessage({ id: 'authSlideTitle2' }),
	              description: formatMessage({ id: 'authSlideContent2' }),
	              imageUrl: '/assets/images/authentication/bg-sign-up.svg'
	            },
	            {
	              title: formatMessage({ id: 'authSlideTitle3' }),
	              description: formatMessage({ id: 'authSlideContent3' }),
	              imageUrl: '/assets/images/authentication/bg-forgot-password.svg'
	            }
	          ]}
	        />
	      }
	    >
	      <Box className={styles.loginForm}>
	        <ThirdParty type="signUp" />
	        <Divider />
	        <Typography variant="h5" textAlign="center" fontWeight="bold" marginY={2.5}>
	          {formatMessage({ id: 'signUpWithEmail' })}
	        </Typography>
	        <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={handleSubmitForm}>
	          {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => {
	            const disabledBtn = !values.checked || isSubmitting;
	            const errorList = getFieldErrors<IFormValues>({ errors, touched });
	            return (
	              <form noValidate onSubmit={handleSubmit}>
	                <Grid container spacing={2.5}>
	                  <Grid item xs={6}>
	                    <FormControl
	                      fullWidth
	                      label={formatMessage({ id: 'firstNameLabel' })}
	                      error={errorList.firstName?.error}
	                      errorMessage={errorList.firstName?.message}
	                      labelFor="register-first-name"
	                    >
	                      <OutlinedInput
	                        id="register-first-name"
	                        value={values.firstName}
	                        name="firstName"
	                        onBlur={handleBlur}
	                        onChange={handleChange}
	                      />
	                    </FormControl>
	                  </Grid>
	                  <Grid item xs={6}>
	                    <FormControl
	                      fullWidth
	                      label={formatMessage({ id: 'lastNameLabel' })}
	                      error={errorList.lastName?.error}
	                      errorMessage={errorList.lastName?.message}
	                      labelFor="register-last-name"
	                    >
	                      <OutlinedInput
	                        id="register-last-name"
	                        value={values.lastName}
	                        name="lastName"
	                        onBlur={handleBlur}
	                        onChange={handleChange}
	                      />
	                    </FormControl>
	                  </Grid>
	                  <Grid item xs={12}>
	                    <FormControl
	                      fullWidth
	                      label={formatMessage({ id: 'formEmailLabel' })}
	                      error={errorList.email?.error}
	                      errorMessage={errorList.email?.message}
	                      labelFor="register-email"
	                      hideLabel
	                    >
	                      <OutlinedInput
	                        value={values.email}
	                        id="register-email"
	                        type="email"
	                        name="email"
	                        onBlur={handleBlur}
	                        onChange={handleChange}
	                        inputProps={{}}
	                        size="medium"
	                        placeholder={formatMessage({ id: 'formEmailLabel' })}
	                      />
	                    </FormControl>
	                  </Grid>
	                  <Grid item xs={12}>
	                    <FormControl
	                      fullWidth
	                      label={formatMessage({ id: 'formPasswordLabel' })}
	                      labelFor="register-password"
	                      error={errorList.password?.error}
	                      errorMessage={errorList.password?.message}
	                    >
	                      <OutlinePassword
	                        value={values.password}
	                        name="password"
	                        id="register-password"
	                        onBlur={handleBlur}
	                        onChange={handleChange}
	                        inputProps={{}}
	                      />
	                    </FormControl>
	                    {!errorList.password?.error && <PasswordStrength value={values.password} />}
	                  </Grid>
	                </Grid>
	                <Grid marginTop={2} container alignItems="center" justifyContent="space-between" spacing={0}>
	                  <Grid item xs={12}>
	                    <FormControlLabel
	                      control={<Checkbox value={values.checked} name="checked" color="primary" onChange={handleChange} />}
	                      label={
	                        <Box>
	                          <FormattedMessage
	                            id="agreeWithTermsCondition"
	                            values={{
	                              link: (content) => (
	                                <Link style={{ textDecoration: 'underline' }} href={routes.termAndCondition.getUrl()}>
	                                  {content}
	                                </Link>
	                              )
	                            }}
	                          />
	                        </Box>
	                      }
	                    />
	                  </Grid>
	                </Grid>
	                <Box sx={{ mt: 2 }}>
	                  <AnimateButton>
	                    <Button
	                      color="error"
	                      loading={isSubmitting}
	                      disabled={disabledBtn}
	                      fullWidth
	                      size="large"
	                      type="submit"
	                      variant="contained"
	                    >
	                      {formatMessage({ id: 'signUp' })}
	                    </Button>
	                  </AnimateButton>
	                </Box>
	              </form>
	            );
	          }}
	        </Formik>
	
	        <Box className={styles.signUp}>
	          <Link className={styles.signUpLink} href={routes.login.getUrl()}>
	            {formatMessage({ id: 'hasAccount' })}
	          </Link>
	        </Box>
	      </Box>
	    </FormContainer>
	  );
	}
	
	export default RegisterForm;

```

src/components/authentication/auth-forms/RegisterForm/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.signUp {
	  margin-top: 22px;
	  padding-top: 22px;
	  border-top: 1px solid $grey100;
	  display: flex;
	  justify-content: flex-end;
	  font-weight: 500;
	}
	
	.signUpLink {
	  color: $grey500;
	  font-weight: 500;
	}

```

src/components/authentication/auth-forms/ResetPasswordForm/index.tsx```tsx
	import { Box, Grid, Typography } from '@mui/material';
	import { useIntl } from 'react-intl';
	import { useSearchParams } from 'next/navigation';
	import { useRouter } from 'next/navigation';
	
	// third party
	import * as Yup from 'yup';
	import { Formik, FormikHelpers } from 'formik';
	
	// projects import
	import routes from 'routes';
	import { useAsync } from 'hooks/useAsync';
	import FormControl from 'ui-component/FormControl';
	import { OutlinePassword, OutlinedInput } from 'ui-component/inputs';
	import { Button } from 'ui-component/buttons';
	import * as notify from 'utils/notify';
	import { resetPassword } from 'utils/services/auth';
	import { getFieldErrors } from 'utils/form';
	import useCommonValidates from 'hooks/useCommonValidates';
	import PasswordStrength from '@/components/ui-component/PasswordStrength';
	
	import FormContainer from '../FormContainer';
	import Slides from '../Slides';
	import styles from './styles.module.scss';
	
	export interface IResetPasswordFormProps {
	  error?: boolean;
	}
	
	interface IFormValues {
	  password: string;
	  confirmPassword: string;
	}
	
	function ResetPasswordForm(props: IResetPasswordFormProps) {
	  const { error } = props;
	  const { request } = useAsync();
	  const { formatMessage } = useIntl();
	  const router = useRouter();
	  const searchParams = useSearchParams();
	  const email = searchParams.get('email') || '';
	  const token = searchParams.get('token') || '';
	  const validates = useCommonValidates();
	  const validationSchema = Yup.object().shape({
	    password: validates.password({ isRequired: true }),
	    confirmPassword: validates.confirmPassword({ isRequired: true })
	  });
	  const initialValues: IFormValues = {
	    password: '',
	    confirmPassword: ''
	  };
	
	  const handleSubmitForm = async (values: IFormValues, { setSubmitting }: FormikHelpers<IFormValues>) => {
	    const result = await request(
	      resetPassword({
	        password: values.password,
	        confirmPassword: values.confirmPassword,
	        email,
	        token
	      })
	    );
	
	    if (!result.error) {
	      notify.success(
	        formatMessage({
	          id: 'resetPasswordSuccessful'
	        })
	      );
	      setTimeout(() => {
	        router.push(routes.login.getUrl());
	      }, 500);
	    }
	  };
	
	  return (
	    <FormContainer
	      leftTitle={formatMessage({ id: 'resetPasswordTitle' })}
	      leftSubTitle={formatMessage({ id: 'resetPasswordSubTitle' })}
	      rightContent={
	        <Slides
	          items={[
	            {
	              title: formatMessage({ id: 'authSlideTitle1' }),
	              description: formatMessage({ id: 'authSlideContent1' }),
	              imageUrl: '/assets/images/authentication/bg-sign-in.svg'
	            },
	            {
	              title: formatMessage({ id: 'authSlideTitle2' }),
	              description: formatMessage({ id: 'authSlideContent2' }),
	              imageUrl: '/assets/images/authentication/bg-sign-up.svg'
	            },
	            {
	              title: formatMessage({ id: 'authSlideTitle3' }),
	              description: formatMessage({ id: 'authSlideContent3' }),
	              imageUrl: '/assets/images/authentication/bg-forgot-password.svg'
	            }
	          ]}
	        />
	      }
	    >
	      <Box className={styles.loginForm}>
	        {error && (
	          <Typography color="error" variant="h2">
	            {formatMessage({ id: 'resetPasswordValidateEmailAndToken' })}
	          </Typography>
	        )}
	        {!error && (
	          <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={handleSubmitForm}>
	            {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => {
	              const errorList = getFieldErrors<IFormValues>({ errors, touched });
	              return (
	                <form noValidate onSubmit={handleSubmit}>
	                  <Grid container spacing={3}>
	                    <Grid item xs={12}>
	                      <FormControl
	                        fullWidth
	                        label={formatMessage({ id: 'formPasswordLabel' })}
	                        error={errorList.password?.error}
	                        errorMessage={errorList.password?.message}
	                        labelFor="password"
	                      >
	                        <OutlinePassword
	                          value={values.password}
	                          name="password"
	                          id="password"
	                          onBlur={handleBlur}
	                          onChange={handleChange}
	                          inputProps={{}}
	                        />
	                      </FormControl>
	                      {!errorList.password?.error && <PasswordStrength value={values.password} />}
	                    </Grid>
	                    <Grid item xs={12}>
	                      <FormControl
	                        fullWidth
	                        label={formatMessage({ id: 'formConfirmPasswordLabel' })}
	                        error={errorList.confirmPassword?.error}
	                        errorMessage={errorList.confirmPassword?.message}
	                        labelFor="confirm-password"
	                      >
	                        <OutlinedInput
	                          value={values.confirmPassword}
	                          name="confirmPassword"
	                          id="confirm-password"
	                          onBlur={handleBlur}
	                          onChange={handleChange}
	                          inputProps={{}}
	                          type="password"
	                        />
	                      </FormControl>
	                    </Grid>
	                  </Grid>
	
	                  <Box sx={{ mt: 3 }}>
	                    <Button
	                      fullWidth
	                      color="error"
	                      loading={isSubmitting}
	                      disabled={isSubmitting}
	                      size="large"
	                      type="submit"
	                      variant="contained"
	                    >
	                      {formatMessage({ id: 'resetPassword' })}
	                    </Button>
	                  </Box>
	                </form>
	              );
	            }}
	          </Formik>
	        )}
	      </Box>
	    </FormContainer>
	  );
	}
	
	export default ResetPasswordForm;

```

src/components/authentication/auth-forms/ResetPasswordForm/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.signUp {
	  margin-top: 22px;
	  padding-top: 22px;
	  border-top: 1px solid $grey100;
	  display: flex;
	  justify-content: flex-end;
	}
	
	.signUpLink {
	  color: $grey500;
	  font-weight: 500;
	}
	
	.note {
	  line-height: 1.5;
	  max-width: 380px;
	  font-weight: normal;
	  margin: 20px 0;
	}

```

src/components/account/index.ts```ts
	export { default as Profile } from './Profile';

```

src/components/account/Profile/index.tsx```tsx
	import * as React from 'react';
	import { Grid, Box } from '@mui/material';
	
	// projects import
	import ProfilePicture from './components/ProfilePicture';
	import ChangePassword from './components/ChangePassword';
	import AccountDetail from './components/AccountDetail';
	import Breadcrumbs from '@/components/Breadcrumbs';
	
	export interface IProfileProps {}
	
	export default function Profile(props: IProfileProps) {
	  return (
	    <>
	      <Breadcrumbs />
	      <Grid container spacing={2.5}>
	        <Grid item xs={5}>
	          <ProfilePicture />
	        </Grid>
	        <Grid item xs={7}>
	          <AccountDetail />
	          <Box marginBottom={2.5} />
	          <ChangePassword />
	        </Grid>
	      </Grid>
	    </>
	  );
	}

```

src/components/account/Profile/components/AccountDetail/index.tsx```tsx
	import * as React from 'react';
	import { Formik, FormikHelpers } from 'formik';
	import { Grid } from '@mui/material';
	import * as Yup from 'yup';
	import { format, parse, isValid } from 'date-fns';
	import { AdapterDateFns } from '@mui/x-date-pickers/AdapterDateFns';
	import { LocalizationProvider } from '@mui/x-date-pickers/LocalizationProvider';
	import enGB from 'date-fns/locale/en-GB';
	import { DatePicker } from '@mui/x-date-pickers/DatePicker';
	import { useIntl } from 'react-intl';
	
	// projects import
	import { useAsync } from 'hooks/useAsync';
	import Card from '@/components/ui-component/Card';
	import TextField from 'components/ui-component/TextField';
	import { Button } from 'ui-component/buttons';
	import { useDispatch } from 'store';
	import { useAccountSelector, accountActions } from 'store/slices/account';
	import { updateProfile } from 'utils/services/auth';
	import { DATE_FORMAT } from '@/constant';
	import * as notify from 'utils/notify';
	import { getFieldErrors } from 'utils/form';
	import useCommonValidates from 'hooks/useCommonValidates';
	
	export interface IAccountDetailProps {
	  onSubmit?: (values: IFormValues) => void;
	}
	
	export interface IFormValues {
	  name: string;
	  email: string;
	  company: string;
	  country: string;
	  phoneNumber: string;
	  birthDate: string;
	}
	
	export default function AccountDetail(props: IAccountDetailProps) {
	  const dispatch = useDispatch();
	  const { formatMessage } = useIntl();
	  const { request } = useAsync();
	  const { user } = useAccountSelector();
	  const validates = useCommonValidates();
	  const initialValues: IFormValues = {
	    name: user?.name || '',
	    email: user?.email || '',
	    country: user?.location || '',
	    phoneNumber: user?.phone || '',
	    birthDate: user?.birthdayText || '',
	    company: user?.company || ''
	  };
	
	  const validationSchema = Yup.object().shape({
	    email: validates.email({ isRequired: true }),
	    name: validates.text({ isRequired: true })
	  });
	
	  const handleSubmitForm = async (values: IFormValues, { setErrors, setStatus, setSubmitting }: FormikHelpers<IFormValues>) => {
	    setSubmitting(true);
	    const result = await request(
	      updateProfile({
	        id: user?.id,
	        name: values.name,
	        email: values.email,
	        company: values.company,
	        location: values.country,
	        birthdayText: values.birthDate,
	        phone: values.phoneNumber
	      })
	    );
	    setSubmitting(false);
	    if (!result.error) {
	      notify.success(formatMessage({ id: 'profileUpdatedSuccessful' }));
	      dispatch(
	        accountActions.updateUser({
	          name: values.name,
	          email: values.email,
	          company: values.company,
	          location: values.country,
	          birthdayText: values.birthDate,
	          phone: values.phoneNumber
	        })
	      );
	    }
	  };
	
	  return (
	    <Card title="Edit Account Details">
	      <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={handleSubmitForm}>
	        {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values, setFieldValue }) => {
	          const errorList = getFieldErrors<IFormValues>({ errors, touched });
	          return (
	            <form noValidate onSubmit={handleSubmit}>
	              <Grid container spacing={3.125}>
	                <Grid item xs={12}>
	                  <TextField
	                    value={values.name}
	                    label={formatMessage({ id: 'name' })}
	                    name="name"
	                    fullWidth
	                    size="medium"
	                    error={errorList.name?.error}
	                    helperText={errorList.name?.message}
	                    onBlur={handleBlur}
	                    onChange={handleChange}
	                  />
	                </Grid>
	                <Grid item xs={12}>
	                  <TextField
	                    label={formatMessage({ id: 'emailAddress' })}
	                    value={values.email}
	                    fullWidth
	                    name="email"
	                    size="medium"
	                    error={errorList.email?.error}
	                    helperText={errorList.email?.message}
	                    onBlur={handleBlur}
	                    onChange={handleChange}
	                  />
	                </Grid>
	                <Grid item xs={6}>
	                  <TextField
	                    label={formatMessage({ id: 'company' })}
	                    fullWidth
	                    value={values.company}
	                    size="medium"
	                    name="company"
	                    error={errorList.company?.error}
	                    helperText={errorList.company?.message}
	                    onBlur={handleBlur}
	                    onChange={handleChange}
	                  />
	                </Grid>
	                <Grid item xs={6}>
	                  <TextField
	                    label={formatMessage({ id: 'country' })}
	                    name="country"
	                    value={values.country}
	                    fullWidth
	                    size="medium"
	                    error={errorList.country?.error}
	                    helperText={errorList.country?.message}
	                    onBlur={handleBlur}
	                    onChange={handleChange}
	                  />
	                </Grid>
	                <Grid item xs={6}>
	                  <TextField
	                    label={formatMessage({ id: 'phoneNumber' })}
	                    name="phoneNumber"
	                    value={values.phoneNumber}
	                    fullWidth
	                    size="medium"
	                    error={errorList.phoneNumber?.error}
	                    helperText={errorList.phoneNumber?.message}
	                    onBlur={handleBlur}
	                    onChange={handleChange}
	                  />
	                </Grid>
	                <Grid item xs={6}>
	                  <LocalizationProvider adapterLocale={enGB} dateAdapter={AdapterDateFns}>
	                    <DatePicker
	                      value={parse(values.birthDate, DATE_FORMAT, new Date())}
	                      slots={{
	                        textField: TextField
	                      }}
	                      onChange={(datetime) => {
	                        if (isValid(datetime)) {
	                          const dateStr = format(datetime as Date, DATE_FORMAT);
	                          setFieldValue('birthDate', dateStr);
	                        } else {
	                          setFieldValue('birthDate', '');
	                        }
	                      }}
	                      name="birthDate"
	                      slotProps={{
	                        textField: {
	                          label: formatMessage({ id: 'birthDate' }),
	                          fullWidth: true,
	                          size: 'medium',
	                          error: false
	                        }
	                      }}
	                    />
	                  </LocalizationProvider>
	                </Grid>
	                <Grid item xs={12}>
	                  <Button loading={isSubmitting} color="error" disabled={isSubmitting} size="large" type="submit" variant="contained">
	                    {formatMessage({ id: 'changeDetails' })}
	                  </Button>
	                </Grid>
	              </Grid>
	            </form>
	          );
	        }}
	      </Formik>
	    </Card>
	  );
	}

```

src/components/account/Profile/components/ChangePassword/index.tsx```tsx
	import * as React from 'react';
	import { Grid } from '@mui/material';
	import { Formik, FormikHelpers } from 'formik';
	import * as Yup from 'yup';
	import { useIntl } from 'react-intl';
	
	// projects import
	import { signOut } from '@/utils/auth';
	import { useAsync } from 'hooks/useAsync';
	import Card from '@/components/ui-component/Card';
	import TextField from 'components/ui-component/TextField';
	import { Button } from 'ui-component/buttons';
	import PasswordStrength from 'ui-component/PasswordStrength';
	import { getFieldErrors } from 'utils/form';
	import useCommonValidates from 'hooks/useCommonValidates';
	import { changePassword } from 'utils/services/auth';
	import { useAccountSelector } from 'store/slices/account';
	import * as notify from 'utils/notify';
	import { AuthProvider } from 'utils/enums';
	import routes from 'routes';
	
	export interface IChangePasswordProps {
	  onSubmit?: (values: IFormValues) => void;
	}
	export interface IFormValues {
	  oldPassword: string;
	  password: string;
	  passwordConfirmation: string;
	}
	export default function ChangePassword(props: IChangePasswordProps) {
	  const { request } = useAsync();
	  const { user } = useAccountSelector();
	  const validates = useCommonValidates();
	  const { formatMessage } = useIntl();
	
	  const initialValues: IFormValues = {
	    oldPassword: '',
	    password: '',
	    passwordConfirmation: ''
	  };
	
	  const validationSchema = Yup.object().shape({
	    oldPassword: validates.password(),
	    password: validates.password({ isRequired: true }),
	    passwordConfirmation: validates.confirmPassword({ isRequired: true })
	  });
	
	  const handleSubmitForm = async (values: IFormValues, { setErrors, setStatus, setSubmitting, resetForm }: FormikHelpers<IFormValues>) => {
	    const result = await request(
	      changePassword({
	        id: user?.id || '',
	        oldPassword: values.oldPassword,
	        password: values.password,
	        confirmPassword: values.passwordConfirmation
	      })
	    );
	
	    if (!result?.error) {
	      notify.success(formatMessage({ id: 'changePasswordSuccessful' }));
	      resetForm({});
	      signOut({
	        callbackUrl: routes.login.getUrl()
	      });
	    }
	  };
	
	  if (user?.provider === AuthProvider.GOOGLE) {
	    return null;
	  }
	
	  return (
	    <Card title={formatMessage({ id: 'changePassword' })}>
	      <Formik initialValues={initialValues} validationSchema={validationSchema} onSubmit={handleSubmitForm}>
	        {({ errors, handleBlur, handleChange, handleSubmit, isSubmitting, touched, values }) => {
	          const errorList = getFieldErrors<IFormValues>({ errors, touched });
	
	          return (
	            <form noValidate onSubmit={handleSubmit}>
	              <Grid container spacing={3.125}>
	                <Grid item xs={12}>
	                  <TextField
	                    label={formatMessage({ id: 'currentPassword' })}
	                    name="oldPassword"
	                    type="password"
	                    fullWidth
	                    size="medium"
	                    error={errorList.oldPassword?.error}
	                    helperText={errorList.oldPassword?.message}
	                    onBlur={handleBlur}
	                    onChange={handleChange}
	                    value={values.oldPassword}
	                  />
	                </Grid>
	                <Grid item xs={6}>
	                  <TextField
	                    label={formatMessage({ id: 'newPassword' })}
	                    type="password"
	                    name="password"
	                    fullWidth
	                    size="medium"
	                    error={errorList.password?.error}
	                    helperText={errorList.password?.message}
	                    onBlur={handleBlur}
	                    onChange={handleChange}
	                    value={values.password}
	                  />
	                  {!errorList.password?.error && <PasswordStrength value={values.password} />}
	                </Grid>
	                <Grid item xs={6}>
	                  <TextField
	                    label={formatMessage({ id: 'renterPassword' })}
	                    type="password"
	                    name="passwordConfirmation"
	                    fullWidth
	                    size="medium"
	                    error={errorList.passwordConfirmation?.error}
	                    helperText={errorList.passwordConfirmation?.message}
	                    onBlur={handleBlur}
	                    onChange={handleChange}
	                    value={values.passwordConfirmation}
	                  />
	                </Grid>
	
	                <Grid item xs={12}>
	                  <Button loading={isSubmitting} disabled={isSubmitting} color="error" size="large" type="submit" variant="contained">
	                    {formatMessage({ id: 'changePassword' })}
	                  </Button>
	                </Grid>
	              </Grid>
	            </form>
	          );
	        }}
	      </Formik>
	    </Card>
	  );
	}

```

src/components/account/Profile/components/ProfilePicture/index.tsx```tsx
	import { ChangeEvent } from 'react';
	import { Box, Typography } from '@mui/material';
	import { useIntl } from 'react-intl';
	
	// projects import
	import useUploadFile from '@/hooks/useUploadFile';
	import Card from '@/components/ui-component/Card';
	import Avatar from '@/components/ui-component/extended/Avatar';
	import { Button } from 'components/ui-component/buttons';
	import { AVATAR_DEFAULT_URL, IMAGE_TYPES } from '@/constant';
	import { updateAvatar } from 'utils/services/auth';
	import * as notify from 'utils/notify';
	import { FolderName } from 'utils/enums';
	
	// store
	import { useDispatch } from '@/store';
	import { accountActions, useAccountSelector } from '@/store/slices/account';
	
	import styles from './styles.module.scss';
	
	export interface IProfilePictureProps {}
	
	export default function ProfilePicture(props: IProfilePictureProps) {
	  const dispatch = useDispatch();
	  const { formatMessage } = useIntl();
	  const { user } = useAccountSelector();
	  const { isUploading, triggerUpload } = useUploadFile();
	
	  const handleUpload = (e: ChangeEvent<HTMLInputElement>) => {
	    const file = e?.target?.files?.[0];
	    if (file) {
	      triggerUpload({
	        file,
	        folder: FolderName.USERS,
	        onSuccess: async (res) => {
	          try {
	            await updateAvatar({
	              id: user?.id || '',
	              imageUrl: res.url,
	              name: user?.name || '',
	              email: user?.email || ''
	            });
	            dispatch(
	              accountActions.updateUser({
	                avatar: res.url
	              })
	            );
	            notify.success(
	              formatMessage({
	                id: 'updateSuccessful'
	              })
	            );
	          } catch (error) {
	            notify.error(
	              formatMessage({
	                id: 'updateFailed'
	              })
	            );
	          }
	        }
	      });
	    }
	  };
	
	  return (
	    <Card title="Profile Picture">
	      <Box className={styles.wrapper}>
	        <Avatar src={user?.avatar || AVATAR_DEFAULT_URL} size="xl" className={styles.avatar} />
	        <Typography marginY={1.875} variant="caption">
	          {formatMessage({ id: 'uploadProfileImageNote' })}
	        </Typography>
	        <Box className={styles.button}>
	          <Button
	            disabled={isUploading}
	            role={undefined}
	            tabIndex={-1}
	            color="error"
	            size="large"
	            variant="contained"
	            loading={isUploading}
	          >
	            {formatMessage({ id: 'uploadAvatar' })}
	          </Button>
	          <input className={styles.file} accept={IMAGE_TYPES.join(',')} type="file" onChange={handleUpload} />
	        </Box>
	      </Box>
	    </Card>
	  );
	}

```

src/components/account/Profile/components/ProfilePicture/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.wrapper {
	  display: flex;
	  flex-direction: column;
	  align-items: center;
	  justify-content: center;
	}
	
	.avatar {
	  margin: 0 auto;
	}
	
	.button {
	  position: relative;
	}
	
	.file {
	  position: absolute;
	  top: 0;
	  bottom: 0;
	  left: 0;
	  right: 0;
	  opacity: 0;
	  cursor: pointer;
	}

```

src/components/user/index.tsx```tsx
	'use client';
	import { Box, Stack, Typography } from '@mui/material';
	import Breadcrumbs from '../Breadcrumbs';
	import { useIntl } from 'react-intl';
	import { getUsers } from '@/utils/services/user';
	import { useAsync } from '@/hooks/useAsync';
	import { useEffect, useState } from 'react';
	import { IUser } from '@/app/api/users/list/route';
	import { USER_STATUS_ACTIVE, USER_STATUS_DEACTIVED } from '@/constant/user';
	import Chip from '@/components/ui-component/extended/Chip';
	import { GridColDef, GridRowParams, GridRowSelectionModel } from '@mui/x-data-grid';
	import Avatar from '@/components/ui-component/extended/Avatar';
	import { Eye, Users as IconUsers, Buildings, LockKey, Plus } from '@phosphor-icons/react';
	import { Button } from '@/components/ui-component/buttons';
	import Table from '@/components/ui-component/table';
	import DateCustom from '@/utils/datetime/date.custom';
	import { DATE_FULL_FORMAT } from '@/constant';
	import { format } from 'date-fns';
	import { ButtonSelectStatus } from './component/ButtonSelectStatus';
	import { ButtonDelete } from './component/ButtonDelete';
	import UserDeleteDialog from '../dialogs/user/UserDeleteDialog';
	import UserChagenStatusDialog from '../dialogs/user/UserChangeStatus';
	import NextLink from 'next/link';
	import routes from '@/routes';
	
	const User = () => {
	  const { formatMessage } = useIntl();
	  const { isLoading, execute } = useAsync();
	  const [users, setUsers] = useState<IUser[]>([]);
	  const [rowsSelected, setRowsSelected] = useState<GridRowSelectionModel>([]);
	  const [statusSelected, setStatusSelected] = useState('');
	  const [deleteUsers, setDeleteUsers] = useState<IUser[]>([]);
	  const [changeStatusUsers, setChangeStatusUsers] = useState<IUser[]>([]);
	  const renderStatus = (value: string) => {
	    let formatValue = value.toLowerCase();
	    if (formatValue === USER_STATUS_DEACTIVED.toLowerCase()) {
	      return <Chip chipcolor="error" variant="outlined" label={value} sx={{ ':hover': null }} />;
	    }
	    return <Chip chipcolor="success" label={value} sx={{ ':hover': null }} />;
	  };
	
	  const initData = async () => {
	    const res = await execute(getUsers());
	    const data = res.data?.users && res.data?.users.length > 0 ? res.data?.users : [];
	    setUsers(data);
	  };
	
	  useEffect(() => {
	    initData();
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, []);
	
	  const columns: GridColDef[] = [
	    {
	      field: 'name',
	      headerName: formatMessage({ id: 'userTableName' }),
	      headerAlign: 'center',
	      align: 'center',
	      renderCell: ({ row }) => (
	        <Box display="flex" gap="12px" alignItems="center">
	          {row?.avatarUrl ? <Avatar alt={`${row.firstName} ${row.lastName}`} src={row.avatarUrl} size="xs" /> : null}
	          <Typography variant="h4">
	            {row.firstName} {row.lastName}
	          </Typography>
	        </Box>
	      ),
	      flex: 2
	    },
	    {
	      field: 'email',
	      headerName: formatMessage({ id: 'userTableEmail' }),
	      flex: 2,
	      align: 'center',
	      headerAlign: 'center'
	    },
	    {
	      field: 'status',
	      headerName: formatMessage({ id: 'tableStatus' }),
	      headerAlign: 'center',
	      renderCell: ({ row }) => <Box fontWeight={500}>{renderStatus(row.completionStatus || USER_STATUS_ACTIVE)}</Box>,
	      flex: 1,
	      align: 'center'
	    },
	    {
	      field: 'lastLogin',
	      headerName: formatMessage({ id: 'userTableLastLogin' }),
	      headerAlign: 'center',
	      flex: 2,
	      align: 'center',
	      valueGetter: ({ row }) => format(new DateCustom(row.lastLogin), DATE_FULL_FORMAT)
	    },
	    {
	      field: 'actions',
	      type: 'actions',
	      width: 140,
	      getActions: (params: GridRowParams<Partial<IUser>>) => [
	        <Button LinkComponent={NextLink} href={routes.user.getUrl(params.id)} key="detail" className="tableActionIcon tableActionIconEdit">
	          <Eye />
	        </Button>,
	        <Button key="user" className="tableActionIcon tableActionIconEdit">
	          <IconUsers />
	        </Button>,
	        <Button key="building" className="tableActionIcon tableActionIconEdit">
	          <Buildings />
	        </Button>,
	        <Button key="delete" className="tableActionIcon tableActionIconLock">
	          <LockKey />
	        </Button>
	      ]
	    }
	  ];
	
	  const handleSelectStatus = (value: string) => {
	    const listUsers = users.filter((item) => rowsSelected.includes(item._id) && item.completionStatus !== value);
	    if (listUsers.length > 0) {
	      setStatusSelected(value);
	      setChangeStatusUsers(listUsers);
	    }
	  };
	
	  const handleDeselectStatus = () => {
	    setRowsSelected([]);
	    setStatusSelected('');
	    setChangeStatusUsers([]);
	  };
	  const handleDelete = () => {
	    const listUsers = users.filter((item) => rowsSelected.includes(item._id));
	    setDeleteUsers(listUsers);
	  };
	  const handleResetDelete = () => {
	    setRowsSelected([]);
	    setDeleteUsers([]);
	  };
	  const handleSelectRow = (rowSelectionModel: GridRowSelectionModel) => {
	    setRowsSelected(rowSelectionModel);
	  };
	
	  const renderHeaderAction = () => (
	    <>
	      <Button
	        sx={{ px: 2 }}
	        variant="contained"
	        startIcon={<Plus size={14} />}
	        type="submit"
	        color="error"
	        onClick={() => console.log(true)}
	        fullWidth
	      >
	        {formatMessage({ id: 'buttonLabelAddNew' })}
	      </Button>
	      {rowsSelected.length > 0 && (
	        <>
	          <ButtonSelectStatus onSelect={handleSelectStatus} />
	          <ButtonDelete onDelete={handleDelete} />
	        </>
	      )}
	    </>
	  );
	
	  return (
	    <Stack direction="column">
	      <Breadcrumbs title={formatMessage({ id: 'userTitle' })} onSearch={() => console.log('hello')} actionCom={renderHeaderAction} />
	      <Table
	        rows={users}
	        columns={columns}
	        loading={isLoading}
	        checkboxSelection
	        onRowSelectionModelChange={handleSelectRow}
	        rowSelectionModel={rowsSelected}
	      />
	      <UserDeleteDialog open={Boolean(deleteUsers?.length > 0)} users={deleteUsers} onClose={handleResetDelete} />
	      <UserChagenStatusDialog
	        open={Boolean(changeStatusUsers?.length > 0 && statusSelected !== '')}
	        users={changeStatusUsers}
	        status={statusSelected}
	        onClose={handleDeselectStatus}
	      />
	    </Stack>
	  );
	};
	
	export default User;

```

src/components/user/component/ButtonDelete.tsx```tsx
	import { Button, ButtonProps } from '@mui/material';
	import styles from './styles.module.scss';
	import { useIntl } from 'react-intl';
	import { Trash } from '@phosphor-icons/react';
	
	interface Props extends Partial<ButtonProps> {
	  onDelete: () => void;
	}
	export const ButtonDelete = ({ onDelete, ...props }: Props) => {
	  const { formatMessage } = useIntl();
	  return (
	    <Button
	      className={styles.buttonDelete}
	      variant="outlined"
	      endIcon={<Trash size={14} />}
	      color="error"
	      onClick={() => onDelete()}
	      {...props}
	    >
	      {formatMessage({ id: 'buttonLabelAddDelete' })}
	    </Button>
	  );
	};

```

src/components/user/component/ButtonSelectStatus.tsx```tsx
	import { USER_STATUS_ACTIVE, USER_STATUS_DEACTIVED } from '@/constant/user';
	import { Box, Button, ButtonProps, Divider, Popover, PopoverProps, Typography } from '@mui/material';
	import { useState } from 'react';
	import { useIntl } from 'react-intl';
	import { CaretUp, CaretDown } from '@phosphor-icons/react';
	import styles from './styles.module.scss';
	
	interface Props {
	  buttonProps?: Partial<ButtonProps>;
	  popoverProps?: Partial<PopoverProps>;
	  onSelect: (value: string) => void;
	}
	export const ButtonSelectStatus = ({ onSelect, buttonProps, popoverProps }: Props) => {
	  const { formatMessage } = useIntl();
	  const [anchorEl, setAnchorEl] = useState<HTMLButtonElement | null>(null);
	
	  const handleClick = (event: React.MouseEvent<HTMLButtonElement>) => {
	    setAnchorEl(event.currentTarget);
	  };
	
	  const handleClose = () => {
	    setAnchorEl(null);
	  };
	
	  const handleSelect = (value: string) => {
	    setAnchorEl(null);
	    onSelect(value);
	  };
	  const open = Boolean(anchorEl);
	  const id = open ? 'simple-popover' : undefined;
	  return (
	    <>
	      <Button className={styles.selectButton} fullWidth aria-describedby="status" variant="outlined" onClick={handleClick} {...buttonProps}>
	        {open ? <CaretUp size={14} /> : <CaretDown size={14} />}
	        {formatMessage({ id: 'userSelectStatusPlaceholder' })}
	      </Button>
	      <Popover
	        id={id}
	        open={open}
	        anchorEl={anchorEl}
	        onClose={handleClose}
	        anchorOrigin={{
	          vertical: 'bottom',
	          horizontal: 'left'
	        }}
	        classes={{
	          paper: styles.popoverContent
	        }}
	        {...popoverProps}
	      >
	        <Box>
	          <Typography className={styles.status} onClick={() => handleSelect(USER_STATUS_ACTIVE)}>
	            {USER_STATUS_ACTIVE}
	          </Typography>
	          <Divider className={styles.divider} />
	          <Typography className={styles.status} onClick={() => handleSelect(USER_STATUS_DEACTIVED)}>
	            {USER_STATUS_DEACTIVED}
	          </Typography>
	        </Box>
	      </Popover>
	    </>
	  );
	};

```

src/components/user/component/styles.module.scss```scss
	@import 'styles/_variables.module';
	
	.selectButton{
	  min-width: fit-content;
	  display: flex;
	  gap: 12px;
	  border-radius: 4px;
	  border-color: $highlightNormal;
	  color: $highlightNormal;
	}
	.selectButton:hover{
	  border-color: $highlightNormal;
	  color: $highlightNormal;
	  background-color: transparent;
	}
	.popoverContent{
	  border: 1px solid $highlightNormal;
	  min-width: 150px;
	  border-radius: 4px;
	  background-color: #FEFEFE;
	  box-shadow: none;
	}
	.divider{
	  border-color: $highlightNormal;
	}
	.status{
	  font-weight: 500;
	  padding: 10px 16px;
	  cursor: pointer;
	}
	
	.buttonDelete{
	  padding: 5px 15px;
	  border-color: #F20202;
	  min-width: fit-content;
	  border-radius: 4px;
	}
```

src/components/user/detail/index.tsx```tsx
	'use client';
	
	import Breadcrumbs from '@/components/Breadcrumbs';
	import routes from '@/routes';
	import { Box, Grid } from '@mui/material';
	import { useParams, useRouter } from 'next/navigation';
	import { useIntl } from 'react-intl';
	import ProfilePicture from './components/ProfilePicture';
	import { useEffect, useState } from 'react';
	import { useAsync } from '@/hooks/useAsync';
	import { IUser } from '@/app/api/users/list/route';
	import Loader from '@/components/ui-component/Loader';
	import { getUserDetail } from '@/utils/services/user';
	import BasicInformation from './components/BasicInformation';
	import AdditionalInformation from './components/AdditionalInformation';
	
	const UserDetail = () => {
	  const { formatMessage } = useIntl();
	  const { execute, isLoading } = useAsync();
	  const params = useParams();
	  const router = useRouter();
	  const userId = params.id as string;
	  const [user, setUser] = useState<IUser | null>(null);
	  const userUrl = routes.user.getUrl();
	  const breadCrumbs = [
	    {
	      ...routes.user,
	      url: userUrl
	    },
	    {
	      ...routes.user,
	      url: userUrl,
	      label: formatMessage({ id: 'userDetailsTitle' })
	    }
	  ];
	
	  const getData = async () => {
	    if (params.id) {
	      const result = await execute(getUserDetail(userId));
	      if (result.data.user) {
	        setUser(result.data.user);
	      } else {
	        router.push(userUrl);
	      }
	    }
	  };
	
	  useEffect(() => {
	    if (!userId) {
	      router.push(userUrl);
	    }
	    getData();
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, [userId]);
	
	  if (isLoading) return <Loader />;
	  if (!user) {
	    return <Loader />;
	  }
	  return (
	    <>
	      <Breadcrumbs title={formatMessage({ id: 'userDetailsTitle' })} customRoutes={breadCrumbs} />
	      <Grid container spacing={2.5}>
	        <Grid item xs={5}>
	          <ProfilePicture user={user} />
	        </Grid>
	        <Grid item xs={7}>
	          <BasicInformation user={user} />
	          <Box marginBottom={2.5} />
	          <AdditionalInformation user={user} />
	        </Grid>
	      </Grid>
	    </>
	  );
	};
	
	export default UserDetail;

```

src/components/user/detail/components/BasicInformation/index.tsx```tsx
	import * as React from 'react';
	import { Grid, TextFieldProps } from '@mui/material';
	import { format } from 'date-fns';
	import { useIntl } from 'react-intl';
	
	import Card from '@/components/ui-component/Card';
	import TextField from 'components/ui-component/TextField';
	import { DATE_FORMAT } from '@/constant';
	import { IUser } from '@/app/api/users/list/route';
	import DateCustom from '@/utils/datetime/date.custom';
	
	interface Props {
	  user: IUser;
	}
	
	export default function BasicInformation({ user }: Props) {
	  const { formatMessage } = useIntl();
	
	  const defaultProps: Partial<TextFieldProps> = {
	    fullWidth: true,
	    size: 'medium',
	    InputLabelProps: {
	      shrink: true
	    },
	    InputProps: {
	      readOnly: true
	    }
	  };
	  return (
	    <Card title={formatMessage({ id: 'userDetailBasicInformation' })}>
	      <Grid container spacing={3.125}>
	        <Grid item xs={6}>
	          <TextField value={user.firstName} label={formatMessage({ id: 'userDetailFirstName' })} name="firstName" {...defaultProps} />
	        </Grid>
	        <Grid item xs={6}>
	          <TextField label={formatMessage({ id: 'userDetailLastName' })} value={user.lastName} name="lastName" {...defaultProps} />
	        </Grid>
	        <Grid item xs={12}>
	          <TextField label={formatMessage({ id: 'userDetailEmail' })} fullWidth value={user.email} name="email" {...defaultProps} />
	        </Grid>
	        <Grid item xs={6}>
	          <TextField label={formatMessage({ id: 'userDetailRole' })} name="role" value={user.role} {...defaultProps} />
	        </Grid>
	        <Grid item xs={6}>
	          <TextField
	            label={formatMessage({ id: 'userDetailStatus' })}
	            name="completionStatus"
	            value={user.completionStatus}
	            {...defaultProps}
	          />
	        </Grid>
	        <Grid item xs={6}>
	          <TextField label={formatMessage({ id: 'userDetailCompany' })} name="company" value={user.company} {...defaultProps} />
	        </Grid>
	        <Grid item xs={6}>
	          <TextField label={formatMessage({ id: 'userDetailCountry' })} name="country" value={user.country} {...defaultProps} />
	        </Grid>
	        <Grid item xs={6}>
	          <TextField label={formatMessage({ id: 'userDetailPhoneNumber' })} name="phoneNumber" value={user.phoneNumber} {...defaultProps} />
	        </Grid>
	        <Grid item xs={6}>
	          <TextField
	            label={formatMessage({ id: 'userDetailBirthDate' })}
	            name="birthDate"
	            value={!!user?.birthDate ? format(new DateCustom(user.birthDate), DATE_FORMAT) : ''}
	            {...defaultProps}
	          />
	        </Grid>
	      </Grid>
	    </Card>
	  );
	}

```

src/components/user/detail/components/AdditionalInformation/index.tsx```tsx
	import * as React from 'react';
	import { Grid, TextFieldProps } from '@mui/material';
	import { useIntl } from 'react-intl';
	
	import Card from '@/components/ui-component/Card';
	import TextField from 'components/ui-component/TextField';
	import { IUser } from '@/app/api/users/list/route';
	
	interface Props {
	  user: IUser;
	}
	
	export default function AdditionalInformation({ user }: Props) {
	  const { formatMessage } = useIntl();
	
	  const defaultProps: Partial<TextFieldProps> = {
	    fullWidth: true,
	    size: 'medium',
	    InputLabelProps: {
	      shrink: true
	    },
	    InputProps: {
	      readOnly: true
	    }
	  };
	  return (
	    <Card title={formatMessage({ id: 'userDetailAdditionalInformation' })}>
	      <Grid container spacing={3.125}>
	        <Grid item xs={12}>
	          <TextField label={formatMessage({ id: 'userDetailAddress' })} fullWidth value={user.address} name="address" {...defaultProps} />
	        </Grid>
	        <Grid item xs={6}>
	          <TextField value={user.contactName} label={formatMessage({ id: 'userDetailNameContact' })} name="nameContact" {...defaultProps} />
	        </Grid>
	        <Grid item xs={6}>
	          <TextField
	            label={formatMessage({ id: 'userDetailEmailContact' })}
	            value={user.contactEmail}
	            name="emailContact"
	            {...defaultProps}
	          />
	        </Grid>
	        <Grid item xs={6}>
	          <TextField
	            label={formatMessage({ id: 'userDetailPhoneContact' })}
	            name="phoneContact"
	            value={user.contactPhoneNumber}
	            {...defaultProps}
	          />
	        </Grid>
	        <Grid item xs={6}>
	          <TextField label={formatMessage({ id: 'userDetailGST' })} name="gst" value={user.gst} {...defaultProps} />
	        </Grid>
	        <Grid item xs={6}>
	          <TextField label={formatMessage({ id: 'userDetailIPN' })} name="ipn" value={user.insuranceNumber} {...defaultProps} />
	        </Grid>
	        <Grid item xs={6}>
	          <TextField label={formatMessage({ id: 'userDetailBCNumber' })} name="bcn" value={user.workSafeBCNumber} {...defaultProps} />
	        </Grid>
	      </Grid>
	    </Card>
	  );
	}

```

src/components/user/detail/components/ProfilePicture/index.tsx```tsx
	import { Box } from '@mui/material';
	import { useIntl } from 'react-intl';
	
	// projects import
	import Card from '@/components/ui-component/Card';
	import Avatar from '@/components/ui-component/extended/Avatar';
	import { AVATAR_DEFAULT_URL } from '@/constant';
	
	// store
	
	import styles from './styles.module.scss';
	import { IUser } from '@/app/api/users/list/route';
	
	export interface IProfilePictureProps {
	  user: IUser;
	}
	
	export default function ProfilePicture({ user }: IProfilePictureProps) {
	  const { formatMessage } = useIntl();
	
	  return (
	    <Card title={formatMessage({ id: 'userDetailProfilePicture' })}>
	      <Box className={styles.wrapper}>
	        <Avatar src={user?.avatarUrl || AVATAR_DEFAULT_URL} size="xl" className={styles.avatar} />
	      </Box>
	    </Card>
	  );
	}

```

src/components/user/detail/components/ProfilePicture/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.wrapper {
	  display: flex;
	  flex-direction: column;
	  align-items: center;
	  justify-content: center;
	}
	
	.avatar {
	  margin: 0 auto;
	}
	
	.button {
	  position: relative;
	}
	
	.file {
	  position: absolute;
	  top: 0;
	  bottom: 0;
	  left: 0;
	  right: 0;
	  opacity: 0;
	  cursor: pointer;
	}

```

src/components/Breadcrumbs/index.tsx```tsx
	import React, { KeyboardEvent, useMemo } from 'react';
	import NextImage from 'next/image';
	import { forOwn } from 'lodash';
	import { usePathname } from 'next/navigation';
	import { IconChevronRight } from '@tabler/icons-react';
	import { Breadcrumbs as MUIBreadcrumbs, Box, Typography, InputBase } from '@mui/material';
	import Link from 'components/ui-component/Link';
	import routes from '@/routes';
	import styles from './styles.module.scss';
	import { IItemRoute } from '@/types/route';
	import SearchIcon from '@mui/icons-material/Search';
	import { useIntl } from 'react-intl';
	
	export interface IBreadcrumbsProps {
	  title?: string;
	  customRoutes?: IBreadcrumbItem[];
	  onSearch?: (value: string) => void;
	  actionCom?: () => React.ReactNode;
	}
	export interface IBreadcrumbItem {
	  url: string;
	  label: string;
	  key: string;
	}
	
	export default function Breadcrumbs({ title = '', customRoutes = [], actionCom, onSearch }: IBreadcrumbsProps) {
	  const { formatMessage } = useIntl();
	  const pathname = usePathname();
	  const breadcrumbs = useMemo(() => {
	    if (customRoutes.length > 0) {
	      return customRoutes;
	    }
	    const items: IBreadcrumbItem[] = [];
	    forOwn(routes, function (value: IItemRoute) {
	      const url = value.getUrl();
	      if (url === pathname) {
	        items.push({
	          url,
	          key: value.key,
	          label: value.label
	        });
	      }
	    });
	    return items;
	  }, [pathname, customRoutes]);
	
	  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {
	    if (e.key === 'Enter' && onSearch) {
	      const value = (e.target as HTMLInputElement).value;
	      onSearch(value);
	    }
	  };
	  const lastItemTitle = title !== '' ? title : !!breadcrumbs.length ? breadcrumbs[breadcrumbs.length - 1].label : 'Home';
	
	  return (
	    <Box className={styles.wrapper}>
	      <Box display="flex" alignItems="center" gap={2}>
	        <Typography variant="h3" sx={{ whiteSpace: 'nowrap' }}>
	          {lastItemTitle}
	        </Typography>
	        {actionCom?.()}
	      </Box>
	      <Box display="flex" alignItems="center" gap={2}>
	        {onSearch && (
	          <Box className={styles.search}>
	            <SearchIcon />
	            <InputBase
	              placeholder={formatMessage({ id: 'formSearchPlaceholder' })}
	              inputProps={{ 'aria-label': 'search' }}
	              onKeyDown={handleKeyDown}
	            />
	          </Box>
	        )}
	        <MUIBreadcrumbs
	          separator=""
	          classes={{
	            separator: styles.separator
	          }}
	        >
	          <Link href="/" className={styles.home}>
	            <NextImage src="/assets/images/icons/home.svg" width={12} height={12} alt={formatMessage({ id: 'home' })} />
	            <IconChevronRight size={16} />
	          </Link>
	          {breadcrumbs?.map((item, index) => {
	            if (index < breadcrumbs.length - 1) {
	              return (
	                <Link key={item.key} href={item.url} className={styles.home}>
	                  {item.label}
	                  <IconChevronRight size={16} />
	                </Link>
	              );
	            }
	            return <Box key={item.key}>{item.label}</Box>;
	          })}
	        </MUIBreadcrumbs>
	      </Box>
	    </Box>
	  );
	}

```

src/components/Breadcrumbs/styles.module.scss```scss
	@import 'styles/variables.module';
	
	.wrapper {
	  background-color: #fff;
	  padding: 15px 18px;
	  border-radius: 8px;
	  margin-bottom: 32px;
	  display: flex;
	  justify-content: space-between;
	  width: 100%;
	}
	
	.separator {
	  margin-left: 4px;
	  margin-right: 4px;
	}
	
	.home {
	  display: flex;
	  align-items: center;
	  svg {
	    margin-left: 9px;
	  }
	}
	.search{
	  display: flex;
	  align-items: center;
	  padding: 5px 16px;
	  border-radius: 12px;
	  border: 1px solid #e0e0e0;
	  gap: 4px;
	}
```

src/components/contractor/contractor.module.scss```scss
	.addButton{
	  font-size: 1.5rem;
	}
```

src/components/contractor/index.tsx```tsx
	'use client';
	import { Box, Stack, Typography } from '@mui/material';
	import Breadcrumbs from '../Breadcrumbs';
	import { Button } from '@/components/ui-component/buttons';
	import { useIntl } from 'react-intl';
	import Table from '@/components/ui-component/table';
	import { useAsync } from '@/hooks/useAsync';
	import { GridColDef, GridPaginationModel, GridSortModel } from '@mui/x-data-grid';
	import { useEffect, useState } from 'react';
	import { IContractor, getContractors } from '@/utils/services/contractor';
	import Chip from '../ui-component/extended/Chip';
	import { Pencil, Trash } from '@phosphor-icons/react';
	import { CONTRACTOR_STATUS_ARCHIVED, CONTRACTOR_STATUS_INACTIVE } from '@/constant/contractor';
	import ContractorDeleteDialog from '../dialogs/contractor/ContractorDeleteDialog';
	import ContractorDialog from '../dialogs/contractor/ContractorDialog';
	import Avatar from '../ui-component/extended/Avatar';
	import { PAGINATE_OFFSET, PAGINATE_PAGE_SIZE, SORT_DIRECTION_DEFAULT, SORT_FIELD_DEFAULT } from '@/utils/constant';
	import { IRequestFilter } from '@/types/request';
	import { AxiosResponse } from 'axios';
	import { IResponseListContractors } from '@/types/response';
	import { ResponseMeta } from '@/types/pagination';
	
	const Contractor = () => {
	  const { formatMessage } = useIntl();
	  const { isLoading, execute } = useAsync<AxiosResponse<IResponseListContractors, any>>();
	
	  const [contractors, setContractors] = useState<IContractor[]>([]);
	  const [createContractor, setCreateContractor] = useState(false);
	  const [editContractor, setEditContractor] = useState<Partial<IContractor> | null>(null);
	  const [deleteContractor, setDeleteContractor] = useState<Partial<IContractor> | null>(null);
	
	  const [contractorFilters, setContractorFilters] = useState<IRequestFilter>({});
	  const [contractorMeta, setContractorMeta] = useState<ResponseMeta | null>(null);
	
	  const renderStatus = (value: string) => {
	    let formatValue = value.toLowerCase();
	    if (formatValue === CONTRACTOR_STATUS_ARCHIVED.toLowerCase()) {
	      return <Chip chipcolor="disabled" disabled variant="outlined" label={value} sx={{ ':hover': null }} />;
	    }
	    if (formatValue === CONTRACTOR_STATUS_INACTIVE.toLowerCase()) {
	      return <Chip chipcolor="error" variant="outlined" label={value} sx={{ ':hover': null }} />;
	    }
	    return <Chip chipcolor="success" label={value} sx={{ ':hover': null }} />;
	  };
	  const columns: GridColDef[] = [
	    {
	      field: '_id',
	      headerName: formatMessage({ id: 'tableId' }),
	      align: 'center',
	      headerAlign: 'center',
	      flex: 1,
	      valueGetter: ({ row }) => row.id
	    },
	    {
	      field: 'contractorName',
	      headerName: formatMessage({ id: 'contractorTableContractorName' }),
	      headerAlign: 'center',
	      renderCell: ({ row }) => (
	        <Box display="flex" gap="12px" alignItems="center">
	          <Avatar src={row.imageUrl} alt={row.contractorName} />
	          <Typography variant="h4">{row.contractorName}</Typography>
	        </Box>
	      ),
	      flex: 2
	    },
	    {
	      field: 'service',
	      headerName: formatMessage({ id: 'contractorTableService' }),
	      flex: 2,
	      align: 'center',
	      headerAlign: 'center'
	    },
	    {
	      field: 'address',
	      headerName: formatMessage({ id: 'tableAddress' }),
	      headerAlign: 'center',
	      flex: 2,
	      align: 'center'
	    },
	    {
	      field: 'completionStatus',
	      headerName: formatMessage({ id: 'tableStatus' }),
	      headerAlign: 'center',
	      renderCell: ({ row }) => <Box fontWeight={500}>{renderStatus(row.completionStatus || 'active')}</Box>,
	      flex: 1,
	      align: 'center'
	    },
	    {
	      field: 'creatorId',
	      headerName: formatMessage({ id: 'tableCreatedBy' }),
	      headerAlign: 'center',
	      flex: 1,
	      align: 'center',
	      valueGetter: ({ row }) => row?.creatorId?.name || ''
	    },
	    {
	      field: 'other',
	      headerName: '',
	      width: 100,
	      sortable: false,
	      renderCell: ({ row }) => (
	        <Box display="flex" gap={1}>
	          <Button key="edit" className="tableActionIcon tableActionIconEdit" onClick={() => setEditContractor(row)}>
	            <Pencil />
	          </Button>
	          <Button key="delete" className="tableActionIcon tableActionIconDelete" onClick={() => setDeleteContractor(row)}>
	            <Trash />
	          </Button>
	        </Box>
	      )
	    }
	  ];
	
	  const renderAddButton = () => (
	    <Button variant="contained" startIcon={<Pencil size={14} />} color="error" type="submit" onClick={() => setCreateContractor(true)}>
	      {formatMessage({ id: 'buttonLabelAddNew' })}
	    </Button>
	  );
	
	  const fetchContractor = async (filters?: IRequestFilter) => {
	    const newFilter = {
	      ...contractorFilters,
	      ...filters
	    };
	    const result = await execute(getContractors(newFilter));
	    const contractors = result.data?.data && result.data?.data.length > 0 ? result.data?.data : [];
	    setContractorMeta(result.data.meta || null);
	    setContractors(contractors);
	    setContractorFilters(newFilter);
	  };
	
	  const handleSort = async (model: GridSortModel) => {
	    const field = model?.[0]?.field || SORT_FIELD_DEFAULT;
	    const dir = model?.[0]?.sort || SORT_DIRECTION_DEFAULT;
	    await fetchContractor({
	      field,
	      sort: dir
	    });
	  };
	
	  const handlePaginationChange = async (model: GridPaginationModel) => {
	    const newPage = (model?.page || 0) + 1;
	    const limit = model?.pageSize || PAGINATE_PAGE_SIZE;
	    await fetchContractor({
	      page: newPage,
	      limit
	    });
	  };
	
	  const handleActionSuccess = async () => {
	    await fetchContractor();
	  };
	
	  const handleSearch = async (keyword: string) => {
	    if (keyword !== contractorFilters?.search) {
	      await fetchContractor({
	        search: keyword
	      });
	    }
	  };
	
	  useEffect(() => {
	    fetchContractor();
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, []);
	  return (
	    <Stack direction="column">
	      <Breadcrumbs title={formatMessage({ id: 'contractorTitle' })} actionCom={renderAddButton} onSearch={handleSearch} />
	      <Table
	        rows={contractors}
	        columns={columns}
	        loading={isLoading}
	        onSortModelChange={handleSort}
	        paginationModel={{
	          page: (contractorFilters?.page || PAGINATE_OFFSET) - 1,
	          pageSize: contractorFilters?.limit || PAGINATE_PAGE_SIZE
	        }}
	        rowCount={contractorMeta?.total}
	        onPaginationModelChange={handlePaginationChange}
	      />
	      <ContractorDeleteDialog
	        open={Boolean(deleteContractor)}
	        contractor={deleteContractor || null}
	        onClose={() => setDeleteContractor(null)}
	        onSuccess={handleActionSuccess}
	      />
	      <ContractorDialog
	        open={Boolean(editContractor || createContractor)}
	        contractor={editContractor || null}
	        onClose={() => {
	          setEditContractor(null);
	          setCreateContractor(false);
	        }}
	        onSuccess={handleActionSuccess}
	      />
	    </Stack>
	  );
	};
	
	export default Contractor;

```

src/components/builder/builder.module.scss```scss
	.addButton{
	  font-size: 1.5rem;
	}
```

src/components/builder/index.tsx```tsx
	'use client';
	import { Box, Stack, Typography } from '@mui/material';
	import { Pencil, Trash } from '@phosphor-icons/react';
	import Breadcrumbs from '../Breadcrumbs';
	import { Button } from '@/components/ui-component/buttons';
	import Table from '@/components/ui-component/table';
	import { GridColDef, GridPaginationModel, GridSortModel } from '@mui/x-data-grid';
	import Chip from '../ui-component/extended/Chip';
	import { useIntl } from 'react-intl';
	import BuilderDeleteDialog from '../dialogs/builder/BuilderDeleteDialog';
	import { useEffect, useState } from 'react';
	import { Builder } from '@/utils/dtos/builder.dto';
	import { getBuilders } from '@/utils/services/builder';
	import { useAsync } from '@/hooks/useAsync';
	import BuilderDialog from '../dialogs/builder/BuilderDialog';
	import { BUILDER_STATUS_ARCHIVED, BUILDER_STATUS_INACTIVE } from '@/constant/builder';
	import Avatar from '../ui-component/extended/Avatar';
	import { PAGINATE_PAGE_SIZE, SORT_DIRECTION_DEFAULT, SORT_FIELD_DEFAULT } from '@/utils/constant';
	import { IRequestFilter } from '@/types/request';
	import { ResponseMeta } from '@/types/pagination';
	import { AxiosResponse } from 'axios';
	import { IResponseListBuilders } from '@/types/response';
	
	const Builder = () => {
	  const { formatMessage } = useIntl();
	  const { isLoading, execute } = useAsync<AxiosResponse<IResponseListBuilders, any>>();
	  const [deleteBuilder, setDeleteBuilder] = useState<Partial<Builder> | null>(null);
	  const [editBuilder, setEditBuilder] = useState<Partial<Builder> | null>(null);
	  const [createBuilder, setCreateBuilder] = useState(false);
	  const [builders, setBuilders] = useState<Builder[]>([]);
	  const [builderFilters, setBuilderFilters] = useState<IRequestFilter>({});
	  const [builderMeta, setBuilderMeta] = useState<ResponseMeta | null>(null);
	  const renderStatus = (value: string) => {
	    let formatValue = value.toLowerCase();
	    if (formatValue === BUILDER_STATUS_ARCHIVED.toLowerCase()) {
	      return <Chip chipcolor="disabled" disabled variant="outlined" label={value} sx={{ ':hover': null }} />;
	    }
	    if (formatValue === BUILDER_STATUS_INACTIVE.toLowerCase()) {
	      return <Chip chipcolor="error" variant="outlined" label={value} sx={{ ':hover': null }} />;
	    }
	    return <Chip chipcolor="success" label={value} sx={{ ':hover': null }} />;
	  };
	  const columns: GridColDef[] = [
	    { field: '_id', headerName: formatMessage({ id: 'tableId' }), align: 'center', headerAlign: 'center', flex: 1 },
	    {
	      field: 'builderName',
	      headerName: formatMessage({ id: 'builderTableBuilderName' }),
	      headerAlign: 'center',
	      renderCell: ({ row }) => (
	        <Box display="flex" gap="12px" alignItems="center">
	          <Avatar src={row.imageUrl} alt={row.builderName} />
	          <Typography variant="h4">{row.builderName}</Typography>
	        </Box>
	      ),
	      flex: 2,
	      align: 'center'
	    },
	    {
	      field: 'category',
	      headerName: formatMessage({ id: 'builderTableCategory' }),
	      flex: 1,
	      align: 'center',
	      headerAlign: 'center'
	    },
	    {
	      field: 'address',
	      headerName: formatMessage({ id: 'tableAddress' }),
	      headerAlign: 'center',
	      flex: 2,
	      align: 'center'
	    },
	    {
	      field: 'completionStatus',
	      headerName: formatMessage({ id: 'tableStatus' }),
	      headerAlign: 'center',
	      renderCell: ({ row }) => <Box fontWeight={500}>{renderStatus(row.completionStatus || 'active')}</Box>,
	      flex: 1,
	      align: 'center'
	    },
	    {
	      field: 'creatorId',
	      headerName: formatMessage({ id: 'tableCreatedBy' }),
	      headerAlign: 'center',
	      flex: 1,
	      align: 'center',
	      valueGetter: ({ row }) => row?.creator?.name || ''
	    },
	    {
	      field: 'other',
	      headerName: '',
	      width: 100,
	      sortable: false,
	      renderCell: ({ row }) => (
	        <Box display="flex" gap={1}>
	          <Button key="edit" className="tableActionIcon tableActionIconEdit" onClick={() => setEditBuilder(row)}>
	            <Pencil />
	          </Button>
	          <Button key="delete" className="tableActionIcon tableActionIconDelete" onClick={() => setDeleteBuilder(row)}>
	            <Trash />
	          </Button>
	        </Box>
	      )
	    }
	  ];
	
	  const fetchBuilder = async (filters?: IRequestFilter) => {
	    const newFilter = {
	      ...builderFilters,
	      ...filters
	    };
	    const result = await execute(getBuilders(newFilter));
	    const data = result.data?.data && result.data?.data.length > 0 ? result.data?.data : [];
	    const meta = result.data.meta || null;
	    setBuilderMeta(meta);
	    setBuilders(data);
	    setBuilderFilters(newFilter);
	  };
	
	  const handleSort = async (model: GridSortModel) => {
	    const field = model?.[0]?.field || SORT_FIELD_DEFAULT;
	    const dir = model?.[0]?.sort || SORT_DIRECTION_DEFAULT;
	    await fetchBuilder({
	      sortBy: field,
	      sortDir: dir
	    });
	  };
	
	  const handlePaginationChange = async (model: GridPaginationModel) => {
	    const newPage = (model?.page || 0) + 1;
	    const limit = model?.pageSize || PAGINATE_PAGE_SIZE;
	    await fetchBuilder({
	      page: newPage,
	      limit
	    });
	  };
	
	  const handleActionSuccess = async () => {
	    await fetchBuilder({});
	  };
	
	  const handleSearch = async (keyword: string) => {
	    if (keyword !== builderFilters.search) {
	      await fetchBuilder({
	        search: keyword
	      });
	    }
	  };
	
	  const renderAddButton = () => (
	    <Button variant="contained" startIcon={<Pencil size={14} />} color="error" type="submit" onClick={() => setCreateBuilder(true)}>
	      {formatMessage({ id: 'buttonLabelAddNew' })}
	    </Button>
	  );
	
	  useEffect(() => {
	    fetchBuilder();
	    // eslint-disable-next-line react-hooks/exhaustive-deps
	  }, []);
	
	  return (
	    <Stack direction="column">
	      <Breadcrumbs title={formatMessage({ id: 'builderTitle' })} actionCom={renderAddButton} onSearch={handleSearch} />
	      <Table
	        rows={builders}
	        columns={columns}
	        loading={isLoading}
	        onSortModelChange={handleSort}
	        paginationModel={{
	          page: (builderFilters?.page || 1) - 1,
	          pageSize: builderFilters.limit || PAGINATE_PAGE_SIZE
	        }}
	        rowCount={builderMeta?.total || 0}
	        onPaginationModelChange={handlePaginationChange}
	      />
	      <BuilderDeleteDialog
	        open={Boolean(deleteBuilder)}
	        builder={deleteBuilder || null}
	        onClose={() => setDeleteBuilder(null)}
	        onSuccess={handleActionSuccess}
	      />
	      <BuilderDialog
	        open={Boolean(editBuilder || createBuilder)}
	        builder={editBuilder || null}
	        onClose={() => {
	          setEditBuilder(null);
	          setCreateBuilder(false);
	        }}
	        onSuccess={handleActionSuccess}
	      />
	    </Stack>
	  );
	};
	
	export default Builder;

```

src/themes/compStyleOverride.tsx```tsx
	// project imports
	import { Theme } from '@mui/material/styles';
	
	export default function componentStyleOverrides(theme: Theme, borderRadius: number, outlinedFilled: boolean) {
	  const mode = theme.palette.mode;
	  //const bgColor = mode === 'dark' ? theme.palette.dark[800] : theme.palette.grey[50];
	  const menuSelectedBack = mode === 'dark' ? theme.palette.secondary.main + 15 : theme.palette.secondary.light;
	  const menuSelected = mode === 'dark' ? theme.palette.secondary.main : theme.palette.secondary.dark;
	
	  return {
	    MuiButton: {
	      styleOverrides: {
	        root: {
	          fontWeight: 500,
	          borderRadius: '12px'
	        }
	      }
	    },
	    MuiPaper: {
	      defaultProps: {
	        elevation: 0
	      },
	      styleOverrides: {
	        root: {
	          backgroundImage: 'none'
	        },
	        rounded: {
	          borderRadius: `${borderRadius}px`
	        }
	      }
	    },
	    // MuiCardHeader: {
	    //   styleOverrides: {
	    //     root: {
	    //       color: theme.palette.text.dark,
	    //       padding: '24px'
	    //     },
	    //     title: {
	    //       fontSize: '1.125rem'
	    //     }
	    //   }
	    // },
	    // MuiCardContent: {
	    //   styleOverrides: {
	    //     root: {
	    //       padding: '24px'
	    //     }
	    //   }
	    // },
	    // MuiCardActions: {
	    //   styleOverrides: {
	    //     root: {
	    //       padding: '24px'
	    //     }
	    //   }
	    // },
	    MuiAlert: {
	      styleOverrides: {
	        root: {
	          alignItems: 'center'
	        },
	        outlined: {
	          border: '1px dashed'
	        }
	      }
	    },
	    MuiListItemButton: {
	      styleOverrides: {
	        root: {
	          color: theme.palette.text.primary,
	          paddingTop: '10px',
	          paddingBottom: '10px',
	          '&.Mui-selected': {
	            color: menuSelected,
	            backgroundColor: menuSelectedBack,
	            '&:hover': {
	              backgroundColor: menuSelectedBack
	            },
	            '& .MuiListItemIcon-root': {
	              color: menuSelected
	            }
	          },
	          '&:hover': {
	            backgroundColor: menuSelectedBack,
	            color: menuSelected,
	            '& .MuiListItemIcon-root': {
	              color: menuSelected
	            }
	          }
	        }
	      }
	    },
	    MuiListItemIcon: {
	      styleOverrides: {
	        root: {
	          color: theme.palette.text.primary,
	          minWidth: '36px'
	        }
	      }
	    },
	    MuiListItemText: {
	      styleOverrides: {
	        primary: {
	          color: theme.palette.text.dark
	        }
	      }
	    },
	    // MuiInputBase: {
	    //   styleOverrides: {
	    //     input: {
	    //       color: theme.palette.text.dark,
	    //       '&::placeholder': {
	    //         color: theme.palette.text.secondary,
	    //         fontSize: '0.875rem'
	    //       }
	    //     }
	    //   }
	    // },
	    // MuiOutlinedInput: {
	    //   styleOverrides: {
	    //     root: {
	    //       background: outlinedFilled ? bgColor : 'transparent',
	    //       borderRadius: `${borderRadius}px`,
	    //       '& .MuiOutlinedInput-notchedOutline': {
	    //         borderColor: mode === 'dark' ? theme.palette.text.primary + 28 : theme.palette.grey[400]
	    //       },
	    //       '&:hover $notchedOutline': {
	    //         borderColor: theme.palette.primary.light
	    //       },
	    //       '&.MuiInputBase-multiline': {
	    //         padding: 1
	    //       }
	    //     },
	    //     input: {
	    //       fontWeight: 500,
	    //       background: outlinedFilled ? bgColor : 'transparent',
	    //       padding: '15.5px 14px',
	    //       borderRadius: `${borderRadius}px`,
	    //       '&.MuiInputBase-inputSizeSmall': {
	    //         padding: '10px 14px',
	    //         '&.MuiInputBase-inputAdornedStart': {
	    //           paddingLeft: 0
	    //         }
	    //       }
	    //     },
	    //     inputAdornedStart: {
	    //       paddingLeft: 4
	    //     },
	    //     notchedOutline: {
	    //       borderRadius: `${borderRadius}px`
	    //     }
	    //   }
	    // },
	    // MuiSlider: {
	    //   styleOverrides: {
	    //     root: {
	    //       '&.Mui-disabled': {
	    //         color: mode === 'dark' ? theme.palette.text.primary + 50 : theme.palette.grey[300]
	    //       }
	    //     },
	    //     mark: {
	    //       backgroundColor: theme.palette.background.paper,
	    //       width: '4px'
	    //     },
	    //     valueLabel: {
	    //       color: mode === 'dark' ? theme.palette.primary.main : theme.palette.primary.light
	    //     }
	    //   }
	    // },
	    // MuiAutocomplete: {
	    //   styleOverrides: {
	    //     root: {
	    //       '& .MuiAutocomplete-tag': {
	    //         background: mode === 'dark' ? theme.palette.text.primary + 20 : theme.palette.secondary.light,
	    //         borderRadius: 4,
	    //         color: theme.palette.text.dark,
	    //         '.MuiChip-deleteIcon': {
	    //           color: mode === 'dark' ? theme.palette.text.primary + 80 : theme.palette.secondary[200]
	    //         }
	    //       }
	    //     },
	    //     popper: {
	    //       borderRadius: `${borderRadius}px`,
	    //       boxShadow: '0px 8px 10px -5px rgb(0 0 0 / 20%), 0px 16px 24px 2px rgb(0 0 0 / 14%), 0px 6px 30px 5px rgb(0 0 0 / 12%)'
	    //     }
	    //   }
	    // },
	    MuiDivider: {
	      styleOverrides: {
	        root: {
	          borderColor: theme.palette.divider,
	          opacity: mode === 'dark' ? 0.2 : 1
	        }
	      }
	    },
	    MuiSelect: {
	      styleOverrides: {
	        select: {
	          '&:focus': {
	            backgroundColor: 'transparent'
	          }
	        }
	      }
	    },
	    MuiCheckbox: {
	      styleOverrides: {
	        root: {}
	      }
	    },
	    MuiAvatar: {
	      styleOverrides: {
	        root: {
	          color: mode === 'dark' ? theme.palette.dark.main : theme.palette.primary.dark,
	          background: mode === 'dark' ? theme.palette.text.primary : theme.palette.primary[200]
	        }
	      }
	    },
	    MuiChip: {
	      styleOverrides: {
	        root: {
	          '&.MuiChip-deletable .MuiChip-deleteIcon': {
	            color: 'inherit'
	          }
	        }
	      }
	    },
	    MuiTimelineContent: {
	      styleOverrides: {
	        root: {
	          color: theme.palette.text.dark,
	          fontSize: '16px'
	        }
	      }
	    },
	    MuiTreeItem: {
	      styleOverrides: {
	        label: {
	          marginTop: 14,
	          marginBottom: 14
	        }
	      }
	    },
	    MuiTimelineDot: {
	      styleOverrides: {
	        root: {
	          boxShadow: 'none'
	        }
	      }
	    },
	    MuiInternalDateTimePickerTabs: {
	      styleOverrides: {
	        tabs: {
	          backgroundColor: mode === 'dark' ? theme.palette.dark[900] : theme.palette.primary.light,
	          '& .MuiTabs-flexContainer': {
	            borderColor: mode === 'dark' ? theme.palette.text.primary + 20 : theme.palette.primary[200]
	          },
	          '& .MuiTab-root': {
	            color: mode === 'dark' ? theme.palette.text.secondary : theme.palette.grey[900]
	          },
	          '& .MuiTabs-indicator': {
	            backgroundColor: theme.palette.primary.dark
	          },
	          '& .Mui-selected': {
	            color: theme.palette.primary.dark
	          }
	        }
	      }
	    },
	    MuiTabs: {
	      styleOverrides: {
	        flexContainer: {
	          borderBottom: '1px solid',
	          borderColor: mode === 'dark' ? theme.palette.text.primary + 20 : theme.palette.grey[200]
	        }
	      }
	    },
	    MuiDialog: {
	      styleOverrides: {
	        paper: {
	          padding: '12px 0 12px 0'
	        }
	      }
	    },
	    MuiTableCell: {
	      styleOverrides: {
	        root: {
	          borderColor: mode === 'dark' ? theme.palette.text.primary + 15 : theme.palette.grey[200],
	          '&.MuiTableCell-head': {
	            fontSize: '0.875rem',
	            color: mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[900],
	            fontWeight: 500
	          }
	        }
	      }
	    },
	    MuiDateTimePickerToolbar: {
	      styleOverrides: {
	        timeDigitsContainer: {
	          alignItems: 'center'
	        }
	      }
	    },
	    MuiTooltip: {
	      styleOverrides: {
	        tooltip: {
	          color: theme.palette.background.paper,
	          background: theme.palette.text.primary
	        }
	      }
	    },
	    MuiDialogTitle: {
	      styleOverrides: {
	        root: {
	          fontSize: '1.25rem'
	        }
	      }
	    },
	    MuiPaginationItem: {
	      styleOverrides: {
	        root: {
	          margin: '3px'
	        }
	      }
	    },
	    MuiDataGrid: {
	      defaultProps: {
	        rowHeight: 54
	      },
	      styleOverrides: {
	        root: {
	          border: 'none',
	          '& .MuiFormControl-root>.MuiInputBase-root': {
	            backgroundColor: theme.palette.background.default + ' !important',
	            borderColor: theme.palette.mode === 'dark' ? theme.palette.divider + 20 + ' !important' : theme.palette.divider + ' !important'
	          }
	        },
	        row: {
	          borderBottom: `1px solid ${mode === 'dark' ? theme.palette.divider + 20 : theme.palette.divider}`
	        },
	        columnHeader: {
	          paddingLeft: 24,
	          paddingRight: 24,
	          borderBottom: `1px solid ${mode === 'dark' ? theme.palette.divider + 20 : theme.palette.divider}`
	        },
	        columnHeaderCheckbox: {
	          paddingLeft: 0,
	          paddingRight: 0
	        },
	        cellCheckbox: {
	          paddingLeft: 0,
	          paddingRight: 0
	        },
	        cell: {
	          border: 'none',
	          paddingLeft: 24,
	          paddingRight: 24,
	          '&.MuiDataGrid-cell--withRenderer > div ': {
	            ...(theme.palette.mode === 'dark' && {
	              color: theme.palette.grey[50]
	            }),
	            ' > .high': {
	              backgroundColor: theme.palette.mode === 'dark' ? theme.palette.success.dark : theme.palette.success.light
	            },
	            '& > .medium': {
	              backgroundColor: theme.palette.mode === 'dark' ? theme.palette.warning.dark : theme.palette.warning.light
	            },
	            '& > .low': {
	              backgroundColor: theme.palette.mode === 'dark' ? theme.palette.error.dark : theme.palette.error.light
	            }
	          }
	        },
	        columnsContainer: {
	          borderColor: mode === 'dark' ? theme.palette.divider + 20 : theme.palette.divider
	        },
	        columnSeparator: {
	          borderColor: mode === 'dark' ? theme.palette.divider + 20 : theme.palette.divider
	        },
	        withBorderColor: {
	          borderColor: mode === 'dark' ? theme.palette.divider + 20 : theme.palette.divider
	        }
	      }
	    }
	  };
	}

```

src/themes/typography.tsx```tsx
	// material-ui
	import { Theme, TypographyVariantsOptions } from '@mui/material/styles';
	
	const Typography = (theme: Theme, borderRadius: number, fontFamily: string): TypographyVariantsOptions => ({
	  fontFamily,
	  h6: {
	    fontWeight: 500,
	    color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[900],
	    fontSize: '0.75rem'
	  },
	  h5: {
	    fontSize: '0.875rem',
	    color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[900],
	    fontWeight: 500
	  },
	  h4: {
	    fontSize: '1rem',
	    color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[900],
	    fontWeight: 'bold'
	  },
	  h3: {
	    fontSize: '1.25rem',
	    color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[900],
	    fontWeight: 'bold'
	  },
	  h2: {
	    fontSize: '1.5rem',
	    color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[900],
	    fontWeight: 'bold',
	    lineHeight: 1.3333
	  },
	  h1: {
	    fontSize: '2.125rem',
	    color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[900],
	    fontWeight: 'bold',
	    lineHeight: 1.235
	  },
	  subtitle1: {
	    fontSize: '0.875rem',
	    fontWeight: 500,
	    color: theme.palette.text.dark
	  },
	  subtitle2: {
	    fontSize: '0.75rem',
	    fontWeight: 400,
	    color: theme.palette.text.secondary
	  },
	  caption: {
	    fontSize: '0.75rem',
	    color: theme.palette.text.secondary,
	    fontWeight: 400
	  },
	  body1: {
	    fontSize: '0.875rem',
	    fontWeight: 400,
	    lineHeight: '1.334em'
	  },
	  body2: {
	    letterSpacing: '0em',
	    fontWeight: 400,
	    lineHeight: '1.5em',
	    color: theme.palette.text.primary
	  },
	  button: {
	    textTransform: 'capitalize'
	  },
	  customInput: {
	    marginTop: 1,
	    marginBottom: 1,
	    '& > label': {
	      top: 23,
	      left: 0,
	      color: theme.palette.grey[500],
	      '&[data-shrink="false"]': {
	        top: 5
	      }
	    },
	    '& > div > input': {
	      padding: '30.5px 14px 11.5px !important'
	    },
	    '& legend': {
	      display: 'none'
	    },
	    '& fieldset': {
	      top: 0
	    }
	  },
	  mainContent: {
	    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.dark[800] : theme.palette.grey[100],
	    width: '100%',
	    minHeight: 'calc(100vh - 88px)',
	    flexGrow: 1,
	    padding: '20px',
	    marginTop: '88px',
	    marginRight: '20px',
	    borderRadius: `${borderRadius}px`
	  },
	  menuCaption: {
	    fontSize: '0.875rem',
	    fontWeight: 500,
	    color: theme.palette.mode === 'dark' ? theme.palette.grey[600] : theme.palette.grey[900],
	    padding: '6px',
	    textTransform: 'capitalize',
	    marginTop: '10px'
	  },
	  subMenuCaption: {
	    fontSize: '0.6875rem',
	    fontWeight: 500,
	    color: theme.palette.text.secondary,
	    textTransform: 'capitalize'
	  },
	  commonAvatar: {
	    cursor: 'pointer',
	    borderRadius: '8px'
	  },
	  smallAvatar: {
	    width: '22px',
	    height: '22px',
	    fontSize: '1rem'
	  },
	  mediumAvatar: {
	    width: '34px',
	    height: '34px',
	    fontSize: '1.2rem'
	  },
	  largeAvatar: {
	    width: '44px',
	    height: '44px',
	    fontSize: '1.5rem'
	  }
	});
	
	export default Typography;

```

src/themes/index.tsx```tsx
	import { useMemo, ReactNode } from 'react';
	
	// material-ui
	import { CssBaseline, StyledEngineProvider } from '@mui/material';
	import { createTheme, ThemeOptions, ThemeProvider, Theme, TypographyVariantsOptions } from '@mui/material/styles';
	
	// project import
	import { NextAppDirEmotionCacheProvider } from './emotionCache';
	import useConfig from '../hooks/useConfig';
	import Palette from './palette';
	import Typography from './typography';
	
	import componentStyleOverrides from './compStyleOverride';
	import customShadows from './shadows';
	
	// assets
	import colors from '../scss/_cm.module.scss';
	import theme1 from '../scss/_theme1.module.scss';
	import theme2 from '../scss/_theme2.module.scss';
	import theme3 from '../scss/_theme3.module.scss';
	import theme4 from '../scss/_theme4.module.scss';
	import theme5 from '../scss/_theme5.module.scss';
	import theme6 from '../scss/_theme6.module.scss';
	
	// types
	import { ColorProps } from 'types';
	import { CustomShadowProps } from 'types/default-theme';
	
	interface Props {
	  children: ReactNode;
	}
	
	export default function ThemeCustomization({ children }: Props) {
	  const config = useConfig();
	  const { borderRadius, fontFamily, navType, outlinedFilled, presetColor, rtlLayout } = useConfig();
	
	  const theme: Theme = useMemo<Theme>(() => Palette(navType, presetColor), [navType, presetColor]);
	
	  // eslint-disable-next-line react-hooks/exhaustive-deps
	  const themeTypography: TypographyVariantsOptions = useMemo<TypographyVariantsOptions>(
	    () => Typography(theme, borderRadius, fontFamily),
	    [theme, borderRadius, fontFamily]
	  );
	  const themeCustomShadows: CustomShadowProps = useMemo<CustomShadowProps>(() => customShadows(navType, theme), [navType, theme]);
	
	  let color: ColorProps;
	  switch (config.presetColor) {
	    case 'theme1':
	      color = theme1;
	      break;
	    case 'theme2':
	      color = theme2;
	      break;
	    case 'theme3':
	      color = theme3;
	      break;
	    case 'theme4':
	      color = theme4;
	      break;
	    case 'theme5':
	      color = theme5;
	      break;
	    case 'theme6':
	      color = theme6;
	      break;
	    case 'default':
	    default:
	      color = colors;
	  }
	
	  const themeOption = {
	    colors: color,
	    heading: '',
	    paper: '',
	    backgroundDefault: '',
	    background: '',
	    darkTextPrimary: '',
	    darkTextSecondary: '',
	    textDark: '',
	    menuSelected: '',
	    menuSelectedBack: '',
	    divider: '',
	    customization: config
	  };
	
	  switch (config.navType) {
	    case 'dark':
	      themeOption.paper = color.darkLevel2;
	      themeOption.backgroundDefault = color.darkPaper;
	      themeOption.background = color.darkBackground;
	      themeOption.darkTextPrimary = color.darkTextPrimary;
	      themeOption.darkTextSecondary = color.darkTextSecondary;
	      themeOption.textDark = color.darkTextPrimary;
	      themeOption.menuSelected = color.darkSecondaryMain;
	      themeOption.menuSelectedBack = color.darkSecondaryMain + 15;
	      themeOption.divider = color.darkTextPrimary;
	      themeOption.heading = color.darkTextTitle;
	      break;
	    case 'light':
	    default:
	      themeOption.paper = color.paper;
	      themeOption.backgroundDefault = color.paper;
	      themeOption.background = color.primaryLight;
	      themeOption.darkTextPrimary = color.grey700;
	      themeOption.darkTextSecondary = color.grey500;
	      themeOption.textDark = color.grey900;
	      themeOption.menuSelected = color.secondaryDark;
	      themeOption.menuSelectedBack = color.secondaryLight;
	      themeOption.divider = color.grey200;
	      themeOption.heading = color.grey900;
	      break;
	  }
	
	  const themeOptions: ThemeOptions = useMemo(
	    () => ({
	      direction: rtlLayout ? 'rtl' : 'ltr',
	      palette: theme.palette,
	      mixins: {
	        toolbar: {
	          minHeight: '48px',
	          padding: '16px',
	          '@media (min-width: 600px)': {
	            minHeight: '48px'
	          }
	        }
	      },
	      typography: themeTypography,
	      customShadows: themeCustomShadows
	    }),
	    [rtlLayout, theme, themeCustomShadows, themeTypography]
	  );
	
	  const themes: Theme = createTheme(themeOptions);
	  themes.components = useMemo(() => componentStyleOverrides(themes, borderRadius, outlinedFilled), [themes, borderRadius, outlinedFilled]);
	
	  return (
	    <StyledEngineProvider injectFirst>
	      <NextAppDirEmotionCacheProvider options={{ key: 'mui', prepend: true }}>
	        <ThemeProvider theme={themes}>
	          <CssBaseline />
	          {children}
	        </ThemeProvider>
	      </NextAppDirEmotionCacheProvider>
	    </StyledEngineProvider>
	  );
	}

```

src/themes/emotionCache.tsx```tsx
	import * as React from 'react';
	import createCache from '@emotion/cache';
	import { useServerInsertedHTML } from 'next/navigation';
	import { CacheProvider as DefaultCacheProvider } from '@emotion/react';
	import type { EmotionCache, Options as OptionsOfCreateCache } from '@emotion/cache';
	import { createStyleRegistry, StyleRegistry } from 'styled-jsx';
	
	export type NextAppDirEmotionCacheProviderProps = {
	  /** This is the options passed to createCache() from 'import createCache from "@emotion/cache"' */
	  options: Omit<OptionsOfCreateCache, 'insertionPoint'>;
	  /** By default <CacheProvider /> from 'import { CacheProvider } from "@emotion/react"' */
	  CacheProvider?: (props: { value: EmotionCache; children: React.ReactNode }) => React.JSX.Element | null;
	  children: React.ReactNode;
	};
	
	// This implementation is taken from https://github.com/garronej/tss-react/blob/main/src/next/appDir.tsx
	export function NextAppDirEmotionCacheProvider(props: NextAppDirEmotionCacheProviderProps) {
	  const { options, CacheProvider = DefaultCacheProvider, children } = props;
	  const [jsxStyleRegistry] = React.useState(() => createStyleRegistry());
	
	  const [{ cache, flush }] = React.useState(() => {
	    // eslint-disable-next-line @typescript-eslint/no-shadow
	    const cache = createCache(options);
	    cache.compat = true;
	    const prevInsert = cache.insert;
	    let inserted: string[] = [];
	    cache.insert = (...args) => {
	      const serialized = args[1];
	      if (cache.inserted[serialized.name] === undefined) {
	        inserted.push(serialized.name);
	      }
	      return prevInsert(...args);
	    };
	    // eslint-disable-next-line @typescript-eslint/no-shadow
	    const flush = () => {
	      const prevInserted = inserted;
	      inserted = [];
	      return prevInserted;
	    };
	    return { cache, flush };
	  });
	
	  useServerInsertedHTML(() => {
	    const names = flush();
	    if (names.length === 0) {
	      return null;
	    }
	    let styles: any = jsxStyleRegistry.styles();
	    jsxStyleRegistry.flush();
	    // eslint-disable-next-line no-restricted-syntax
	    for (const name of names) {
	      styles += cache.inserted[name];
	    }
	    return (
	      <style
	        key={cache.key}
	        data-emotion={`${cache.key} ${names.join(' ')}`}
	        // eslint-disable-next-line react/no-danger
	        dangerouslySetInnerHTML={{
	          __html: styles
	        }}
	      />
	    );
	  });
	
	  return (
	    <CacheProvider value={cache}>
	      <StyleRegistry registry={jsxStyleRegistry}>{children}</StyleRegistry>
	    </CacheProvider>
	  );
	}

```

src/themes/shadows.tsx```tsx
	// material-ui
	import { alpha, Theme } from '@mui/material/styles';
	
	const createCustomShadow = (theme: Theme, color: string) => {
	  const transparent = alpha(color, 0.24);
	  return {
	    z1: `0 1px 2px 0 ${transparent}`,
	    z8: `0 8px 16px 0 ${transparent}`,
	    z12: `0 12px 24px 0 ${transparent} 0 10px 20px 0 ${transparent}`,
	    z16: `0 0 3px 0 ${transparent} 0 14px 28px -5px ${transparent}`,
	    z20: `0 0 3px 0 ${transparent} 0 18px 36px -5px ${transparent}`,
	    z24: `0 0 6px 0 ${transparent} 0 21px 44px 0 ${transparent}`,
	
	    primary: `0px 12px 14px 0px ${alpha(theme.palette.primary.main, 0.3)}`,
	    secondary: `0px 12px 14px 0px ${alpha(theme.palette.secondary.main, 0.3)}`,
	    orange: `0px 12px 14px 0px ${alpha(theme.palette.orange.main, 0.3)}`,
	    success: `0px 12px 14px 0px ${alpha(theme.palette.success.main, 0.3)}`,
	    warning: `0px 12px 14px 0px ${alpha(theme.palette.warning.main, 0.3)}`,
	    error: `0px 12px 14px 0px ${alpha(theme.palette.error.main, 0.3)}`
	  };
	};
	
	export default function customShadows(navType: string, theme: Theme) {
	  return navType === 'dark' ? createCustomShadow(theme, theme.palette.dark.main) : createCustomShadow(theme, theme.palette.grey[900]);
	}

```

src/themes/palette.tsx```tsx
	// material-ui
	import { createTheme } from '@mui/material/styles';
	import { PaletteMode } from '@mui/material';
	
	// assets
	import theme1 from '../scss/_theme1.module.scss';
	import theme2 from '../scss/_theme2.module.scss';
	import theme3 from '../scss/_theme3.module.scss';
	import theme4 from '../scss/_theme4.module.scss';
	import theme5 from '../scss/_theme5.module.scss';
	import theme6 from '../scss/_theme6.module.scss';
	import cmTheme from '../scss/_cm.module.scss';
	
	// types
	import { ColorProps } from 'types';
	
	// ==============================|| DEFAULT THEME - PALETTE ||============================== //
	
	const Palette = (navType: PaletteMode, presetColor: string) => {
	  let colors: ColorProps;
	  switch (presetColor) {
	    case 'theme1':
	      colors = theme1;
	      break;
	    case 'theme2':
	      colors = theme2;
	      break;
	    case 'theme3':
	      colors = theme3;
	      break;
	    case 'theme4':
	      colors = theme4;
	      break;
	    case 'theme5':
	      colors = theme5;
	      break;
	    case 'theme6':
	      colors = theme6;
	      break;
	    case 'default':
	    default:
	      colors = cmTheme;
	  }
	
	  return createTheme({
	    palette: {
	      mode: navType,
	      common: {
	        black: colors.darkPaper
	      },
	      primary: {
	        light: navType === 'dark' ? colors.darkPrimaryLight : colors.primaryLight,
	        main: navType === 'dark' ? colors.darkPrimaryMain : colors.primaryMain,
	        dark: navType === 'dark' ? colors.darkPrimaryDark : colors.primaryDark,
	        200: navType === 'dark' ? colors.darkPrimary200 : colors.primary200,
	        800: navType === 'dark' ? colors.darkPrimary800 : colors.primary800
	      },
	      secondary: {
	        light: navType === 'dark' ? colors.darkSecondaryLight : colors.secondaryLight,
	        main: navType === 'dark' ? colors.darkSecondaryMain : colors.secondaryMain,
	        dark: navType === 'dark' ? colors.darkSecondaryDark : colors.secondaryDark,
	        200: navType === 'dark' ? colors.darkSecondary200 : colors.secondary200,
	        800: navType === 'dark' ? colors.darkSecondary800 : colors.secondary800
	      },
	      error: {
	        light: colors.errorLight,
	        main: colors.errorMain,
	        dark: colors.errorDark
	      },
	      danger: {
	        light: colors.dangerLight,
	        main: colors.dangerMain,
	        dark: colors.dangerDark
	      },
	      orange: {
	        light: colors.orangeLight,
	        main: colors.orangeMain,
	        dark: colors.orangeDark
	      },
	      warning: {
	        light: colors.warningLight,
	        main: colors.warningMain,
	        dark: colors.warningDark
	      },
	      success: {
	        light: colors.successLight,
	        200: colors.success200,
	        main: colors.successMain,
	        dark: colors.successDark
	      },
	      grey: {
	        50: colors.grey50,
	        100: colors.grey100,
	        500: navType === 'dark' ? colors.darkTextSecondary : colors.grey500,
	        600: navType === 'dark' ? colors.darkTextTitle : colors.grey600,
	        700: navType === 'dark' ? colors.darkTextPrimary : colors.grey700,
	        900: navType === 'dark' ? colors.darkTextPrimary : colors.grey900
	      },
	      dark: {
	        light: colors.darkTextPrimary,
	        main: colors.darkLevel1,
	        dark: colors.darkLevel2,
	        800: colors.darkBackground,
	        900: colors.darkPaper
	      },
	      text: {
	        primary: navType === 'dark' ? colors.darkTextPrimary : colors.grey700,
	        secondary: navType === 'dark' ? colors.darkTextSecondary : colors.grey500,
	        dark: navType === 'dark' ? colors.darkTextPrimary : colors.grey900,
	        hint: colors.grey100
	      },
	      divider: navType === 'dark' ? colors.darkTextPrimary : colors.grey200,
	      background: {
	        paper: navType === 'dark' ? colors.darkLevel2 : colors.paper,
	        default: navType === 'dark' ? colors.darkPaper : colors.paper
	      },
	      cmColors: {
	        // primary colors
	        primaryLight: colors.primaryLight,
	        primaryLightHover: colors.primaryLightHover,
	        primaryLightActive: colors.primaryLightActive,
	        primaryNormal: colors.primaryNormal,
	        primaryNormalHover: colors.primaryNormalHover,
	        primaryNormalActive: colors.primaryNormalActive,
	        primaryDark: colors.primaryDark,
	        primaryDarkHover: colors.primaryDarkHover,
	        primaryDarkActive: colors.primaryDarkActive,
	        primaryDarker: colors.primaryDarker,
	
	        // secondary colors
	        secondaryLight: colors.secondaryLight,
	        secondaryLightHover: colors.secondaryLightHover,
	        secondaryLightActive: colors.secondaryLightActive,
	        secondaryNormal: colors.secondaryNormal,
	        secondaryNormalHover: colors.secondaryNormalHover,
	        secondaryNormalActive: colors.secondaryNormalActive,
	        secondaryDark: colors.secondaryDark,
	        secondaryDarkHover: colors.secondaryDarkHover,
	        secondaryDarkActive: colors.secondaryDarkActive,
	        secondaryDarker: colors.secondaryDarker,
	
	        // highlight
	        highlightLight: colors.highlightLight,
	        highlightHover: colors.highlightHover,
	        highlightActive: colors.highlightActive,
	        highlightNormal: colors.highlightNormal,
	        highlightNormalHover: colors.highlightNormalHover,
	        highlightNormalActive: colors.highlightNormalActive,
	        highlightNormalDark: colors.highlightNormalDark,
	        highlightNormalDarkHover: colors.highlightNormalDarkHover,
	        highlightNormalDarkActive: colors.highlightNormalDarkActive,
	        highlightNormalDarker: colors.highlightNormalDarker
	      }
	    }
	  });
	};
	
	export default Palette;

```

types/next-auth.d.ts```ts
	import { DefaultSession } from 'next-auth/core/types';
	
	declare module 'next-auth' {
	  interface Session {
	    user: {
	      id: string;
	      token: string;
	      password: string | null;
	      provider: string;
	    } & DefaultSession['user'];
	  }
	}

```

lib/swagger/index.ts```ts
	import { createSwaggerSpec } from 'next-swagger-doc';
	
	export const getApiSpecs = async () => {
	  return createSwaggerSpec({
	    apiFolder: './lib/swagger/doc',
	    definition: {
	      openapi: '3.0.0',
	      info: {
	        title: 'J2C APIS',
	        version: '1.0.0'
	      },
	      components: {
	        securitySchemes: {
	          bearerAuth: {
	            type: 'http',
	            scheme: 'bearer',
	            bearerFormat: 'JWT'
	          }
	        }
	      },
	      security: [],
	      servers: [
	        {
	          url: process.env.NEXT_APP_URL || 'http://localhost:3000',
	          description: 'Development server'
	        }
	      ]
	    }
	  });
	};

```

lib/swagger/doc/auth/sendCode.ts```ts
	/**
	 * @swagger
	 * /api/auth/code/send:
	 *   post:
	 *     tags:
	 *       - Auth
	 *     summary: Send an email with a code to reset the password
	 *     requestBody:
	 *       required: false
	 *       content:
	 *         application/json:
	 *           schema:
	 *             type: object
	 *             properties:
	 *               email:
	 *                 type: string
	 *                 format: email
	 *                 description: User email
	 *                 required: true
	 *     responses:
	 *       200:
	 *         description: Success
	 *         content:
	 *           application/json:
	 *             schema:
	 *               type: object
	 *               properties:
	 *                 success:
	 *                   type: boolean
	 *                   description: Status of the request
	 *       400:
	 *         description: Bad Request
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/ForgotPasswordResponseError'
	 *       500:
	 *         description: Internal Server Error
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/ForgotPasswordResponseError'
	 * components:
	 *   schemas:
	 *     ForgotPasswordResponseError:
	 *       type: object
	 *       properties:
	 *         success:
	 *           type: boolean
	 *           description: Status of the request
	 *           example: false
	 *         errors:
	 *           type: array
	 *           items:
	 *             type: string
	 *             description: Error message
	 * @param request
	 * @constructor
	 */
	export {};

```

lib/swagger/doc/auth/resetPassword.ts```ts
	/**
	 * @swagger
	 * /api/auth/reset-password:
	 *   post:
	 *     tags:
	 *       - Auth
	 *     summary: Reset the user password with the token and email
	 *     requestBody:
	 *       required: false
	 *       content:
	 *         application/json:
	 *           schema:
	 *             type: object
	 *             properties:
	 *               email:
	 *                 type: string
	 *                 format: email
	 *                 required: true
	 *                 description: User email
	 *               password:
	 *                 type: string
	 *                 required: true
	 *                 description: New password
	 *               confirmPassword:
	 *                 type: string
	 *                 required: true
	 *                 description: Confirm the new password
	 *               token:
	 *                 type: string
	 *                 required: true
	 *                 description: The token associated with the user email
	 *     responses:
	 *       200:
	 *         description: Success
	 *         content:
	 *           application/json:
	 *             schema:
	 *               type: object
	 *               properties:
	 *                 success:
	 *                   type: boolean
	 *                   description: Status of the request
	 *       400:
	 *         description: Bad Request
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/ResetPasswordResponseError'
	 *       500:
	 *         description: Internal Server Error
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/ResetPasswordResponseError'
	 * components:
	 *   schemas:
	 *     ResetPasswordResponseError:
	 *       type: object
	 *       properties:
	 *         success:
	 *           type: boolean
	 *           description: Status of the request
	 *           example: false
	 *         errors:
	 *           type: array
	 *           items:
	 *             type: string
	 *             example: 'User not found'
	 * @param request
	 * @constructor
	 */
	export {};

```

lib/swagger/doc/auth/verifyCode.ts```ts
	/**
	 * @swagger
	 * /api/auth/code/verify:
	 *   post:
	 *     tags:
	 *       - Auth
	 *     summary: Verify the code sent to the user email
	 *     requestBody:
	 *       required: false
	 *       content:
	 *         application/json:
	 *           schema:
	 *             type: object
	 *             properties:
	 *               email:
	 *                 type: string
	 *                 format: email
	 *                 required: true
	 *               code:
	 *                 type: string
	 *                 required: true
	 *                 description: The code sent to the user email
	 *                 example: 1234
	 *     responses:
	 *       200:
	 *         description: Success
	 *         content:
	 *           application/json:
	 *             schema:
	 *               type: object
	 *               properties:
	 *                 success:
	 *                   type: boolean
	 *                   description: Status of the request
	 *                   example: true
	 *                 linkResetPassword:
	 *                   type: string
	 *                   description: The link to reset the password if the code is valid
	 *                   example: /reset-password?email=example@gmail.com&token=123456
	 *       400:
	 *         description: Bad Request
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/VerifyCodeResponseError'
	 *       500:
	 *         description: Internal Server Error
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/VerifyCodeResponseError'
	 * components:
	 *   schemas:
	 *     VerifyCodeResponseError:
	 *       type: object
	 *       properties:
	 *         success:
	 *           type: boolean
	 *           description: Status of the request
	 *           example: false
	 *         errors:
	 *           type: array
	 *           items:
	 *             type: string
	 *             description: Error message
	 * @param request
	 * @constructor
	 */
	export {};

```

lib/swagger/doc/auth/getToken.ts```ts
	/**
	 * @swagger
	 * /api/auth/token/{email}:
	 *  get:
	 *    description: Get user token by email
	 *    tags:
	 *      - Auth
	 *    responses:
	 *       '404':
	 *         description: Email not found
	 *         content:
	 *           application/json:
	 *             schema:
	 *               type: object
	 *               properties:
	 *                 message:
	 *                   type: string
	 *       '401':
	 *         description: Unauthorized
	 *         content:
	 *           application/json:
	 *             schema:
	 *               type: object
	 *               properties:
	 *                 errors:
	 *                   type: array
	 *                   items:
	 *                     type: string
	 *       '200':
	 *         description: User profile
	 *         content:
	 *           application/json:
	 *             schema:
	 *               type: object
	 *               properties:
	 *                 token:
	 *                   type: string
	 *                   description: The user's token
	
	 *    parameters:
	 *      - in: path
	 *        name: email
	 *        schema:
	 *          type: string
	 *          required: true
	 *          description: The user's email
	 * @param request
	 * @constructor
	 */
	export {};

```

lib/swagger/doc/auth/register.ts```ts
	/**
	 * @swagger
	 * /api/auth/register:
	 *   post:
	 *     description: Register a new user
	 *     tags:
	 *       - Auth
	 *     requestBody:
	 *       content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/UserRegister'
	 *     responses:
	 *       200:
	 *         description: User registered
	 *         content:
	 *           application/json:
	 *             schema:
	 *               type: object
	 *               properties:
	 *                 message:
	 *                   type: string
	 *       400:
	 *         description: Bad request
	 *         content:
	 *           application/json:
	 *             schema:
	 *               type: object
	 *               properties:
	 *                 errors:
	 *                   type: array
	 *                   items:
	 *                     type: string
	 *
	 * components:
	 *    schemas:
	 *      UserRegister:
	 *        type: object
	 *        properties:
	 *         email:
	 *           type: string
	 *           description: The user's email
	 *           example: email@demo.com
	 *           required: true
	 *         name:
	 *           type: string
	 *           description: The user's name
	 *           example: Example Name
	 *           required: true
	 *         password:
	 *           type: string
	 *           description: The user's password
	 *           example: password
	 *           required: true
	 *
	 * @param request
	 * @constructor
	 */
	export {};

```

lib/swagger/doc/profile/put.ts```ts
	/**
	 * @swagger
	 * /api/profile/{id}:
	 *   put:
	 *     description: Update user profile
	 *     tags:
	 *       - Profile
	 *     security:
	 *       - bearerAuth: []
	 *     parameters:
	 *       - in: path
	 *         name: id
	 *         schema:
	 *           type: string
	 *         required: true
	 *         description: The user's id
	 *     requestBody:
	 *       content:
	 *         application/json:
	 *           schema:
	 *             $ref: '#/components/schemas/UserUpdateProfile'
	 *     responses:
	 *       '500':
	 *         description: Internal server error
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/UserUpdateProfileResponseError'
	 *       '400':
	 *         description: Bad request
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/UserUpdateProfileResponseError'
	 *       '200':
	 *         description: Update profile successfully
	 *         content:
	 *           application/json:
	 *             schema:
	 *               type: object
	 *               properties:
	 *                 status:
	 *                   type: number
	 *                   example: 200
	 *                 success:
	 *                   type: boolean
	 *                   example: true
	 * components:
	 *   schemas:
	 *     UserUpdateProfileResponseError:
	 *       type: object
	 *       properties:
	 *         success:
	 *           type: boolean
	 *           example: false
	 *         status:
	 *           type: number
	 *           example: 400
	 *         errors:
	 *           type: array
	 *           items:
	 *             type: string
	 *     UserUpdateProfile:
	 *       type: object
	 *       properties:
	 *         email:
	 *           type: string
	 *           required: true
	 *         name:
	 *           type: string
	 *           required: true
	 *         phoneNumber:
	 *           type: string
	 *           required: false
	 *         company:
	 *           type: string
	 *           required: false
	 *         country:
	 *           type: string
	 *           required: false
	 *         birthDate:
	 *           type: string
	 *           format: date
	 *           example: 01-01-2000
	 *           required: false
	 *         image:
	 *           type: string
	 *           format: url
	 *           required: false
	 * @param request
	 * @param params
	 * @constructor
	 */
	export {};

```

lib/swagger/doc/profile/changePassword.ts```ts
	/**
	 * @swagger
	 * /api/change-password/{id}:
	 *   put:
	 *     description: Change user's password
	 *     tags:
	 *       - Profile
	 *     security:
	 *       - bearerAuth: []
	 *     parameters:
	 *       - in: path
	 *         name: id
	 *         schema:
	 *           type: string
	 *         required: true
	 *         description: The user's id
	 *     requestBody:
	 *       content:
	 *         application/json:
	 *           schema:
	 *             type: object
	 *             properties:
	 *               oldPassword:
	 *                 type: string
	 *               newPassword:
	 *                 type: string
	 *               newPasswordConfirm:
	 *                 type: string
	 *     responses:
	 *       '500':
	 *         description: Internal server error
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/UserUpdateProfileResponseError'
	 *       '400':
	 *         description: Bad request
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/UserUpdateProfileResponseError'
	 *       '200':
	 *          description: Update profile successfully
	 *          content:
	 *            application/json:
	 *              schema:
	 *                type: object
	 *                properties:
	 *                  status:
	 *                    type: number
	 *                  success:
	 *                    type: boolean
	 *                    example: true
	 * components:
	 *  schemas:
	 *    UserUpdateProfileResponseError:
	 *      type: object
	 *      properties:
	 *        success:
	 *          type: boolean
	 *          example: false
	 *        status:
	 *          type: number
	 *          example: 400
	 *        errors:
	 *          type: array
	 *          items:
	 *            type: string
	 *            description: The error message
	 * @param request
	 * @param params
	 * @constructor
	 */
	export {};

```

lib/swagger/doc/profile/get.ts```ts
	/**
	 * @swagger
	 * /api/profile:
	 *   get:
	 *     description: Get user profile
	 *     tags:
	 *       - Profile
	 *     responses:
	 *       '200':
	 *         description: User profile
	 *         content:
	 *           application/json:
	 *             schema:
	 *               type: object
	 *               properties:
	 *                 success:
	 *                   type: boolean
	 *                   example: true
	 *                 status:
	 *                   type: number
	 *                   example: 200
	 *                 data:
	 *                   $ref: '#/components/schemas/UserProfile'
	 *       '500':
	 *         description: Internal server error
	 *         content:
	 *           application/json:
	 *             schema:
	 *               type: object
	 *               properties:
	 *                 success:
	 *                   type: boolean
	 *                   example: false
	 *                 status:
	 *                   type: number
	 *                   example: 500
	 *                 errors:
	 *                   type: array
	 *                   items:
	 *                     type: string
	 *
	 * components:
	 *   schemas:
	 *     UserProfile:
	 *       type: object
	 *       properties:
	 *         id:
	 *           type: string
	 *         email:
	 *           type: string
	 *         name:
	 *           type: string
	 *         phoneNumbers:
	 *           type: string
	 *         password:
	 *           type: string
	 *         country:
	 *           type: string
	 *         emailConfirmed:
	 *           type: boolean
	 *         failedLoginAttempts:
	 *           type: number
	 *         imageUrl:
	 *           type: string
	 *         isContractor:
	 *           type: boolean
	 *         passwordResetToken:
	 *           type: string
	 *         confirmationToken:
	 *           type: string
	 *         status:
	 *           type: string
	 *         selectedBuilderId:
	 *           type: string
	 *         selectedContractorId:
	 *           type: string
	 *         lastLogin:
	 *           type: string
	 *         dateCreate:
	 *           type: string
	 *         dateModify:
	 *           type: string
	 *
	 * @param request
	 * @constructor
	 */
	export {};

```

lib/swagger/doc/file/upload.ts```ts
	/**
	 * @swagger
	 * /api/file/upload:
	 *  post:
	 *    description: Upload a file to S3
	 *    tags:
	 *      - File
	 *    requestBody:
	 *       content:
	 *         form-data:
	 *           schema:
	 *             type: object
	 *             format: binary
	 *             properties:
	 *               file:
	 *                 type: string
	 *                 format: binary
	 *                 description: The file to upload
	 *               folderName:
	 *                 type: string
	 *                 format: string
	 *                 description: The folder name to upload the file
	 *    responses:
	 *      '400':
	 *        description: Bad request
	 *        content:
	 *          application/json:
	 *            schema:
	 *              type: object
	 *              properties:
	 *                errors:
	 *                  type: array
	 *                  items:
	 *                    type: string
	 *                    description: The error message
	 *      '201':
	 *        description: File uploaded successfully
	 *        content:
	 *          application/json:
	 *            schema:
	 *              type: object
	 *              properties:
	 *                message:
	 *                  type: string
	 *                  description: The success message
	 *                url:
	 *                  type: string
	 *                  description: The file url
	 * @param request
	 * @constructor
	 */
	export {};

```

lib/swagger/doc/user/delete.ts```ts
	/**
	 * @swagger
	 * /user/{id}/delete:
	 *   delete:
	 *     summary: Delete a user
	 *     tags:
	 *       - User
	 *     security:
	 *       - bearerAuth: []
	 *     parameters:
	 *       - in: path
	 *         name: id
	 *         required: true
	 *         description: User ID
	 *     responses:
	 *       200:
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/SuccessResponse'
	 *       400:
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/ErrorResponse'
	 *       404:
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/ErrorResponse'
	 *       500:
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/ErrorResponse'
	 * components:
	 *   schemas:
	 *     SuccessResponse:
	 *       type: object
	 *       properties:
	 *         status:
	 *           type: number
	 *           example: 200
	 *         success:
	 *           type: boolean
	 *           example: true
	 *     ErrorResponse:
	 *       type: object
	 *       properties:
	 *         status:
	 *           type: number
	 *           example: 400
	 *           description: Error status code
	 *         success:
	 *           type: boolean
	 *           example: false
	 *         errors:
	 *           type: array
	 *           items:
	 *             type: string
	 *             example: User id is required.
	 */
	export {};

```

lib/swagger/doc/user/getDetail.ts```ts
	/**
	 * @swagger
	 * /user/{id}:
	 *   get:
	 *     summary: Get user detail
	 *     description: Get user detail
	 *     tags:
	 *       - User
	 *     security:
	 *       - bearerAuth: []
	 *     parameters:
	 *       - in: path
	 *         name: id
	 *         schema:
	 *           type: string
	 *         required: true
	 *         description: The User's id
	 *     responses:
	 *       200:
	 *         description: User detail
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/UserResponse'
	 *       400:
	 *         description: Bad request
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/ErrorResponse'
	 *       404:
	 *         description: User not found
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/ErrorResponse'
	 *       500:
	 *         description: Internal server error
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/ErrorResponse'
	 * components:
	 *   schemas:
	 *     UserResponse:
	 *       type: object
	 *       properties:
	 *         success:
	 *           type: boolean
	 *           example: true
	 *         status:
	 *           type: number
	 *           example: 200
	 *         data:
	 *           type: object
	 *           properties:
	 *             id:
	 *               type: string
	 *               example: 1
	 *             email:
	 *               type: string
	 *             name:
	 *               type: string
	 *             password:
	 *               type: string
	 *             emailConfirmed:
	 *               type: boolean
	 *             confirmationToken:
	 *               type: string
	 *             passwordResetToken:
	 *               type: string
	 *             imageUrl:
	 *               type: string
	 *             company:
	 *               type: string
	 *             country:
	 *               type: string
	 *             phoneNumber:
	 *               type: string
	 *             birthDate:
	 *               type: string
	 *             isContractor:
	 *               type: boolean
	 *             status:
	 *               type: string
	 *             selectedContractorId:
	 *               type: string
	 *             selectedBuilderId:
	 *               type: string
	 *             failedLoginAttempts:
	 *               type: number
	 *             accountLockedUntil:
	 *               type: string
	 *             lastLogin:
	 *               type: string
	 *             dateCreate:
	 *               type: string
	 *             dateModify:
	 *               type: string
	 *     ErrorResponse:
	 *       type: object
	 *       properties:
	 *         status:
	 *           type: number
	 *           example: 500
	 *         success:
	 *           type: boolean
	 *           example: false
	 *         errors:
	 *           type: array
	 *           items:
	 *             type: string
	 */
	export {};

```

lib/swagger/doc/user/archive.ts```ts
	/**
	 * @swagger
	 * /user/{id}/archive:
	 *   patch:
	 *     summary: Archive a user account which cannot logged-in anymore
	 *     tags:
	 *       - User
	 *     security:
	 *       - bearerAuth: []
	 *     parameters:
	 *       - in: path
	 *         name: id
	 *         required: true
	 *         description: User ID
	 *     responses:
	 *       200:
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/SuccessResponse'
	 *       400:
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/ErrorResponse'
	 *       404:
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/ErrorResponse'
	 *       500:
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/ErrorResponse'
	 * components:
	 *   schemas:
	 *     SuccessResponse:
	 *       type: object
	 *       properties:
	 *         status:
	 *           type: number
	 *           example: 200
	 *         success:
	 *           type: boolean
	 *           example: true
	 *     ErrorResponse:
	 *       type: object
	 *       properties:
	 *         status:
	 *           type: number
	 *           example: 400
	 *           description: Error status code
	 *         success:
	 *           type: boolean
	 *           example: false
	 *         errors:
	 *           type: array
	 *           items:
	 *             type: string
	 *             example: User id is required.
	 */
	export {};

```

lib/swagger/doc/user/get.ts```ts
	/**
	 * @swagger
	 * /api/user:
	 *   get:
	 *     summary: Get list of users
	 *     description: Get list of users
	 *     tags:
	 *       - User
	 *     security:
	 *       - bearerAuth: []
	 *     parameters:
	 *       - name: limit
	 *         in: query
	 *       - name: page
	 *         in: query
	 *       - name: sort
	 *         in: query
	 *       - name: field
	 *         in: query
	 *       - name: fields
	 *         in: query
	 *     responses:
	 *       500:
	 *         description: Internal server error
	 *         content:
	 *           application/json:
	 *             schema:
	 *               type: object
	 *               properties:
	 *                 status:
	 *                   type: number
	 *                   example: 500
	 *                 success:
	 *                   type: boolean
	 *                   example: false
	 *                 errors:
	 *                   type: array
	 *                   items:
	 *                     type: string
	 *       200:
	 *         description: List of users
	 *         content:
	 *           application/json:
	 *             schema:
	 *               type: object
	 *               properties:
	 *                 success:
	 *                   type: boolean
	 *                 status:
	 *                   type: number
	 *                 meta:
	 *                   type: object
	 *                   properties:
	 *                     page:
	 *                       type: number
	 *                     limit:
	 *                       type: number
	 *                     total:
	 *                       type: number
	 *                     totalPages:
	 *                       type: number
	 *                 data:
	 *                   type: array
	 *                   items:
	 *                     $ref: '#/components/schemas/User'
	 *
	 * components:
	 *   schemas:
	 *     User:
	 *       type: object
	 *       properties:
	 *         id:
	 *           type: string
	 *           example: 1
	 *         email:
	 *           type: string
	 *         name:
	 *           type: string
	 *         password:
	 *           type: string
	 *         emailConfirmed:
	 *           type: boolean
	 *         confirmationToken:
	 *           type: string
	 *         passwordResetToken:
	 *           type: string
	 *         imageUrl:
	 *           type: string
	 *         company:
	 *           type: string
	 *         country:
	 *           type: string
	 *         phoneNumber:
	 *           type: string
	 *         birthDate:
	 *           type: string
	 *         isContractor:
	 *           type: boolean
	 *         status:
	 *           type: string
	 *         selectedContractorId:
	 *           type: string
	 *         selectedBuilderId:
	 *           type: string
	 *         failedLoginAttempts:
	 *           type: number
	 *         accountLockedUntil:
	 *           type: string
	 *         lastLogin:
	 *           type: string
	 *         dateCreate:
	 *           type: string
	 *         dateModify:
	 *           type: string
	 */
	export {};

```

lib/swagger/doc/user/bulkControl.ts```ts
	/**
	 * @swagger
	 * /user/bulk-control:
	 *   patch:
	 *     summary: Bulk control users
	 *     description: Bulk control users
	 *     tags:
	 *       - User
	 *     requestBody:
	 *       content:
	 *         application/json:
	 *           schema:
	 *             type: object
	 *             properties:
	 *               ids:
	 *                 type: array
	 *                 items:
	 *                   type: string
	 *                 required: true
	 *               action:
	 *                 type: string
	 *                 enum: [activate, deactivate, delete, archive]
	 *                 required: true
	 *     responses:
	 *       200:
	 *         description: Success
	 *         content:
	 *           application/json:
	 *             schema:
	 *               type: object
	 *               properties:
	 *                 success:
	 *                   type: boolean
	 *                   description: Success
	 *                 status:
	 *                   type: number
	 *                   description: Status
	 *                   example: 200
	 *       400:
	 *         description: Bad Request
	 *         content:
	 *           application/json:
	 *             schema:
	 *               type: object
	 *               properties:
	 *                 errors:
	 *                   type: array
	 *                   items:
	 *                     type: string
	 *                 status:
	 *                   type: number
	 *                   example: 400
	 *                 success:
	 *                   type: boolean
	 *                   example: false
	 *       500:
	 *         description: Internal Server Error
	 *         content:
	 *           application/json:
	 *             schema:
	 *               type: object
	 *               properties:
	 *                 errors:
	 *                   type: array
	 *                   items:
	 *                     type: string
	 *                 status:
	 *                   type: number
	 *                   example: 500
	 *                 success:
	 *                   type: boolean
	 *                   example: false
	 */
	export {};

```

lib/swagger/doc/contractor/put.ts```ts
	/**
	 * @swagger
	 * /api/contractor/update/{id}:
	 *   put:
	 *     description: Update a contractor
	 *     tags:
	 *       - Contractor
	 *     security:
	 *       - bearerAuth: []
	 *     parameters:
	 *       - name: id
	 *         in: path
	 *         required: true
	 *     requestBody:
	 *       content:
	 *         multipart/form-data:
	 *           schema:
	 *             type: object
	 *             properties:
	 *               creatorEmail:
	 *                 type: string
	 *                 required: true
	 *               creatorId:
	 *                 type: string
	 *                 required: true
	 *               contractorName:
	 *                 type: string
	 *                 required: true
	 *               service:
	 *                 type: string
	 *                 required: true
	 *               address:
	 *                 type: string
	 *                 required: true
	 *               completionStatus:
	 *                 type: string
	 *                 required: true
	 *               file:
	 *                 type: string
	 *                 format: binary
	 *                 description: The file to upload
	 *                 required: false
	 *     responses:
	 *       200:
	 *         description: Success
	 *         content:
	 *           application/json:
	 *             schema:
	 *               type: object
	 *               properties:
	 *                 status:
	 *                   type: number
	 *                   example: 200
	 *                 success:
	 *                   type: boolean
	 *                   example: true
	 *                 data:
	 *                   $ref: '#/components/schemas/Contractor'
	 *       400:
	 *         description: Bad Request
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/ContractorError'
	 *       500:
	 *         description: Internal server error
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/ContractorError'
	 * components:
	 *   schemas:
	 *     ContractorError:
	 *       type: object
	 *       properties:
	 *         success:
	 *           type: boolean
	 *           example: false
	 *         status:
	 *           type: number
	 *           example: 400
	 *         errors:
	 *           type: array
	 *           items:
	 *             type: string
	 *             example: 'creatorEmail is required'
	 *     Contractor:
	 *       type: object
	 *       properties:
	 *         id:
	 *           type: string
	 *           example: 5f4e7b3b8d4b8b1d6f2f7b3b
	 *         creatorEmail:
	 *           type: string
	 *         creatorId:
	 *           type: string
	 *         address:
	 *           type: string
	 *         budgetSeperatorComma:
	 *           type: boolean
	 *         budgetSeperatorSemiColon:
	 *           type: boolean
	 *         budgetSeperatorTab:
	 *           type: boolean
	 *         category:
	 *           type: string
	 *         completionStatus:
	 *           type: string
	 *         contractorName:
	 *           type: string
	 *         currency:
	 *           type: string
	 *         date:
	 *           type: string
	 *         dateCreate:
	 *           type: string
	 *         dateModify:
	 *           type: string
	 *         generalContractor:
	 *           type: string
	 *         imageUrl:
	 *           type: string
	 *         items:
	 *           type: string
	 * @param request
	 * @param params
	 * @constructor
	 */
	export {};

```

lib/swagger/doc/contractor/post.ts```ts
	/**
	 * @swagger
	 * /api/contractor/create:
	 *   post:
	 *     description: Create a contractor
	 *     tags:
	 *       - Contractor
	 *     security:
	 *       - bearerAuth: []
	 *     requestBody:
	 *       content:
	 *         application/x-www-form-urlencoded:
	 *           schema:
	 *             type: object
	 *             properties:
	 *               creatorEmail:
	 *                 type: string
	 *                 required: true
	 *               creatorId:
	 *                 type: string
	 *                 required: true
	 *               contractorName:
	 *                 type: string
	 *                 required: true
	 *               service:
	 *                 type: string
	 *                 required: true
	 *               address:
	 *                 type: string
	 *                 required: true
	 *               completionStatus:
	 *                 type: string
	 *                 required: true
	 *               file:
	 *                 type: string
	 *                 format: binary
	 *                 description: The file to upload
	 *                 required: false
	 *     responses:
	 *       200:
	 *         description: Success
	 *         content:
	 *           application/json:
	 *             schema:
	 *               type: object
	 *               properties:
	 *                 status:
	 *                   type: number
	 *                   example: 200
	 *                 success:
	 *                   type: boolean
	 *                   example: true
	 *       400:
	 *         description: Bad Request
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/ContractorError'
	 *       500:
	 *         description: Internal server error
	 *         content:
	 *           application/json:
	 *             schema:
	 *               $ref: '#/components/schemas/ContractorError'
	 * components:
	 *   schemas:
	 *     ContractorError:
	 *       type: object
	 *       properties:
	 *         success:
	 *           type: boolean
	 *           example: false
	 *         status:
	 *           type: number
	 *           example: 400
	 *         errors:
	 *           type: array
	 *           items:
	 *             type: string
	 *             example: 'creatorEmail is required'
	 * @param request
	 * @constructor
	 */
	export {};

```

lib/swagger/doc/contractor/delete.ts```ts
	/**
	 * @swagger
	 * /api/contractor/delete/{id}:
	 *   delete:
	 *     description: Delete a contractor
	 *     tags:
	 *       - Contractor
	 *     security:
	 *       - bearerAuth: []
	 *     parameters:
	 *       - in: path
	 *         name: id
	 *         required: true
	 *     responses:
	 *       200:
	 *         description: Success
	 *         content:
	 *           application/json:
	 *             schema:
	 *               type: object
	 *               properties:
	 *                 status:
	 *                   type: number
	 *                   example: 200
	 *                 success:
	 *                   type: boolean
	 *                   example: true
	 *       500:
	 *         description: Internal server error
	 *         content:
	 *           application/json:
	 *             schema:
	 *               type: object
	 *               properties:
	 *                 success:
	 *                   type: boolean
	 *                   example: false
	 *                 status:
	 *                   type: number
	 *                   example: 500
	 *                 errors:
	 *                   type: array
	 *                   items:
	 *                     type: string
	 *                     example: Contractor not found
	 * @param request
	 * @param params
	 * @constructor
	 */
	export {};

```

lib/swagger/doc/contractor/get.ts```ts
	/**
	 * @swagger
	 * /api/contractor/list:
	 *   get:
	 *     summary: List all contractors
	 *     description: List all contractors
	 *     tags:
	 *       - Contractor
	 *     security:
	 *       - bearerAuth: []
	 *     parameters:
	 *       - name: limit
	 *         in: query
	 *       - name: page
	 *         in: query
	 *       - name: sort
	 *         in: query
	 *       - name: field
	 *         in: query
	 *       - name: fields
	 *         in: query
	 *     responses:
	 *       500:
	 *         description: Internal server error
	 *         content:
	 *           application/json:
	 *             schema:
	 *               type: object
	 *               properties:
	 *                 success:
	 *                   type: boolean
	 *                   example: false
	 *                 status:
	 *                   type: number
	 *                   example: 500
	 *                 errors:
	 *                   type: array
	 *                   items:
	 *                     type: string
	 *                     example: Invalid limit or page
	 *       200:
	 *         description: List of contractors
	 *         content:
	 *           application/json:
	 *             schema:
	 *               type: object
	 *               properties:
	 *                 success:
	 *                   type: boolean
	 *                   example: true
	 *                 status:
	 *                   type: number
	 *                   example: 200
	 *                 meta:
	 *                   type: object
	 *                   properties:
	 *                     total:
	 *                       type: number
	 *                       example: 1
	 *                     page:
	 *                       type: number
	 *                       example: 1
	 *                     limit:
	 *                       type: number
	 *                       example: 10
	 *                     totalPages:
	 *                       type: number
	 *                       example: 1
	 *                 data:
	 *                   type: array
	 *                   items:
	 *                     $ref: '#/components/schemas/Contractor'
	 * components:
	 *   schemas:
	 *     Contractor:
	 *       type: object
	 *       properties:
	 *         id:
	 *           type: string
	 *           example: 5f4e7b3b8d4b8b1d6f2f7b3b
	 *         creatorEmail:
	 *           type: string
	 *         creatorId:
	 *           type: object
	 *           properties:
	 *             _id:
	 *               type: string
	 *               example: 5f4e7b3b8d4b8b1d6f2f7b3b
	 *             name:
	 *               type: string
	 *               example: John Doe
	 *             email:
	 *               type: string
	 *               example: john@demo.example
	 *             imageUrl:
	 *               type: string
	 *               example: https://example.com/image.jpg
	 *         address:
	 *           type: string
	 *         budgetSeperatorComma:
	 *           type: boolean
	 *         budgetSeperatorSemiColon:
	 *           type: boolean
	 *         budgetSeperatorTab:
	 *           type: boolean
	 *         category:
	 *           type: string
	 *         completionStatus:
	 *           type: string
	 *         contractorName:
	 *           type: string
	 *         currency:
	 *           type: string
	 *         date:
	 *           type: string
	 *         dateCreate:
	 *           type: string
	 *         dateModify:
	 *           type: string
	 *         generalContractor:
	 *           type: string
	 *         imageUrl:
	 *           type: string
	 *         items:
	 *           type: string
	 * @param request
	 * @constructor
	 */
	export {};

```

lib/swagger/doc/builder/put.ts```ts
	/**
	* @swagger
	 
	* /api/builder/{id}:
	*   put:
	*     tags:
	*       - Builder
	*     description: Edit a builder
	*     summary: Edit a builder
	*     security:
	*       - bearerAuth: []
	*     parameters:
	*       - in: path
	*         name: id
	*         schema:
	*           type: string
	*         required: true
	*         description: The Builder's id
	*     requestBody:
	*       required: false
	*       content:
	*         multipart/form-data:
	*           schema:
	*             $ref: '#/components/schemas/BuilderEdited'
	*     responses:
	*       200:
	*         description: Builder updated
	*         content:
	*           application/json:
	*             schema:
	*               $ref: '#/components/schemas/BuilderResponse'
	*       400:
	*         description: Bad request
	*         content:
	*           application/json:
	*             schema:
	*               type: object
	*               properties:
	*                 errors:
	*                   type: array
	*                   items:
	*                     type: string
	* components:
	*   schemas:
	*     BuilderEdited:
	*       type: object
	*       properties:
	*         builderName:
	*           type: string
	*           format: builderName
	*           description: Builder's name
	*           example: Horizon Development Group
	*           required: true
	*         category:
	*           type: string
	*           format: category
	*           description: Builder's category
	*           example: Residential
	*           required: true
	*         address:
	*           type: string
	*           format: address
	*           description: Builder's address
	*           example: Anytown, CA 90210
	*           required: true
	*         completionStatus:
	*           type: string
	*           format: completionStatus
	*           description: Builder's status
	*           example: Active
	*           required: true
	*         imageFolderName:
	*           type: string
	*           format: folderName
	*           description: Folder Name
	*           example: Builder
	*           required: true
	*         image:
	*           type: string
	*           format: binary
	*     BuilderResponse:
	*       type: object
	*       properties:
	*         success:
	*           type: boolean
	*           description: Builder updated
	*         builder:
	*           type: object
	*           properties:
	*             _id:
	*               type: string      
	*             builderName:
	*               type: string
	*             category:
	*               type: string
	*             address:
	*               type: string
	*             completionStatus:
	*               type: string
	*             imageUrl:
	*               type: string
	*             date:
	*               type: string
	*             dateCreate:
	*               type: string
	*             dateModify:
	*               type: string
	*             generalContractor:
	*               type: string
	*             budgetSeperatorComma:
	*               type: string
	*             budgetSeperatorSemiColon:
	*               type: string
	*             budgetSeperatorTab:
	*               type: string
	*             creatorId:
	*               type: string
	*             creatorEmail:
	*               type: string
	* @param request
	* @constructor
	*/
	export {};

```

lib/swagger/doc/builder/post.ts```ts
	/**
	@swagger
	* /api/builder:
	*   post:
	*     tags:
	*       - Builder
	*     description: Create a builder
	*     summary: Create a builder
	*     security:
	*       - bearerAuth: []
	*     requestBody:
	*       required: false
	*       content:
	*         multipart/form-data:
	*           schema:
	*             $ref: '#/components/schemas/BuilderCreated'
	*     responses:
	*       200:
	*         description: Builder created
	*         content:
	*           application/json:
	*             schema:
	*               $ref: '#/components/schemas/BuilderResponse'
	*       400:
	*         description: Bad request
	*         content:
	*           application/json:
	*             schema:
	*               type: object
	*               properties:
	*                 errors:
	*                   type: array
	*                   items:
	*                     type: string
	* components:
	*   schemas:
	*     BuilderCreated:
	*       type: object
	*       properties:
	*         builderName:
	*           type: string
	*           format: builderName
	*           description: Builder's name
	*           example: Horizon Development Group
	*           required: true
	*         category:
	*           type: string
	*           format: category
	*           description: Builder's category
	*           example: Residential
	*           required: true
	*         address:
	*           type: string
	*           format: address
	*           description: Builder's address
	*           example: Anytown, CA 90210
	*           required: true
	*         completionStatus:
	*           type: string
	*           format: completionStatus
	*           description: Builder's status
	*           example: Active
	*           required: true
	*         image:
	*           type: string
	*           format: binary
	*           require: false
	*     BuilderResponse:
	*       type: object
	*       properties:
	*         success:
	*           type: boolean
	*           description: Builder created
	*         builder:
	*           type: object
	*           properties:
	*             _id:
	*               type: string      
	*             builderName:
	*               type: string
	*             category:
	*               type: string
	*             address:
	*               type: string
	*             completionStatus:
	*               type: string
	*             imageUrl:
	*               type: string
	*             date:
	*               type: string
	*             dateCreate:
	*               type: string
	*             dateModify:
	*               type: string
	*             generalContractor:
	*               type: string
	*             budgetSeperatorComma:
	*               type: string
	*             budgetSeperatorSemiColon:
	*               type: string
	*             budgetSeperatorTab:
	*               type: string
	*             creatorId:
	*               type: string
	*             creatorEmail:
	*               type: string
	@param request
	@constructor
	**/
	export {};

```

lib/swagger/doc/builder/delete.ts```ts
	// @ts-nocheck
	/**
	* @swagger
	 
	* /api/builder/{id}:
	*   delete:
	*     tags:
	*       - Builder
	*     description: Delete a builder
	*     summary: Delete a builder
	*     security:
	*       - bearerAuth: []
	*     parameters:
	*       - in: path
	*         name: id
	*         schema:
	*           type: string
	*         required: true
	*         description: The Builder's id
	*     requestBody:
	*       required: false
	*       content:
	*         application/json:
	*     responses:
	*       200:
	*         description: Builder deleted
	*         content:
	*           application/json:
	*             schema:
	*               type: object
	*               properties:
	*                 success:
	*                   type: boolean
	*                   description: Builder deleted
	*       400:
	*         description: Bad request
	*         content:
	*           application/json:
	*             schema:
	*               type: object
	*               properties:
	*                 errors:
	*                   type: array
	*                   items:
	*                     type: string
	* @param request
	* @constructor
	*/
	export {};

```

lib/swagger/doc/builder/getDetail.ts```ts
	/**
	* @swagger
	 
	* /api/builder/{id}:
	*   get:
	*     tags:
	*       - Builder
	*     description: Get a builder
	*     summary: Get a builder
	*     security:
	*       - bearerAuth: []
	*     parameters:
	*       - in: path
	*         name: id
	*         schema:
	*           type: string
	*         required: true
	*         description: The Builder's id
	*     responses:
	*       200:
	*         description: Builder updated
	*         content:
	*           application/json:
	*             schema:
	*               $ref: '#/components/schemas/BuilderResponse'
	*       400:
	*         description: Bad request
	*         content:
	*           application/json:
	*             schema:
	*               type: object
	*               properties:
	*                 errors:
	*                   type: array
	*                   items:
	*                     type: string
	* components:
	*   schemas:
	*     BuilderResponse:
	*       type: object
	*       properties:
	*         success:
	*           type: boolean
	*           description: Builder updated
	*         builder:
	*           type: object
	*           properties:
	*             _id:
	*               type: string      
	*             builderName:
	*               type: string
	*             category:
	*               type: string
	*             address:
	*               type: string
	*             completionStatus:
	*               type: string
	*             imageUrl:
	*               type: string
	*             date:
	*               type: string
	*             dateCreate:
	*               type: string
	*             dateModify:
	*               type: string
	*             generalContractor:
	*               type: string
	*             budgetSeperatorComma:
	*               type: string
	*             budgetSeperatorSemiColon:
	*               type: string
	*             budgetSeperatorTab:
	*               type: string
	*             creatorId:
	*               type: string
	*             creatorEmail:
	*               type: string
	* @param request
	* @constructor
	*/
	export {};

```

lib/swagger/doc/builder/get.ts```ts
	/**
	@swagger
	* /api/builder:
	*   get:
	*     summary: Get list builders
	*     description: Get list builders
	*     tags:
	*       - Builder
	*     security:
	*       - bearerAuth: []
	*     parameters:
	*       - in: query
	*         name: page
	*         schema:
	*           type: number
	*         required: false
	*         description: Current page
	*       - in: query
	*         name: limit
	*         schema:
	*           type: number
	*         required: false
	*         description: Page size
	*       - in: query
	*         name: sortBy
	*         schema:
	*           type: string
	*         required: false
	*         description: Sort by builder's column
	*       - in: query
	*         name: sortDir
	*         schema:
	*           type: string
	*         required: false
	*         description: Sort direction
	*       - in: query
	*         name: search
	*         schema:
	*           type: string
	*         required: false
	*         description: Search by builder name
	*       - in: query
	*         name: filterBy
	*         schema:
	*           type: string
	*         required: false
	*         description: Filter by builder's column
	*     responses:
	*       '200':
	*         description: List Builder
	*         content:
	*           application/json:
	*             schema:
	*               $ref: '#/components/schemas/Builder'
	* components:
	*   schemas:
	*     Builder:
	*       type: array
	*       items:
	*         type: object
	*         properties:
	*           _id:
	*             type: string      
	*           builderName:
	*             type: string
	*           category:
	*             type: string
	*           address:
	*             type: string
	*           completionStatus:
	*             type: string
	*           imageUrl:
	*             type: string
	*           date:
	*             type: string
	*           dateCreate:
	*             type: string
	*           dateModify:
	*             type: string
	*           generalContractor:
	*             type: string
	*           budgetSeperatorComma:
	*             type: string
	*           budgetSeperatorSemiColon:
	*             type: string
	*           budgetSeperatorTab:
	*             type: string
	*           creatorId:
	*             type: string
	*           creatorEmail:
	*             type: string
	* @param request
	* @constructor
	**/
	export {};

```

